// Generated using https://github.com/a2x/cs2-dumper
// 2024-03-29 13:45:50.255705100 UTC

#![allow(non_upper_case_globals, unused)]

pub mod cs2_dumper {
    pub mod schemas {
        // Module: animationsystem.dll
        // Classes count: 362
        // Enums count: 70
        pub mod animationsystem {
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum MoodType_t {
                eMoodType_Head = 0x0,
                eMoodType_Body = 0x1
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum AnimationProcessingType_t {
                ANIMATION_PROCESSING_SERVER_SIMULATION = 0x0,
                ANIMATION_PROCESSING_CLIENT_SIMULATION = 0x1,
                ANIMATION_PROCESSING_CLIENT_PREDICTION = 0x2,
                ANIMATION_PROCESSING_CLIENT_INTERPOLATION = 0x3,
                ANIMATION_PROCESSING_CLIENT_RENDER = 0x4,
                ANIMATION_PROCESSING_MAX = 0x5
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum AnimationSnapshotType_t {
                ANIMATION_SNAPSHOT_SERVER_SIMULATION = 0x0,
                ANIMATION_SNAPSHOT_CLIENT_SIMULATION = 0x1,
                ANIMATION_SNAPSHOT_CLIENT_PREDICTION = 0x2,
                ANIMATION_SNAPSHOT_CLIENT_INTERPOLATION = 0x3,
                ANIMATION_SNAPSHOT_CLIENT_RENDER = 0x4,
                ANIMATION_SNAPSHOT_FINAL_COMPOSITE = 0x5,
                ANIMATION_SNAPSHOT_MAX = 0x6
            }
            // Alignment: 4
            // Members count: 17
            #[repr(u32)]
            pub enum SeqCmd_t {
                SeqCmd_Nop = 0x0,
                SeqCmd_LinearDelta = 0x1,
                SeqCmd_FetchFrameRange = 0x2,
                SeqCmd_Slerp = 0x3,
                SeqCmd_Add = 0x4,
                SeqCmd_Subtract = 0x5,
                SeqCmd_Scale = 0x6,
                SeqCmd_Copy = 0x7,
                SeqCmd_Blend = 0x8,
                SeqCmd_Worldspace = 0x9,
                SeqCmd_Sequence = 0xA,
                SeqCmd_FetchCycle = 0xB,
                SeqCmd_FetchFrame = 0xC,
                SeqCmd_IKLockInPlace = 0xD,
                SeqCmd_IKRestoreAll = 0xE,
                SeqCmd_ReverseSequence = 0xF,
                SeqCmd_Transform = 0x10
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum SeqPoseSetting_t {
                SEQ_POSE_SETTING_CONSTANT = 0x0,
                SEQ_POSE_SETTING_ROTATION = 0x1,
                SEQ_POSE_SETTING_POSITION = 0x2,
                SEQ_POSE_SETTING_VELOCITY = 0x3
            }
            // Alignment: 4
            // Members count: 18
            #[repr(u32)]
            pub enum ParticleAttachment_t {
                PATTACH_INVALID = 0xFFFFFFFFFFFFFFFF,
                PATTACH_ABSORIGIN = 0x0,
                PATTACH_ABSORIGIN_FOLLOW = 0x1,
                PATTACH_CUSTOMORIGIN = 0x2,
                PATTACH_CUSTOMORIGIN_FOLLOW = 0x3,
                PATTACH_POINT = 0x4,
                PATTACH_POINT_FOLLOW = 0x5,
                PATTACH_EYES_FOLLOW = 0x6,
                PATTACH_OVERHEAD_FOLLOW = 0x7,
                PATTACH_WORLDORIGIN = 0x8,
                PATTACH_ROOTBONE_FOLLOW = 0x9,
                PATTACH_RENDERORIGIN_FOLLOW = 0xA,
                PATTACH_MAIN_VIEW = 0xB,
                PATTACH_WATERWAKE = 0xC,
                PATTACH_CENTER_FOLLOW = 0xD,
                PATTACH_CUSTOM_GAME_STATE_1 = 0xE,
                PATTACH_HEALTHBAR = 0xF,
                MAX_PATTACH_TYPES = 0x10
            }
            // Alignment: 1
            // Members count: 9
            #[repr(u8)]
            pub enum AnimParamType_t {
                ANIMPARAM_UNKNOWN = 0x0,
                ANIMPARAM_BOOL = 0x1,
                ANIMPARAM_ENUM = 0x2,
                ANIMPARAM_INT = 0x3,
                ANIMPARAM_FLOAT = 0x4,
                ANIMPARAM_VECTOR = 0x5,
                ANIMPARAM_QUATERNION = 0x6,
                ANIMPARAM_GLOBALSYMBOL = 0x7,
                ANIMPARAM_COUNT = 0x8
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum BoneTransformSpace_t {
                BoneTransformSpace_Invalid = 0xFFFFFFFFFFFFFFFF,
                BoneTransformSpace_Parent = 0x0,
                BoneTransformSpace_Model = 0x1,
                BoneTransformSpace_World = 0x2
            }
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum AnimParamButton_t {
                ANIMPARAM_BUTTON_NONE = 0x0,
                ANIMPARAM_BUTTON_DPAD_UP = 0x1,
                ANIMPARAM_BUTTON_DPAD_RIGHT = 0x2,
                ANIMPARAM_BUTTON_DPAD_DOWN = 0x3,
                ANIMPARAM_BUTTON_DPAD_LEFT = 0x4,
                ANIMPARAM_BUTTON_A = 0x5,
                ANIMPARAM_BUTTON_B = 0x6,
                ANIMPARAM_BUTTON_X = 0x7,
                ANIMPARAM_BUTTON_Y = 0x8,
                ANIMPARAM_BUTTON_LEFT_SHOULDER = 0x9,
                ANIMPARAM_BUTTON_RIGHT_SHOULDER = 0xA,
                ANIMPARAM_BUTTON_LTRIGGER = 0xB,
                ANIMPARAM_BUTTON_RTRIGGER = 0xC
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum AnimParamNetworkSetting {
                Auto = 0x0,
                AlwaysNetwork = 0x1,
                NeverNetwork = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum FootstepLandedFootSoundType_t {
                FOOTSOUND_Left = 0x0,
                FOOTSOUND_Right = 0x1,
                FOOTSOUND_UseOverrideSound = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum AnimPoseControl {
                NoPoseControl = 0x0,
                AbsolutePoseControl = 0x1,
                RelativePoseControl = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum RagdollPoseControl {
                Absolute = 0x0,
                Relative = 0x1
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum VPhysXBodyPart_t__VPhysXFlagEnum_t {
                FLAG_STATIC = 0x1,
                FLAG_KINEMATIC = 0x2,
                FLAG_JOINT = 0x4,
                FLAG_MASS = 0x8,
                FLAG_ALWAYS_DYNAMIC_ON_CLIENT = 0x10
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum VPhysXConstraintParams_t__EnumFlags0_t {
                FLAG0_SHIFT_INTERPENETRATE = 0x0,
                FLAG0_SHIFT_CONSTRAIN = 0x1,
                FLAG0_SHIFT_BREAKABLE_FORCE = 0x2,
                FLAG0_SHIFT_BREAKABLE_TORQUE = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum VPhysXJoint_t__Flags_t {
                JOINT_FLAGS_NONE = 0x0,
                JOINT_FLAGS_BODY1_FIXED = 0x1,
                JOINT_FLAGS_USE_BLOCK_SOLVER = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum VPhysXAggregateData_t__VPhysXFlagEnum_t {
                FLAG_IS_POLYSOUP_GEOMETRY = 0x1,
                FLAG_LEVEL_COLLISION = 0x10,
                FLAG_IGNORE_SCALE_OBSOLETE_DO_NOT_USE = 0x20
            }
            // Alignment: 4
            // Members count: 8
            #[repr(u32)]
            pub enum MeshDrawPrimitiveFlags_t {
                MESH_DRAW_FLAGS_NONE = 0x0,
                MESH_DRAW_FLAGS_USE_SHADOW_FAST_PATH = 0x1,
                MESH_DRAW_FLAGS_USE_COMPRESSED_NORMAL_TANGENT = 0x2,
                MESH_DRAW_INPUT_LAYOUT_IS_NOT_MATCHED_TO_MATERIAL = 0x8,
                MESH_DRAW_FLAGS_USE_COMPRESSED_PER_VERTEX_LIGHTING = 0x10,
                MESH_DRAW_FLAGS_USE_UNCOMPRESSED_PER_VERTEX_LIGHTING = 0x20,
                MESH_DRAW_FLAGS_CAN_BATCH_WITH_DYNAMIC_SHADER_CONSTANTS = 0x40,
                MESH_DRAW_FLAGS_DRAW_LAST = 0x80
            }
            // Alignment: 4
            // Members count: 22
            #[repr(u32)]
            pub enum ModelSkeletonData_t__BoneFlags_t {
                FLAG_NO_BONE_FLAGS = 0x0,
                FLAG_BONEFLEXDRIVER = 0x4,
                FLAG_CLOTH = 0x8,
                FLAG_PHYSICS = 0x10,
                FLAG_ATTACHMENT = 0x20,
                FLAG_ANIMATION = 0x40,
                FLAG_MESH = 0x80,
                FLAG_HITBOX = 0x100,
                FLAG_BONE_USED_BY_VERTEX_LOD0 = 0x400,
                FLAG_BONE_USED_BY_VERTEX_LOD1 = 0x800,
                FLAG_BONE_USED_BY_VERTEX_LOD2 = 0x1000,
                FLAG_BONE_USED_BY_VERTEX_LOD3 = 0x2000,
                FLAG_BONE_USED_BY_VERTEX_LOD4 = 0x4000,
                FLAG_BONE_USED_BY_VERTEX_LOD5 = 0x8000,
                FLAG_BONE_USED_BY_VERTEX_LOD6 = 0x10000,
                FLAG_BONE_USED_BY_VERTEX_LOD7 = 0x20000,
                FLAG_BONE_MERGE_READ = 0x40000,
                FLAG_BONE_MERGE_WRITE = 0x80000,
                FLAG_ALL_BONE_FLAGS = 0xFFFFF,
                BLEND_PREALIGNED = 0x100000,
                FLAG_RIGIDLENGTH = 0x200000,
                FLAG_PROCEDURAL = 0x400000
            }
            // Alignment: 4
            // Members count: 15
            #[repr(u32)]
            pub enum PermModelInfo_t__FlagEnum {
                FLAG_TRANSLUCENT = 0x1,
                FLAG_TRANSLUCENT_TWO_PASS = 0x2,
                FLAG_MODEL_IS_RUNTIME_COMBINED = 0x4,
                FLAG_SOURCE1_IMPORT = 0x8,
                FLAG_MODEL_PART_CHILD = 0x10,
                FLAG_NAV_GEN_NONE = 0x20,
                FLAG_NAV_GEN_HULL = 0x40,
                FLAG_NO_FORCED_FADE = 0x800,
                FLAG_HAS_SKINNED_MESHES = 0x400,
                FLAG_DO_NOT_CAST_SHADOWS = 0x20000,
                FLAG_FORCE_PHONEME_CROSSFADE = 0x1000,
                FLAG_NO_ANIM_EVENTS = 0x100000,
                FLAG_ANIMATION_DRIVEN_FLEXES = 0x200000,
                FLAG_IMPLICIT_BIND_POSE_SEQUENCE = 0x400000,
                FLAG_MODEL_DOC = 0x800000
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ModelBoneFlexComponent_t {
                MODEL_BONE_FLEX_INVALID = 0xFFFFFFFFFFFFFFFF,
                MODEL_BONE_FLEX_TX = 0x0,
                MODEL_BONE_FLEX_TY = 0x1,
                MODEL_BONE_FLEX_TZ = 0x2
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ModelConfigAttachmentType_t {
                MODEL_CONFIG_ATTACHMENT_INVALID = 0xFFFFFFFFFFFFFFFF,
                MODEL_CONFIG_ATTACHMENT_BONE_OR_ATTACHMENT = 0x0,
                MODEL_CONFIG_ATTACHMENT_ROOT_RELATIVE = 0x1,
                MODEL_CONFIG_ATTACHMENT_BONEMERGE = 0x2,
                MODEL_CONFIG_ATTACHMENT_COUNT = 0x3
            }
            // Alignment: 4
            // Members count: 26
            #[repr(u32)]
            pub enum FlexOpCode_t {
                FLEX_OP_CONST = 0x1,
                FLEX_OP_FETCH1 = 0x2,
                FLEX_OP_FETCH2 = 0x3,
                FLEX_OP_ADD = 0x4,
                FLEX_OP_SUB = 0x5,
                FLEX_OP_MUL = 0x6,
                FLEX_OP_DIV = 0x7,
                FLEX_OP_NEG = 0x8,
                FLEX_OP_EXP = 0x9,
                FLEX_OP_OPEN = 0xA,
                FLEX_OP_CLOSE = 0xB,
                FLEX_OP_COMMA = 0xC,
                FLEX_OP_MAX = 0xD,
                FLEX_OP_MIN = 0xE,
                FLEX_OP_2WAY_0 = 0xF,
                FLEX_OP_2WAY_1 = 0x10,
                FLEX_OP_NWAY = 0x11,
                FLEX_OP_COMBO = 0x12,
                FLEX_OP_DOMINATE = 0x13,
                FLEX_OP_DME_LOWER_EYELID = 0x14,
                FLEX_OP_DME_UPPER_EYELID = 0x15,
                FLEX_OP_SQRT = 0x16,
                FLEX_OP_REMAPVALCLAMPED = 0x17,
                FLEX_OP_SIN = 0x18,
                FLEX_OP_COS = 0x19,
                FLEX_OP_ABS = 0x1A
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum MorphFlexControllerRemapType_t {
                MORPH_FLEXCONTROLLER_REMAP_PASSTHRU = 0x0,
                MORPH_FLEXCONTROLLER_REMAP_2WAY = 0x1,
                MORPH_FLEXCONTROLLER_REMAP_NWAY = 0x2,
                MORPH_FLEXCONTROLLER_REMAP_EYELID = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum MorphBundleType_t {
                MORPH_BUNDLE_TYPE_NONE = 0x0,
                MORPH_BUNDLE_TYPE_POSITION_SPEED = 0x1,
                MORPH_BUNDLE_TYPE_NORMAL_WRINKLE = 0x2,
                MORPH_BUNDLE_TYPE_COUNT = 0x3
            }
            // Alignment: 1
            // Members count: 5
            #[repr(u8)]
            pub enum MovementGait_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                eWalk = 0x0,
                eJog = 0x1,
                eRun = 0x2,
                eSprint = 0x3
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum CNmBoneMask__WeightInfo_t {
                Zero = 0x0,
                Mixed = 0x1,
                One = 0x2
            }
            // Alignment: 1
            // Members count: 4
            #[repr(u8)]
            pub enum NmFootPhase_t {
                LeftFootDown = 0x0,
                RightFootPassing = 0x1,
                RightFootDown = 0x2,
                LeftFootPassing = 0x3
            }
            // Alignment: 1
            // Members count: 6
            #[repr(u8)]
            pub enum NmFootPhaseCondition_t {
                LeftFootDown = 0x0,
                LeftFootPassing = 0x1,
                LeftPhase = 0x4,
                RightFootDown = 0x2,
                RightFootPassing = 0x3,
                RightPhase = 0x5
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum NmTransitionRule_t {
                AllowTransition = 0x0,
                ConditionallyAllowTransition = 0x1,
                BlockTransition = 0x2
            }
            // Alignment: 1
            // Members count: 4
            #[repr(u8)]
            pub enum NmTransitionRuleCondition_t {
                AnyAllowed = 0x0,
                FullyAllowed = 0x1,
                ConditionallyAllowed = 0x2,
                Blocked = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum NmFrameSnapEventMode_t {
                Floor = 0x0,
                Round = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum IKChannelMode {
                TwoBone = 0x0,
                TwoBone_Translate = 0x1,
                OneBone = 0x2,
                OneBone_Translate = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum EDemoBoneSelectionMode {
                CaptureAllBones = 0x0,
                CaptureSelectedBones = 0x1
            }
            // Alignment: 4
            // Members count: 37
            #[repr(u32)]
            pub enum AnimValueSource {
                MoveHeading = 0x0,
                MoveSpeed = 0x1,
                ForwardSpeed = 0x2,
                StrafeSpeed = 0x3,
                FacingHeading = 0x4,
                ManualFacingHeading = 0x5,
                LookHeading = 0x6,
                LookPitch = 0x7,
                LookDistance = 0x8,
                Parameter = 0x9,
                WayPointHeading = 0xA,
                WayPointDistance = 0xB,
                BoundaryRadius = 0xC,
                TargetMoveHeading = 0xD,
                TargetMoveSpeed = 0xE,
                AccelerationHeading = 0xF,
                AccelerationSpeed = 0x10,
                SlopeHeading = 0x11,
                SlopeAngle = 0x12,
                SlopePitch = 0x13,
                SlopeYaw = 0x14,
                GoalDistance = 0x15,
                AccelerationLeftRight = 0x16,
                AccelerationFrontBack = 0x17,
                RootMotionSpeed = 0x18,
                RootMotionTurnSpeed = 0x19,
                MoveHeadingRelativeToLookHeading = 0x1A,
                MaxMoveSpeed = 0x1B,
                FingerCurl_Thumb = 0x1C,
                FingerCurl_Index = 0x1D,
                FingerCurl_Middle = 0x1E,
                FingerCurl_Ring = 0x1F,
                FingerCurl_Pinky = 0x20,
                FingerSplay_Thumb_Index = 0x21,
                FingerSplay_Index_Middle = 0x22,
                FingerSplay_Middle_Ring = 0x23,
                FingerSplay_Ring_Pinky = 0x24
            }
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum AnimVectorSource {
                MoveDirection = 0x0,
                FacingDirection = 0x1,
                LookDirection = 0x2,
                VectorParameter = 0x3,
                WayPointDirection = 0x4,
                Acceleration = 0x5,
                SlopeNormal = 0x6,
                SlopeNormal_WorldSpace = 0x7,
                LookTarget = 0x8,
                LookTarget_WorldSpace = 0x9,
                WayPointPosition = 0xA,
                GoalPosition = 0xB,
                RootMotionVelocity = 0xC
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum DampingSpeedFunction {
                NoDamping = 0x0,
                Constant = 0x1,
                Spring = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum AnimNodeNetworkMode {
                ServerAuthoritative = 0x0,
                ClientSimulate = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum StateActionBehavior {
                STATETAGBEHAVIOR_ACTIVE_WHILE_CURRENT = 0x0,
                STATETAGBEHAVIOR_FIRE_ON_ENTER = 0x1,
                STATETAGBEHAVIOR_FIRE_ON_EXIT = 0x2,
                STATETAGBEHAVIOR_FIRE_ON_ENTER_AND_EXIT = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum FieldNetworkOption {
                Auto = 0x0,
                ForceEnable = 0x1,
                ForceDisable = 0x2
            }
            // Alignment: 4
            // Members count: 8
            #[repr(u32)]
            pub enum FootFallTagFoot_t {
                FOOT1 = 0x0,
                FOOT2 = 0x1,
                FOOT3 = 0x2,
                FOOT4 = 0x3,
                FOOT5 = 0x4,
                FOOT6 = 0x5,
                FOOT7 = 0x6,
                FOOT8 = 0x7
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum MatterialAttributeTagType_t {
                MATERIAL_ATTRIBUTE_TAG_VALUE = 0x0,
                MATERIAL_ATTRIBUTE_TAG_COLOR = 0x1
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum VelocityMetricMode {
                DirectionOnly = 0x0,
                MagnitudeOnly = 0x1,
                DirectionAndMagnitude = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum AimMatrixBlendMode {
                AimMatrixBlendMode_None = 0x0,
                AimMatrixBlendMode_Additive = 0x1,
                AimMatrixBlendMode_ModelSpaceAdditive = 0x2,
                AimMatrixBlendMode_BoneMask = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum BoneMaskBlendSpace {
                BlendSpace_Parent = 0x0,
                BlendSpace_Model = 0x1,
                BlendSpace_Model_RotationOnly = 0x2,
                BlendSpace_Model_TranslationOnly = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum JiggleBoneSimSpace {
                SimSpace_Local = 0x0,
                SimSpace_Model = 0x1,
                SimSpace_World = 0x2
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum SolveIKChainAnimNodeDebugSetting {
                SOLVEIKCHAINANIMNODEDEBUGSETTING_None = 0x0,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_X_Axis_Circle = 0x1,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_Y_Axis_Circle = 0x2,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_Z_Axis_Circle = 0x3,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_Forward = 0x4,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_Up = 0x5,
                SOLVEIKCHAINANIMNODEDEBUGSETTING_Left = 0x6
            }
            // Alignment: 2
            // Members count: 3
            #[repr(u16)]
            pub enum AnimScriptType {
                ANIMSCRIPT_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
                ANIMSCRIPT_FUSE_GENERAL = 0x0,
                ANIMSCRIPT_FUSE_STATEMACHINE = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum BinaryNodeTiming {
                UseChild1 = 0x0,
                UseChild2 = 0x1,
                SyncChildren = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum BinaryNodeChildOption {
                Child1 = 0x0,
                Child2 = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum BlendKeyType {
                BlendKey_UserValue = 0x0,
                BlendKey_Velocity = 0x1,
                BlendKey_Distance = 0x2,
                BlendKey_RemainingDistance = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum Blend2DMode {
                Blend2DMode_General = 0x0,
                Blend2DMode_Directional = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ChoiceMethod {
                WeightedRandom = 0x0,
                WeightedRandomNoRepeat = 0x1,
                Iterate = 0x2,
                IterateRandom = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ChoiceChangeMethod {
                OnReset = 0x0,
                OnCycleEnd = 0x1,
                OnResetOrCycleEnd = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ChoiceBlendMethod {
                SingleBlendTime = 0x0,
                PerChoiceBlendTimes = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum FootLockSubVisualization {
                FOOTLOCKSUBVISUALIZATION_ReachabilityAnalysis = 0x0,
                FOOTLOCKSUBVISUALIZATION_IKSolve = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum FootPinningTimingSource {
                FootMotion = 0x0,
                Tag = 0x1,
                Parameter = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum StepPhase {
                StepPhase_OnGround = 0x0,
                StepPhase_InAir = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum JumpCorrectionMethod {
                ScaleMotion = 0x0,
                AddCorrectionDelta = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SelectorTagBehavior_t {
                SelectorTagBehavior_OnWhileCurrent = 0x0,
                SelectorTagBehavior_OffWhenFinished = 0x1,
                SelectorTagBehavior_OffBeforeFinished = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum StanceOverrideMode {
                Sequence = 0x0,
                Node = 0x1
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ResetCycleOption {
                Beginning = 0x0,
                SameCycleAsSource = 0x1,
                InverseSourceCycle = 0x2,
                FixedValue = 0x3,
                SameTimeAsSource = 0x4
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum IkEndEffectorType {
                IkEndEffector_Attachment = 0x0,
                IkEndEffector_Bone = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum IkTargetType {
                IkTarget_Attachment = 0x0,
                IkTarget_Bone = 0x1,
                IkTarget_Parameter_ModelSpace = 0x2,
                IkTarget_Parameter_WorldSpace = 0x3
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum PoseType_t {
                POSETYPE_STATIC = 0x0,
                POSETYPE_DYNAMIC = 0x1,
                POSETYPE_INVALID = 0xFF
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum CAnimationGraphVisualizerPrimitiveType {
                ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Text = 0x0,
                ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Sphere = 0x1,
                ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Line = 0x2,
                ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Pie = 0x3,
                ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Axis = 0x4
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum FacingMode {
                FacingMode_Manual = 0x0,
                FacingMode_Path = 0x1,
                FacingMode_LookTarget = 0x2
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum IKSolverType {
                IKSOLVER_Perlin = 0x0,
                IKSOLVER_TwoBone = 0x1,
                IKSOLVER_Fabrik = 0x2,
                IKSOLVER_DogLeg3Bone = 0x3,
                IKSOLVER_CCD = 0x4,
                IKSOLVER_COUNT = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum IKTargetSource {
                IKTARGETSOURCE_Bone = 0x0,
                IKTARGETSOURCE_AnimgraphParameter = 0x1,
                IKTARGETSOURCE_COUNT = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum IKTargetCoordinateSystem {
                IKTARGETCOORDINATESYSTEM_WorldSpace = 0x0,
                IKTARGETCOORDINATESYSTEM_ModelSpace = 0x1,
                IKTARGETCOORDINATESYSTEM_COUNT = 0x2
            }
            // Parent: None
            // Fields count: 2
            pub mod MoodAnimation_t {
                pub const m_sName: usize = 0x0; // CUtlString
                pub const m_flWeight: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 12
            pub mod MoodAnimationLayer_t {
                pub const m_sName: usize = 0x0; // CUtlString
                pub const m_bActiveListening: usize = 0x8; // bool
                pub const m_bActiveTalking: usize = 0x9; // bool
                pub const m_layerAnimations: usize = 0x10; // CUtlVector<MoodAnimation_t>
                pub const m_flIntensity: usize = 0x28; // CRangeFloat
                pub const m_flDurationScale: usize = 0x30; // CRangeFloat
                pub const m_bScaleWithInts: usize = 0x38; // bool
                pub const m_flNextStart: usize = 0x3C; // CRangeFloat
                pub const m_flStartOffset: usize = 0x44; // CRangeFloat
                pub const m_flEndOffset: usize = 0x4C; // CRangeFloat
                pub const m_flFadeIn: usize = 0x54; // float32
                pub const m_flFadeOut: usize = 0x58; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CMoodVData {
                pub const m_sModelName: usize = 0x0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_nMoodType: usize = 0xE0; // MoodType_t
                pub const m_animationLayers: usize = 0xE8; // CUtlVector<MoodAnimationLayer_t>
            }
            // Parent: None
            // Fields count: 6
            pub mod AnimationDecodeDebugDumpElement_t {
                pub const m_nEntityIndex: usize = 0x0; // int32
                pub const m_modelName: usize = 0x8; // CUtlString
                pub const m_poseParams: usize = 0x10; // CUtlVector<CUtlString>
                pub const m_decodeOps: usize = 0x28; // CUtlVector<CUtlString>
                pub const m_internalOps: usize = 0x40; // CUtlVector<CUtlString>
                pub const m_decodedAnims: usize = 0x58; // CUtlVector<CUtlString>
            }
            // Parent: None
            // Fields count: 2
            pub mod AnimationDecodeDebugDump_t {
                pub const m_processingType: usize = 0x0; // AnimationProcessingType_t
                pub const m_elems: usize = 0x8; // CUtlVector<AnimationDecodeDebugDumpElement_t>
            }
            // Parent: None
            // Fields count: 9
            pub mod AnimationSnapshotBase_t {
                pub const m_flRealTime: usize = 0x0; // float32
                pub const m_rootToWorld: usize = 0x10; // matrix3x4a_t
                pub const m_bBonesInWorldSpace: usize = 0x40; // bool
                pub const m_boneSetupMask: usize = 0x48; // CUtlVector<uint32>
                pub const m_boneTransforms: usize = 0x60; // CUtlVector<matrix3x4a_t>
                pub const m_flexControllers: usize = 0x78; // CUtlVector<float32>
                pub const m_SnapshotType: usize = 0x90; // AnimationSnapshotType_t
                pub const m_bHasDecodeDump: usize = 0x94; // bool
                pub const m_DecodeDump: usize = 0x98; // AnimationDecodeDebugDumpElement_t
            }
            // Parent: AnimationSnapshotBase_t
            // Fields count: 2
            pub mod AnimationSnapshot_t {
                pub const m_nEntIndex: usize = 0x110; // int32
                pub const m_modelName: usize = 0x118; // CUtlString
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimBoneDifference {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_parent: usize = 0x10; // CBufferString
                pub const m_posError: usize = 0x20; // 
                pub const m_bHasRotation: usize = 0x2C; // bool
                pub const m_bHasMovement: usize = 0x2D; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimMorphDifference {
                pub const m_name: usize = 0x0; // CBufferString
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimUserDifference {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_nType: usize = 0x10; // int32
            }
            // Parent: None
            // Fields count: 7
            pub mod CAnimEncodeDifference {
                pub const m_boneArray: usize = 0x0; // CUtlVector<CAnimBoneDifference>
                pub const m_morphArray: usize = 0x18; // CUtlVector<CAnimMorphDifference>
                pub const m_userArray: usize = 0x30; // CUtlVector<CAnimUserDifference>
                pub const m_bHasRotationBitArray: usize = 0x48; // CUtlVector<uint8>
                pub const m_bHasMovementBitArray: usize = 0x60; // CUtlVector<uint8>
                pub const m_bHasMorphBitArray: usize = 0x78; // CUtlVector<uint8>
                pub const m_bHasUserBitArray: usize = 0x90; // CUtlVector<uint8>
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimEventDefinition {
                pub const m_nFrame: usize = 0x8; // int32
                pub const m_flCycle: usize = 0xC; // float32
                pub const m_EventData: usize = 0x10; // KeyValues3
                pub const m_sLegacyOptions: usize = 0x20; // CBufferString
                pub const m_sEventName: usize = 0x30; // CGlobalSymbol
            }
            // Parent: None
            // Fields count: 7
            pub mod CAnimMovement {
                pub const endframe: usize = 0x0; // int32
                pub const motionflags: usize = 0x4; // int32
                pub const v0: usize = 0x8; // float32
                pub const v1: usize = 0xC; // float32
                pub const angle: usize = 0x10; // float32
                pub const vector: usize = 0x14; // 
                pub const position: usize = 0x20; // 
            }
            // Parent: None
            // Fields count: 6
            pub mod CAnimLocalHierarchy {
                pub const m_sBone: usize = 0x0; // CBufferString
                pub const m_sNewParent: usize = 0x10; // CBufferString
                pub const m_nStartFrame: usize = 0x20; // int32
                pub const m_nPeakFrame: usize = 0x24; // int32
                pub const m_nTailFrame: usize = 0x28; // int32
                pub const m_nEndFrame: usize = 0x2C; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod CAnimDecoder {
                pub const m_szName: usize = 0x0; // CBufferString
                pub const m_nVersion: usize = 0x10; // int32
                pub const m_nType: usize = 0x14; // int32
            }
            // Parent: None
            // Fields count: 4
            pub mod CAnimFrameSegment {
                pub const m_nUniqueFrameIndex: usize = 0x0; // int32
                pub const m_nLocalElementMasks: usize = 0x4; // uint32
                pub const m_nLocalChannel: usize = 0x8; // int32
                pub const m_container: usize = 0x10; // CUtlBinaryBlock
            }
            // Parent: None
            // Fields count: 3
            pub mod CAnimFrameBlockAnim {
                pub const m_nStartFrame: usize = 0x0; // int32
                pub const m_nEndFrame: usize = 0x4; // int32
                pub const m_segmentIndexArray: usize = 0x8; // CUtlVector<int32>
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimEncodedFrames {
                pub const m_fileName: usize = 0x0; // CBufferString
                pub const m_nFrames: usize = 0x10; // int32
                pub const m_nFramesPerBlock: usize = 0x14; // int32
                pub const m_frameblockArray: usize = 0x18; // CUtlVector<CAnimFrameBlockAnim>
                pub const m_usageDifferences: usize = 0x30; // CAnimEncodeDifference
            }
            // Parent: None
            // Fields count: 8
            pub mod CAnimDesc_Flag {
                pub const m_bLooping: usize = 0x0; // bool
                pub const m_bAllZeros: usize = 0x1; // bool
                pub const m_bHidden: usize = 0x2; // bool
                pub const m_bDelta: usize = 0x3; // bool
                pub const m_bLegacyWorldspace: usize = 0x4; // bool
                pub const m_bModelDoc: usize = 0x5; // bool
                pub const m_bImplicitSeqIgnoreDelta: usize = 0x6; // bool
                pub const m_bAnimGraphAdditive: usize = 0x7; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimSequenceParams {
                pub const m_flFadeInTime: usize = 0x0; // float32
                pub const m_flFadeOutTime: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 14
            pub mod CAnimDesc {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_flags: usize = 0x10; // CAnimDesc_Flag
                pub const fps: usize = 0x18; // float32
                pub const m_Data: usize = 0x20; // CAnimEncodedFrames
                pub const m_movementArray: usize = 0xF8; // CUtlVector<CAnimMovement>
                pub const m_eventArray: usize = 0x110; // CUtlVector<CAnimEventDefinition>
                pub const m_activityArray: usize = 0x128; // CUtlVector<CAnimActivity>
                pub const m_hierarchyArray: usize = 0x140; // CUtlVector<CAnimLocalHierarchy>
                pub const framestalltime: usize = 0x158; // float32
                pub const m_vecRootMin: usize = 0x15C; // 
                pub const m_vecRootMax: usize = 0x168; // 
                pub const m_vecBoneWorldMin: usize = 0x178; // CUtlVector<Vector>
                pub const m_vecBoneWorldMax: usize = 0x190; // CUtlVector<Vector>
                pub const m_sequenceParams: usize = 0x1A8; // CAnimSequenceParams
            }
            // Parent: None
            // Fields count: 4
            pub mod CAnimActivity {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_nActivity: usize = 0x10; // int32
                pub const m_nFlags: usize = 0x14; // int32
                pub const m_nWeight: usize = 0x18; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimData {
                pub const m_name: usize = 0x10; // CBufferString
                pub const m_animArray: usize = 0x20; // CUtlVector<CAnimDesc>
                pub const m_decoderArray: usize = 0x38; // CUtlVector<CAnimDecoder>
                pub const m_nMaxUniqueFrameIndex: usize = 0x50; // int32
                pub const m_segmentArray: usize = 0x58; // CUtlVector<CAnimFrameSegment>
            }
            // Parent: None
            // Fields count: 7
            pub mod CAnimBone {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_parent: usize = 0x10; // int32
                pub const m_pos: usize = 0x14; // 
                pub const m_quat: usize = 0x20; // QuaternionStorage
                pub const m_scale: usize = 0x30; // float32
                pub const m_qAlignment: usize = 0x34; // QuaternionStorage
                pub const m_flags: usize = 0x44; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimUser {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_nType: usize = 0x10; // int32
            }
            // Parent: None
            // Fields count: 9
            pub mod CAnimDataChannelDesc {
                pub const m_szChannelClass: usize = 0x0; // CBufferString
                pub const m_szVariableName: usize = 0x10; // CBufferString
                pub const m_nFlags: usize = 0x20; // int32
                pub const m_nType: usize = 0x24; // int32
                pub const m_szGrouping: usize = 0x28; // CBufferString
                pub const m_szDescription: usize = 0x38; // CBufferString
                pub const m_szElementNameArray: usize = 0x48; // CUtlVector<CBufferString>
                pub const m_nElementIndexArray: usize = 0x60; // CUtlVector<int32>
                pub const m_nElementMaskArray: usize = 0x78; // CUtlVector<uint32>
            }
            // Parent: None
            // Fields count: 6
            pub mod CAnimKeyData {
                pub const m_name: usize = 0x0; // CBufferString
                pub const m_boneArray: usize = 0x10; // CUtlVector<CAnimBone>
                pub const m_userArray: usize = 0x28; // CUtlVector<CAnimUser>
                pub const m_morphArray: usize = 0x40; // CUtlVector<CBufferString>
                pub const m_nChannelElements: usize = 0x58; // int32
                pub const m_dataChannelArray: usize = 0x60; // CUtlVector<CAnimDataChannelDesc>
            }
            // Parent: None
            // Fields count: 7
            pub mod CAnimationGroup {
                pub const m_nFlags: usize = 0x10; // uint32
                pub const m_name: usize = 0x18; // CBufferString
                pub const m_localHAnimArray_Handle: usize = 0x60; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimData>>
                pub const m_includedGroupArray_Handle: usize = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimationGroup>>
                pub const m_directHSeqGroup_Handle: usize = 0x90; // CStrongHandle<InfoForResourceTypeCSequenceGroupData>
                pub const m_decodeKey: usize = 0x98; // CAnimKeyData
                pub const m_szScripts: usize = 0x110; // CUtlVector<CBufferString>
            }
            // Parent: None
            // Fields count: 8
            pub mod CSeqAutoLayerFlag {
                pub const m_bPost: usize = 0x0; // bool
                pub const m_bSpline: usize = 0x1; // bool
                pub const m_bXFade: usize = 0x2; // bool
                pub const m_bNoBlend: usize = 0x3; // bool
                pub const m_bLocal: usize = 0x4; // bool
                pub const m_bPose: usize = 0x5; // bool
                pub const m_bFetchFrame: usize = 0x6; // bool
                pub const m_bSubtract: usize = 0x7; // bool
            }
            // Parent: None
            // Fields count: 7
            pub mod CSeqAutoLayer {
                pub const m_nLocalReference: usize = 0x0; // int16
                pub const m_nLocalPose: usize = 0x2; // int16
                pub const m_flags: usize = 0x4; // CSeqAutoLayerFlag
                pub const m_start: usize = 0xC; // float32
                pub const m_peak: usize = 0x10; // float32
                pub const m_tail: usize = 0x14; // float32
                pub const m_end: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod CSeqIKLock {
                pub const m_flPosWeight: usize = 0x0; // float32
                pub const m_flAngleWeight: usize = 0x4; // float32
                pub const m_nLocalBone: usize = 0x8; // int16
                pub const m_bBonesOrientedAlongPositiveX: usize = 0xA; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod CSeqBoneMaskList {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_nLocalBoneArray: usize = 0x10; // CUtlVector<int16>
                pub const m_flBoneWeightArray: usize = 0x28; // CUtlVector<float32>
                pub const m_flDefaultMorphCtrlWeight: usize = 0x40; // float32
                pub const m_morphCtrlWeightArray: usize = 0x48; // CUtlVector<CUtlPair<CBufferString,float32>>
            }
            // Parent: None
            // Fields count: 5
            pub mod CSeqScaleSet {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_bRootOffset: usize = 0x10; // bool
                pub const m_vRootOffset: usize = 0x14; // 
                pub const m_nLocalBoneArray: usize = 0x20; // CUtlVector<int16>
                pub const m_flBoneScaleArray: usize = 0x38; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 6
            pub mod CSeqMultiFetchFlag {
                pub const m_bRealtime: usize = 0x0; // bool
                pub const m_bCylepose: usize = 0x1; // bool
                pub const m_b0D: usize = 0x2; // bool
                pub const m_b1D: usize = 0x3; // bool
                pub const m_b2D: usize = 0x4; // bool
                pub const m_b2D_TRI: usize = 0x5; // bool
            }
            // Parent: None
            // Fields count: 10
            pub mod CSeqMultiFetch {
                pub const m_flags: usize = 0x0; // CSeqMultiFetchFlag
                pub const m_localReferenceArray: usize = 0x8; // CUtlVector<int16>
                pub const m_nGroupSize: usize = 0x20; // int32[2]
                pub const m_nLocalPose: usize = 0x28; // int32[2]
                pub const m_poseKeyArray0: usize = 0x30; // CUtlVector<float32>
                pub const m_poseKeyArray1: usize = 0x48; // CUtlVector<float32>
                pub const m_nLocalCyclePoseParameter: usize = 0x60; // int32
                pub const m_bCalculatePoseParameters: usize = 0x64; // bool
                pub const m_bFixedBlendWeight: usize = 0x65; // bool
                pub const m_flFixedBlendWeightVals: usize = 0x68; // float32[2]
            }
            // Parent: None
            // Fields count: 11
            pub mod CSeqSeqDescFlag {
                pub const m_bLooping: usize = 0x0; // bool
                pub const m_bSnap: usize = 0x1; // bool
                pub const m_bAutoplay: usize = 0x2; // bool
                pub const m_bPost: usize = 0x3; // bool
                pub const m_bHidden: usize = 0x4; // bool
                pub const m_bMulti: usize = 0x5; // bool
                pub const m_bLegacyDelta: usize = 0x6; // bool
                pub const m_bLegacyWorldspace: usize = 0x7; // bool
                pub const m_bLegacyCyclepose: usize = 0x8; // bool
                pub const m_bLegacyRealtime: usize = 0x9; // bool
                pub const m_bModelDoc: usize = 0xA; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CSeqTransition {
                pub const m_flFadeInTime: usize = 0x0; // float32
                pub const m_flFadeOutTime: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 11
            pub mod CSeqS1SeqDesc {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_flags: usize = 0x10; // CSeqSeqDescFlag
                pub const m_fetch: usize = 0x20; // CSeqMultiFetch
                pub const m_nLocalWeightlist: usize = 0x90; // int32
                pub const m_autoLayerArray: usize = 0x98; // CUtlVector<CSeqAutoLayer>
                pub const m_IKLockArray: usize = 0xB0; // CUtlVector<CSeqIKLock>
                pub const m_transition: usize = 0xC8; // CSeqTransition
                pub const m_SequenceKeys: usize = 0xD0; // KeyValues3
                pub const m_LegacyKeyValueText: usize = 0xE0; // CBufferString
                pub const m_activityArray: usize = 0xF0; // CUtlVector<CAnimActivity>
                pub const m_footMotion: usize = 0x108; // CUtlVector<CFootMotion>
            }
            // Parent: None
            // Fields count: 6
            pub mod CSeqSynthAnimDesc {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_flags: usize = 0x10; // CSeqSeqDescFlag
                pub const m_transition: usize = 0x1C; // CSeqTransition
                pub const m_nLocalBaseReference: usize = 0x24; // int16
                pub const m_nLocalBoneMask: usize = 0x26; // int16
                pub const m_activityArray: usize = 0x28; // CUtlVector<CAnimActivity>
            }
            // Parent: None
            // Fields count: 9
            pub mod CSeqCmdLayer {
                pub const m_cmd: usize = 0x0; // int16
                pub const m_nLocalReference: usize = 0x2; // int16
                pub const m_nLocalBonemask: usize = 0x4; // int16
                pub const m_nDstResult: usize = 0x6; // int16
                pub const m_nSrcResult: usize = 0x8; // int16
                pub const m_bSpline: usize = 0xA; // bool
                pub const m_flVar1: usize = 0xC; // float32
                pub const m_flVar2: usize = 0x10; // float32
                pub const m_nLineNumber: usize = 0x14; // int16
            }
            // Parent: None
            // Fields count: 8
            pub mod CSeqPoseSetting {
                pub const m_sPoseParameter: usize = 0x0; // CBufferString
                pub const m_sAttachment: usize = 0x10; // CBufferString
                pub const m_sReferenceSequence: usize = 0x20; // CBufferString
                pub const m_flValue: usize = 0x30; // float32
                pub const m_bX: usize = 0x34; // bool
                pub const m_bY: usize = 0x35; // bool
                pub const m_bZ: usize = 0x36; // bool
                pub const m_eType: usize = 0x38; // int32
            }
            // Parent: None
            // Fields count: 12
            pub mod CSeqCmdSeqDesc {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_flags: usize = 0x10; // CSeqSeqDescFlag
                pub const m_transition: usize = 0x1C; // CSeqTransition
                pub const m_nFrameRangeSequence: usize = 0x24; // int16
                pub const m_nFrameCount: usize = 0x26; // int16
                pub const m_flFPS: usize = 0x28; // float32
                pub const m_nSubCycles: usize = 0x2C; // int16
                pub const m_numLocalResults: usize = 0x2E; // int16
                pub const m_cmdLayerArray: usize = 0x30; // CUtlVector<CSeqCmdLayer>
                pub const m_eventArray: usize = 0x48; // CUtlVector<CAnimEventDefinition>
                pub const m_activityArray: usize = 0x60; // CUtlVector<CAnimActivity>
                pub const m_poseSettingArray: usize = 0x78; // CUtlVector<CSeqPoseSetting>
            }
            // Parent: None
            // Fields count: 5
            pub mod CSeqPoseParamDesc {
                pub const m_sName: usize = 0x0; // CBufferString
                pub const m_flStart: usize = 0x10; // float32
                pub const m_flEnd: usize = 0x14; // float32
                pub const m_flLoop: usize = 0x18; // float32
                pub const m_bLooping: usize = 0x1C; // bool
            }
            // Parent: None
            // Fields count: 14
            pub mod CSequenceGroupData {
                pub const m_sName: usize = 0x10; // CBufferString
                pub const m_nFlags: usize = 0x20; // uint32
                pub const m_localSequenceNameArray: usize = 0x28; // CUtlVector<CBufferString>
                pub const m_localS1SeqDescArray: usize = 0x40; // CUtlVector<CSeqS1SeqDesc>
                pub const m_localMultiSeqDescArray: usize = 0x58; // CUtlVector<CSeqS1SeqDesc>
                pub const m_localSynthAnimDescArray: usize = 0x70; // CUtlVector<CSeqSynthAnimDesc>
                pub const m_localCmdSeqDescArray: usize = 0x88; // CUtlVector<CSeqCmdSeqDesc>
                pub const m_localBoneMaskArray: usize = 0xA0; // CUtlVector<CSeqBoneMaskList>
                pub const m_localScaleSetArray: usize = 0xB8; // CUtlVector<CSeqScaleSet>
                pub const m_localBoneNameArray: usize = 0xD0; // CUtlVector<CBufferString>
                pub const m_localNodeName: usize = 0xE8; // CBufferString
                pub const m_localPoseParamArray: usize = 0xF8; // CUtlVector<CSeqPoseParamDesc>
                pub const m_keyValues: usize = 0x110; // KeyValues3
                pub const m_localIKAutoplayLockArray: usize = 0x120; // CUtlVector<CSeqIKLock>
            }
            // Parent: None
            // Fields count: 17
            pub mod CCompressorGroup {
                pub const m_nTotalElementCount: usize = 0x0; // int32
                pub const m_szChannelClass: usize = 0x8; // CUtlVector<char*>
                pub const m_szVariableName: usize = 0x20; // CUtlVector<char*>
                pub const m_nType: usize = 0x38; // CUtlVector<fieldtype_t>
                pub const m_nFlags: usize = 0x50; // CUtlVector<int32>
                pub const m_szGrouping: usize = 0x68; // CUtlVector<CUtlString>
                pub const m_nCompressorIndex: usize = 0x80; // CUtlVector<int32>
                pub const m_szElementNames: usize = 0x98; // CUtlVector<CUtlVector<char*>>
                pub const m_nElementUniqueID: usize = 0xB0; // CUtlVector<CUtlVector<int32>>
                pub const m_nElementMask: usize = 0xC8; // CUtlVector<uint32>
                pub const m_vectorCompressor: usize = 0xF8; // CUtlVector<CCompressor<Vector>*>
                pub const m_quaternionCompressor: usize = 0x110; // CUtlVector<CCompressor<QuaternionStorage>*>
                pub const m_intCompressor: usize = 0x128; // CUtlVector<CCompressor<int32>*>
                pub const m_boolCompressor: usize = 0x140; // CUtlVector<CCompressor<bool>*>
                pub const m_colorCompressor: usize = 0x158; // CUtlVector<CCompressor<Color>*>
                pub const m_vector2DCompressor: usize = 0x170; // CUtlVector<CCompressor<Vector2D>*>
                pub const m_vector4DCompressor: usize = 0x188; // CUtlVector<CCompressor<Vector4D>*>
            }
            // Parent: None
            // Fields count: 1
            pub mod HSequence {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimEnum {
                pub const m_value: usize = 0x0; // uint8
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimNodeID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimNodeOutputID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimStateID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimParamID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimTagID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimComponentID {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod AnimScriptHandle {
                pub const m_id: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimAttachment {
                pub const m_influenceRotations: usize = 0x0; // Quaternion[3]
                pub const m_influenceOffsets: usize = 0x30; // VectorAligned[3]
                pub const m_influenceIndices: usize = 0x60; // int32[3]
                pub const m_influenceWeights: usize = 0x6C; // float32[3]
                pub const m_numInfluences: usize = 0x78; // uint8
            }
            // Parent: None
            // Fields count: 5
            pub mod VPhysics2ShapeDef_t {
                pub const m_spheres: usize = 0x0; // CUtlVector<RnSphereDesc_t>
                pub const m_capsules: usize = 0x18; // CUtlVector<RnCapsuleDesc_t>
                pub const m_hulls: usize = 0x30; // CUtlVector<RnHullDesc_t>
                pub const m_meshes: usize = 0x48; // CUtlVector<RnMeshDesc_t>
                pub const m_CollisionAttributeIndices: usize = 0x60; // CUtlVector<uint16>
            }
            // Parent: None
            // Fields count: 10
            pub mod VPhysXBodyPart_t {
                pub const m_nFlags: usize = 0x0; // uint32
                pub const m_flMass: usize = 0x4; // float32
                pub const m_rnShape: usize = 0x8; // VPhysics2ShapeDef_t
                pub const m_nCollisionAttributeIndex: usize = 0x80; // uint16
                pub const m_nReserved: usize = 0x82; // uint16
                pub const m_flInertiaScale: usize = 0x84; // float32
                pub const m_flLinearDamping: usize = 0x88; // float32
                pub const m_flAngularDamping: usize = 0x8C; // float32
                pub const m_bOverrideMassCenter: usize = 0x90; // bool
                pub const m_vMassCenterOverride: usize = 0x94; // 
            }
            // Parent: None
            // Fields count: 8
            pub mod VPhysXCollisionAttributes_t {
                pub const m_CollisionGroup: usize = 0x0; // uint32
                pub const m_InteractAs: usize = 0x8; // CUtlVector<uint32>
                pub const m_InteractWith: usize = 0x20; // CUtlVector<uint32>
                pub const m_InteractExclude: usize = 0x38; // CUtlVector<uint32>
                pub const m_CollisionGroupString: usize = 0x50; // CUtlString
                pub const m_InteractAsStrings: usize = 0x58; // CUtlVector<CUtlString>
                pub const m_InteractWithStrings: usize = 0x70; // CUtlVector<CUtlString>
                pub const m_InteractExcludeStrings: usize = 0x88; // CUtlVector<CUtlString>
            }
            // Parent: None
            // Fields count: 2
            pub mod VPhysXRange_t {
                pub const m_flMin: usize = 0x0; // float32
                pub const m_flMax: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 46
            pub mod VPhysXConstraintParams_t {
                pub const m_nType: usize = 0x0; // int8
                pub const m_nTranslateMotion: usize = 0x1; // int8
                pub const m_nRotateMotion: usize = 0x2; // int8
                pub const m_nFlags: usize = 0x3; // int8
                pub const m_anchor: usize = 0x4; // Vector[2]
                pub const m_axes: usize = 0x1C; // QuaternionStorage[2]
                pub const m_maxForce: usize = 0x3C; // float32
                pub const m_maxTorque: usize = 0x40; // float32
                pub const m_linearLimitValue: usize = 0x44; // float32
                pub const m_linearLimitRestitution: usize = 0x48; // float32
                pub const m_linearLimitSpring: usize = 0x4C; // float32
                pub const m_linearLimitDamping: usize = 0x50; // float32
                pub const m_twistLowLimitValue: usize = 0x54; // float32
                pub const m_twistLowLimitRestitution: usize = 0x58; // float32
                pub const m_twistLowLimitSpring: usize = 0x5C; // float32
                pub const m_twistLowLimitDamping: usize = 0x60; // float32
                pub const m_twistHighLimitValue: usize = 0x64; // float32
                pub const m_twistHighLimitRestitution: usize = 0x68; // float32
                pub const m_twistHighLimitSpring: usize = 0x6C; // float32
                pub const m_twistHighLimitDamping: usize = 0x70; // float32
                pub const m_swing1LimitValue: usize = 0x74; // float32
                pub const m_swing1LimitRestitution: usize = 0x78; // float32
                pub const m_swing1LimitSpring: usize = 0x7C; // float32
                pub const m_swing1LimitDamping: usize = 0x80; // float32
                pub const m_swing2LimitValue: usize = 0x84; // float32
                pub const m_swing2LimitRestitution: usize = 0x88; // float32
                pub const m_swing2LimitSpring: usize = 0x8C; // float32
                pub const m_swing2LimitDamping: usize = 0x90; // float32
                pub const m_goalPosition: usize = 0x94; // 
                pub const m_goalOrientation: usize = 0xA0; // QuaternionStorage
                pub const m_goalAngularVelocity: usize = 0xB0; // 
                pub const m_driveSpringX: usize = 0xBC; // float32
                pub const m_driveSpringY: usize = 0xC0; // float32
                pub const m_driveSpringZ: usize = 0xC4; // float32
                pub const m_driveDampingX: usize = 0xC8; // float32
                pub const m_driveDampingY: usize = 0xCC; // float32
                pub const m_driveDampingZ: usize = 0xD0; // float32
                pub const m_driveSpringTwist: usize = 0xD4; // float32
                pub const m_driveSpringSwing: usize = 0xD8; // float32
                pub const m_driveSpringSlerp: usize = 0xDC; // float32
                pub const m_driveDampingTwist: usize = 0xE0; // float32
                pub const m_driveDampingSwing: usize = 0xE4; // float32
                pub const m_driveDampingSlerp: usize = 0xE8; // float32
                pub const m_solverIterationCount: usize = 0xEC; // int32
                pub const m_projectionLinearTolerance: usize = 0xF0; // float32
                pub const m_projectionAngularTolerance: usize = 0xF4; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod VPhysXConstraint2_t {
                pub const m_nFlags: usize = 0x0; // uint32
                pub const m_nParent: usize = 0x4; // uint16
                pub const m_nChild: usize = 0x6; // uint16
                pub const m_params: usize = 0x8; // VPhysXConstraintParams_t
            }
            // Parent: None
            // Fields count: 24
            pub mod VPhysXJoint_t {
                pub const m_nType: usize = 0x0; // uint16
                pub const m_nBody1: usize = 0x2; // uint16
                pub const m_nBody2: usize = 0x4; // uint16
                pub const m_nFlags: usize = 0x6; // uint16
                pub const m_Frame1: usize = 0x10; // CTransform
                pub const m_Frame2: usize = 0x30; // CTransform
                pub const m_bEnableCollision: usize = 0x50; // bool
                pub const m_bEnableLinearLimit: usize = 0x51; // bool
                pub const m_LinearLimit: usize = 0x54; // VPhysXRange_t
                pub const m_bEnableLinearMotor: usize = 0x5C; // bool
                pub const m_vLinearTargetVelocity: usize = 0x60; // 
                pub const m_flMaxForce: usize = 0x6C; // float32
                pub const m_bEnableSwingLimit: usize = 0x70; // bool
                pub const m_SwingLimit: usize = 0x74; // VPhysXRange_t
                pub const m_bEnableTwistLimit: usize = 0x7C; // bool
                pub const m_TwistLimit: usize = 0x80; // VPhysXRange_t
                pub const m_bEnableAngularMotor: usize = 0x88; // bool
                pub const m_vAngularTargetVelocity: usize = 0x8C; // 
                pub const m_flMaxTorque: usize = 0x98; // float32
                pub const m_flLinearFrequency: usize = 0x9C; // float32
                pub const m_flLinearDampingRatio: usize = 0xA0; // float32
                pub const m_flAngularFrequency: usize = 0xA4; // float32
                pub const m_flAngularDampingRatio: usize = 0xA8; // float32
                pub const m_flFriction: usize = 0xAC; // float32
            }
            // Parent: None
            // Fields count: 6
            pub mod PhysSoftbodyDesc_t {
                pub const m_ParticleBoneHash: usize = 0x0; // CUtlVector<uint32>
                pub const m_Particles: usize = 0x18; // CUtlVector<RnSoftbodyParticle_t>
                pub const m_Springs: usize = 0x30; // CUtlVector<RnSoftbodySpring_t>
                pub const m_Capsules: usize = 0x48; // CUtlVector<RnSoftbodyCapsule_t>
                pub const m_InitPose: usize = 0x60; // CUtlVector<CTransform>
                pub const m_ParticleBoneName: usize = 0x78; // CUtlVector<CUtlString>
            }
            // Parent: None
            // Fields count: 16
            pub mod VPhysXAggregateData_t {
                pub const m_nFlags: usize = 0x0; // uint16
                pub const m_nRefCounter: usize = 0x2; // uint16
                pub const m_bonesHash: usize = 0x8; // CUtlVector<uint32>
                pub const m_boneNames: usize = 0x20; // CUtlVector<CUtlString>
                pub const m_indexNames: usize = 0x38; // CUtlVector<uint16>
                pub const m_indexHash: usize = 0x50; // CUtlVector<uint16>
                pub const m_bindPose: usize = 0x68; // CUtlVector<matrix3x4a_t>
                pub const m_parts: usize = 0x80; // CUtlVector<VPhysXBodyPart_t>
                pub const m_constraints2: usize = 0x98; // CUtlVector<VPhysXConstraint2_t>
                pub const m_joints: usize = 0xB0; // CUtlVector<VPhysXJoint_t>
                pub const m_pFeModel: usize = 0xC8; // PhysFeModelDesc_t*
                pub const m_boneParents: usize = 0xD0; // CUtlVector<uint16>
                pub const m_surfacePropertyHashes: usize = 0xE8; // CUtlVector<uint32>
                pub const m_collisionAttributes: usize = 0x100; // CUtlVector<VPhysXCollisionAttributes_t>
                pub const m_debugPartNames: usize = 0x118; // CUtlVector<CUtlString>
                pub const m_embeddedKeyvalues: usize = 0x130; // CUtlString
            }
            // Parent: None
            // Fields count: 7
            pub mod CPhysSurfacePropertiesPhysics {
                pub const m_friction: usize = 0x0; // float32
                pub const m_elasticity: usize = 0x4; // float32
                pub const m_density: usize = 0x8; // float32
                pub const m_thickness: usize = 0xC; // float32
                pub const m_softContactFrequency: usize = 0x10; // float32
                pub const m_softContactDampingRatio: usize = 0x14; // float32
                pub const m_wheelDrag: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod CPhysSurfacePropertiesAudio {
                pub const m_reflectivity: usize = 0x0; // float32
                pub const m_hardnessFactor: usize = 0x4; // float32
                pub const m_roughnessFactor: usize = 0x8; // float32
                pub const m_roughThreshold: usize = 0xC; // float32
                pub const m_hardThreshold: usize = 0x10; // float32
                pub const m_hardVelocityThreshold: usize = 0x14; // float32
                pub const m_flStaticImpactVolume: usize = 0x18; // float32
                pub const m_flOcclusionFactor: usize = 0x1C; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod CPhysSurfacePropertiesSoundNames {
                pub const m_impactSoft: usize = 0x0; // CUtlString
                pub const m_impactHard: usize = 0x8; // CUtlString
                pub const m_scrapeSmooth: usize = 0x10; // CUtlString
                pub const m_scrapeRough: usize = 0x18; // CUtlString
                pub const m_bulletImpact: usize = 0x20; // CUtlString
                pub const m_rolling: usize = 0x28; // CUtlString
                pub const m_break: usize = 0x30; // CUtlString
                pub const m_strain: usize = 0x38; // CUtlString
            }
            // Parent: None
            // Fields count: 8
            pub mod CPhysSurfaceProperties {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_nameHash: usize = 0x8; // uint32
                pub const m_baseNameHash: usize = 0xC; // uint32
                pub const m_bHidden: usize = 0x18; // bool
                pub const m_description: usize = 0x20; // CUtlString
                pub const m_physics: usize = 0x28; // CPhysSurfacePropertiesPhysics
                pub const m_audioSounds: usize = 0x48; // CPhysSurfacePropertiesSoundNames
                pub const m_audioParams: usize = 0x88; // CPhysSurfacePropertiesAudio
            }
            // Parent: None
            // Fields count: 1
            pub mod CVPhysXSurfacePropertiesList {
                pub const m_surfacePropertiesList: usize = 0x0; // CUtlVector<CPhysSurfaceProperties*>
            }
            // Parent: None
            // Fields count: 2
            pub mod MaterialGroup_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_materials: usize = 0x8; // CUtlVector<CStrongHandle<InfoForResourceTypeIMaterial2>>
            }
            // Parent: None
            // Fields count: 7
            pub mod ModelSkeletonData_t {
                pub const m_boneName: usize = 0x0; // CUtlVector<CUtlString>
                pub const m_nParent: usize = 0x18; // CUtlVector<int16>
                pub const m_boneSphere: usize = 0x30; // CUtlVector<float32>
                pub const m_nFlag: usize = 0x48; // CUtlVector<uint32>
                pub const m_bonePosParent: usize = 0x60; // CUtlVector<Vector>
                pub const m_boneRotParent: usize = 0x78; // CUtlVector<QuaternionStorage>
                pub const m_boneScaleParent: usize = 0x90; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 10
            pub mod PermModelInfo_t {
                pub const m_nFlags: usize = 0x0; // uint32
                pub const m_vHullMin: usize = 0x4; // 
                pub const m_vHullMax: usize = 0x10; // 
                pub const m_vViewMin: usize = 0x1C; // 
                pub const m_vViewMax: usize = 0x28; // 
                pub const m_flMass: usize = 0x34; // float32
                pub const m_vEyePosition: usize = 0x38; // 
                pub const m_flMaxEyeDeflection: usize = 0x44; // float32
                pub const m_sSurfaceProperty: usize = 0x48; // CUtlString
                pub const m_keyValueText: usize = 0x50; // CUtlString
            }
            // Parent: None
            // Fields count: 4
            pub mod PermModelExtPart_t {
                pub const m_Transform: usize = 0x0; // CTransform
                pub const m_Name: usize = 0x20; // CUtlString
                pub const m_nParent: usize = 0x28; // int32
                pub const m_refModel: usize = 0x30; // CStrongHandle<InfoForResourceTypeCModel>
            }
            // Parent: None
            // Fields count: 5
            pub mod ModelBoneFlexDriverControl_t {
                pub const m_nBoneComponent: usize = 0x0; // ModelBoneFlexComponent_t
                pub const m_flexController: usize = 0x8; // CUtlString
                pub const m_flexControllerToken: usize = 0x10; // uint32
                pub const m_flMin: usize = 0x14; // float32
                pub const m_flMax: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod ModelBoneFlexDriver_t {
                pub const m_boneName: usize = 0x0; // CUtlString
                pub const m_boneNameToken: usize = 0x8; // uint32
                pub const m_controls: usize = 0x10; // CUtlVector<ModelBoneFlexDriverControl_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod PermModelDataAnimatedMaterialAttribute_t {
                pub const m_AttributeName: usize = 0x0; // CUtlString
                pub const m_nNumChannels: usize = 0x8; // int32
            }
            // Parent: None
            // Fields count: 23
            pub mod PermModelData_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_modelInfo: usize = 0x8; // PermModelInfo_t
                pub const m_ExtParts: usize = 0x60; // CUtlVector<PermModelExtPart_t>
                pub const m_refMeshes: usize = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCRenderMesh>>
                pub const m_refMeshGroupMasks: usize = 0x90; // CUtlVector<uint64>
                pub const m_refPhysGroupMasks: usize = 0xA8; // CUtlVector<uint64>
                pub const m_refLODGroupMasks: usize = 0xC0; // CUtlVector<uint8>
                pub const m_lodGroupSwitchDistances: usize = 0xD8; // CUtlVector<float32>
                pub const m_refPhysicsData: usize = 0xF0; // CUtlVector<CStrongHandle<InfoForResourceTypeCPhysAggregateData>>
                pub const m_refPhysicsHitboxData: usize = 0x108; // CUtlVector<CStrongHandle<InfoForResourceTypeCPhysAggregateData>>
                pub const m_refAnimGroups: usize = 0x120; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimationGroup>>
                pub const m_refSequenceGroups: usize = 0x138; // CUtlVector<CStrongHandle<InfoForResourceTypeCSequenceGroupData>>
                pub const m_meshGroups: usize = 0x150; // CUtlVector<CUtlString>
                pub const m_materialGroups: usize = 0x168; // CUtlVector<MaterialGroup_t>
                pub const m_nDefaultMeshGroupMask: usize = 0x180; // uint64
                pub const m_modelSkeleton: usize = 0x188; // ModelSkeletonData_t
                pub const m_remappingTable: usize = 0x230; // CUtlVector<int16>
                pub const m_remappingTableStarts: usize = 0x248; // CUtlVector<uint16>
                pub const m_boneFlexDrivers: usize = 0x260; // CUtlVector<ModelBoneFlexDriver_t>
                pub const m_pModelConfigList: usize = 0x278; // CModelConfigList*
                pub const m_BodyGroupsHiddenInTools: usize = 0x280; // CUtlVector<CUtlString>
                pub const m_refAnimIncludeModels: usize = 0x298; // CUtlVector<CStrongHandle<InfoForResourceTypeCModel>>
                pub const m_AnimatedMaterialAttributes: usize = 0x2B0; // CUtlVector<PermModelDataAnimatedMaterialAttribute_t>
            }
            // Parent: None
            // Fields count: 1
            pub mod AttachmentHandle_t {
                pub const m_Value: usize = 0x0; // uint8
            }
            // Parent: None
            // Fields count: 2
            pub mod CModelConfigElement {
                pub const m_ElementName: usize = 0x8; // CUtlString
                pub const m_NestedElements: usize = 0x10; // CUtlVector<CModelConfigElement*>
            }
            // Parent: CModelConfigElement
            // Fields count: 14
            pub mod CModelConfigElement_AttachedModel {
                pub const m_InstanceName: usize = 0x48; // CUtlString
                pub const m_EntityClass: usize = 0x50; // CUtlString
                pub const m_hModel: usize = 0x58; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_vOffset: usize = 0x60; // 
                pub const m_aAngOffset: usize = 0x6C; // QAngle
                pub const m_AttachmentName: usize = 0x78; // CUtlString
                pub const m_LocalAttachmentOffsetName: usize = 0x80; // CUtlString
                pub const m_AttachmentType: usize = 0x88; // ModelConfigAttachmentType_t
                pub const m_bBoneMergeFlex: usize = 0x8C; // bool
                pub const m_bUserSpecifiedColor: usize = 0x8D; // bool
                pub const m_bUserSpecifiedMaterialGroup: usize = 0x8E; // bool
                pub const m_bAcceptParentMaterialDrivenDecals: usize = 0x8F; // bool
                pub const m_BodygroupOnOtherModels: usize = 0x90; // CUtlString
                pub const m_MaterialGroupOnOtherModels: usize = 0x98; // CUtlString
            }
            // Parent: CModelConfigElement
            // Fields count: 1
            pub mod CModelConfigElement_UserPick {
                pub const m_Choices: usize = 0x48; // CUtlVector<CUtlString>
            }
            // Parent: CModelConfigElement
            // Fields count: 2
            pub mod CModelConfigElement_RandomPick {
                pub const m_Choices: usize = 0x48; // CUtlVector<CUtlString>
                pub const m_ChoiceWeights: usize = 0x60; // CUtlVector<float32>
            }
            // Parent: CModelConfigElement
            // Fields count: 1
            pub mod CModelConfigElement_SetMaterialGroup {
                pub const m_MaterialGroupName: usize = 0x48; // CUtlString
            }
            // Parent: CModelConfigElement
            // Fields count: 1
            pub mod CModelConfigElement_SetMaterialGroupOnAttachedModels {
                pub const m_MaterialGroupName: usize = 0x48; // CUtlString
            }
            // Parent: CModelConfigElement
            // Fields count: 1
            pub mod CModelConfigElement_SetRenderColor {
                pub const m_Color: usize = 0x48; // Color
            }
            // Parent: CModelConfigElement
            // Fields count: 1
            pub mod CModelConfigElement_RandomColor {
                pub const m_Gradient: usize = 0x48; // CColorGradient
            }
            // Parent: CModelConfigElement
            // Fields count: 2
            pub mod CModelConfigElement_SetBodygroup {
                pub const m_GroupName: usize = 0x48; // CUtlString
                pub const m_nChoice: usize = 0x50; // int32
            }
            // Parent: CModelConfigElement
            // Fields count: 2
            pub mod CModelConfigElement_SetBodygroupOnAttachedModels {
                pub const m_GroupName: usize = 0x48; // CUtlString
                pub const m_nChoice: usize = 0x50; // int32
            }
            // Parent: CModelConfigElement
            // Fields count: 2
            pub mod CModelConfigElement_Command {
                pub const m_Command: usize = 0x48; // CUtlString
                pub const m_Args: usize = 0x50; // KeyValues3
            }
            // Parent: None
            // Fields count: 3
            pub mod CModelConfig {
                pub const m_ConfigName: usize = 0x0; // CUtlString
                pub const m_Elements: usize = 0x8; // CUtlVector<CModelConfigElement*>
                pub const m_bTopLevel: usize = 0x20; // bool
            }
            // Parent: None
            // Fields count: 3
            pub mod CModelConfigList {
                pub const m_bHideMaterialGroupInTools: usize = 0x0; // bool
                pub const m_bHideRenderColorInTools: usize = 0x1; // bool
                pub const m_Configs: usize = 0x8; // CUtlVector<CModelConfig*>
            }
            // Parent: None
            // Fields count: 2
            pub mod CRenderBufferBinding {
                pub const m_hBuffer: usize = 0x0; // uint64
                pub const m_nBindOffsetBytes: usize = 0x10; // uint32
            }
            // Parent: None
            // Fields count: 2
            pub mod SkeletonBoneBounds_t {
                pub const m_vecCenter: usize = 0x0; // 
                pub const m_vecSize: usize = 0xC; // 
            }
            // Parent: None
            // Fields count: 5
            pub mod RenderSkeletonBone_t {
                pub const m_boneName: usize = 0x0; // CUtlString
                pub const m_parentName: usize = 0x8; // CUtlString
                pub const m_invBindPose: usize = 0x10; // matrix3x4_t
                pub const m_bbox: usize = 0x40; // SkeletonBoneBounds_t
                pub const m_flSphereRadius: usize = 0x58; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CRenderSkeleton {
                pub const m_bones: usize = 0x0; // CUtlVector<RenderSkeletonBone_t>
                pub const m_boneParents: usize = 0x30; // CUtlVector<int32>
                pub const m_nBoneWeightCount: usize = 0x48; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod CDrawCullingData {
                pub const m_vConeApex: usize = 0x0; // 
                pub const m_ConeAxis: usize = 0xC; // int8[3]
                pub const m_ConeCutoff: usize = 0xF; // int8
            }
            // Parent: None
            // Fields count: 12
            pub mod CMaterialDrawDescriptor {
                pub const m_nPrimitiveType: usize = 0x0; // RenderPrimitiveType_t
                pub const m_nBaseVertex: usize = 0x4; // int32
                pub const m_nVertexCount: usize = 0x8; // int32
                pub const m_nStartIndex: usize = 0xC; // int32
                pub const m_nIndexCount: usize = 0x10; // int32
                pub const m_flUvDensity: usize = 0x14; // float32
                pub const m_vTintColor: usize = 0x18; // 
                pub const m_flAlpha: usize = 0x24; // float32
                pub const m_nFirstMeshlet: usize = 0x2C; // uint32
                pub const m_nNumMeshlets: usize = 0x30; // uint16
                pub const m_indexBuffer: usize = 0xB8; // CRenderBufferBinding
                pub const m_material: usize = 0xE0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: None
            // Fields count: 2
            pub mod CMeshletDescriptor {
                pub const m_PackedAABB: usize = 0x0; // PackedAABB_t
                pub const m_CullingData: usize = 0x8; // CDrawCullingData
            }
            // Parent: None
            // Fields count: 6
            pub mod CSceneObjectData {
                pub const m_vMinBounds: usize = 0x0; // 
                pub const m_vMaxBounds: usize = 0xC; // 
                pub const m_drawCalls: usize = 0x18; // CUtlVector<CMaterialDrawDescriptor>
                pub const m_drawBounds: usize = 0x30; // CUtlVector<AABB_t>
                pub const m_meshlets: usize = 0x48; // CUtlVector<CMeshletDescriptor>
                pub const m_vTintColor: usize = 0x60; // Vector4D
            }
            // Parent: None
            // Fields count: 8
            pub mod CAttachment {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_influenceNames: usize = 0x8; // CUtlString[3]
                pub const m_vInfluenceRotations: usize = 0x20; // Quaternion[3]
                pub const m_vInfluenceOffsets: usize = 0x50; // Vector[3]
                pub const m_influenceWeights: usize = 0x74; // float32[3]
                pub const m_bInfluenceRootTransform: usize = 0x80; // bool[3]
                pub const m_nInfluences: usize = 0x83; // uint8
                pub const m_bIgnoreRotation: usize = 0x84; // bool
            }
            // Parent: None
            // Fields count: 13
            pub mod CHitBox {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_sSurfaceProperty: usize = 0x8; // CUtlString
                pub const m_sBoneName: usize = 0x10; // CUtlString
                pub const m_vMinBounds: usize = 0x18; // 
                pub const m_vMaxBounds: usize = 0x24; // 
                pub const m_flShapeRadius: usize = 0x30; // float32
                pub const m_nBoneNameHash: usize = 0x34; // uint32
                pub const m_nGroupId: usize = 0x38; // int32
                pub const m_nShapeType: usize = 0x3C; // uint8
                pub const m_bTranslationOnly: usize = 0x3D; // bool
                pub const m_CRC: usize = 0x40; // uint32
                pub const m_cRenderColor: usize = 0x44; // Color
                pub const m_nHitBoxIndex: usize = 0x48; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod CHitBoxSet {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_nNameHash: usize = 0x8; // uint32
                pub const m_HitBoxes: usize = 0x10; // CUtlVector<CHitBox>
                pub const m_SourceFilename: usize = 0x28; // CUtlString
            }
            // Parent: None
            // Fields count: 1
            pub mod CHitBoxSetList {
                pub const m_HitBoxSets: usize = 0x0; // CUtlVector<CHitBoxSet>
            }
            // Parent: None
            // Fields count: 4
            pub mod DynamicMeshDeformParams_t {
                pub const m_flTensionCompressScale: usize = 0x0; // float32
                pub const m_flTensionStretchScale: usize = 0x4; // float32
                pub const m_bRecomputeSmoothNormalsAfterAnimation: usize = 0x8; // bool
                pub const m_bComputeDynamicMeshTensionAfterAnimation: usize = 0x9; // bool
            }
            // Parent: None
            // Fields count: 7
            pub mod RenderHairStrandInfo_t {
                pub const m_nGuideIdx: usize = 0x0; // uint32[3]
                pub const m_nBaseTriIdx: usize = 0xC; // uint32
                pub const m_vGuideBarycentric: usize = 0x10; // Vector2D
                pub const m_vBaseBarycentric: usize = 0x18; // Vector2D
                pub const m_vRootOffset_flLengthScale: usize = 0x20; // uint16[4]
                pub const m_nPackedBaseMeshUv: usize = 0x28; // uint32
                pub const m_nPad: usize = 0x2C; // uint32
            }
            // Parent: None
            // Fields count: 7
            pub mod CRenderGroom {
                pub const m_nSegmentsPerHairStrand: usize = 0x0; // int32
                pub const m_nGuideHairCount: usize = 0x4; // int32
                pub const m_nHairCount: usize = 0x8; // int32
                pub const m_nGroomGroupID: usize = 0xC; // int32
                pub const m_nAttachBoneIdx: usize = 0x10; // int32
                pub const m_hairInfoBufferData: usize = 0x18; // CUtlBinaryBlock
                pub const m_hairs: usize = 0x30; // CUtlVector<RenderHairStrandInfo_t>
            }
            // Parent: None
            // Fields count: 5
            pub mod CRenderMesh {
                pub const m_sceneObjects: usize = 0x10; // CUtlVectorFixedGrowable<CSceneObjectData>
                pub const m_constraints: usize = 0xA0; // CUtlVector<CBaseConstraint*>
                pub const m_skeleton: usize = 0xB8; // CRenderSkeleton
                pub const m_meshDeformParams: usize = 0x1E0; // DynamicMeshDeformParams_t
                pub const m_pGroomData: usize = 0x1F0; // CRenderGroom*
            }
            // Parent: None
            // Fields count: 6
            pub mod CConstraintTarget {
                pub const m_qOffset: usize = 0x20; // Quaternion
                pub const m_vOffset: usize = 0x30; // 
                pub const m_nBoneHash: usize = 0x3C; // uint32
                pub const m_sName: usize = 0x40; // CUtlString
                pub const m_flWeight: usize = 0x48; // float32
                pub const m_bIsAttachment: usize = 0x59; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod CConstraintSlave {
                pub const m_qBaseOrientation: usize = 0x0; // Quaternion
                pub const m_vBasePosition: usize = 0x10; // 
                pub const m_nBoneHash: usize = 0x1C; // uint32
                pub const m_flWeight: usize = 0x20; // float32
                pub const m_sName: usize = 0x28; // CUtlString
            }
            // Parent: None
            // Fields count: 0
            pub mod CBoneConstraintBase {
            }
            // Parent: CBoneConstraintBase
            // Fields count: 4
            pub mod CBaseConstraint {
                pub const m_name: usize = 0x28; // CUtlString
                pub const m_vUpVector: usize = 0x30; // 
                pub const m_slaves: usize = 0x40; // CUtlVector<CConstraintSlave>
                pub const m_targets: usize = 0x58; // CUtlVector<CConstraintTarget>
            }
            // Parent: CBaseConstraint
            // Fields count: 0
            pub mod CPointConstraint {
            }
            // Parent: CBaseConstraint
            // Fields count: 0
            pub mod COrientConstraint {
            }
            // Parent: CBaseConstraint
            // Fields count: 2
            pub mod CAimConstraint {
                pub const m_qAimOffset: usize = 0x70; // Quaternion
                pub const m_nUpType: usize = 0x80; // uint32
            }
            // Parent: CBaseConstraint
            // Fields count: 3
            pub mod CTwistConstraint {
                pub const m_bInverse: usize = 0x70; // bool
                pub const m_qParentBindRotation: usize = 0x80; // Quaternion
                pub const m_qChildBindRotation: usize = 0x90; // Quaternion
            }
            // Parent: CBaseConstraint
            // Fields count: 2
            pub mod CTiltTwistConstraint {
                pub const m_nTargetAxis: usize = 0x70; // int32
                pub const m_nSlaveAxis: usize = 0x74; // int32
            }
            // Parent: CBaseConstraint
            // Fields count: 4
            pub mod CMorphConstraint {
                pub const m_sTargetMorph: usize = 0x70; // CUtlString
                pub const m_nSlaveChannel: usize = 0x78; // int32
                pub const m_flMin: usize = 0x7C; // float32
                pub const m_flMax: usize = 0x80; // float32
            }
            // Parent: CBaseConstraint
            // Fields count: 0
            pub mod CParentConstraint {
            }
            // Parent: CBoneConstraintBase
            // Fields count: 5
            pub mod CBoneConstraintPoseSpaceMorph {
                pub const m_sBoneName: usize = 0x28; // CUtlString
                pub const m_sAttachmentName: usize = 0x30; // CUtlString
                pub const m_outputMorph: usize = 0x38; // CUtlVector<CUtlString>
                pub const m_inputList: usize = 0x50; // CUtlVector<CBoneConstraintPoseSpaceMorph::Input_t>
                pub const m_bClamp: usize = 0x68; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CBoneConstraintPoseSpaceMorph__Input_t {
                pub const m_inputValue: usize = 0x0; // 
                pub const m_outputWeightList: usize = 0x10; // CUtlVector<float32>
            }
            // Parent: CBaseConstraint
            // Fields count: 1
            pub mod CBoneConstraintPoseSpaceBone {
                pub const m_inputList: usize = 0x70; // CUtlVector<CBoneConstraintPoseSpaceBone::Input_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod CBoneConstraintPoseSpaceBone__Input_t {
                pub const m_inputValue: usize = 0x0; // 
                pub const m_outputTransformList: usize = 0x10; // CUtlVector<CTransform>
            }
            // Parent: CBoneConstraintBase
            // Fields count: 4
            pub mod CBoneConstraintDotToMorph {
                pub const m_sBoneName: usize = 0x28; // CUtlString
                pub const m_sTargetBoneName: usize = 0x30; // CUtlString
                pub const m_sMorphChannelName: usize = 0x38; // CUtlString
                pub const m_flRemap: usize = 0x40; // float32[4]
            }
            // Parent: None
            // Fields count: 2
            pub mod CFlexOp {
                pub const m_OpCode: usize = 0x0; // FlexOpCode_t
                pub const m_Data: usize = 0x4; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CFlexRule {
                pub const m_nFlex: usize = 0x0; // int32
                pub const m_FlexOps: usize = 0x8; // CUtlVector<CFlexOp>
            }
            // Parent: None
            // Fields count: 1
            pub mod CFlexDesc {
                pub const m_szFacs: usize = 0x0; // CUtlString
            }
            // Parent: None
            // Fields count: 4
            pub mod CFlexController {
                pub const m_szName: usize = 0x0; // CUtlString
                pub const m_szType: usize = 0x8; // CUtlString
                pub const min: usize = 0x10; // float32
                pub const max: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod CMorphBundleData {
                pub const m_flULeftSrc: usize = 0x0; // float32
                pub const m_flVTopSrc: usize = 0x4; // float32
                pub const m_offsets: usize = 0x8; // CUtlVector<float32>
                pub const m_ranges: usize = 0x20; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 5
            pub mod CMorphRectData {
                pub const m_nXLeftDst: usize = 0x0; // int16
                pub const m_nYTopDst: usize = 0x2; // int16
                pub const m_flUWidthSrc: usize = 0x4; // float32
                pub const m_flVHeightSrc: usize = 0x8; // float32
                pub const m_bundleDatas: usize = 0x10; // CUtlVector<CMorphBundleData>
            }
            // Parent: None
            // Fields count: 2
            pub mod CMorphData {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_morphRectDatas: usize = 0x8; // CUtlVector<CMorphRectData>
            }
            // Parent: None
            // Fields count: 8
            pub mod CMorphSetData {
                pub const m_nWidth: usize = 0x10; // int32
                pub const m_nHeight: usize = 0x14; // int32
                pub const m_bundleTypes: usize = 0x18; // CUtlVector<MorphBundleType_t>
                pub const m_morphDatas: usize = 0x30; // CUtlVector<CMorphData>
                pub const m_pTextureAtlas: usize = 0x48; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_FlexDesc: usize = 0x50; // CUtlVector<CFlexDesc>
                pub const m_FlexControllers: usize = 0x68; // CUtlVector<CFlexController>
                pub const m_FlexRules: usize = 0x80; // CUtlVector<CFlexRule>
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimFoot {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_vBallOffset: usize = 0x8; // 
                pub const m_vHeelOffset: usize = 0x14; // 
                pub const m_ankleBoneIndex: usize = 0x20; // int32
                pub const m_toeBoneIndex: usize = 0x24; // int32
            }
            // Parent: None
            // Fields count: 8
            pub mod CAnimSkeleton {
                pub const m_localSpaceTransforms: usize = 0x10; // CUtlVector<CTransform>
                pub const m_modelSpaceTransforms: usize = 0x28; // CUtlVector<CTransform>
                pub const m_boneNames: usize = 0x40; // CUtlVector<CUtlString>
                pub const m_children: usize = 0x58; // CUtlVector<CUtlVector<int32>>
                pub const m_parents: usize = 0x70; // CUtlVector<int32>
                pub const m_feet: usize = 0x88; // CUtlVector<CAnimFoot>
                pub const m_morphNames: usize = 0xA0; // CUtlVector<CUtlString>
                pub const m_lodBoneCounts: usize = 0xB8; // CUtlVector<int32>
            }
            // Parent: None
            // Fields count: 9
            pub mod CFootDefinition {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_ankleBoneName: usize = 0x8; // CUtlString
                pub const m_toeBoneName: usize = 0x10; // CUtlString
                pub const m_vBallOffset: usize = 0x18; // 
                pub const m_vHeelOffset: usize = 0x24; // 
                pub const m_flFootLength: usize = 0x30; // float32
                pub const m_flBindPoseDirectionMS: usize = 0x34; // float32
                pub const m_flTraceHeight: usize = 0x38; // float32
                pub const m_flTraceRadius: usize = 0x3C; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CCycleBase {
                pub const m_flCycle: usize = 0x0; // float32
            }
            // Parent: CCycleBase
            // Fields count: 0
            pub mod CAnimCycle {
            }
            // Parent: CCycleBase
            // Fields count: 0
            pub mod CFootCycle {
            }
            // Parent: None
            // Fields count: 9
            pub mod CFootCycleDefinition {
                pub const m_vStancePositionMS: usize = 0x0; // 
                pub const m_vMidpointPositionMS: usize = 0xC; // 
                pub const m_flStanceDirectionMS: usize = 0x18; // float32
                pub const m_vToStrideStartPos: usize = 0x1C; // 
                pub const m_stanceCycle: usize = 0x28; // CAnimCycle
                pub const m_footLiftCycle: usize = 0x2C; // CFootCycle
                pub const m_footOffCycle: usize = 0x30; // CFootCycle
                pub const m_footStrikeCycle: usize = 0x34; // CFootCycle
                pub const m_footLandCycle: usize = 0x38; // CFootCycle
            }
            // Parent: None
            // Fields count: 3
            pub mod CFootTrajectory {
                pub const m_vOffset: usize = 0x0; // 
                pub const m_flRotationOffset: usize = 0xC; // float32
                pub const m_flProgression: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CFootTrajectories {
                pub const m_trajectories: usize = 0x0; // CUtlVector<CFootTrajectory>
            }
            // Parent: None
            // Fields count: 2
            pub mod CFootStride {
                pub const m_definition: usize = 0x0; // CFootCycleDefinition
                pub const m_trajectories: usize = 0x40; // CFootTrajectories
            }
            // Parent: None
            // Fields count: 3
            pub mod CFootMotion {
                pub const m_strides: usize = 0x0; // CUtlVector<CFootStride>
                pub const m_name: usize = 0x18; // CUtlString
                pub const m_bAdditive: usize = 0x20; // bool
            }
            // Parent: None
            // Fields count: 10
            pub mod SkeletonAnimCapture_t {
                pub const m_nEntIndex: usize = 0x0; // CEntityIndex
                pub const m_nEntParent: usize = 0x4; // CEntityIndex
                pub const m_ImportedCollision: usize = 0x8; // CUtlVector<CEntityIndex>
                pub const m_ModelName: usize = 0x20; // CUtlString
                pub const m_CaptureName: usize = 0x28; // CUtlString
                pub const m_ModelBindPose: usize = 0x30; // CUtlVector<SkeletonAnimCapture_t::Bone_t>
                pub const m_FeModelInitPose: usize = 0x48; // CUtlVector<SkeletonAnimCapture_t::Bone_t>
                pub const m_nFlexControllers: usize = 0x60; // int32
                pub const m_bPredicted: usize = 0x64; // bool
                pub const m_Frames: usize = 0xA8; // CUtlVector<SkeletonAnimCapture_t::Frame_t>
            }
            // Parent: None
            // Fields count: 3
            pub mod SkeletonAnimCapture_t__Bone_t {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_BindPose: usize = 0x10; // CTransform
                pub const m_nParent: usize = 0x30; // int32
            }
            // Parent: None
            // Fields count: 8
            pub mod SkeletonAnimCapture_t__FrameStamp_t {
                pub const m_flTime: usize = 0x0; // float32
                pub const m_flEntitySimTime: usize = 0x4; // float32
                pub const m_bTeleportTick: usize = 0x8; // bool
                pub const m_bPredicted: usize = 0x9; // bool
                pub const m_flCurTime: usize = 0xC; // float32
                pub const m_flRealTime: usize = 0x10; // float32
                pub const m_nFrameCount: usize = 0x14; // int32
                pub const m_nTickCount: usize = 0x18; // int32
            }
            // Parent: None
            // Fields count: 9
            pub mod SkeletonAnimCapture_t__Frame_t {
                pub const m_flTime: usize = 0x0; // float32
                pub const m_Stamp: usize = 0x4; // SkeletonAnimCapture_t::FrameStamp_t
                pub const m_Transform: usize = 0x20; // CTransform
                pub const m_bTeleport: usize = 0x40; // bool
                pub const m_CompositeBones: usize = 0x48; // CUtlVector<CTransform>
                pub const m_SimStateBones: usize = 0x60; // CUtlVector<CTransform>
                pub const m_FeModelAnims: usize = 0x78; // CUtlVector<CTransform>
                pub const m_FeModelPos: usize = 0x90; // CUtlVector<VectorAligned>
                pub const m_FlexControllerWeights: usize = 0xA8; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 2
            pub mod SkeletonAnimCapture_t__Camera_t {
                pub const m_tmCamera: usize = 0x0; // CTransform
                pub const m_flTime: usize = 0x20; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod SkeletonDemoDb_t {
                pub const m_AnimCaptures: usize = 0x0; // CUtlVector<SkeletonAnimCapture_t*>
                pub const m_CameraTrack: usize = 0x18; // CUtlVector<SkeletonAnimCapture_t::Camera_t>
                pub const m_flRecordingTime: usize = 0x30; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CNmBoneMask {
                pub const m_ID: usize = 0x0; // CGlobalSymbol
                pub const m_weightInfo: usize = 0x8; // CNmBoneMask::WeightInfo_t
                pub const m_weights: usize = 0x18; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 9
            pub mod CNmClip {
                pub const m_skeleton: usize = 0x0; // CStrongHandle<InfoForResourceTypeCNmSkeleton>
                pub const m_nNumFrames: usize = 0x8; // uint32
                pub const m_flDuration: usize = 0xC; // float32
                pub const m_compressedPoseData: usize = 0x10; // CUtlBinaryBlock
                pub const m_trackCompressionSettings: usize = 0x28; // CUtlVector<NmCompressionSettings_t>
                pub const m_compressedPoseOffsets: usize = 0x40; // CUtlVector<uint32>
                pub const m_syncTrack: usize = 0xA0; // CNmSyncTrack
                pub const m_rootMotion: usize = 0x150; // CNmRootMotionData
                pub const m_bIsAdditive: usize = 0x1A0; // bool
            }
            // Parent: None
            // Fields count: 8
            pub mod NmCompressionSettings_t {
                pub const m_translationRangeX: usize = 0x0; // NmCompressionSettings_t::QuantizationRange_t
                pub const m_translationRangeY: usize = 0x8; // NmCompressionSettings_t::QuantizationRange_t
                pub const m_translationRangeZ: usize = 0x10; // NmCompressionSettings_t::QuantizationRange_t
                pub const m_scaleRange: usize = 0x18; // NmCompressionSettings_t::QuantizationRange_t
                pub const m_constantRotation: usize = 0x20; // Quaternion
                pub const m_bIsRotationStatic: usize = 0x30; // bool
                pub const m_bIsTranslationStatic: usize = 0x31; // bool
                pub const m_bIsScaleStatic: usize = 0x32; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod NmCompressionSettings_t__QuantizationRange_t {
                pub const m_flRangeStart: usize = 0x0; // float32
                pub const m_flRangeLength: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmEvent {
                pub const m_flStartTime: usize = 0x8; // float32
                pub const m_flDuration: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod CNmRootMotionData {
                pub const m_transforms: usize = 0x0; // CUtlVector<CTransform>
                pub const m_nNumFrames: usize = 0x18; // int32
                pub const m_flAverageLinearVelocity: usize = 0x1C; // float32
                pub const m_flAverageAngularVelocityRadians: usize = 0x20; // float32
                pub const m_totalDelta: usize = 0x30; // CTransform
            }
            // Parent: None
            // Fields count: 7
            pub mod CNmSkeleton {
                pub const m_ID: usize = 0x0; // CGlobalSymbol
                pub const m_boneIDs: usize = 0x8; // CUtlLeanVector<CGlobalSymbol>
                pub const m_parentIndices: usize = 0x18; // CUtlVector<int32>
                pub const m_parentSpaceReferencePose: usize = 0x30; // CUtlVector<CTransform>
                pub const m_modelSpaceReferencePose: usize = 0x48; // CUtlVector<CTransform>
                pub const m_numBonesToSampleAtLowLOD: usize = 0x60; // int32
                pub const m_boneMasks: usize = 0x68; // CUtlLeanVector<CNmBoneMask>
            }
            // Parent: None
            // Fields count: 2
            pub mod NmSyncTrackTime_t {
                pub const m_nEventIdx: usize = 0x0; // int32
                pub const m_percentageThrough: usize = 0x4; // NmPercent_t
            }
            // Parent: None
            // Fields count: 2
            pub mod NmSyncTrackTimeRange_t {
                pub const m_startTime: usize = 0x0; // NmSyncTrackTime_t
                pub const m_endTime: usize = 0x8; // NmSyncTrackTime_t
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmSyncTrack {
                pub const m_syncEvents: usize = 0x0; // CUtlLeanVectorFixedGrowable<CNmSyncTrack::Event_t>
                pub const m_nStartEventOffset: usize = 0xA8; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmSyncTrack__EventMarker_t {
                pub const m_startTime: usize = 0x0; // NmPercent_t
                pub const m_ID: usize = 0x8; // CGlobalSymbol
            }
            // Parent: None
            // Fields count: 3
            pub mod CNmSyncTrack__Event_t {
                pub const m_ID: usize = 0x0; // CGlobalSymbol
                pub const m_startTime: usize = 0x8; // NmPercent_t
                pub const m_duration: usize = 0xC; // NmPercent_t
            }
            // Parent: None
            // Fields count: 1
            pub mod NmPercent_t {
                pub const m_flValue: usize = 0x0; // float32
            }
            // Parent: CNmEvent
            // Fields count: 0
            pub mod CNmLegacyEvent {
            }
            // Parent: CNmEvent
            // Fields count: 1
            pub mod CNmFootEvent {
                pub const m_phase: usize = 0x10; // NmFootPhase_t
            }
            // Parent: CNmEvent
            // Fields count: 1
            pub mod CNmIDEvent {
                pub const m_ID: usize = 0x10; // CGlobalSymbol
            }
            // Parent: CNmEvent
            // Fields count: 2
            pub mod CNmTransitionEvent {
                pub const m_rule: usize = 0x10; // NmTransitionRule_t
                pub const m_ID: usize = 0x18; // CGlobalSymbol
            }
            // Parent: CNmEvent
            // Fields count: 1
            pub mod CNmFrameSnapEvent {
                pub const m_frameSnapMode: usize = 0x10; // NmFrameSnapEventMode_t
            }
            // Parent: None
            // Fields count: 3
            pub mod CNmGraphDataSet {
                pub const m_variationID: usize = 0x0; // CGlobalSymbol
                pub const m_skeleton: usize = 0x8; // CStrongHandle<InfoForResourceTypeCNmSkeleton>
                pub const m_resources: usize = 0x10; // CUtlVector<CStrongHandleVoid>
            }
            // Parent: None
            // Fields count: 10
            pub mod CNmGraph {
                pub const m_persistentNodeIndices: usize = 0x0; // CUtlVector<int16>
                pub const m_instanceNodeStartOffsets: usize = 0x18; // CUtlVector<uint32>
                pub const m_instanceRequiredMemory: usize = 0x30; // uint32
                pub const m_instanceRequiredAlignment: usize = 0x34; // uint32
                pub const m_rootNodeIdx: usize = 0x38; // int16
                pub const m_controlParameterIDs: usize = 0x40; // CUtlVector<CGlobalSymbol>
                pub const m_virtualParameterIDs: usize = 0x58; // CUtlVector<CGlobalSymbol>
                pub const m_virtualParameterNodeIndices: usize = 0x70; // CUtlVector<int16>
                pub const m_childGraphSlots: usize = 0x88; // CUtlVector<CNmGraph::ChildGraphSlot_t>
                pub const m_externalGraphSlots: usize = 0xA0; // CUtlVector<CNmGraph::ExternalGraphSlot_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmGraph__ExternalGraphSlot_t {
                pub const m_nNodeIdx: usize = 0x0; // int16
                pub const m_slotID: usize = 0x8; // CGlobalSymbol
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmGraph__ChildGraphSlot_t {
                pub const m_nNodeIdx: usize = 0x0; // int16
                pub const m_dataSlotIdx: usize = 0x2; // int16
            }
            // Parent: None
            // Fields count: 2
            pub mod CNmGraphVariation {
                pub const m_graph: usize = 0x0; // CStrongHandle<InfoForResourceTypeCNmGraph>
                pub const m_dataSet: usize = 0x8; // CStrongHandle<InfoForResourceTypeCNmGraphDataSet>
            }
            // Parent: None
            // Fields count: 2
            pub mod BoneDemoCaptureSettings_t {
                pub const m_boneName: usize = 0x0; // CUtlString
                pub const m_flChainLength: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod IKDemoCaptureSettings_t {
                pub const m_parentBoneName: usize = 0x0; // CUtlString
                pub const m_eMode: usize = 0x8; // IKChannelMode
                pub const m_ikChainName: usize = 0x10; // CUtlString
                pub const m_oneBoneStart: usize = 0x18; // CUtlString
                pub const m_oneBoneEnd: usize = 0x20; // CUtlString
            }
            // Parent: None
            // Fields count: 16
            pub mod CAnimDemoCaptureSettings {
                pub const m_rangeBoneChainLength: usize = 0x0; // Vector2D
                pub const m_rangeMaxSplineErrorRotation: usize = 0x8; // Vector2D
                pub const m_flMaxSplineErrorTranslation: usize = 0x10; // float32
                pub const m_flMaxSplineErrorScale: usize = 0x14; // float32
                pub const m_flIkRotation_MaxSplineError: usize = 0x18; // float32
                pub const m_flIkTranslation_MaxSplineError: usize = 0x1C; // float32
                pub const m_flMaxQuantizationErrorRotation: usize = 0x20; // float32
                pub const m_flMaxQuantizationErrorTranslation: usize = 0x24; // float32
                pub const m_flMaxQuantizationErrorScale: usize = 0x28; // float32
                pub const m_flIkRotation_MaxQuantizationError: usize = 0x2C; // float32
                pub const m_flIkTranslation_MaxQuantizationError: usize = 0x30; // float32
                pub const m_baseSequence: usize = 0x38; // CUtlString
                pub const m_nBaseSequenceFrame: usize = 0x40; // int32
                pub const m_boneSelectionMode: usize = 0x44; // EDemoBoneSelectionMode
                pub const m_bones: usize = 0x48; // CUtlVector<BoneDemoCaptureSettings_t>
                pub const m_ikChains: usize = 0x60; // CUtlVector<IKDemoCaptureSettings_t>
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimReplayFrame {
                pub const m_inputDataBlocks: usize = 0x10; // CUtlVector<CUtlBinaryBlock>
                pub const m_instanceData: usize = 0x28; // CUtlBinaryBlock
                pub const m_startingLocalToWorldTransform: usize = 0x40; // CTransform
                pub const m_localToWorldTransform: usize = 0x60; // CTransform
                pub const m_timeStamp: usize = 0x80; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod CAnimGraphDebugReplay {
                pub const m_animGraphFileName: usize = 0x40; // CUtlString
                pub const m_frameList: usize = 0x48; // CUtlVector<CSmartPtr<CAnimReplayFrame>>
                pub const m_startIndex: usize = 0x60; // int32
                pub const m_writeIndex: usize = 0x64; // int32
                pub const m_frameCount: usize = 0x68; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimGraphModelBinding {
                pub const m_modelName: usize = 0x8; // CUtlString
                pub const m_pSharedData: usize = 0x10; // CSmartPtr<CAnimUpdateSharedData>
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimInputDamping {
                pub const m_speedFunction: usize = 0x8; // DampingSpeedFunction
                pub const m_fSpeedScale: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimParamHandle {
                pub const m_type: usize = 0x0; // AnimParamType_t
                pub const m_index: usize = 0x1; // uint8
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimParamHandleMap {
                pub const m_list: usize = 0x0; // CUtlHashtable<uint16,int16>
            }
            // Parent: None
            // Fields count: 6
            pub mod CAnimParameterManagerUpdater {
                pub const m_parameters: usize = 0x18; // CUtlVector<CSmartPtr<CAnimParameterBase>>
                pub const m_idToIndexMap: usize = 0x30; // CUtlHashtable<AnimParamID,int32>
                pub const m_nameToIndexMap: usize = 0x50; // CUtlHashtable<CUtlString,int32>
                pub const m_indexToHandle: usize = 0x70; // CUtlVector<CAnimParamHandle>
                pub const m_autoResetParams: usize = 0x88; // CUtlVector<CUtlPair<CAnimParamHandle,CAnimVariant>>
                pub const m_autoResetMap: usize = 0xA0; // CUtlHashtable<CAnimParamHandle,int16>
            }
            // Parent: None
            // Fields count: 10
            pub mod CAnimUpdateSharedData {
                pub const m_nodes: usize = 0x10; // CUtlVector<CSmartPtr<CAnimUpdateNodeBase>>
                pub const m_nodeIndexMap: usize = 0x28; // CUtlHashtable<CAnimNodePath,int32>
                pub const m_components: usize = 0x48; // CUtlVector<CSmartPtr<CAnimComponentUpdater>>
                pub const m_pParamListUpdater: usize = 0x60; // CSmartPtr<CAnimParameterManagerUpdater>
                pub const m_pTagManagerUpdater: usize = 0x68; // CSmartPtr<CAnimTagManagerUpdater>
                pub const m_scriptManager: usize = 0x70; // CSmartPtr<CAnimScriptManager>
                pub const m_settings: usize = 0x78; // CAnimGraphSettingsManager
                pub const m_pStaticPoseCache: usize = 0xA8; // CSmartPtr<CStaticPoseCacheBuilder>
                pub const m_pSkeleton: usize = 0xB0; // CSmartPtr<CAnimSkeleton>
                pub const m_rootNodePath: usize = 0xB8; // CAnimNodePath
            }
            // Parent: None
            // Fields count: 2
            pub mod CBlendCurve {
                pub const m_flControlPoint1: usize = 0x0; // float32
                pub const m_flControlPoint2: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod ParamSpanSample_t {
                pub const m_value: usize = 0x0; // CAnimVariant
                pub const m_flCycle: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod ParamSpan_t {
                pub const m_samples: usize = 0x0; // CUtlVector<ParamSpanSample_t>
                pub const m_hParam: usize = 0x18; // CAnimParamHandle
                pub const m_eParamType: usize = 0x1A; // AnimParamType_t
                pub const m_flStartCycle: usize = 0x1C; // float32
                pub const m_flEndCycle: usize = 0x20; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CParamSpanUpdater {
                pub const m_spans: usize = 0x0; // CUtlVector<ParamSpan_t>
            }
            // Parent: None
            // Fields count: 0
            pub mod CAnimGraphSettingsGroup {
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimGraphSettingsManager {
                pub const m_settingsGroups: usize = 0x18; // CUtlVector<CSmartPtr<CAnimGraphSettingsGroup>>
            }
            // Parent: None
            // Fields count: 4
            pub mod CCachedPose {
                pub const m_transforms: usize = 0x8; // CUtlVector<CTransform>
                pub const m_morphWeights: usize = 0x20; // CUtlVector<float32>
                pub const m_hSequence: usize = 0x38; // HSequence
                pub const m_flCycle: usize = 0x3C; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CStaticPoseCache {
                pub const m_poses: usize = 0x10; // CUtlVector<CCachedPose>
                pub const m_nBoneCount: usize = 0x28; // int32
                pub const m_nMorphCount: usize = 0x2C; // int32
            }
            // Parent: CStaticPoseCache
            // Fields count: 0
            pub mod CStaticPoseCacheBuilder {
            }
            // Parent: None
            // Fields count: 0
            pub mod CAnimActionUpdater {
            }
            // Parent: CAnimActionUpdater
            // Fields count: 2
            pub mod CEmitTagActionUpdater {
                pub const m_nTagIndex: usize = 0x18; // int32
                pub const m_bIsZeroDuration: usize = 0x1C; // bool
            }
            // Parent: CAnimActionUpdater
            // Fields count: 2
            pub mod CSetParameterActionUpdater {
                pub const m_hParam: usize = 0x18; // CAnimParamHandle
                pub const m_value: usize = 0x1A; // CAnimVariant
            }
            // Parent: CAnimActionUpdater
            // Fields count: 2
            pub mod CToggleComponentActionUpdater {
                pub const m_componentID: usize = 0x18; // AnimComponentID
                pub const m_bSetEnabled: usize = 0x1C; // bool
            }
            // Parent: CAnimActionUpdater
            // Fields count: 3
            pub mod CExpressionActionUpdater {
                pub const m_hParam: usize = 0x18; // CAnimParamHandle
                pub const m_eParamType: usize = 0x1A; // AnimParamType_t
                pub const m_hScript: usize = 0x1C; // AnimScriptHandle
            }
            // Parent: None
            // Fields count: 4
            pub mod CAnimTagBase {
                pub const m_name: usize = 0x18; // CGlobalSymbol
                pub const m_group: usize = 0x20; // CGlobalSymbol
                pub const m_tagID: usize = 0x28; // AnimTagID
                pub const m_bIsReferenced: usize = 0x40; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimTagManagerUpdater {
                pub const m_tags: usize = 0x18; // CUtlVector<CSmartPtr<CAnimTagBase>>
            }
            // Parent: CAnimTagBase
            // Fields count: 7
            pub mod CAudioAnimTag {
                pub const m_clipName: usize = 0x50; // CUtlString
                pub const m_attachmentName: usize = 0x58; // CUtlString
                pub const m_flVolume: usize = 0x60; // float32
                pub const m_bStopWhenTagEnds: usize = 0x64; // bool
                pub const m_bStopWhenGraphEnds: usize = 0x65; // bool
                pub const m_bPlayOnServer: usize = 0x66; // bool
                pub const m_bPlayOnClient: usize = 0x67; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CBodyGroupSetting {
                pub const m_BodyGroupName: usize = 0x0; // CUtlString
                pub const m_nBodyGroupOption: usize = 0x8; // int32
            }
            // Parent: CAnimTagBase
            // Fields count: 2
            pub mod CBodyGroupAnimTag {
                pub const m_nPriority: usize = 0x50; // int32
                pub const m_bodyGroupSettings: usize = 0x58; // CUtlVector<CBodyGroupSetting>
            }
            // Parent: CAnimTagBase
            // Fields count: 4
            pub mod CClothSettingsAnimTag {
                pub const m_flStiffness: usize = 0x50; // float32
                pub const m_flEaseIn: usize = 0x54; // float32
                pub const m_flEaseOut: usize = 0x58; // float32
                pub const m_nVertexSet: usize = 0x60; // CUtlString
            }
            // Parent: CAnimTagBase
            // Fields count: 1
            pub mod CFootFallAnimTag {
                pub const m_foot: usize = 0x50; // FootFallTagFoot_t
            }
            // Parent: CAnimTagBase
            // Fields count: 4
            pub mod CFootstepLandedAnimTag {
                pub const m_FootstepType: usize = 0x50; // FootstepLandedFootSoundType_t
                pub const m_OverrideSoundName: usize = 0x58; // CUtlString
                pub const m_DebugAnimSourceString: usize = 0x60; // CUtlString
                pub const m_BoneName: usize = 0x68; // CUtlString
            }
            // Parent: CAnimTagBase
            // Fields count: 4
            pub mod CMaterialAttributeAnimTag {
                pub const m_AttributeName: usize = 0x50; // CUtlString
                pub const m_AttributeType: usize = 0x58; // MatterialAttributeTagType_t
                pub const m_flValue: usize = 0x5C; // float32
                pub const m_Color: usize = 0x60; // Color
            }
            // Parent: CAnimTagBase
            // Fields count: 10
            pub mod CParticleAnimTag {
                pub const m_hParticleSystem: usize = 0x50; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_particleSystemName: usize = 0x58; // CUtlString
                pub const m_configName: usize = 0x60; // CUtlString
                pub const m_bDetachFromOwner: usize = 0x68; // bool
                pub const m_bStopWhenTagEnds: usize = 0x69; // bool
                pub const m_bTagEndStopIsInstant: usize = 0x6A; // bool
                pub const m_attachmentName: usize = 0x70; // CUtlString
                pub const m_attachmentType: usize = 0x78; // ParticleAttachment_t
                pub const m_attachmentCP1Name: usize = 0x80; // CUtlString
                pub const m_attachmentCP1Type: usize = 0x88; // ParticleAttachment_t
            }
            // Parent: CAnimTagBase
            // Fields count: 6
            pub mod CRagdollAnimTag {
                pub const m_nPoseControl: usize = 0x50; // AnimPoseControl
                pub const m_flFrequency: usize = 0x54; // float32
                pub const m_flDampingRatio: usize = 0x58; // float32
                pub const m_flDecayDuration: usize = 0x5C; // float32
                pub const m_flDecayBias: usize = 0x60; // float32
                pub const m_bDestroy: usize = 0x64; // bool
            }
            // Parent: CAnimTagBase
            // Fields count: 1
            pub mod CSequenceFinishedAnimTag {
                pub const m_sequenceName: usize = 0x50; // CUtlString
            }
            // Parent: CAnimTagBase
            // Fields count: 0
            pub mod CStringAnimTag {
            }
            // Parent: CAnimTagBase
            // Fields count: 0
            pub mod CTaskStatusAnimTag {
            }
            // Parent: None
            // Fields count: 4
            pub mod CAnimComponentUpdater {
                pub const m_name: usize = 0x18; // CUtlString
                pub const m_id: usize = 0x20; // AnimComponentID
                pub const m_networkMode: usize = 0x24; // AnimNodeNetworkMode
                pub const m_bStartEnabled: usize = 0x28; // bool
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CAnimScriptComponentUpdater {
                pub const m_hScript: usize = 0x30; // AnimScriptHandle
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CCPPScriptComponentUpdater {
                pub const m_scriptsToRun: usize = 0x30; // CUtlVector<CGlobalSymbol>
            }
            // Parent: None
            // Fields count: 3
            pub mod CDampedValueUpdateItem {
                pub const m_damping: usize = 0x0; // CAnimInputDamping
                pub const m_hParamIn: usize = 0x18; // CAnimParamHandle
                pub const m_hParamOut: usize = 0x1A; // CAnimParamHandle
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CDampedValueComponentUpdater {
                pub const m_items: usize = 0x30; // CUtlVector<CDampedValueUpdateItem>
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CDemoSettingsComponentUpdater {
                pub const m_settings: usize = 0x30; // CAnimDemoCaptureSettings
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CLODComponentUpdater {
                pub const m_nServerLOD: usize = 0x30; // int32
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 8
            pub mod CLookComponentUpdater {
                pub const m_hLookHeading: usize = 0x34; // CAnimParamHandle
                pub const m_hLookHeadingVelocity: usize = 0x36; // CAnimParamHandle
                pub const m_hLookPitch: usize = 0x38; // CAnimParamHandle
                pub const m_hLookDistance: usize = 0x3A; // CAnimParamHandle
                pub const m_hLookDirection: usize = 0x3C; // CAnimParamHandle
                pub const m_hLookTarget: usize = 0x3E; // CAnimParamHandle
                pub const m_hLookTargetWorldSpace: usize = 0x40; // CAnimParamHandle
                pub const m_bNetworkLookTarget: usize = 0x42; // bool
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 9
            pub mod CMovementComponentUpdater {
                pub const m_motors: usize = 0x30; // CUtlVector<CSmartPtr<CAnimMotorUpdaterBase>>
                pub const m_facingDamping: usize = 0x48; // CAnimInputDamping
                pub const m_eDefaultFacingMode: usize = 0x58; // FacingMode
                pub const m_nDefaultMotorIndex: usize = 0x64; // int32
                pub const m_flDefaultRunSpeed: usize = 0x68; // float32
                pub const m_bMoveVarsDisabled: usize = 0x6C; // bool
                pub const m_bNetworkPath: usize = 0x6D; // bool
                pub const m_bNetworkFacing: usize = 0x6E; // bool
                pub const m_paramHandles: usize = 0x6F; // CAnimParamHandle[30]
            }
            // Parent: None
            // Fields count: 2
            pub mod WeightList {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_weights: usize = 0x8; // CUtlVector<float32>
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 8
            pub mod CRagdollComponentUpdater {
                pub const m_ragdollNodePaths: usize = 0x30; // CUtlVector<CAnimNodePath>
                pub const m_boneIndices: usize = 0x48; // CUtlVector<int32>
                pub const m_boneNames: usize = 0x60; // CUtlVector<CUtlString>
                pub const m_weightLists: usize = 0x78; // CUtlVector<WeightList>
                pub const m_flSpringFrequencyMin: usize = 0x90; // float32
                pub const m_flSpringFrequencyMax: usize = 0x94; // float32
                pub const m_flMaxStretch: usize = 0x98; // float32
                pub const m_bSolidCollisionAtZeroWeight: usize = 0x9C; // bool
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 7
            pub mod CSlopeComponentUpdater {
                pub const m_flTraceDistance: usize = 0x34; // float32
                pub const m_hSlopeAngle: usize = 0x38; // CAnimParamHandle
                pub const m_hSlopeAngleFront: usize = 0x3A; // CAnimParamHandle
                pub const m_hSlopeAngleSide: usize = 0x3C; // CAnimParamHandle
                pub const m_hSlopeHeading: usize = 0x3E; // CAnimParamHandle
                pub const m_hSlopeNormal: usize = 0x40; // CAnimParamHandle
                pub const m_hSlopeNormal_WorldSpace: usize = 0x42; // CAnimParamHandle
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CStateMachineComponentUpdater {
                pub const m_stateMachine: usize = 0x30; // CAnimStateMachineUpdater
            }
            // Parent: None
            // Fields count: 2
            pub mod CMotionDataSet {
                pub const m_groups: usize = 0x0; // CUtlVector<CMotionGraphGroup>
                pub const m_nDimensionCount: usize = 0x18; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod CMotionGraphGroup {
                pub const m_searchDB: usize = 0x0; // CMotionSearchDB
                pub const m_motionGraphs: usize = 0xB8; // CUtlVector<CSmartPtr<CMotionGraph>>
                pub const m_motionGraphConfigs: usize = 0xD0; // CUtlVector<CMotionGraphConfig>
                pub const m_sampleToConfig: usize = 0xE8; // CUtlVector<int32>
                pub const m_hIsActiveScript: usize = 0x100; // AnimScriptHandle
            }
            // Parent: None
            // Fields count: 1
            pub mod SampleCode {
                pub const m_subCode: usize = 0x0; // uint8[8]
            }
            // Parent: None
            // Fields count: 1
            pub mod MotionDBIndex {
                pub const m_nIndex: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 3
            pub mod CVectorQuantizer {
                pub const m_centroidVectors: usize = 0x0; // CUtlVector<float32>
                pub const m_nCentroids: usize = 0x18; // int32
                pub const m_nDimensions: usize = 0x1C; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CProductQuantizer {
                pub const m_subQuantizers: usize = 0x0; // CUtlVector<CVectorQuantizer>
                pub const m_nDimensions: usize = 0x18; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod CMotionSearchNode {
                pub const m_children: usize = 0x0; // CUtlVector<CMotionSearchNode*>
                pub const m_quantizer: usize = 0x18; // CVectorQuantizer
                pub const m_sampleCodes: usize = 0x38; // CUtlVector<CUtlVector<SampleCode>>
                pub const m_sampleIndices: usize = 0x50; // CUtlVector<CUtlVector<int32>>
                pub const m_selectableSamples: usize = 0x68; // CUtlVector<int32>
            }
            // Parent: None
            // Fields count: 3
            pub mod CMotionSearchDB {
                pub const m_rootNode: usize = 0x0; // CMotionSearchNode
                pub const m_residualQuantizer: usize = 0x80; // CProductQuantizer
                pub const m_codeIndices: usize = 0xA0; // CUtlVector<MotionDBIndex>
            }
            // Parent: None
            // Fields count: 7
            pub mod CMotionGraph {
                pub const m_paramSpans: usize = 0x10; // CParamSpanUpdater
                pub const m_tags: usize = 0x28; // CUtlVector<TagSpan_t>
                pub const m_pRootNode: usize = 0x40; // CSmartPtr<CMotionNode>
                pub const m_nParameterCount: usize = 0x48; // int32
                pub const m_nConfigStartIndex: usize = 0x4C; // int32
                pub const m_nConfigCount: usize = 0x50; // int32
                pub const m_bLoop: usize = 0x54; // bool
            }
            // Parent: CMotionGraph
            // Fields count: 0
            pub mod CEditableMotionGraph {
            }
            // Parent: None
            // Fields count: 2
            pub mod CMotionNode {
                pub const m_name: usize = 0x18; // CUtlString
                pub const m_id: usize = 0x20; // AnimNodeID
            }
            // Parent: CMotionNode
            // Fields count: 3
            pub mod CMotionNodeSequence {
                pub const m_tags: usize = 0x28; // CUtlVector<TagSpan_t>
                pub const m_hSequence: usize = 0x40; // HSequence
                pub const m_flPlaybackSpeed: usize = 0x44; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod MotionBlendItem {
                pub const m_pChild: usize = 0x0; // CSmartPtr<CMotionNode>
                pub const m_flKeyValue: usize = 0x8; // float32
            }
            // Parent: CMotionNode
            // Fields count: 2
            pub mod CMotionNodeBlend1D {
                pub const m_blendItems: usize = 0x28; // CUtlVector<MotionBlendItem>
                pub const m_nParamIndex: usize = 0x40; // int32
            }
            // Parent: None
            // Fields count: 4
            pub mod CMotionMetricEvaluator {
                pub const m_means: usize = 0x18; // CUtlVector<float32>
                pub const m_standardDeviations: usize = 0x30; // CUtlVector<float32>
                pub const m_flWeight: usize = 0x48; // float32
                pub const m_nDimensionStartIndex: usize = 0x4C; // int32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 0
            pub mod CBlockSelectionMetricEvaluator {
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 1
            pub mod CBonePositionMetricEvaluator {
                pub const m_nBoneIndex: usize = 0x50; // int32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 1
            pub mod CBoneVelocityMetricEvaluator {
                pub const m_nBoneIndex: usize = 0x50; // int32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 0
            pub mod CCurrentRotationVelocityMetricEvaluator {
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 0
            pub mod CCurrentVelocityMetricEvaluator {
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 7
            pub mod CDistanceRemainingMetricEvaluator {
                pub const m_flMaxDistance: usize = 0x50; // float32
                pub const m_flMinDistance: usize = 0x54; // float32
                pub const m_flStartGoalFilterDistance: usize = 0x58; // float32
                pub const m_flMaxGoalOvershootScale: usize = 0x5C; // float32
                pub const m_bFilterFixedMinDistance: usize = 0x60; // bool
                pub const m_bFilterGoalDistance: usize = 0x61; // bool
                pub const m_bFilterGoalOvershoot: usize = 0x62; // bool
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 1
            pub mod CFootCycleMetricEvaluator {
                pub const m_footIndices: usize = 0x50; // CUtlVector<int32>
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 2
            pub mod CFootPositionMetricEvaluator {
                pub const m_footIndices: usize = 0x50; // CUtlVector<int32>
                pub const m_bIgnoreSlope: usize = 0x68; // bool
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 2
            pub mod CFutureFacingMetricEvaluator {
                pub const m_flDistance: usize = 0x50; // float32
                pub const m_flTime: usize = 0x54; // float32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 4
            pub mod CFutureVelocityMetricEvaluator {
                pub const m_flDistance: usize = 0x50; // float32
                pub const m_flStoppingDistance: usize = 0x54; // float32
                pub const m_flTargetSpeed: usize = 0x58; // float32
                pub const m_eMode: usize = 0x5C; // VelocityMetricMode
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 4
            pub mod CPathMetricEvaluator {
                pub const m_pathTimeSamples: usize = 0x50; // CUtlVector<float32>
                pub const m_flDistance: usize = 0x68; // float32
                pub const m_bExtrapolateMovement: usize = 0x6C; // bool
                pub const m_flMinExtrapolationSpeed: usize = 0x70; // float32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 2
            pub mod CStepsRemainingMetricEvaluator {
                pub const m_footIndices: usize = 0x50; // CUtlVector<int32>
                pub const m_flMinStepsRemaining: usize = 0x68; // float32
            }
            // Parent: CMotionMetricEvaluator
            // Fields count: 4
            pub mod CTimeRemainingMetricEvaluator {
                pub const m_bMatchByTimeRemaining: usize = 0x50; // bool
                pub const m_flMaxTimeRemaining: usize = 0x54; // float32
                pub const m_bFilterByTimeRemaining: usize = 0x58; // bool
                pub const m_flMinTimeRemaining: usize = 0x5C; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimMotorUpdaterBase {
                pub const m_name: usize = 0x10; // CUtlString
                pub const m_bDefault: usize = 0x18; // bool
            }
            // Parent: CAnimMotorUpdaterBase
            // Fields count: 1
            pub mod CPathAnimMotorUpdaterBase {
                pub const m_bLockToPath: usize = 0x20; // bool
            }
            // Parent: CPathAnimMotorUpdaterBase
            // Fields count: 7
            pub mod CDampedPathAnimMotorUpdater {
                pub const m_flAnticipationTime: usize = 0x2C; // float32
                pub const m_flMinSpeedScale: usize = 0x30; // float32
                pub const m_hAnticipationPosParam: usize = 0x34; // CAnimParamHandle
                pub const m_hAnticipationHeadingParam: usize = 0x36; // CAnimParamHandle
                pub const m_flSpringConstant: usize = 0x38; // float32
                pub const m_flMinSpringTension: usize = 0x3C; // float32
                pub const m_flMaxSpringTension: usize = 0x40; // float32
            }
            // Parent: CPathAnimMotorUpdaterBase
            // Fields count: 0
            pub mod CPathAnimMotorUpdater {
            }
            // Parent: CAnimMotorUpdaterBase
            // Fields count: 6
            pub mod CPlayerInputAnimMotorUpdater {
                pub const m_sampleTimes: usize = 0x20; // CUtlVector<float32>
                pub const m_flSpringConstant: usize = 0x3C; // float32
                pub const m_flAnticipationDistance: usize = 0x40; // float32
                pub const m_hAnticipationPosParam: usize = 0x44; // CAnimParamHandle
                pub const m_hAnticipationHeadingParam: usize = 0x46; // CAnimParamHandle
                pub const m_bUseAcceleration: usize = 0x48; // bool
            }
            // Parent: None
            // Fields count: 8
            pub mod AimMatrixOpFixedSettings_t {
                pub const m_attachment: usize = 0x0; // CAnimAttachment
                pub const m_damping: usize = 0x80; // CAnimInputDamping
                pub const m_poseCacheHandles: usize = 0x90; // CPoseHandle[10]
                pub const m_eBlendMode: usize = 0xB8; // AimMatrixBlendMode
                pub const m_fAngleIncrement: usize = 0xBC; // float32
                pub const m_nSequenceMaxFrame: usize = 0xC0; // int32
                pub const m_nBoneMaskIndex: usize = 0xC4; // int32
                pub const m_bTargetIsPosition: usize = 0xC8; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod FollowAttachmentSettings_t {
                pub const m_attachment: usize = 0x0; // CAnimAttachment
                pub const m_boneIndex: usize = 0x80; // int32
                pub const m_bMatchTranslation: usize = 0x84; // bool
                pub const m_bMatchRotation: usize = 0x85; // bool
            }
            // Parent: None
            // Fields count: 18
            pub mod FootLockPoseOpFixedSettings {
                pub const m_footInfo: usize = 0x0; // CUtlVector<FootFixedData_t>
                pub const m_hipDampingSettings: usize = 0x18; // CAnimInputDamping
                pub const m_nHipBoneIndex: usize = 0x28; // int32
                pub const m_ikSolverType: usize = 0x2C; // IKSolverType
                pub const m_bApplyTilt: usize = 0x30; // bool
                pub const m_bApplyHipDrop: usize = 0x31; // bool
                pub const m_bAlwaysUseFallbackHinge: usize = 0x32; // bool
                pub const m_bApplyFootRotationLimits: usize = 0x33; // bool
                pub const m_bApplyLegTwistLimits: usize = 0x34; // bool
                pub const m_flMaxFootHeight: usize = 0x38; // float32
                pub const m_flExtensionScale: usize = 0x3C; // float32
                pub const m_flMaxLegTwist: usize = 0x40; // float32
                pub const m_bEnableLockBreaking: usize = 0x44; // bool
                pub const m_flLockBreakTolerance: usize = 0x48; // float32
                pub const m_flLockBlendTime: usize = 0x4C; // float32
                pub const m_bEnableStretching: usize = 0x50; // bool
                pub const m_flMaxStretchAmount: usize = 0x54; // float32
                pub const m_flStretchExtensionScale: usize = 0x58; // float32
            }
            // Parent: None
            // Fields count: 7
            pub mod FootPinningPoseOpFixedData_t {
                pub const m_footInfo: usize = 0x0; // CUtlVector<FootFixedData_t>
                pub const m_flBlendTime: usize = 0x18; // float32
                pub const m_flLockBreakDistance: usize = 0x1C; // float32
                pub const m_flMaxLegTwist: usize = 0x20; // float32
                pub const m_nHipBoneIndex: usize = 0x24; // int32
                pub const m_bApplyLegTwistLimits: usize = 0x28; // bool
                pub const m_bApplyFootRotationLimits: usize = 0x29; // bool
            }
            // Parent: None
            // Fields count: 17
            pub mod HitReactFixedSettings_t {
                pub const m_nWeightListIndex: usize = 0x0; // int32
                pub const m_nEffectedBoneCount: usize = 0x4; // int32
                pub const m_flMaxImpactForce: usize = 0x8; // float32
                pub const m_flMinImpactForce: usize = 0xC; // float32
                pub const m_flWhipImpactScale: usize = 0x10; // float32
                pub const m_flCounterRotationScale: usize = 0x14; // float32
                pub const m_flDistanceFadeScale: usize = 0x18; // float32
                pub const m_flPropagationScale: usize = 0x1C; // float32
                pub const m_flWhipDelay: usize = 0x20; // float32
                pub const m_flSpringStrength: usize = 0x24; // float32
                pub const m_flWhipSpringStrength: usize = 0x28; // float32
                pub const m_flMaxAngleRadians: usize = 0x2C; // float32
                pub const m_nHipBoneIndex: usize = 0x30; // int32
                pub const m_flHipBoneTranslationScale: usize = 0x34; // float32
                pub const m_flHipDipSpringStrength: usize = 0x38; // float32
                pub const m_flHipDipImpactScale: usize = 0x3C; // float32
                pub const m_flHipDipDelay: usize = 0x40; // float32
            }
            // Parent: None
            // Fields count: 7
            pub mod JiggleBoneSettings_t {
                pub const m_nBoneIndex: usize = 0x0; // int32
                pub const m_flSpringStrength: usize = 0x4; // float32
                pub const m_flMaxTimeStep: usize = 0x8; // float32
                pub const m_flDamping: usize = 0xC; // float32
                pub const m_vBoundsMaxLS: usize = 0x10; // 
                pub const m_vBoundsMinLS: usize = 0x1C; // 
                pub const m_eSimSpace: usize = 0x28; // JiggleBoneSimSpace
            }
            // Parent: None
            // Fields count: 1
            pub mod JiggleBoneSettingsList_t {
                pub const m_boneSettings: usize = 0x0; // CUtlVector<JiggleBoneSettings_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod LookAtBone_t {
                pub const m_index: usize = 0x0; // int32
                pub const m_weight: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 11
            pub mod LookAtOpFixedSettings_t {
                pub const m_attachment: usize = 0x0; // CAnimAttachment
                pub const m_damping: usize = 0x80; // CAnimInputDamping
                pub const m_bones: usize = 0x90; // CUtlVector<LookAtBone_t>
                pub const m_flYawLimit: usize = 0xA8; // float32
                pub const m_flPitchLimit: usize = 0xAC; // float32
                pub const m_flHysteresisInnerAngle: usize = 0xB0; // float32
                pub const m_flHysteresisOuterAngle: usize = 0xB4; // float32
                pub const m_bRotateYawForward: usize = 0xB8; // bool
                pub const m_bMaintainUpDirection: usize = 0xB9; // bool
                pub const m_bTargetIsPosition: usize = 0xBA; // bool
                pub const m_bUseHysteresis: usize = 0xBB; // bool
            }
            // Parent: None
            // Fields count: 6
            pub mod ChainToSolveData_t {
                pub const m_nChainIndex: usize = 0x0; // int32
                pub const m_SolverSettings: usize = 0x4; // IKSolverSettings_t
                pub const m_TargetSettings: usize = 0x10; // IKTargetSettings_t
                pub const m_DebugSetting: usize = 0x38; // SolveIKChainAnimNodeDebugSetting
                pub const m_flDebugNormalizedValue: usize = 0x3C; // float32
                pub const m_vDebugOffset: usize = 0x40; // VectorAligned
            }
            // Parent: None
            // Fields count: 2
            pub mod SolveIKChainPoseOpFixedSettings_t {
                pub const m_ChainsToSolveData: usize = 0x0; // CUtlVector<ChainToSolveData_t>
                pub const m_bMatchTargetOrientation: usize = 0x18; // bool
            }
            // Parent: None
            // Fields count: 6
            pub mod CAnimParameterBase {
                pub const m_name: usize = 0x18; // CGlobalSymbol
                pub const m_group: usize = 0x20; // CUtlString
                pub const m_id: usize = 0x28; // AnimParamID
                pub const m_componentName: usize = 0x40; // CUtlString
                pub const m_bNetworkingRequested: usize = 0x60; // bool
                pub const m_bIsReferenced: usize = 0x61; // bool
            }
            // Parent: CAnimParameterBase
            // Fields count: 6
            pub mod CConcreteAnimParameter {
                pub const m_previewButton: usize = 0x68; // AnimParamButton_t
                pub const m_eNetworkSetting: usize = 0x6C; // AnimParamNetworkSetting
                pub const m_bUseMostRecentValue: usize = 0x70; // bool
                pub const m_bAutoReset: usize = 0x71; // bool
                pub const m_bGameWritable: usize = 0x72; // bool
                pub const m_bGraphWritable: usize = 0x73; // bool
            }
            // Parent: CAnimParameterBase
            // Fields count: 2
            pub mod CVirtualAnimParameter {
                pub const m_expressionString: usize = 0x68; // CUtlString
                pub const m_eParamType: usize = 0x70; // AnimParamType_t
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 1
            pub mod CBoolAnimParameter {
                pub const m_bDefaultValue: usize = 0x78; // bool
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 2
            pub mod CEnumAnimParameter {
                pub const m_defaultValue: usize = 0x80; // uint8
                pub const m_enumOptions: usize = 0x88; // CUtlVector<CUtlString>
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 3
            pub mod CIntAnimParameter {
                pub const m_defaultValue: usize = 0x78; // int32
                pub const m_minValue: usize = 0x7C; // int32
                pub const m_maxValue: usize = 0x80; // int32
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 4
            pub mod CFloatAnimParameter {
                pub const m_fDefaultValue: usize = 0x78; // float32
                pub const m_fMinValue: usize = 0x7C; // float32
                pub const m_fMaxValue: usize = 0x80; // float32
                pub const m_bInterpolate: usize = 0x84; // bool
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 2
            pub mod CVectorAnimParameter {
                pub const m_defaultValue: usize = 0x78; // 
                pub const m_bInterpolate: usize = 0x84; // bool
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 2
            pub mod CQuaternionAnimParameter {
                pub const m_defaultValue: usize = 0x80; // Quaternion
                pub const m_bInterpolate: usize = 0x90; // bool
            }
            // Parent: CConcreteAnimParameter
            // Fields count: 1
            pub mod CSymbolAnimParameter {
                pub const m_defaultValue: usize = 0x78; // CGlobalSymbol
            }
            // Parent: None
            // Fields count: 5
            pub mod ScriptInfo_t {
                pub const m_code: usize = 0x0; // CUtlString
                pub const m_paramsModified: usize = 0x8; // CUtlVector<CAnimParamHandle>
                pub const m_proxyReadParams: usize = 0x20; // CUtlVector<int32>
                pub const m_proxyWriteParams: usize = 0x38; // CUtlVector<int32>
                pub const m_eScriptType: usize = 0x50; // AnimScriptType
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimScriptManager {
                pub const m_scriptInfo: usize = 0x10; // CUtlVector<ScriptInfo_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod CStateActionUpdater {
                pub const m_pAction: usize = 0x0; // CSmartPtr<CAnimActionUpdater>
                pub const m_eBehavior: usize = 0x8; // StateActionBehavior
            }
            // Parent: None
            // Fields count: 3
            pub mod CTransitionUpdateData {
                pub const m_srcStateIndex: usize = 0x0; // uint8
                pub const m_destStateIndex: usize = 0x1; // uint8
                pub const m_bDisabled: usize = 0x0; // bitfield:1
            }
            // Parent: None
            // Fields count: 8
            pub mod CStateUpdateData {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_hScript: usize = 0x8; // AnimScriptHandle
                pub const m_transitionIndices: usize = 0x10; // CUtlVector<int32>
                pub const m_actions: usize = 0x28; // CUtlVector<CStateActionUpdater>
                pub const m_stateID: usize = 0x40; // AnimStateID
                pub const m_bIsStartState: usize = 0x0; // bitfield:1
                pub const m_bIsEndState: usize = 0x0; // bitfield:1
                pub const m_bIsPassthrough: usize = 0x0; // bitfield:1
            }
            // Parent: None
            // Fields count: 3
            pub mod CAnimStateMachineUpdater {
                pub const m_states: usize = 0x8; // CUtlVector<CStateUpdateData>
                pub const m_transitions: usize = 0x20; // CUtlVector<CTransitionUpdateData>
                pub const m_startStateIndex: usize = 0x50; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod CAnimUpdateNodeRef {
                pub const m_nodeIndex: usize = 0x8; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod CAnimUpdateNodeBase {
                pub const m_nodePath: usize = 0x18; // CAnimNodePath
                pub const m_networkMode: usize = 0x48; // AnimNodeNetworkMode
                pub const m_name: usize = 0x50; // CUtlString
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 6
            pub mod CBinaryUpdateNode {
                pub const m_pChild1: usize = 0x58; // CAnimUpdateNodeRef
                pub const m_pChild2: usize = 0x68; // CAnimUpdateNodeRef
                pub const m_timingBehavior: usize = 0x78; // BinaryNodeTiming
                pub const m_flTimingBlend: usize = 0x7C; // float32
                pub const m_bResetChild1: usize = 0x80; // bool
                pub const m_bResetChild2: usize = 0x81; // bool
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 11
            pub mod CBlendUpdateNode {
                pub const m_children: usize = 0x60; // CUtlVector<CAnimUpdateNodeRef>
                pub const m_sortedOrder: usize = 0x78; // CUtlVector<uint8>
                pub const m_targetValues: usize = 0x90; // CUtlVector<float32>
                pub const m_blendValueSource: usize = 0xAC; // AnimValueSource
                pub const m_paramIndex: usize = 0xB0; // CAnimParamHandle
                pub const m_damping: usize = 0xB8; // CAnimInputDamping
                pub const m_blendKeyType: usize = 0xC8; // BlendKeyType
                pub const m_bLockBlendOnReset: usize = 0xCC; // bool
                pub const m_bSyncCycles: usize = 0xCD; // bool
                pub const m_bLoop: usize = 0xCE; // bool
                pub const m_bLockWhenWaning: usize = 0xCF; // bool
            }
            // Parent: None
            // Fields count: 6
            pub mod BlendItem_t {
                pub const m_tags: usize = 0x0; // CUtlVector<TagSpan_t>
                pub const m_pChild: usize = 0x18; // CAnimUpdateNodeRef
                pub const m_hSequence: usize = 0x28; // HSequence
                pub const m_vPos: usize = 0x2C; // Vector2D
                pub const m_flDuration: usize = 0x34; // float32
                pub const m_bUseCustomDuration: usize = 0x38; // bool
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 15
            pub mod CBlend2DUpdateNode {
                pub const m_items: usize = 0x60; // CUtlVector<BlendItem_t>
                pub const m_tags: usize = 0x78; // CUtlVector<TagSpan_t>
                pub const m_paramSpans: usize = 0x90; // CParamSpanUpdater
                pub const m_nodeItemIndices: usize = 0xA8; // CUtlVector<int32>
                pub const m_damping: usize = 0xC0; // CAnimInputDamping
                pub const m_blendSourceX: usize = 0xD0; // AnimValueSource
                pub const m_paramX: usize = 0xD4; // CAnimParamHandle
                pub const m_blendSourceY: usize = 0xD8; // AnimValueSource
                pub const m_paramY: usize = 0xDC; // CAnimParamHandle
                pub const m_eBlendMode: usize = 0xE0; // Blend2DMode
                pub const m_playbackSpeed: usize = 0xE4; // float32
                pub const m_bLoop: usize = 0xE8; // bool
                pub const m_bLockBlendOnReset: usize = 0xE9; // bool
                pub const m_bLockWhenWaning: usize = 0xEA; // bool
                pub const m_bAnimEventsAndTagsOnMostWeightedOnly: usize = 0xEB; // bool
            }
            // Parent: CBinaryUpdateNode
            // Fields count: 7
            pub mod CBoneMaskUpdateNode {
                pub const m_nWeightListIndex: usize = 0x8C; // int32
                pub const m_flRootMotionBlend: usize = 0x90; // float32
                pub const m_blendSpace: usize = 0x94; // BoneMaskBlendSpace
                pub const m_footMotionTiming: usize = 0x98; // BinaryNodeChildOption
                pub const m_bUseBlendScale: usize = 0x9C; // bool
                pub const m_blendValueSource: usize = 0xA0; // AnimValueSource
                pub const m_hBlendParameter: usize = 0xA4; // CAnimParamHandle
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 10
            pub mod CChoiceUpdateNode {
                pub const m_children: usize = 0x58; // CUtlVector<CAnimUpdateNodeRef>
                pub const m_weights: usize = 0x70; // CUtlVector<float32>
                pub const m_blendTimes: usize = 0x88; // CUtlVector<float32>
                pub const m_choiceMethod: usize = 0xA0; // ChoiceMethod
                pub const m_choiceChangeMethod: usize = 0xA4; // ChoiceChangeMethod
                pub const m_blendMethod: usize = 0xA8; // ChoiceBlendMethod
                pub const m_blendTime: usize = 0xAC; // float32
                pub const m_bCrossFade: usize = 0xB0; // bool
                pub const m_bResetChosen: usize = 0xB1; // bool
                pub const m_bDontResetSameSelection: usize = 0xB2; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CDirectPlaybackTagData {
                pub const m_sequenceName: usize = 0x0; // CUtlString
                pub const m_tags: usize = 0x8; // CUtlVector<TagSpan_t>
            }
            // Parent: None
            // Fields count: 11
            pub mod FootFixedData_t {
                pub const m_vToeOffset: usize = 0x0; // VectorAligned
                pub const m_vHeelOffset: usize = 0x10; // VectorAligned
                pub const m_nTargetBoneIndex: usize = 0x20; // int32
                pub const m_nAnkleBoneIndex: usize = 0x24; // int32
                pub const m_nIKAnchorBoneIndex: usize = 0x28; // int32
                pub const m_ikChainIndex: usize = 0x2C; // int32
                pub const m_flMaxIKLength: usize = 0x30; // float32
                pub const m_nFootIndex: usize = 0x34; // int32
                pub const m_nTagIndex: usize = 0x38; // int32
                pub const m_flMaxRotationLeft: usize = 0x3C; // float32
                pub const m_flMaxRotationRight: usize = 0x40; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod TraceSettings_t {
                pub const m_flTraceHeight: usize = 0x0; // float32
                pub const m_flTraceRadius: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 10
            pub mod FootFixedSettings {
                pub const m_traceSettings: usize = 0x0; // TraceSettings_t
                pub const m_vFootBaseBindPosePositionMS: usize = 0x10; // VectorAligned
                pub const m_flFootBaseLength: usize = 0x20; // float32
                pub const m_flMaxRotationLeft: usize = 0x24; // float32
                pub const m_flMaxRotationRight: usize = 0x28; // float32
                pub const m_footstepLandedTagIndex: usize = 0x2C; // int32
                pub const m_bEnableTracing: usize = 0x30; // bool
                pub const m_flTraceAngleBlend: usize = 0x34; // float32
                pub const m_nDisableTagIndex: usize = 0x38; // int32
                pub const m_nFootIndex: usize = 0x3C; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod FootStepTrigger {
                pub const m_tags: usize = 0x0; // CUtlVector<int32>
                pub const m_nFootIndex: usize = 0x18; // int32
                pub const m_triggerPhase: usize = 0x1C; // StepPhase
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 0
            pub mod CLeafUpdateNode {
            }
            // Parent: CLeafUpdateNode
            // Fields count: 10
            pub mod CLeanMatrixUpdateNode {
                pub const m_frameCorners: usize = 0x5C; // int32[3][3]
                pub const m_poses: usize = 0x80; // CPoseHandle[9]
                pub const m_damping: usize = 0xA8; // CAnimInputDamping
                pub const m_blendSource: usize = 0xB8; // AnimVectorSource
                pub const m_paramIndex: usize = 0xBC; // CAnimParamHandle
                pub const m_verticalAxis: usize = 0xC0; // 
                pub const m_horizontalAxis: usize = 0xCC; // 
                pub const m_hSequence: usize = 0xD8; // HSequence
                pub const m_flMaxValue: usize = 0xDC; // float32
                pub const m_nSequenceMaxFrame: usize = 0xE0; // int32
            }
            // Parent: CLeafUpdateNode
            // Fields count: 1
            pub mod CMotionGraphUpdateNode {
                pub const m_pMotionGraph: usize = 0x58; // CSmartPtr<CMotionGraph>
            }
            // Parent: CLeafUpdateNode
            // Fields count: 23
            pub mod CMotionMatchingUpdateNode {
                pub const m_dataSet: usize = 0x58; // CMotionDataSet
                pub const m_metrics: usize = 0x78; // CUtlVector<CSmartPtr<CMotionMetricEvaluator>>
                pub const m_weights: usize = 0x90; // CUtlVector<float32>
                pub const m_bSearchEveryTick: usize = 0xE0; // bool
                pub const m_flSearchInterval: usize = 0xE4; // float32
                pub const m_bSearchWhenClipEnds: usize = 0xE8; // bool
                pub const m_bSearchWhenGoalChanges: usize = 0xE9; // bool
                pub const m_blendCurve: usize = 0xEC; // CBlendCurve
                pub const m_flSampleRate: usize = 0xF4; // float32
                pub const m_flBlendTime: usize = 0xF8; // float32
                pub const m_bLockClipWhenWaning: usize = 0xFC; // bool
                pub const m_flSelectionThreshold: usize = 0x100; // float32
                pub const m_flReselectionTimeWindow: usize = 0x104; // float32
                pub const m_bEnableRotationCorrection: usize = 0x108; // bool
                pub const m_bGoalAssist: usize = 0x109; // bool
                pub const m_flGoalAssistDistance: usize = 0x10C; // float32
                pub const m_flGoalAssistTolerance: usize = 0x110; // float32
                pub const m_distanceScale_Damping: usize = 0x118; // CAnimInputDamping
                pub const m_flDistanceScale_OuterRadius: usize = 0x128; // float32
                pub const m_flDistanceScale_InnerRadius: usize = 0x12C; // float32
                pub const m_flDistanceScale_MaxScale: usize = 0x130; // float32
                pub const m_flDistanceScale_MinScale: usize = 0x134; // float32
                pub const m_bEnableDistanceScaling: usize = 0x138; // bool
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 8
            pub mod CSelectorUpdateNode {
                pub const m_children: usize = 0x58; // CUtlVector<CAnimUpdateNodeRef>
                pub const m_tags: usize = 0x70; // CUtlVector<int8>
                pub const m_blendCurve: usize = 0x8C; // CBlendCurve
                pub const m_flBlendTime: usize = 0x94; // CAnimValue<float32>
                pub const m_hParameter: usize = 0x9C; // CAnimParamHandle
                pub const m_eTagBehavior: usize = 0xA0; // SelectorTagBehavior_t
                pub const m_bResetOnChange: usize = 0xA4; // bool
                pub const m_bSyncCyclesOnChange: usize = 0xA5; // bool
            }
            // Parent: CLeafUpdateNode
            // Fields count: 6
            pub mod CSequenceUpdateNode {
                pub const m_paramSpans: usize = 0x60; // CParamSpanUpdater
                pub const m_tags: usize = 0x78; // CUtlVector<TagSpan_t>
                pub const m_hSequence: usize = 0x94; // HSequence
                pub const m_playbackSpeed: usize = 0x98; // float32
                pub const m_duration: usize = 0x9C; // float32
                pub const m_bLoop: usize = 0xA0; // bool
            }
            // Parent: CLeafUpdateNode
            // Fields count: 4
            pub mod CSingleFrameUpdateNode {
                pub const m_actions: usize = 0x58; // CUtlVector<CSmartPtr<CAnimActionUpdater>>
                pub const m_hPoseCacheHandle: usize = 0x70; // CPoseHandle
                pub const m_hSequence: usize = 0x74; // HSequence
                pub const m_flCycle: usize = 0x78; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CSolveIKTargetHandle_t {
                pub const m_positionHandle: usize = 0x0; // CAnimParamHandle
                pub const m_orientationHandle: usize = 0x2; // CAnimParamHandle
            }
            // Parent: None
            // Fields count: 2
            pub mod StanceInfo_t {
                pub const m_vPosition: usize = 0x0; // 
                pub const m_flDirection: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod CStateNodeTransitionData {
                pub const m_curve: usize = 0x0; // CBlendCurve
                pub const m_blendDuration: usize = 0x8; // CAnimValue<float32>
                pub const m_resetCycleValue: usize = 0x10; // CAnimValue<float32>
                pub const m_bReset: usize = 0x0; // bitfield:1
                pub const m_resetCycleOption: usize = 0x0; // bitfield:3
            }
            // Parent: None
            // Fields count: 2
            pub mod CStateNodeStateData {
                pub const m_pChild: usize = 0x0; // CAnimUpdateNodeRef
                pub const m_bExclusiveRootMotion: usize = 0x0; // bitfield:1
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 5
            pub mod CStateMachineUpdateNode {
                pub const m_stateMachine: usize = 0x68; // CAnimStateMachineUpdater
                pub const m_stateData: usize = 0xC0; // CUtlVector<CStateNodeStateData>
                pub const m_transitionData: usize = 0xD8; // CUtlVector<CStateNodeTransitionData>
                pub const m_bBlockWaningTags: usize = 0xF4; // bool
                pub const m_bLockStateWhenWaning: usize = 0xF5; // bool
            }
            // Parent: CBinaryUpdateNode
            // Fields count: 4
            pub mod CSubtractUpdateNode {
                pub const m_footMotionTiming: usize = 0x8C; // BinaryNodeChildOption
                pub const m_bApplyToFootMotion: usize = 0x90; // bool
                pub const m_bApplyChannelsSeparately: usize = 0x91; // bool
                pub const m_bUseModelSpace: usize = 0x92; // bool
            }
            // Parent: None
            // Fields count: 15
            pub mod TwoBoneIKSettings_t {
                pub const m_endEffectorType: usize = 0x0; // IkEndEffectorType
                pub const m_endEffectorAttachment: usize = 0x10; // CAnimAttachment
                pub const m_targetType: usize = 0x90; // IkTargetType
                pub const m_targetAttachment: usize = 0xA0; // CAnimAttachment
                pub const m_targetBoneIndex: usize = 0x120; // int32
                pub const m_hPositionParam: usize = 0x124; // CAnimParamHandle
                pub const m_hRotationParam: usize = 0x126; // CAnimParamHandle
                pub const m_bAlwaysUseFallbackHinge: usize = 0x128; // bool
                pub const m_vLsFallbackHingeAxis: usize = 0x130; // VectorAligned
                pub const m_nFixedBoneIndex: usize = 0x140; // int32
                pub const m_nMiddleBoneIndex: usize = 0x144; // int32
                pub const m_nEndBoneIndex: usize = 0x148; // int32
                pub const m_bMatchTargetOrientation: usize = 0x14C; // bool
                pub const m_bConstrainTwist: usize = 0x14D; // bool
                pub const m_flMaxTwist: usize = 0x150; // float32
            }
            // Parent: CAnimUpdateNodeBase
            // Fields count: 1
            pub mod CUnaryUpdateNode {
                pub const m_pChildNode: usize = 0x58; // CAnimUpdateNodeRef
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 5
            pub mod CWayPointHelperUpdateNode {
                pub const m_flStartCycle: usize = 0x6C; // float32
                pub const m_flEndCycle: usize = 0x70; // float32
                pub const m_bOnlyGoals: usize = 0x74; // bool
                pub const m_bPreventOvershoot: usize = 0x75; // bool
                pub const m_bPreventUndershoot: usize = 0x76; // bool
            }
            // Parent: CLeafUpdateNode
            // Fields count: 0
            pub mod CZeroPoseUpdateNode {
            }
            // Parent: None
            // Fields count: 3
            pub mod TagSpan_t {
                pub const m_tagIndex: usize = 0x0; // int32
                pub const m_startCycle: usize = 0x4; // float32
                pub const m_endCycle: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAnimNodePath {
                pub const m_path: usize = 0x0; // AnimNodeID[11]
                pub const m_nCount: usize = 0x2C; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod ConfigIndex {
                pub const m_nGroup: usize = 0x0; // uint16
                pub const m_nConfig: usize = 0x2; // uint16
            }
            // Parent: None
            // Fields count: 2
            pub mod MotionIndex {
                pub const m_nGroup: usize = 0x0; // uint16
                pub const m_nMotion: usize = 0x2; // uint16
            }
            // Parent: None
            // Fields count: 5
            pub mod CMotionGraphConfig {
                pub const m_paramValues: usize = 0x0; // float32[4]
                pub const m_flDuration: usize = 0x10; // float32
                pub const m_nMotionIndex: usize = 0x14; // MotionIndex
                pub const m_nSampleStart: usize = 0x18; // int32
                pub const m_nSampleCount: usize = 0x1C; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CPoseHandle {
                pub const m_nIndex: usize = 0x0; // uint16
                pub const m_eType: usize = 0x2; // PoseType_t
            }
            // Parent: None
            // Fields count: 3
            pub mod CAnimationGraphVisualizerPrimitiveBase {
                pub const m_Type: usize = 0x8; // CAnimationGraphVisualizerPrimitiveType
                pub const m_OwningAnimNodePaths: usize = 0xC; // AnimNodeID[11]
                pub const m_nOwningAnimNodePathCount: usize = 0x38; // int32
            }
            // Parent: CAnimationGraphVisualizerPrimitiveBase
            // Fields count: 3
            pub mod CAnimationGraphVisualizerText {
                pub const m_vWsPosition: usize = 0x40; // VectorAligned
                pub const m_Color: usize = 0x50; // Color
                pub const m_Text: usize = 0x58; // CUtlString
            }
            // Parent: CAnimationGraphVisualizerPrimitiveBase
            // Fields count: 3
            pub mod CAnimationGraphVisualizerSphere {
                pub const m_vWsPosition: usize = 0x40; // VectorAligned
                pub const m_flRadius: usize = 0x50; // float32
                pub const m_Color: usize = 0x54; // Color
            }
            // Parent: CAnimationGraphVisualizerPrimitiveBase
            // Fields count: 3
            pub mod CAnimationGraphVisualizerLine {
                pub const m_vWsPositionStart: usize = 0x40; // VectorAligned
                pub const m_vWsPositionEnd: usize = 0x50; // VectorAligned
                pub const m_Color: usize = 0x60; // Color
            }
            // Parent: CAnimationGraphVisualizerPrimitiveBase
            // Fields count: 4
            pub mod CAnimationGraphVisualizerPie {
                pub const m_vWsCenter: usize = 0x40; // VectorAligned
                pub const m_vWsStart: usize = 0x50; // VectorAligned
                pub const m_vWsEnd: usize = 0x60; // VectorAligned
                pub const m_Color: usize = 0x70; // Color
            }
            // Parent: CAnimationGraphVisualizerPrimitiveBase
            // Fields count: 2
            pub mod CAnimationGraphVisualizerAxis {
                pub const m_xWsTransform: usize = 0x40; // CTransform
                pub const m_flAxisSize: usize = 0x60; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod IKBoneNameAndIndex_t {
                pub const m_Name: usize = 0x0; // CUtlString
            }
            // Parent: None
            // Fields count: 2
            pub mod IKSolverSettings_t {
                pub const m_SolverType: usize = 0x0; // IKSolverType
                pub const m_nNumIterations: usize = 0x4; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod IKTargetSettings_t {
                pub const m_TargetSource: usize = 0x0; // IKTargetSource
                pub const m_Bone: usize = 0x8; // IKBoneNameAndIndex_t
                pub const m_AnimgraphParameterNamePosition: usize = 0x18; // AnimParamID
                pub const m_AnimgraphParameterNameOrientation: usize = 0x1C; // AnimParamID
                pub const m_TargetCoordSystem: usize = 0x20; // IKTargetCoordinateSystem
            }
            // Parent: CAnimGraphSettingsGroup
            // Fields count: 1
            pub mod CAnimGraphNetworkSettings {
                pub const m_bNetworkingEnabled: usize = 0x20; // bool
            }
            // Parent: CAnimComponentUpdater
            // Fields count: 1
            pub mod CActionComponentUpdater {
                pub const m_actions: usize = 0x30; // CUtlVector<CSmartPtr<CAnimActionUpdater>>
            }
            // Parent: CBinaryUpdateNode
            // Fields count: 4
            pub mod CAddUpdateNode {
                pub const m_footMotionTiming: usize = 0x8C; // BinaryNodeChildOption
                pub const m_bApplyToFootMotion: usize = 0x90; // bool
                pub const m_bApplyChannelsSeparately: usize = 0x91; // bool
                pub const m_bUseModelSpace: usize = 0x92; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 6
            pub mod CAimMatrixUpdateNode {
                pub const m_opFixedSettings: usize = 0x70; // AimMatrixOpFixedSettings_t
                pub const m_target: usize = 0x148; // AnimVectorSource
                pub const m_paramIndex: usize = 0x14C; // CAnimParamHandle
                pub const m_hSequence: usize = 0x150; // HSequence
                pub const m_bResetChild: usize = 0x154; // bool
                pub const m_bLockWhenWaning: usize = 0x155; // bool
            }
            // Parent: CLeafUpdateNode
            // Fields count: 0
            pub mod CBindPoseUpdateNode {
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 0
            pub mod CChoreoUpdateNode {
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CCycleControlUpdateNode {
                pub const m_valueSource: usize = 0x68; // AnimValueSource
                pub const m_paramIndex: usize = 0x6C; // CAnimParamHandle
            }
            // Parent: CLeafUpdateNode
            // Fields count: 5
            pub mod CCycleControlClipUpdateNode {
                pub const m_tags: usize = 0x60; // CUtlVector<TagSpan_t>
                pub const m_hSequence: usize = 0x7C; // HSequence
                pub const m_duration: usize = 0x80; // float32
                pub const m_valueSource: usize = 0x84; // AnimValueSource
                pub const m_paramIndex: usize = 0x88; // CAnimParamHandle
            }
            // Parent: CLeafUpdateNode
            // Fields count: 8
            pub mod CDirectionalBlendUpdateNode {
                pub const m_hSequences: usize = 0x5C; // HSequence[8]
                pub const m_damping: usize = 0x80; // CAnimInputDamping
                pub const m_blendValueSource: usize = 0x90; // AnimValueSource
                pub const m_paramIndex: usize = 0x94; // CAnimParamHandle
                pub const m_playbackSpeed: usize = 0x98; // float32
                pub const m_duration: usize = 0x9C; // float32
                pub const m_bLoop: usize = 0xA0; // bool
                pub const m_bLockBlendOnReset: usize = 0xA1; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 3
            pub mod CDirectPlaybackUpdateNode {
                pub const m_bFinishEarly: usize = 0x6C; // bool
                pub const m_bResetOnFinish: usize = 0x6D; // bool
                pub const m_allTags: usize = 0x70; // CUtlVector<CDirectPlaybackTagData>
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 13
            pub mod CFollowPathUpdateNode {
                pub const m_flBlendOutTime: usize = 0x6C; // float32
                pub const m_bBlockNonPathMovement: usize = 0x70; // bool
                pub const m_bStopFeetAtGoal: usize = 0x71; // bool
                pub const m_bScaleSpeed: usize = 0x72; // bool
                pub const m_flScale: usize = 0x74; // float32
                pub const m_flMinAngle: usize = 0x78; // float32
                pub const m_flMaxAngle: usize = 0x7C; // float32
                pub const m_flSpeedScaleBlending: usize = 0x80; // float32
                pub const m_turnDamping: usize = 0x88; // CAnimInputDamping
                pub const m_facingTarget: usize = 0x98; // AnimValueSource
                pub const m_hParam: usize = 0x9C; // CAnimParamHandle
                pub const m_flTurnToFaceOffset: usize = 0xA0; // float32
                pub const m_bTurnToFace: usize = 0xA4; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CFollowAttachmentUpdateNode {
                pub const m_opFixedData: usize = 0x70; // FollowAttachmentSettings_t
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 9
            pub mod CFootAdjustmentUpdateNode {
                pub const m_clips: usize = 0x70; // CUtlVector<HSequence>
                pub const m_hBasePoseCacheHandle: usize = 0x88; // CPoseHandle
                pub const m_facingTarget: usize = 0x8C; // CAnimParamHandle
                pub const m_flTurnTimeMin: usize = 0x90; // float32
                pub const m_flTurnTimeMax: usize = 0x94; // float32
                pub const m_flStepHeightMax: usize = 0x98; // float32
                pub const m_flStepHeightMaxAngle: usize = 0x9C; // float32
                pub const m_bResetChild: usize = 0xA0; // bool
                pub const m_bAnimationDriven: usize = 0xA1; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 20
            pub mod CFootLockUpdateNode {
                pub const m_opFixedSettings: usize = 0x68; // FootLockPoseOpFixedSettings
                pub const m_footSettings: usize = 0xD0; // CUtlVector<FootFixedSettings>
                pub const m_hipShiftDamping: usize = 0xE8; // CAnimInputDamping
                pub const m_rootHeightDamping: usize = 0xF8; // CAnimInputDamping
                pub const m_flStrideCurveScale: usize = 0x108; // float32
                pub const m_flStrideCurveLimitScale: usize = 0x10C; // float32
                pub const m_flStepHeightIncreaseScale: usize = 0x110; // float32
                pub const m_flStepHeightDecreaseScale: usize = 0x114; // float32
                pub const m_flHipShiftScale: usize = 0x118; // float32
                pub const m_flBlendTime: usize = 0x11C; // float32
                pub const m_flMaxRootHeightOffset: usize = 0x120; // float32
                pub const m_flMinRootHeightOffset: usize = 0x124; // float32
                pub const m_flTiltPlanePitchSpringStrength: usize = 0x128; // float32
                pub const m_flTiltPlaneRollSpringStrength: usize = 0x12C; // float32
                pub const m_bApplyFootRotationLimits: usize = 0x130; // bool
                pub const m_bApplyHipShift: usize = 0x131; // bool
                pub const m_bModulateStepHeight: usize = 0x132; // bool
                pub const m_bResetChild: usize = 0x133; // bool
                pub const m_bEnableVerticalCurvedPaths: usize = 0x134; // bool
                pub const m_bEnableRootHeightDamping: usize = 0x135; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 4
            pub mod CFootPinningUpdateNode {
                pub const m_poseOpFixedData: usize = 0x70; // FootPinningPoseOpFixedData_t
                pub const m_eTimingSource: usize = 0xA0; // FootPinningTimingSource
                pub const m_params: usize = 0xA8; // CUtlVector<CAnimParamHandle>
                pub const m_bResetChild: usize = 0xC0; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CFootStepTriggerUpdateNode {
                pub const m_triggers: usize = 0x68; // CUtlVector<FootStepTrigger>
                pub const m_flTolerance: usize = 0x84; // float32
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 8
            pub mod CHitReactUpdateNode {
                pub const m_opFixedSettings: usize = 0x68; // HitReactFixedSettings_t
                pub const m_triggerParam: usize = 0xB4; // CAnimParamHandle
                pub const m_hitBoneParam: usize = 0xB6; // CAnimParamHandle
                pub const m_hitOffsetParam: usize = 0xB8; // CAnimParamHandle
                pub const m_hitDirectionParam: usize = 0xBA; // CAnimParamHandle
                pub const m_hitStrengthParam: usize = 0xBC; // CAnimParamHandle
                pub const m_flMinDelayBetweenHits: usize = 0xC0; // float32
                pub const m_bResetChild: usize = 0xC4; // bool
            }
            // Parent: CLeafUpdateNode
            // Fields count: 0
            pub mod CInputStreamUpdateNode {
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CJiggleBoneUpdateNode {
                pub const m_opFixedData: usize = 0x68; // JiggleBoneSettingsList_t
            }
            // Parent: CSequenceUpdateNode
            // Fields count: 8
            pub mod CJumpHelperUpdateNode {
                pub const m_hTargetParam: usize = 0xA8; // CAnimParamHandle
                pub const m_flOriginalJumpMovement: usize = 0xAC; // 
                pub const m_flOriginalJumpDuration: usize = 0xB8; // float32
                pub const m_flJumpStartCycle: usize = 0xBC; // float32
                pub const m_flJumpEndCycle: usize = 0xC0; // float32
                pub const m_eCorrectionMethod: usize = 0xC4; // JumpCorrectionMethod
                pub const m_bTranslationAxis: usize = 0xC8; // bool[3]
                pub const m_bScaleSpeed: usize = 0xCB; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 6
            pub mod CLookAtUpdateNode {
                pub const m_opFixedSettings: usize = 0x70; // LookAtOpFixedSettings_t
                pub const m_target: usize = 0x138; // AnimVectorSource
                pub const m_paramIndex: usize = 0x13C; // CAnimParamHandle
                pub const m_weightParamIndex: usize = 0x13E; // CAnimParamHandle
                pub const m_bResetChild: usize = 0x140; // bool
                pub const m_bLockWhenWaning: usize = 0x141; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 12
            pub mod CMoverUpdateNode {
                pub const m_damping: usize = 0x70; // CAnimInputDamping
                pub const m_facingTarget: usize = 0x80; // AnimValueSource
                pub const m_hMoveVecParam: usize = 0x84; // CAnimParamHandle
                pub const m_hMoveHeadingParam: usize = 0x86; // CAnimParamHandle
                pub const m_hTurnToFaceParam: usize = 0x88; // CAnimParamHandle
                pub const m_flTurnToFaceOffset: usize = 0x8C; // float32
                pub const m_flTurnToFaceLimit: usize = 0x90; // float32
                pub const m_bAdditive: usize = 0x94; // bool
                pub const m_bApplyMovement: usize = 0x95; // bool
                pub const m_bOrientMovement: usize = 0x96; // bool
                pub const m_bApplyRotation: usize = 0x97; // bool
                pub const m_bLimitOnly: usize = 0x98; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CPathHelperUpdateNode {
                pub const m_flStoppingRadius: usize = 0x68; // float32
                pub const m_flStoppingSpeedScale: usize = 0x6C; // float32
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CRagdollUpdateNode {
                pub const m_nWeightListIndex: usize = 0x68; // int32
                pub const m_poseControlMethod: usize = 0x6C; // RagdollPoseControl
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 0
            pub mod CRootUpdateNode {
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CSetFacingUpdateNode {
                pub const m_facingMode: usize = 0x68; // FacingMode
                pub const m_bResetChild: usize = 0x6C; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CSlowDownOnSlopesUpdateNode {
                pub const m_flSlowDownStrength: usize = 0x68; // float32
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 2
            pub mod CSolveIKChainUpdateNode {
                pub const m_targetHandles: usize = 0x68; // CUtlVector<CSolveIKTargetHandle_t>
                pub const m_opFixedData: usize = 0x80; // SolveIKChainPoseOpFixedSettings_t
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CSpeedScaleUpdateNode {
                pub const m_paramIndex: usize = 0x68; // CAnimParamHandle
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 4
            pub mod CStanceOverrideUpdateNode {
                pub const m_footStanceInfo: usize = 0x68; // CUtlVector<StanceInfo_t>
                pub const m_pStanceSourceNode: usize = 0x80; // CAnimUpdateNodeRef
                pub const m_hParameter: usize = 0x90; // CAnimParamHandle
                pub const m_eMode: usize = 0x94; // StanceOverrideMode
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CStanceScaleUpdateNode {
                pub const m_hParam: usize = 0x68; // CAnimParamHandle
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 5
            pub mod CStopAtGoalUpdateNode {
                pub const m_flOuterRadius: usize = 0x6C; // float32
                pub const m_flInnerRadius: usize = 0x70; // float32
                pub const m_flMaxScale: usize = 0x74; // float32
                pub const m_flMinScale: usize = 0x78; // float32
                pub const m_damping: usize = 0x80; // CAnimInputDamping
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 6
            pub mod CTurnHelperUpdateNode {
                pub const m_facingTarget: usize = 0x6C; // AnimValueSource
                pub const m_turnStartTimeOffset: usize = 0x70; // float32
                pub const m_turnDuration: usize = 0x74; // float32
                pub const m_bMatchChildDuration: usize = 0x78; // bool
                pub const m_manualTurnOffset: usize = 0x7C; // float32
                pub const m_bUseManualTurnOffset: usize = 0x80; // bool
            }
            // Parent: CUnaryUpdateNode
            // Fields count: 1
            pub mod CTwoBoneIKUpdateNode {
                pub const m_opFixedData: usize = 0x70; // TwoBoneIKSettings_t
            }
        }
        // Module: client.dll
        // Classes count: 434
        // Enums count: 8
        pub mod client {
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum C_BaseCombatCharacter__WaterWakeMode_t {
                WATER_WAKE_NONE = 0x0,
                WATER_WAKE_IDLE = 0x1,
                WATER_WAKE_WALKING = 0x2,
                WATER_WAKE_RUNNING = 0x3,
                WATER_WAKE_WATER_OVERHEAD = 0x4
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum CompositeMaterialMatchFilterType_t {
                MATCH_FILTER_MATERIAL_ATTRIBUTE_EXISTS = 0x0,
                MATCH_FILTER_MATERIAL_SHADER = 0x1,
                MATCH_FILTER_MATERIAL_NAME_SUBSTR = 0x2,
                MATCH_FILTER_MATERIAL_ATTRIBUTE_EQUALS = 0x3,
                MATCH_FILTER_MATERIAL_PROPERTY_EXISTS = 0x4,
                MATCH_FILTER_MATERIAL_PROPERTY_EQUALS = 0x5
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum CompositeMaterialVarSystemVar_t {
                COMPMATSYSVAR_COMPOSITETIME = 0x0,
                COMPMATSYSVAR_EMPTY_RESOURCE_SPACER = 0x1
            }
            // Alignment: 4
            // Members count: 14
            #[repr(u32)]
            pub enum CompositeMaterialInputLooseVariableType_t {
                LOOSE_VARIABLE_TYPE_BOOLEAN = 0x0,
                LOOSE_VARIABLE_TYPE_INTEGER1 = 0x1,
                LOOSE_VARIABLE_TYPE_INTEGER2 = 0x2,
                LOOSE_VARIABLE_TYPE_INTEGER3 = 0x3,
                LOOSE_VARIABLE_TYPE_INTEGER4 = 0x4,
                LOOSE_VARIABLE_TYPE_FLOAT1 = 0x5,
                LOOSE_VARIABLE_TYPE_FLOAT2 = 0x6,
                LOOSE_VARIABLE_TYPE_FLOAT3 = 0x7,
                LOOSE_VARIABLE_TYPE_FLOAT4 = 0x8,
                LOOSE_VARIABLE_TYPE_COLOR4 = 0x9,
                LOOSE_VARIABLE_TYPE_STRING = 0xA,
                LOOSE_VARIABLE_TYPE_SYSTEMVAR = 0xB,
                LOOSE_VARIABLE_TYPE_RESOURCE_MATERIAL = 0xC,
                LOOSE_VARIABLE_TYPE_RESOURCE_TEXTURE = 0xD
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum CompositeMaterialInputTextureType_t {
                INPUT_TEXTURE_TYPE_DEFAULT = 0x0,
                INPUT_TEXTURE_TYPE_NORMALMAP = 0x1,
                INPUT_TEXTURE_TYPE_COLOR = 0x2,
                INPUT_TEXTURE_TYPE_MASKS = 0x3,
                INPUT_TEXTURE_TYPE_ROUGHNESS = 0x4,
                INPUT_TEXTURE_TYPE_PEARLESCENCE_MASK = 0x5,
                INPUT_TEXTURE_TYPE_AO = 0x6
            }
            // Alignment: 4
            // Members count: 10
            #[repr(u32)]
            pub enum CompMatPropertyMutatorType_t {
                COMP_MAT_PROPERTY_MUTATOR_INIT = 0x0,
                COMP_MAT_PROPERTY_MUTATOR_COPY_MATCHING_KEYS = 0x1,
                COMP_MAT_PROPERTY_MUTATOR_COPY_KEYS_WITH_SUFFIX = 0x2,
                COMP_MAT_PROPERTY_MUTATOR_COPY_PROPERTY = 0x3,
                COMP_MAT_PROPERTY_MUTATOR_SET_VALUE = 0x4,
                COMP_MAT_PROPERTY_MUTATOR_GENERATE_TEXTURE = 0x5,
                COMP_MAT_PROPERTY_MUTATOR_CONDITIONAL_MUTATORS = 0x6,
                COMP_MAT_PROPERTY_MUTATOR_POP_INPUT_QUEUE = 0x7,
                COMP_MAT_PROPERTY_MUTATOR_DRAW_TEXT = 0x8,
                COMP_MAT_PROPERTY_MUTATOR_RANDOM_ROLL_INPUT_VARIABLES = 0x9
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum CompMatPropertyMutatorConditionType_t {
                COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_EXISTS = 0x0,
                COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EXISTS = 0x1,
                COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EQUALS = 0x2
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum CompositeMaterialInputContainerSourceType_t {
                CONTAINER_SOURCE_TYPE_TARGET_MATERIAL = 0x0,
                CONTAINER_SOURCE_TYPE_MATERIAL_FROM_TARGET_ATTR = 0x1,
                CONTAINER_SOURCE_TYPE_SPECIFIC_MATERIAL = 0x2,
                CONTAINER_SOURCE_TYPE_LOOSE_VARIABLES = 0x3,
                CONTAINER_SOURCE_TYPE_VARIABLE_FROM_TARGET_ATTR = 0x4,
                CONTAINER_SOURCE_TYPE_TARGET_INSTANCE_MATERIAL = 0x5
            }
            // Parent: None
            // Fields count: 0
            pub mod CEntityComponent {
            }
            // Parent: None
            // Fields count: 11
            pub mod CEntityIdentity {
                pub const m_nameStringableIndex: usize = 0x14; // int32
                pub const m_name: usize = 0x18; // CUtlSymbolLarge
                pub const m_designerName: usize = 0x20; // CUtlSymbolLarge
                pub const m_flags: usize = 0x30; // uint32
                pub const m_worldGroupId: usize = 0x38; // WorldGroupId_t
                pub const m_fDataObjectTypes: usize = 0x3C; // uint32
                pub const m_PathIndex: usize = 0x40; // ChangeAccessorFieldPathIndex_t
                pub const m_pPrev: usize = 0x58; // CEntityIdentity*
                pub const m_pNext: usize = 0x60; // CEntityIdentity*
                pub const m_pPrevByClass: usize = 0x68; // CEntityIdentity*
                pub const m_pNextByClass: usize = 0x70; // CEntityIdentity*
            }
            // Parent: None
            // Fields count: 4
            pub mod CEntityInstance {
                pub const m_iszPrivateVScripts: usize = 0x8; // CUtlSymbolLarge
                pub const m_pEntity: usize = 0x10; // CEntityIdentity*
                pub const m_CScriptComponent: usize = 0x28; // CScriptComponent*
                pub const m_bVisibleinPVS: usize = 0x30; // bool
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CScriptComponent {
                pub const m_scriptClassName: usize = 0x30; // CUtlSymbolLarge
            }
            // Parent: CEntityComponent
            // Fields count: 2
            pub mod CBodyComponent {
                pub const m_pSceneNode: usize = 0x8; // CGameSceneNode*
                pub const __m_pChainEntity: usize = 0x20; // CNetworkVarChainer
            }
            // Parent: CBodyComponent
            // Fields count: 2
            pub mod CBodyComponentPoint {
                pub const m_sceneNode: usize = 0x50; // CGameSceneNode
                pub const __m_pChainEntity: usize = 0x1A0; // CNetworkVarChainer
            }
            // Parent: CBodyComponent
            // Fields count: 2
            pub mod CBodyComponentSkeletonInstance {
                pub const m_skeletonInstance: usize = 0x50; // CSkeletonInstance
                pub const __m_pChainEntity: usize = 0x430; // CNetworkVarChainer
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CHitboxComponent {
                pub const m_bvDisabledHitGroups: usize = 0x24; // uint32[1]
            }
            // Parent: CEntityComponent
            // Fields count: 66
            pub mod CLightComponent {
                pub const __m_pChainEntity: usize = 0x48; // CNetworkVarChainer
                pub const m_Color: usize = 0x85; // Color
                pub const m_SecondaryColor: usize = 0x89; // Color
                pub const m_flBrightness: usize = 0x90; // float32
                pub const m_flBrightnessScale: usize = 0x94; // float32
                pub const m_flBrightnessMult: usize = 0x98; // float32
                pub const m_flRange: usize = 0x9C; // float32
                pub const m_flFalloff: usize = 0xA0; // float32
                pub const m_flAttenuation0: usize = 0xA4; // float32
                pub const m_flAttenuation1: usize = 0xA8; // float32
                pub const m_flAttenuation2: usize = 0xAC; // float32
                pub const m_flTheta: usize = 0xB0; // float32
                pub const m_flPhi: usize = 0xB4; // float32
                pub const m_hLightCookie: usize = 0xB8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_nCascades: usize = 0xC0; // int32
                pub const m_nCastShadows: usize = 0xC4; // int32
                pub const m_nShadowWidth: usize = 0xC8; // int32
                pub const m_nShadowHeight: usize = 0xCC; // int32
                pub const m_bRenderDiffuse: usize = 0xD0; // bool
                pub const m_nRenderSpecular: usize = 0xD4; // int32
                pub const m_bRenderTransmissive: usize = 0xD8; // bool
                pub const m_flOrthoLightWidth: usize = 0xDC; // float32
                pub const m_flOrthoLightHeight: usize = 0xE0; // float32
                pub const m_nStyle: usize = 0xE4; // int32
                pub const m_Pattern: usize = 0xE8; // CUtlString
                pub const m_nCascadeRenderStaticObjects: usize = 0xF0; // int32
                pub const m_flShadowCascadeCrossFade: usize = 0xF4; // float32
                pub const m_flShadowCascadeDistanceFade: usize = 0xF8; // float32
                pub const m_flShadowCascadeDistance0: usize = 0xFC; // float32
                pub const m_flShadowCascadeDistance1: usize = 0x100; // float32
                pub const m_flShadowCascadeDistance2: usize = 0x104; // float32
                pub const m_flShadowCascadeDistance3: usize = 0x108; // float32
                pub const m_nShadowCascadeResolution0: usize = 0x10C; // int32
                pub const m_nShadowCascadeResolution1: usize = 0x110; // int32
                pub const m_nShadowCascadeResolution2: usize = 0x114; // int32
                pub const m_nShadowCascadeResolution3: usize = 0x118; // int32
                pub const m_bUsesBakedShadowing: usize = 0x11C; // bool
                pub const m_nShadowPriority: usize = 0x120; // int32
                pub const m_nBakedShadowIndex: usize = 0x124; // int32
                pub const m_bRenderToCubemaps: usize = 0x128; // bool
                pub const m_nDirectLight: usize = 0x12C; // int32
                pub const m_nIndirectLight: usize = 0x130; // int32
                pub const m_flFadeMinDist: usize = 0x134; // float32
                pub const m_flFadeMaxDist: usize = 0x138; // float32
                pub const m_flShadowFadeMinDist: usize = 0x13C; // float32
                pub const m_flShadowFadeMaxDist: usize = 0x140; // float32
                pub const m_bEnabled: usize = 0x144; // bool
                pub const m_bFlicker: usize = 0x145; // bool
                pub const m_bPrecomputedFieldsValid: usize = 0x146; // bool
                pub const m_vPrecomputedBoundsMins: usize = 0x148; // 
                pub const m_vPrecomputedBoundsMaxs: usize = 0x154; // 
                pub const m_vPrecomputedOBBOrigin: usize = 0x160; // 
                pub const m_vPrecomputedOBBAngles: usize = 0x16C; // QAngle
                pub const m_vPrecomputedOBBExtent: usize = 0x178; // 
                pub const m_flPrecomputedMaxRange: usize = 0x184; // float32
                pub const m_nFogLightingMode: usize = 0x188; // int32
                pub const m_flFogContributionStength: usize = 0x18C; // float32
                pub const m_flNearClipPlane: usize = 0x190; // float32
                pub const m_SkyColor: usize = 0x194; // Color
                pub const m_flSkyIntensity: usize = 0x198; // float32
                pub const m_SkyAmbientBounce: usize = 0x19C; // Color
                pub const m_bUseSecondaryColor: usize = 0x1A0; // bool
                pub const m_bMixedShadows: usize = 0x1A1; // bool
                pub const m_flLightStyleStartTime: usize = 0x1A4; // GameTime_t
                pub const m_flCapsuleLength: usize = 0x1A8; // float32
                pub const m_flMinRoughness: usize = 0x1AC; // float32
            }
            // Parent: CEntityComponent
            // Fields count: 5
            pub mod CRenderComponent {
                pub const __m_pChainEntity: usize = 0x10; // CNetworkVarChainer
                pub const m_bIsRenderingWithViewModels: usize = 0x50; // bool
                pub const m_nSplitscreenFlags: usize = 0x54; // uint32
                pub const m_bEnableRendering: usize = 0x60; // bool
                pub const m_bInterpolationReadyToDraw: usize = 0xB0; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod CBuoyancyHelper {
                pub const m_flFluidDensity: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 0
            pub mod CBasePlayerControllerAPI {
            }
            // Parent: None
            // Fields count: 2
            pub mod C_CommandContext {
                pub const needsprocessing: usize = 0x0; // bool
                pub const command_number: usize = 0x90; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod ViewAngleServerChange_t {
                pub const nType: usize = 0x30; // FixAngleSet_t
                pub const qAngle: usize = 0x34; // QAngle
                pub const nIndex: usize = 0x40; // uint32
            }
            // Parent: None
            // Fields count: 0
            pub mod CDynamicPropAPI {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_AutoaimServices {
            }
            // Parent: None
            // Fields count: 5
            pub mod audioparams_t {
                pub const localSound: usize = 0x8; // Vector[8]
                pub const soundscapeIndex: usize = 0x68; // int32
                pub const localBits: usize = 0x6C; // uint8
                pub const soundscapeEntityListIndex: usize = 0x70; // int32
                pub const soundEventHash: usize = 0x74; // uint32
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 20
            pub mod CPlayer_CameraServices {
                pub const m_vecCsViewPunchAngle: usize = 0x40; // QAngle
                pub const m_nCsViewPunchAngleTick: usize = 0x4C; // GameTick_t
                pub const m_flCsViewPunchAngleTickRatio: usize = 0x50; // float32
                pub const m_PlayerFog: usize = 0x58; // C_fogplayerparams_t
                pub const m_hColorCorrectionCtrl: usize = 0x98; // CHandle<C_ColorCorrection>
                pub const m_hViewEntity: usize = 0x9C; // CHandle<C_BaseEntity>
                pub const m_hTonemapController: usize = 0xA0; // CHandle<C_TonemapController2>
                pub const m_audio: usize = 0xA8; // audioparams_t
                pub const m_PostProcessingVolumes: usize = 0x120; // C_NetworkUtlVectorBase<CHandle<C_PostProcessingVolume>>
                pub const m_flOldPlayerZ: usize = 0x138; // float32
                pub const m_flOldPlayerViewOffsetZ: usize = 0x13C; // float32
                pub const m_CurrentFog: usize = 0x140; // fogparams_t
                pub const m_hOldFogController: usize = 0x1A8; // CHandle<C_FogController>
                pub const m_bOverrideFogColor: usize = 0x1AC; // bool[5]
                pub const m_OverrideFogColor: usize = 0x1B1; // Color[5]
                pub const m_bOverrideFogStartEnd: usize = 0x1C5; // bool[5]
                pub const m_fOverrideFogStart: usize = 0x1CC; // float32[5]
                pub const m_fOverrideFogEnd: usize = 0x1E0; // float32[5]
                pub const m_hActivePostProcessingVolume: usize = 0x1F4; // CHandle<C_PostProcessingVolume>
                pub const m_angDemoViewAngles: usize = 0x1F8; // QAngle
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_FlashlightServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_ItemServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 15
            pub mod CPlayer_MovementServices {
                pub const m_nImpulse: usize = 0x40; // int32
                pub const m_nButtons: usize = 0x48; // CInButtonState
                pub const m_nQueuedButtonDownMask: usize = 0x68; // uint64
                pub const m_nQueuedButtonChangeMask: usize = 0x70; // uint64
                pub const m_nButtonDoublePressed: usize = 0x78; // uint64
                pub const m_pButtonPressedCmdNumber: usize = 0x80; // uint32[64]
                pub const m_nLastCommandNumberProcessed: usize = 0x180; // uint32
                pub const m_nToggleButtonDownMask: usize = 0x188; // uint64
                pub const m_flMaxspeed: usize = 0x198; // float32
                pub const m_arrForceSubtickMoveWhen: usize = 0x19C; // float32[4]
                pub const m_flForwardMove: usize = 0x1AC; // float32
                pub const m_flLeftMove: usize = 0x1B0; // float32
                pub const m_flUpMove: usize = 0x1B4; // float32
                pub const m_vecLastMovementImpulses: usize = 0x1B8; // 
                pub const m_vecOldViewAngles: usize = 0x1C4; // QAngle
            }
            // Parent: CPlayer_MovementServices
            // Fields count: 12
            pub mod CPlayer_MovementServices_Humanoid {
                pub const m_flStepSoundTime: usize = 0x1D8; // float32
                pub const m_flFallVelocity: usize = 0x1DC; // float32
                pub const m_bInCrouch: usize = 0x1E0; // bool
                pub const m_nCrouchState: usize = 0x1E4; // uint32
                pub const m_flCrouchTransitionStartTime: usize = 0x1E8; // GameTime_t
                pub const m_bDucked: usize = 0x1EC; // bool
                pub const m_bDucking: usize = 0x1ED; // bool
                pub const m_bInDuckJump: usize = 0x1EE; // bool
                pub const m_groundNormal: usize = 0x1F0; // 
                pub const m_flSurfaceFriction: usize = 0x1FC; // float32
                pub const m_surfaceProps: usize = 0x200; // CUtlStringToken
                pub const m_nStepside: usize = 0x210; // int32
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 6
            pub mod CPlayer_ObserverServices {
                pub const m_iObserverMode: usize = 0x40; // uint8
                pub const m_hObserverTarget: usize = 0x44; // CHandle<C_BaseEntity>
                pub const m_iObserverLastMode: usize = 0x48; // ObserverMode_t
                pub const m_bForcedObserverMode: usize = 0x4C; // bool
                pub const m_flObserverChaseDistance: usize = 0x50; // float32
                pub const m_flObserverChaseDistanceCalcTime: usize = 0x54; // GameTime_t
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_UseServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_WaterServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 4
            pub mod CPlayer_WeaponServices {
                pub const m_hMyWeapons: usize = 0x40; // C_NetworkUtlVectorBase<CHandle<C_BasePlayerWeapon>>
                pub const m_hActiveWeapon: usize = 0x58; // CHandle<C_BasePlayerWeapon>
                pub const m_hLastWeapon: usize = 0x5C; // CHandle<C_BasePlayerWeapon>
                pub const m_iAmmo: usize = 0x60; // uint16[32]
            }
            // Parent: CBodyComponentSkeletonInstance
            // Fields count: 2
            pub mod CBodyComponentBaseAnimGraph {
                pub const m_animationController: usize = 0x460; // CBaseAnimGraphController
                pub const __m_pChainEntity: usize = 0x1C28; // CNetworkVarChainer
            }
            // Parent: None
            // Fields count: 2
            pub mod EntityRenderAttribute_t {
                pub const m_ID: usize = 0x30; // CUtlStringToken
                pub const m_Values: usize = 0x34; // Vector4D
            }
            // Parent: None
            // Fields count: 4
            pub mod ActiveModelConfig_t {
                pub const m_Handle: usize = 0x28; // ModelConfigHandle_t
                pub const m_Name: usize = 0x30; // CUtlSymbolLarge
                pub const m_AssociatedEntities: usize = 0x38; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
                pub const m_AssociatedEntityNames: usize = 0x50; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            }
            // Parent: CBodyComponentSkeletonInstance
            // Fields count: 1
            pub mod CBodyComponentBaseModelEntity {
                pub const __m_pChainEntity: usize = 0x460; // CNetworkVarChainer
            }
            // Parent: None
            // Fields count: 2
            pub mod CGameSceneNodeHandle {
                pub const m_hOwner: usize = 0x8; // CEntityHandle
                pub const m_name: usize = 0xC; // CUtlStringToken
            }
            // Parent: None
            // Fields count: 32
            pub mod CGameSceneNode {
                pub const m_nodeToWorld: usize = 0x10; // CTransform
                pub const m_pOwner: usize = 0x30; // CEntityInstance*
                pub const m_pParent: usize = 0x38; // CGameSceneNode*
                pub const m_pChild: usize = 0x40; // CGameSceneNode*
                pub const m_pNextSibling: usize = 0x48; // CGameSceneNode*
                pub const m_hParent: usize = 0x70; // CGameSceneNodeHandle
                pub const m_vecOrigin: usize = 0x80; // CNetworkOriginCellCoordQuantizedVector
                pub const m_angRotation: usize = 0xB8; // QAngle
                pub const m_flScale: usize = 0xC4; // float32
                pub const m_vecAbsOrigin: usize = 0xC8; // 
                pub const m_angAbsRotation: usize = 0xD4; // QAngle
                pub const m_flAbsScale: usize = 0xE0; // float32
                pub const m_nParentAttachmentOrBone: usize = 0xE4; // int16
                pub const m_bDebugAbsOriginChanges: usize = 0xE6; // bool
                pub const m_bDormant: usize = 0xE7; // bool
                pub const m_bForceParentToBeNetworked: usize = 0xE8; // bool
                pub const m_bDirtyHierarchy: usize = 0x0; // bitfield:1
                pub const m_bDirtyBoneMergeInfo: usize = 0x0; // bitfield:1
                pub const m_bNetworkedPositionChanged: usize = 0x0; // bitfield:1
                pub const m_bNetworkedAnglesChanged: usize = 0x0; // bitfield:1
                pub const m_bNetworkedScaleChanged: usize = 0x0; // bitfield:1
                pub const m_bWillBeCallingPostDataUpdate: usize = 0x0; // bitfield:1
                pub const m_bBoneMergeFlex: usize = 0x0; // bitfield:1
                pub const m_nLatchAbsOrigin: usize = 0x0; // bitfield:2
                pub const m_bDirtyBoneMergeBoneToRoot: usize = 0x0; // bitfield:1
                pub const m_nHierarchicalDepth: usize = 0xEB; // uint8
                pub const m_nHierarchyType: usize = 0xEC; // uint8
                pub const m_nDoNotSetAnimTimeInInvalidatePhysicsCount: usize = 0xED; // uint8
                pub const m_name: usize = 0xF0; // CUtlStringToken
                pub const m_hierarchyAttachName: usize = 0x130; // CUtlStringToken
                pub const m_flZOffset: usize = 0x134; // float32
                pub const m_vRenderOrigin: usize = 0x138; // 
            }
            // Parent: None
            // Fields count: 6
            pub mod SequenceHistory_t {
                pub const m_hSequence: usize = 0x0; // HSequence
                pub const m_flSeqStartTime: usize = 0x4; // GameTime_t
                pub const m_flSeqFixedCycle: usize = 0x8; // float32
                pub const m_nSeqLoopMode: usize = 0xC; // AnimLoopMode_t
                pub const m_flPlaybackRate: usize = 0x10; // float32
                pub const m_flCyclesPerSecond: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod CNetworkedSequenceOperation {
                pub const m_hSequence: usize = 0x8; // HSequence
                pub const m_flPrevCycle: usize = 0xC; // float32
                pub const m_flCycle: usize = 0x10; // float32
                pub const m_flWeight: usize = 0x14; // CNetworkedQuantizedFloat
                pub const m_bSequenceChangeNetworked: usize = 0x1C; // bool
                pub const m_bDiscontinuity: usize = 0x1D; // bool
                pub const m_flPrevCycleFromDiscontinuity: usize = 0x20; // float32
                pub const m_flPrevCycleForAnimEventDetection: usize = 0x24; // float32
            }
            // Parent: None
            // Fields count: 7
            pub mod CModelState {
                pub const m_hModel: usize = 0xA0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_ModelName: usize = 0xA8; // CUtlSymbolLarge
                pub const m_bClientClothCreationSuppressed: usize = 0xE8; // bool
                pub const m_MeshGroupMask: usize = 0x180; // uint64
                pub const m_nIdealMotionType: usize = 0x202; // int8
                pub const m_nForceLOD: usize = 0x203; // int8
                pub const m_nClothUpdateFlags: usize = 0x204; // int8
            }
            // Parent: CGameSceneNode
            // Fields count: 8
            pub mod CSkeletonInstance {
                pub const m_modelState: usize = 0x160; // CModelState
                pub const m_bIsAnimationEnabled: usize = 0x370; // bool
                pub const m_bUseParentRenderBounds: usize = 0x371; // bool
                pub const m_bDisableSolidCollisionsForHierarchy: usize = 0x372; // bool
                pub const m_bDirtyMotionType: usize = 0x0; // bitfield:1
                pub const m_bIsGeneratingLatchedParentSpaceState: usize = 0x0; // bitfield:1
                pub const m_materialGroup: usize = 0x374; // CUtlStringToken
                pub const m_nHitboxSet: usize = 0x378; // uint8
            }
            // Parent: None
            // Fields count: 2
            pub mod IntervalTimer {
                pub const m_timestamp: usize = 0x8; // GameTime_t
                pub const m_nWorldGroupId: usize = 0xC; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 4
            pub mod CountdownTimer {
                pub const m_duration: usize = 0x8; // float32
                pub const m_timestamp: usize = 0xC; // GameTime_t
                pub const m_timescale: usize = 0x10; // float32
                pub const m_nWorldGroupId: usize = 0x14; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 3
            pub mod EngineCountdownTimer {
                pub const m_duration: usize = 0x8; // float32
                pub const m_timestamp: usize = 0xC; // float32
                pub const m_timescale: usize = 0x10; // float32
            }
            // Parent: IntervalTimer
            // Fields count: 7
            pub mod CTimeline {
                pub const m_flValues: usize = 0x10; // float32[64]
                pub const m_nValueCounts: usize = 0x110; // int32[64]
                pub const m_nBucketCount: usize = 0x210; // int32
                pub const m_flInterval: usize = 0x214; // float32
                pub const m_flFinalValue: usize = 0x218; // float32
                pub const m_nCompressionType: usize = 0x21C; // TimelineCompression_t
                pub const m_bStopped: usize = 0x220; // bool
            }
            // Parent: None
            // Fields count: 24
            pub mod CAnimGraphNetworkedVariables {
                pub const m_PredNetBoolVariables: usize = 0x8; // C_NetworkUtlVectorBase<uint32>
                pub const m_PredNetByteVariables: usize = 0x20; // C_NetworkUtlVectorBase<uint8>
                pub const m_PredNetUInt16Variables: usize = 0x38; // C_NetworkUtlVectorBase<uint16>
                pub const m_PredNetIntVariables: usize = 0x50; // C_NetworkUtlVectorBase<int32>
                pub const m_PredNetUInt32Variables: usize = 0x68; // C_NetworkUtlVectorBase<uint32>
                pub const m_PredNetUInt64Variables: usize = 0x80; // C_NetworkUtlVectorBase<uint64>
                pub const m_PredNetFloatVariables: usize = 0x98; // C_NetworkUtlVectorBase<float32>
                pub const m_PredNetVectorVariables: usize = 0xB0; // C_NetworkUtlVectorBase<Vector>
                pub const m_PredNetQuaternionVariables: usize = 0xC8; // C_NetworkUtlVectorBase<Quaternion>
                pub const m_PredNetGlobalSymbolVariables: usize = 0xE0; // C_NetworkUtlVectorBase<CGlobalSymbol>
                pub const m_OwnerOnlyPredNetBoolVariables: usize = 0xF8; // C_NetworkUtlVectorBase<uint32>
                pub const m_OwnerOnlyPredNetByteVariables: usize = 0x110; // C_NetworkUtlVectorBase<uint8>
                pub const m_OwnerOnlyPredNetUInt16Variables: usize = 0x128; // C_NetworkUtlVectorBase<uint16>
                pub const m_OwnerOnlyPredNetIntVariables: usize = 0x140; // C_NetworkUtlVectorBase<int32>
                pub const m_OwnerOnlyPredNetUInt32Variables: usize = 0x158; // C_NetworkUtlVectorBase<uint32>
                pub const m_OwnerOnlyPredNetUInt64Variables: usize = 0x170; // C_NetworkUtlVectorBase<uint64>
                pub const m_OwnerOnlyPredNetFloatVariables: usize = 0x188; // C_NetworkUtlVectorBase<float32>
                pub const m_OwnerOnlyPredNetVectorVariables: usize = 0x1A0; // C_NetworkUtlVectorBase<Vector>
                pub const m_OwnerOnlyPredNetQuaternionVariables: usize = 0x1B8; // C_NetworkUtlVectorBase<Quaternion>
                pub const m_OwnerOnlyPredNetGlobalSymbolVariables: usize = 0x1D0; // C_NetworkUtlVectorBase<CGlobalSymbol>
                pub const m_nBoolVariablesCount: usize = 0x1E8; // int32
                pub const m_nOwnerOnlyBoolVariablesCount: usize = 0x1EC; // int32
                pub const m_nRandomSeedOffset: usize = 0x1F0; // int32
                pub const m_flLastTeleportTime: usize = 0x1F4; // float32
            }
            // Parent: None
            // Fields count: 0
            pub mod C_BaseEntityAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CTakeDamageInfoAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CClientPointEntityAPI {
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 1
            pub mod CPulseGraphInstance_ClientEntity {
                pub const m_pParent: usize = 0xD8; // CClientScriptEntity*
            }
            // Parent: CEntityInstance
            // Fields count: 80
            pub mod C_BaseEntity {
                pub const m_CBodyComponent: usize = 0x38; // CBodyComponent*
                pub const m_NetworkTransmitComponent: usize = 0x40; // CNetworkTransmitComponent
                pub const m_nLastThinkTick: usize = 0x310; // GameTick_t
                pub const m_pGameSceneNode: usize = 0x318; // CGameSceneNode*
                pub const m_pRenderComponent: usize = 0x320; // CRenderComponent*
                pub const m_pCollision: usize = 0x328; // CCollisionProperty*
                pub const m_iMaxHealth: usize = 0x330; // int32
                pub const m_iHealth: usize = 0x334; // int32
                pub const m_lifeState: usize = 0x338; // uint8
                pub const m_bTakesDamage: usize = 0x339; // bool
                pub const m_nTakeDamageFlags: usize = 0x33C; // TakeDamageFlags_t
                pub const m_bIsPlatform: usize = 0x340; // bool
                pub const m_ubInterpolationFrame: usize = 0x341; // uint8
                pub const m_hSceneObjectController: usize = 0x344; // CHandle<C_BaseEntity>
                pub const m_nNoInterpolationTick: usize = 0x348; // int32
                pub const m_nVisibilityNoInterpolationTick: usize = 0x34C; // int32
                pub const m_flProxyRandomValue: usize = 0x350; // float32
                pub const m_iEFlags: usize = 0x354; // int32
                pub const m_nWaterType: usize = 0x358; // uint8
                pub const m_bInterpolateEvenWithNoModel: usize = 0x359; // bool
                pub const m_bPredictionEligible: usize = 0x35A; // bool
                pub const m_bApplyLayerMatchIDToModel: usize = 0x35B; // bool
                pub const m_tokLayerMatchID: usize = 0x35C; // CUtlStringToken
                pub const m_nSubclassID: usize = 0x360; // CUtlStringToken
                pub const m_nSimulationTick: usize = 0x370; // int32
                pub const m_iCurrentThinkContext: usize = 0x374; // int32
                pub const m_aThinkFunctions: usize = 0x378; // CUtlVector<thinkfunc_t>
                pub const m_nDisableContextThinkStartTick: usize = 0x390; // GameTick_t
                pub const m_flAnimTime: usize = 0x394; // float32
                pub const m_flSimulationTime: usize = 0x398; // float32
                pub const m_nSceneObjectOverrideFlags: usize = 0x39C; // uint8
                pub const m_bHasSuccessfullyInterpolated: usize = 0x39D; // bool
                pub const m_bHasAddedVarsToInterpolation: usize = 0x39E; // bool
                pub const m_bRenderEvenWhenNotSuccessfullyInterpolated: usize = 0x39F; // bool
                pub const m_nInterpolationLatchDirtyFlags: usize = 0x3A0; // int32[2]
                pub const m_ListEntry: usize = 0x3A8; // uint16[11]
                pub const m_flCreateTime: usize = 0x3C0; // GameTime_t
                pub const m_flSpeed: usize = 0x3C4; // float32
                pub const m_EntClientFlags: usize = 0x3C8; // uint16
                pub const m_bClientSideRagdoll: usize = 0x3CA; // bool
                pub const m_iTeamNum: usize = 0x3CB; // uint8
                pub const m_spawnflags: usize = 0x3CC; // uint32
                pub const m_nNextThinkTick: usize = 0x3D0; // GameTick_t
                pub const m_fFlags: usize = 0x3D4; // uint32
                pub const m_vecAbsVelocity: usize = 0x3D8; // 
                pub const m_vecVelocity: usize = 0x3E8; // CNetworkVelocityVector
                pub const m_vecBaseVelocity: usize = 0x418; // 
                pub const m_hEffectEntity: usize = 0x424; // CHandle<C_BaseEntity>
                pub const m_hOwnerEntity: usize = 0x428; // CHandle<C_BaseEntity>
                pub const m_MoveCollide: usize = 0x42C; // MoveCollide_t
                pub const m_MoveType: usize = 0x42D; // MoveType_t
                pub const m_nActualMoveType: usize = 0x42E; // MoveType_t
                pub const m_flWaterLevel: usize = 0x430; // float32
                pub const m_fEffects: usize = 0x434; // uint32
                pub const m_hGroundEntity: usize = 0x438; // CHandle<C_BaseEntity>
                pub const m_flFriction: usize = 0x43C; // float32
                pub const m_flElasticity: usize = 0x440; // float32
                pub const m_flGravityScale: usize = 0x444; // float32
                pub const m_flTimeScale: usize = 0x448; // float32
                pub const m_bAnimatedEveryTick: usize = 0x44C; // bool
                pub const m_flNavIgnoreUntilTime: usize = 0x450; // GameTime_t
                pub const m_hThink: usize = 0x454; // uint16
                pub const m_fBBoxVisFlags: usize = 0x460; // uint8
                pub const m_bPredictable: usize = 0x461; // bool
                pub const m_bRenderWithViewModels: usize = 0x462; // bool
                pub const m_nSplitUserPlayerPredictionSlot: usize = 0x464; // CSplitScreenSlot
                pub const m_nFirstPredictableCommand: usize = 0x468; // int32
                pub const m_nLastPredictableCommand: usize = 0x46C; // int32
                pub const m_hOldMoveParent: usize = 0x470; // CHandle<C_BaseEntity>
                pub const m_Particles: usize = 0x478; // CParticleProperty
                pub const m_vecPredictedScriptFloats: usize = 0x4A0; // CUtlVector<float32>
                pub const m_vecPredictedScriptFloatIDs: usize = 0x4B8; // CUtlVector<int32>
                pub const m_nNextScriptVarRecordID: usize = 0x4E8; // int32
                pub const m_vecAngVelocity: usize = 0x4F8; // QAngle
                pub const m_DataChangeEventRef: usize = 0x504; // int32
                pub const m_dependencies: usize = 0x508; // CUtlVector<CEntityHandle>
                pub const m_nCreationTick: usize = 0x520; // int32
                pub const m_bAnimTimeChanged: usize = 0x539; // bool
                pub const m_bSimulationTimeChanged: usize = 0x53A; // bool
                pub const m_sUniqueHammerID: usize = 0x548; // CUtlString
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod CLogicalEntity {
            }
            // Parent: None
            // Fields count: 5
            pub mod C_BaseFlex__Emphasized_Phoneme {
                pub const m_sClassName: usize = 0x0; // CUtlString
                pub const m_flAmount: usize = 0x18; // float32
                pub const m_bRequired: usize = 0x1C; // bool
                pub const m_bBasechecked: usize = 0x1D; // bool
                pub const m_bValid: usize = 0x1E; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 18
            pub mod C_ColorCorrection {
                pub const m_vecOrigin: usize = 0x550; // 
                pub const m_MinFalloff: usize = 0x55C; // float32
                pub const m_MaxFalloff: usize = 0x560; // float32
                pub const m_flFadeInDuration: usize = 0x564; // float32
                pub const m_flFadeOutDuration: usize = 0x568; // float32
                pub const m_flMaxWeight: usize = 0x56C; // float32
                pub const m_flCurWeight: usize = 0x570; // float32
                pub const m_netlookupFilename: usize = 0x574; // char[512]
                pub const m_bEnabled: usize = 0x774; // bool
                pub const m_bMaster: usize = 0x775; // bool
                pub const m_bClientSide: usize = 0x776; // bool
                pub const m_bExclusive: usize = 0x777; // bool
                pub const m_bEnabledOnClient: usize = 0x778; // bool[1]
                pub const m_flCurWeightOnClient: usize = 0x77C; // float32[1]
                pub const m_bFadingIn: usize = 0x780; // bool[1]
                pub const m_flFadeStartWeight: usize = 0x784; // float32[1]
                pub const m_flFadeStartTime: usize = 0x788; // float32[1]
                pub const m_flFadeDuration: usize = 0x78C; // float32[1]
            }
            // Parent: C_BaseEntity
            // Fields count: 1
            pub mod C_EnvWindClientside {
                pub const m_EnvWindShared: usize = 0x550; // C_EnvWindShared
            }
            // Parent: C_BaseEntity
            // Fields count: 3
            pub mod C_EntityFlame {
                pub const m_hEntAttached: usize = 0x550; // CHandle<C_BaseEntity>
                pub const m_hOldAttached: usize = 0x578; // CHandle<C_BaseEntity>
                pub const m_bCheapEffect: usize = 0x57C; // bool
            }
            // Parent: None
            // Fields count: 30
            pub mod CProjectedTextureBase {
                pub const m_hTargetEntity: usize = 0xC; // CHandle<C_BaseEntity>
                pub const m_bState: usize = 0x10; // bool
                pub const m_bAlwaysUpdate: usize = 0x11; // bool
                pub const m_flLightFOV: usize = 0x14; // float32
                pub const m_bEnableShadows: usize = 0x18; // bool
                pub const m_bSimpleProjection: usize = 0x19; // bool
                pub const m_bLightOnlyTarget: usize = 0x1A; // bool
                pub const m_bLightWorld: usize = 0x1B; // bool
                pub const m_bCameraSpace: usize = 0x1C; // bool
                pub const m_flBrightnessScale: usize = 0x20; // float32
                pub const m_LightColor: usize = 0x24; // Color
                pub const m_flIntensity: usize = 0x28; // float32
                pub const m_flLinearAttenuation: usize = 0x2C; // float32
                pub const m_flQuadraticAttenuation: usize = 0x30; // float32
                pub const m_bVolumetric: usize = 0x34; // bool
                pub const m_flVolumetricIntensity: usize = 0x38; // float32
                pub const m_flNoiseStrength: usize = 0x3C; // float32
                pub const m_flFlashlightTime: usize = 0x40; // float32
                pub const m_nNumPlanes: usize = 0x44; // uint32
                pub const m_flPlaneOffset: usize = 0x48; // float32
                pub const m_flColorTransitionTime: usize = 0x4C; // float32
                pub const m_flAmbient: usize = 0x50; // float32
                pub const m_SpotlightTextureName: usize = 0x54; // char[512]
                pub const m_nSpotlightTextureFrame: usize = 0x254; // int32
                pub const m_nShadowQuality: usize = 0x258; // uint32
                pub const m_flNearZ: usize = 0x25C; // float32
                pub const m_flFarZ: usize = 0x260; // float32
                pub const m_flProjectionSize: usize = 0x264; // float32
                pub const m_flRotation: usize = 0x268; // float32
                pub const m_bFlipHorizontal: usize = 0x26C; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 4
            pub mod C_BaseFire {
                pub const m_flScale: usize = 0x550; // float32
                pub const m_flStartScale: usize = 0x554; // float32
                pub const m_flScaleTime: usize = 0x558; // float32
                pub const m_nFlags: usize = 0x55C; // uint32
            }
            // Parent: C_BaseFire
            // Fields count: 13
            pub mod C_FireSmoke {
                pub const m_nFlameModelIndex: usize = 0x560; // int32
                pub const m_nFlameFromAboveModelIndex: usize = 0x564; // int32
                pub const m_flScaleRegister: usize = 0x568; // float32
                pub const m_flScaleStart: usize = 0x56C; // float32
                pub const m_flScaleEnd: usize = 0x570; // float32
                pub const m_flScaleTimeStart: usize = 0x574; // GameTime_t
                pub const m_flScaleTimeEnd: usize = 0x578; // GameTime_t
                pub const m_flChildFlameSpread: usize = 0x57C; // float32
                pub const m_flClipPerc: usize = 0x590; // float32
                pub const m_bClipTested: usize = 0x594; // bool
                pub const m_bFadingOut: usize = 0x595; // bool
                pub const m_tParticleSpawn: usize = 0x598; // TimedEvent
                pub const m_pFireOverlay: usize = 0x5A0; // CFireOverlay*
            }
            // Parent: None
            // Fields count: 1
            pub mod C_RopeKeyframe__CPhysicsDelegate {
                pub const m_pKeyframe: usize = 0x8; // C_RopeKeyframe*
            }
            // Parent: None
            // Fields count: 1
            pub mod C_SceneEntity__QueuedEvents_t {
                pub const starttime: usize = 0x0; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_TintController {
            }
            // Parent: None
            // Fields count: 13
            pub mod CFlashlightEffect {
                pub const m_bIsOn: usize = 0x10; // bool
                pub const m_bMuzzleFlashEnabled: usize = 0x20; // bool
                pub const m_flMuzzleFlashBrightness: usize = 0x24; // float32
                pub const m_quatMuzzleFlashOrientation: usize = 0x30; // Quaternion
                pub const m_vecMuzzleFlashOrigin: usize = 0x40; // 
                pub const m_flFov: usize = 0x4C; // float32
                pub const m_flFarZ: usize = 0x50; // float32
                pub const m_flLinearAtten: usize = 0x54; // float32
                pub const m_bCastsShadows: usize = 0x58; // bool
                pub const m_flCurrentPullBackDist: usize = 0x5C; // float32
                pub const m_FlashlightTexture: usize = 0x60; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_MuzzleFlashTexture: usize = 0x68; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_textureName: usize = 0x70; // char[64]
            }
            // Parent: None
            // Fields count: 5
            pub mod CInterpolatedValue {
                pub const m_flStartTime: usize = 0x0; // float32
                pub const m_flEndTime: usize = 0x4; // float32
                pub const m_flStartValue: usize = 0x8; // float32
                pub const m_flEndValue: usize = 0xC; // float32
                pub const m_nInterpType: usize = 0x10; // int32
            }
            // Parent: None
            // Fields count: 4
            pub mod CGlowSprite {
                pub const m_vColor: usize = 0x0; // 
                pub const m_flHorzSize: usize = 0xC; // float32
                pub const m_flVertSize: usize = 0x10; // float32
                pub const m_hMaterial: usize = 0x18; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: None
            // Fields count: 15
            pub mod CGlowOverlay {
                pub const m_vPos: usize = 0x8; // 
                pub const m_bDirectional: usize = 0x14; // bool
                pub const m_vDirection: usize = 0x18; // 
                pub const m_bInSky: usize = 0x24; // bool
                pub const m_skyObstructionScale: usize = 0x28; // float32
                pub const m_Sprites: usize = 0x30; // CGlowSprite[4]
                pub const m_nSprites: usize = 0xB0; // int32
                pub const m_flProxyRadius: usize = 0xB4; // float32
                pub const m_flHDRColorScale: usize = 0xB8; // float32
                pub const m_flGlowObstructionScale: usize = 0xBC; // float32
                pub const m_bCacheGlowObstruction: usize = 0xC0; // bool
                pub const m_bCacheSkyObstruction: usize = 0xC1; // bool
                pub const m_bActivated: usize = 0xC2; // int16
                pub const m_ListIndex: usize = 0xC4; // uint16
                pub const m_queryHandle: usize = 0xC8; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod IClientAlphaProperty {
            }
            // Parent: C_BaseEntity
            // Fields count: 2
            pub mod CSkyboxReference {
                pub const m_worldGroupId: usize = 0x550; // WorldGroupId_t
                pub const m_hSkyCamera: usize = 0x554; // CHandle<C_SkyCamera>
            }
            // Parent: C_BaseEntity
            // Fields count: 4
            pub mod C_SkyCamera {
                pub const m_skyboxData: usize = 0x550; // sky3dparams_t
                pub const m_skyboxSlotToken: usize = 0x5E0; // CUtlStringToken
                pub const m_bUseAngles: usize = 0x5E4; // bool
                pub const m_pNext: usize = 0x5E8; // C_SkyCamera*
            }
            // Parent: None
            // Fields count: 2
            pub mod TimedEvent {
                pub const m_TimeBetweenEvents: usize = 0x0; // float32
                pub const m_fNextEvent: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod VPhysicsCollisionAttribute_t {
                pub const m_nInteractsAs: usize = 0x8; // uint64
                pub const m_nInteractsWith: usize = 0x10; // uint64
                pub const m_nInteractsExclude: usize = 0x18; // uint64
                pub const m_nEntityId: usize = 0x20; // uint32
                pub const m_nOwnerId: usize = 0x24; // uint32
                pub const m_nHierarchyId: usize = 0x28; // uint16
                pub const m_nCollisionGroup: usize = 0x2A; // uint8
                pub const m_nCollisionFunctionMask: usize = 0x2B; // uint8
            }
            // Parent: None
            // Fields count: 17
            pub mod CCollisionProperty {
                pub const m_collisionAttribute: usize = 0x10; // VPhysicsCollisionAttribute_t
                pub const m_vecMins: usize = 0x40; // 
                pub const m_vecMaxs: usize = 0x4C; // 
                pub const m_usSolidFlags: usize = 0x5A; // uint8
                pub const m_nSolidType: usize = 0x5B; // SolidType_t
                pub const m_triggerBloat: usize = 0x5C; // uint8
                pub const m_nSurroundType: usize = 0x5D; // SurroundingBoundsType_t
                pub const m_CollisionGroup: usize = 0x5E; // uint8
                pub const m_nEnablePhysics: usize = 0x5F; // uint8
                pub const m_flBoundingRadius: usize = 0x60; // float32
                pub const m_vecSpecifiedSurroundingMins: usize = 0x64; // 
                pub const m_vecSpecifiedSurroundingMaxs: usize = 0x70; // 
                pub const m_vecSurroundingMaxs: usize = 0x7C; // 
                pub const m_vecSurroundingMins: usize = 0x88; // 
                pub const m_vCapsuleCenter1: usize = 0x94; // 
                pub const m_vCapsuleCenter2: usize = 0xA0; // 
                pub const m_flCapsuleRadius: usize = 0xAC; // float32
            }
            // Parent: None
            // Fields count: 12
            pub mod CDecalInfo {
                pub const m_flAnimationScale: usize = 0x0; // float32
                pub const m_flAnimationLifeSpan: usize = 0x4; // float32
                pub const m_flPlaceTime: usize = 0x8; // float32
                pub const m_flFadeStartTime: usize = 0xC; // float32
                pub const m_flFadeDuration: usize = 0x10; // float32
                pub const m_nVBSlot: usize = 0x14; // int32
                pub const m_nBoneIndex: usize = 0x18; // int32
                pub const m_vPosition: usize = 0x28; // 
                pub const m_flBoundingRadiusSqr: usize = 0x34; // float32
                pub const m_pNext: usize = 0x40; // CDecalInfo*
                pub const m_pPrev: usize = 0x48; // CDecalInfo*
                pub const m_nDecalMaterialIndex: usize = 0xA8; // int32
            }
            // Parent: None
            // Fields count: 21
            pub mod CEffectData {
                pub const m_vOrigin: usize = 0x8; // 
                pub const m_vStart: usize = 0x14; // 
                pub const m_vNormal: usize = 0x20; // 
                pub const m_vAngles: usize = 0x2C; // QAngle
                pub const m_hEntity: usize = 0x38; // CEntityHandle
                pub const m_hOtherEntity: usize = 0x3C; // CEntityHandle
                pub const m_flScale: usize = 0x40; // float32
                pub const m_flMagnitude: usize = 0x44; // float32
                pub const m_flRadius: usize = 0x48; // float32
                pub const m_nSurfaceProp: usize = 0x4C; // CUtlStringToken
                pub const m_nEffectIndex: usize = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_nDamageType: usize = 0x58; // uint32
                pub const m_nPenetrate: usize = 0x5C; // uint8
                pub const m_nMaterial: usize = 0x5E; // uint16
                pub const m_nHitBox: usize = 0x60; // uint16
                pub const m_nColor: usize = 0x62; // uint8
                pub const m_fFlags: usize = 0x63; // uint8
                pub const m_nAttachmentIndex: usize = 0x64; // AttachmentHandle_t
                pub const m_nAttachmentName: usize = 0x68; // CUtlStringToken
                pub const m_iEffectName: usize = 0x6C; // uint16
                pub const m_nExplosionType: usize = 0x6E; // uint8
            }
            // Parent: C_BaseEntity
            // Fields count: 2
            pub mod C_EnvDetailController {
                pub const m_flFadeStartDist: usize = 0x550; // float32
                pub const m_flFadeEndDist: usize = 0x554; // float32
            }
            // Parent: None
            // Fields count: 29
            pub mod C_EnvWindShared {
                pub const m_flStartTime: usize = 0x8; // GameTime_t
                pub const m_iWindSeed: usize = 0xC; // uint32
                pub const m_iMinWind: usize = 0x10; // uint16
                pub const m_iMaxWind: usize = 0x12; // uint16
                pub const m_windRadius: usize = 0x14; // int32
                pub const m_iMinGust: usize = 0x18; // uint16
                pub const m_iMaxGust: usize = 0x1A; // uint16
                pub const m_flMinGustDelay: usize = 0x1C; // float32
                pub const m_flMaxGustDelay: usize = 0x20; // float32
                pub const m_flGustDuration: usize = 0x24; // float32
                pub const m_iGustDirChange: usize = 0x28; // uint16
                pub const m_location: usize = 0x2C; // 
                pub const m_iszGustSound: usize = 0x38; // int32
                pub const m_iWindDir: usize = 0x3C; // int32
                pub const m_flWindSpeed: usize = 0x40; // float32
                pub const m_currentWindVector: usize = 0x44; // 
                pub const m_CurrentSwayVector: usize = 0x50; // 
                pub const m_PrevSwayVector: usize = 0x5C; // 
                pub const m_iInitialWindDir: usize = 0x68; // uint16
                pub const m_flInitialWindSpeed: usize = 0x6C; // float32
                pub const m_flVariationTime: usize = 0x70; // GameTime_t
                pub const m_flSwayTime: usize = 0x74; // GameTime_t
                pub const m_flSimTime: usize = 0x78; // GameTime_t
                pub const m_flSwitchTime: usize = 0x7C; // GameTime_t
                pub const m_flAveWindSpeed: usize = 0x80; // float32
                pub const m_bGusting: usize = 0x84; // bool
                pub const m_flWindAngleVariation: usize = 0x88; // float32
                pub const m_flWindSpeedVariation: usize = 0x8C; // float32
                pub const m_iEntIndex: usize = 0x90; // CEntityIndex
            }
            // Parent: None
            // Fields count: 2
            pub mod C_EnvWindShared__WindAveEvent_t {
                pub const m_flStartWindSpeed: usize = 0x0; // float32
                pub const m_flAveWindSpeed: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod C_EnvWindShared__WindVariationEvent_t {
                pub const m_flWindAngleVariation: usize = 0x0; // float32
                pub const m_flWindSpeedVariation: usize = 0x4; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_InfoLadderDismount {
            }
            // Parent: None
            // Fields count: 12
            pub mod shard_model_desc_t {
                pub const m_nModelID: usize = 0x8; // int32
                pub const m_hMaterial: usize = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_solid: usize = 0x18; // ShardSolid_t
                pub const m_ShatterPanelMode: usize = 0x19; // ShatterPanelMode
                pub const m_vecPanelSize: usize = 0x1C; // Vector2D
                pub const m_vecStressPositionA: usize = 0x24; // Vector2D
                pub const m_vecStressPositionB: usize = 0x2C; // Vector2D
                pub const m_vecPanelVertices: usize = 0x38; // C_NetworkUtlVectorBase<Vector2D>
                pub const m_flGlassHalfThickness: usize = 0x50; // float32
                pub const m_bHasParent: usize = 0x54; // bool
                pub const m_bParentFrozen: usize = 0x55; // bool
                pub const m_SurfacePropStringToken: usize = 0x58; // CUtlStringToken
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_GameRulesProxy {
            }
            // Parent: None
            // Fields count: 0
            pub mod C_GameRules {
            }
            // Parent: None
            // Fields count: 11
            pub mod CGlowProperty {
                pub const m_fGlowColor: usize = 0x8; // 
                pub const m_iGlowType: usize = 0x30; // int32
                pub const m_iGlowTeam: usize = 0x34; // int32
                pub const m_nGlowRange: usize = 0x38; // int32
                pub const m_nGlowRangeMin: usize = 0x3C; // int32
                pub const m_glowColorOverride: usize = 0x40; // Color
                pub const m_bFlashing: usize = 0x44; // bool
                pub const m_flGlowTime: usize = 0x48; // float32
                pub const m_flGlowStartTime: usize = 0x4C; // float32
                pub const m_bEligibleForScreenHighlight: usize = 0x50; // bool
                pub const m_bGlowing: usize = 0x51; // bool
            }
            // Parent: C_GameRules
            // Fields count: 0
            pub mod C_MultiplayRules {
            }
            // Parent: None
            // Fields count: 25
            pub mod fogparams_t {
                pub const dirPrimary: usize = 0x8; // 
                pub const colorPrimary: usize = 0x14; // Color
                pub const colorSecondary: usize = 0x18; // Color
                pub const colorPrimaryLerpTo: usize = 0x1C; // Color
                pub const colorSecondaryLerpTo: usize = 0x20; // Color
                pub const start: usize = 0x24; // float32
                pub const end: usize = 0x28; // float32
                pub const farz: usize = 0x2C; // float32
                pub const maxdensity: usize = 0x30; // float32
                pub const exponent: usize = 0x34; // float32
                pub const HDRColorScale: usize = 0x38; // float32
                pub const skyboxFogFactor: usize = 0x3C; // float32
                pub const skyboxFogFactorLerpTo: usize = 0x40; // float32
                pub const startLerpTo: usize = 0x44; // float32
                pub const endLerpTo: usize = 0x48; // float32
                pub const maxdensityLerpTo: usize = 0x4C; // float32
                pub const lerptime: usize = 0x50; // GameTime_t
                pub const duration: usize = 0x54; // float32
                pub const blendtobackground: usize = 0x58; // float32
                pub const scattering: usize = 0x5C; // float32
                pub const locallightscale: usize = 0x60; // float32
                pub const enable: usize = 0x64; // bool
                pub const blend: usize = 0x65; // bool
                pub const m_bNoReflectionFog: usize = 0x66; // bool
                pub const m_bPadding: usize = 0x67; // bool
            }
            // Parent: None
            // Fields count: 14
            pub mod C_fogplayerparams_t {
                pub const m_hCtrl: usize = 0x8; // CHandle<C_FogController>
                pub const m_flTransitionTime: usize = 0xC; // float32
                pub const m_OldColor: usize = 0x10; // Color
                pub const m_flOldStart: usize = 0x14; // float32
                pub const m_flOldEnd: usize = 0x18; // float32
                pub const m_flOldMaxDensity: usize = 0x1C; // float32
                pub const m_flOldHDRColorScale: usize = 0x20; // float32
                pub const m_flOldFarZ: usize = 0x24; // float32
                pub const m_NewColor: usize = 0x28; // Color
                pub const m_flNewStart: usize = 0x2C; // float32
                pub const m_flNewEnd: usize = 0x30; // float32
                pub const m_flNewMaxDensity: usize = 0x34; // float32
                pub const m_flNewHDRColorScale: usize = 0x38; // float32
                pub const m_flNewFarZ: usize = 0x3C; // float32
            }
            // Parent: None
            // Fields count: 6
            pub mod sky3dparams_t {
                pub const scale: usize = 0x8; // int16
                pub const origin: usize = 0xC; // 
                pub const bClip3DSkyBoxNearToWorldFar: usize = 0x18; // bool
                pub const flClip3DSkyBoxNearToWorldFarOffset: usize = 0x1C; // float32
                pub const fog: usize = 0x20; // fogparams_t
                pub const m_nWorldGroupID: usize = 0x88; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 4
            pub mod PhysicsRagdollPose_t {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
                pub const m_Transforms: usize = 0x30; // C_NetworkUtlVectorBase<CTransform>
                pub const m_hOwner: usize = 0x48; // CHandle<C_BaseEntity>
                pub const m_bDirty: usize = 0x68; // bool
            }
            // Parent: C_GameRules
            // Fields count: 0
            pub mod C_SingleplayRules {
            }
            // Parent: C_BaseEntity
            // Fields count: 5
            pub mod C_SoundOpvarSetPointBase {
                pub const m_iszStackName: usize = 0x550; // CUtlSymbolLarge
                pub const m_iszOperatorName: usize = 0x558; // CUtlSymbolLarge
                pub const m_iszOpvarName: usize = 0x560; // CUtlSymbolLarge
                pub const m_iOpvarIndex: usize = 0x568; // int32
                pub const m_bUseAutoCompare: usize = 0x56C; // bool
            }
            // Parent: C_SoundOpvarSetPointBase
            // Fields count: 0
            pub mod C_SoundOpvarSetPointEntity {
            }
            // Parent: C_SoundOpvarSetPointEntity
            // Fields count: 0
            pub mod C_SoundOpvarSetAABBEntity {
            }
            // Parent: C_SoundOpvarSetAABBEntity
            // Fields count: 0
            pub mod C_SoundOpvarSetOBBEntity {
            }
            // Parent: C_SoundOpvarSetPointEntity
            // Fields count: 0
            pub mod C_SoundOpvarSetPathCornerEntity {
            }
            // Parent: C_SoundOpvarSetPointEntity
            // Fields count: 0
            pub mod C_SoundOpvarSetAutoRoomEntity {
            }
            // Parent: C_SoundOpvarSetPointBase
            // Fields count: 0
            pub mod C_SoundOpvarSetOBBWindEntity {
            }
            // Parent: C_MultiplayRules
            // Fields count: 0
            pub mod C_TeamplayRules {
            }
            // Parent: C_BaseEntity
            // Fields count: 30
            pub mod C_TeamRoundTimer {
                pub const m_bTimerPaused: usize = 0x550; // bool
                pub const m_flTimeRemaining: usize = 0x554; // float32
                pub const m_flTimerEndTime: usize = 0x558; // GameTime_t
                pub const m_bIsDisabled: usize = 0x55C; // bool
                pub const m_bShowInHUD: usize = 0x55D; // bool
                pub const m_nTimerLength: usize = 0x560; // int32
                pub const m_nTimerInitialLength: usize = 0x564; // int32
                pub const m_nTimerMaxLength: usize = 0x568; // int32
                pub const m_bAutoCountdown: usize = 0x56C; // bool
                pub const m_nSetupTimeLength: usize = 0x570; // int32
                pub const m_nState: usize = 0x574; // int32
                pub const m_bStartPaused: usize = 0x578; // bool
                pub const m_bInCaptureWatchState: usize = 0x579; // bool
                pub const m_flTotalTime: usize = 0x57C; // float32
                pub const m_bStopWatchTimer: usize = 0x580; // bool
                pub const m_bFireFinished: usize = 0x581; // bool
                pub const m_bFire5MinRemain: usize = 0x582; // bool
                pub const m_bFire4MinRemain: usize = 0x583; // bool
                pub const m_bFire3MinRemain: usize = 0x584; // bool
                pub const m_bFire2MinRemain: usize = 0x585; // bool
                pub const m_bFire1MinRemain: usize = 0x586; // bool
                pub const m_bFire30SecRemain: usize = 0x587; // bool
                pub const m_bFire10SecRemain: usize = 0x588; // bool
                pub const m_bFire5SecRemain: usize = 0x589; // bool
                pub const m_bFire4SecRemain: usize = 0x58A; // bool
                pub const m_bFire3SecRemain: usize = 0x58B; // bool
                pub const m_bFire2SecRemain: usize = 0x58C; // bool
                pub const m_bFire1SecRemain: usize = 0x58D; // bool
                pub const m_nOldTimerLength: usize = 0x590; // int32
                pub const m_nOldTimerState: usize = 0x594; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CAttributeList {
                pub const m_Attributes: usize = 0x8; // C_UtlVectorEmbeddedNetworkVar<CEconItemAttribute>
                pub const m_pManager: usize = 0x58; // CAttributeManager*
            }
            // Parent: None
            // Fields count: 5
            pub mod CEconItemAttribute {
                pub const m_iAttributeDefinitionIndex: usize = 0x30; // uint16
                pub const m_flValue: usize = 0x34; // float32
                pub const m_flInitialValue: usize = 0x38; // float32
                pub const m_nRefundableCurrency: usize = 0x3C; // int32
                pub const m_bSetBonus: usize = 0x40; // bool
            }
            // Parent: None
            // Fields count: 6
            pub mod CAttributeManager {
                pub const m_Providers: usize = 0x8; // CUtlVector<CHandle<C_BaseEntity>>
                pub const m_iReapplyProvisionParity: usize = 0x20; // int32
                pub const m_hOuter: usize = 0x24; // CHandle<C_BaseEntity>
                pub const m_bPreventLoopback: usize = 0x28; // bool
                pub const m_ProviderType: usize = 0x2C; // attributeprovidertypes_t
                pub const m_CachedResults: usize = 0x30; // CUtlVector<CAttributeManager::cached_attribute_float_t>
            }
            // Parent: None
            // Fields count: 3
            pub mod CAttributeManager__cached_attribute_float_t {
                pub const flIn: usize = 0x0; // float32
                pub const iAttribHook: usize = 0x8; // CUtlSymbolLarge
                pub const flOut: usize = 0x10; // float32
            }
            // Parent: CAttributeManager
            // Fields count: 3
            pub mod C_AttributeContainer {
                pub const m_Item: usize = 0x50; // C_EconItemView
                pub const m_iExternalItemProviderRegisteredToken: usize = 0x498; // int32
                pub const m_ullRegisteredAsItemID: usize = 0x4A0; // uint64
            }
            // Parent: None
            // Fields count: 1
            pub mod C_EconEntity__AttachedModelData_t {
                pub const m_iModelDisplayFlags: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod EntitySpottedState_t {
                pub const m_bSpotted: usize = 0x8; // bool
                pub const m_bSpottedByMask: usize = 0xC; // uint32[2]
            }
            // Parent: C_GameRulesProxy
            // Fields count: 1
            pub mod C_CSGameRulesProxy {
                pub const m_pGameRules: usize = 0x550; // C_CSGameRules*
            }
            // Parent: C_TeamplayRules
            // Fields count: 117
            pub mod C_CSGameRules {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
                pub const m_bFreezePeriod: usize = 0x30; // bool
                pub const m_bWarmupPeriod: usize = 0x31; // bool
                pub const m_fWarmupPeriodEnd: usize = 0x34; // GameTime_t
                pub const m_fWarmupPeriodStart: usize = 0x38; // GameTime_t
                pub const m_nTotalPausedTicks: usize = 0x3C; // int32
                pub const m_nPauseStartTick: usize = 0x40; // int32
                pub const m_bServerPaused: usize = 0x44; // bool
                pub const m_bGamePaused: usize = 0x45; // bool
                pub const m_bTerroristTimeOutActive: usize = 0x46; // bool
                pub const m_bCTTimeOutActive: usize = 0x47; // bool
                pub const m_flTerroristTimeOutRemaining: usize = 0x48; // float32
                pub const m_flCTTimeOutRemaining: usize = 0x4C; // float32
                pub const m_nTerroristTimeOuts: usize = 0x50; // int32
                pub const m_nCTTimeOuts: usize = 0x54; // int32
                pub const m_bTechnicalTimeOut: usize = 0x58; // bool
                pub const m_bMatchWaitingForResume: usize = 0x59; // bool
                pub const m_iRoundTime: usize = 0x5C; // int32
                pub const m_fMatchStartTime: usize = 0x60; // float32
                pub const m_fRoundStartTime: usize = 0x64; // GameTime_t
                pub const m_flRestartRoundTime: usize = 0x68; // GameTime_t
                pub const m_bGameRestart: usize = 0x6C; // bool
                pub const m_flGameStartTime: usize = 0x70; // float32
                pub const m_timeUntilNextPhaseStarts: usize = 0x74; // float32
                pub const m_gamePhase: usize = 0x78; // int32
                pub const m_totalRoundsPlayed: usize = 0x7C; // int32
                pub const m_nRoundsPlayedThisPhase: usize = 0x80; // int32
                pub const m_nOvertimePlaying: usize = 0x84; // int32
                pub const m_iHostagesRemaining: usize = 0x88; // int32
                pub const m_bAnyHostageReached: usize = 0x8C; // bool
                pub const m_bMapHasBombTarget: usize = 0x8D; // bool
                pub const m_bMapHasRescueZone: usize = 0x8E; // bool
                pub const m_bMapHasBuyZone: usize = 0x8F; // bool
                pub const m_bIsQueuedMatchmaking: usize = 0x90; // bool
                pub const m_nQueuedMatchmakingMode: usize = 0x94; // int32
                pub const m_bIsValveDS: usize = 0x98; // bool
                pub const m_bLogoMap: usize = 0x99; // bool
                pub const m_bPlayAllStepSoundsOnServer: usize = 0x9A; // bool
                pub const m_iSpectatorSlotCount: usize = 0x9C; // int32
                pub const m_MatchDevice: usize = 0xA0; // int32
                pub const m_bHasMatchStarted: usize = 0xA4; // bool
                pub const m_nNextMapInMapgroup: usize = 0xA8; // int32
                pub const m_szTournamentEventName: usize = 0xAC; // char[512]
                pub const m_szTournamentEventStage: usize = 0x2AC; // char[512]
                pub const m_szMatchStatTxt: usize = 0x4AC; // char[512]
                pub const m_szTournamentPredictionsTxt: usize = 0x6AC; // char[512]
                pub const m_nTournamentPredictionsPct: usize = 0x8AC; // int32
                pub const m_flCMMItemDropRevealStartTime: usize = 0x8B0; // GameTime_t
                pub const m_flCMMItemDropRevealEndTime: usize = 0x8B4; // GameTime_t
                pub const m_bIsDroppingItems: usize = 0x8B8; // bool
                pub const m_bIsQuestEligible: usize = 0x8B9; // bool
                pub const m_bIsHltvActive: usize = 0x8BA; // bool
                pub const m_nGuardianModeWaveNumber: usize = 0x8BC; // int32
                pub const m_nGuardianModeSpecialKillsRemaining: usize = 0x8C0; // int32
                pub const m_nGuardianModeSpecialWeaponNeeded: usize = 0x8C4; // int32
                pub const m_nGuardianGrenadesToGiveBots: usize = 0x8C8; // int32
                pub const m_nNumHeaviesToSpawn: usize = 0x8CC; // int32
                pub const m_numGlobalGiftsGiven: usize = 0x8D0; // uint32
                pub const m_numGlobalGifters: usize = 0x8D4; // uint32
                pub const m_numGlobalGiftsPeriodSeconds: usize = 0x8D8; // uint32
                pub const m_arrFeaturedGiftersAccounts: usize = 0x8DC; // uint32[4]
                pub const m_arrFeaturedGiftersGifts: usize = 0x8EC; // uint32[4]
                pub const m_arrProhibitedItemIndices: usize = 0x8FC; // uint16[100]
                pub const m_arrTournamentActiveCasterAccounts: usize = 0x9C4; // uint32[4]
                pub const m_numBestOfMaps: usize = 0x9D4; // int32
                pub const m_nHalloweenMaskListSeed: usize = 0x9D8; // int32
                pub const m_bBombDropped: usize = 0x9DC; // bool
                pub const m_bBombPlanted: usize = 0x9DD; // bool
                pub const m_iRoundWinStatus: usize = 0x9E0; // int32
                pub const m_eRoundWinReason: usize = 0x9E4; // int32
                pub const m_bTCantBuy: usize = 0x9E8; // bool
                pub const m_bCTCantBuy: usize = 0x9E9; // bool
                pub const m_flGuardianBuyUntilTime: usize = 0x9EC; // GameTime_t
                pub const m_iMatchStats_RoundResults: usize = 0x9F0; // int32[30]
                pub const m_iMatchStats_PlayersAlive_CT: usize = 0xA68; // int32[30]
                pub const m_iMatchStats_PlayersAlive_T: usize = 0xAE0; // int32[30]
                pub const m_TeamRespawnWaveTimes: usize = 0xB58; // float32[32]
                pub const m_flNextRespawnWave: usize = 0xBD8; // GameTime_t[32]
                pub const m_nServerQuestID: usize = 0xC58; // int32
                pub const m_vMinimapMins: usize = 0xC5C; // 
                pub const m_vMinimapMaxs: usize = 0xC68; // 
                pub const m_MinimapVerticalSectionHeights: usize = 0xC74; // float32[8]
                pub const m_bDontIncrementCoopWave: usize = 0xC94; // bool
                pub const m_bSpawnedTerrorHuntHeavy: usize = 0xC95; // bool
                pub const m_nEndMatchMapGroupVoteTypes: usize = 0xC98; // int32[10]
                pub const m_nEndMatchMapGroupVoteOptions: usize = 0xCC0; // int32[10]
                pub const m_nEndMatchMapVoteWinner: usize = 0xCE8; // int32
                pub const m_iNumConsecutiveCTLoses: usize = 0xCEC; // int32
                pub const m_iNumConsecutiveTerroristLoses: usize = 0xCF0; // int32
                pub const m_bMarkClientStopRecordAtRoundEnd: usize = 0xD10; // bool
                pub const m_nMatchAbortedEarlyReason: usize = 0xD68; // int32
                pub const m_bHasTriggeredRoundStartMusic: usize = 0xD6C; // bool
                pub const m_bHasTriggeredCoopSpawnReset: usize = 0xD6D; // bool
                pub const m_bSwitchingTeamsAtRoundReset: usize = 0xD6E; // bool
                pub const m_pGameModeRules: usize = 0xD88; // CCSGameModeRules*
                pub const m_RetakeRules: usize = 0xD90; // C_RetakeGameRules
                pub const m_nMatchEndCount: usize = 0xEA8; // uint8
                pub const m_nTTeamIntroVariant: usize = 0xEAC; // int32
                pub const m_nCTTeamIntroVariant: usize = 0xEB0; // int32
                pub const m_bTeamIntroPeriod: usize = 0xEB4; // bool
                pub const m_iRoundEndWinnerTeam: usize = 0xEB8; // int32
                pub const m_eRoundEndReason: usize = 0xEBC; // int32
                pub const m_bRoundEndShowTimerDefend: usize = 0xEC0; // bool
                pub const m_iRoundEndTimerTime: usize = 0xEC4; // int32
                pub const m_sRoundEndFunFactToken: usize = 0xEC8; // CUtlString
                pub const m_iRoundEndFunFactPlayerSlot: usize = 0xED0; // CPlayerSlot
                pub const m_iRoundEndFunFactData1: usize = 0xED4; // int32
                pub const m_iRoundEndFunFactData2: usize = 0xED8; // int32
                pub const m_iRoundEndFunFactData3: usize = 0xEDC; // int32
                pub const m_sRoundEndMessage: usize = 0xEE0; // CUtlString
                pub const m_iRoundEndPlayerCount: usize = 0xEE8; // int32
                pub const m_bRoundEndNoMusic: usize = 0xEEC; // bool
                pub const m_iRoundEndLegacy: usize = 0xEF0; // int32
                pub const m_nRoundEndCount: usize = 0xEF4; // uint8
                pub const m_iRoundStartRoundNumber: usize = 0xEF8; // int32
                pub const m_nRoundStartCount: usize = 0xEFC; // uint8
                pub const m_flLastPerfSampleTime: usize = 0x4F08; // float64
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSTakeDamageInfoAPI {
            }
            // Parent: None
            // Fields count: 1
            pub mod CCSGameModeRules {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
            }
            // Parent: CCSGameModeRules
            // Fields count: 0
            pub mod CCSGameModeRules_Noop {
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 0
            pub mod CCSGameModeScript {
            }
            // Parent: CCSGameModeRules
            // Fields count: 1
            pub mod CCSGameModeRules_ArmsRace {
                pub const m_WeaponSequence: usize = 0x38; // C_NetworkUtlVectorBase<CUtlString>
            }
            // Parent: CCSGameModeScript
            // Fields count: 1
            pub mod CCSArmsRaceScript {
                pub const m_pOuter: usize = 0xD8; // CCSGameModeRules_ArmsRace*
            }
            // Parent: CCSGameModeRules
            // Fields count: 3
            pub mod CCSGameModeRules_Deathmatch {
                pub const m_flDMBonusStartTime: usize = 0x38; // GameTime_t
                pub const m_flDMBonusTimeLength: usize = 0x3C; // float32
                pub const m_nDMBonusWeaponLoadoutSlot: usize = 0x40; // int16
            }
            // Parent: CCSGameModeScript
            // Fields count: 1
            pub mod CCSDeathmatchScript {
                pub const m_pOuter: usize = 0xD8; // CCSGameModeRules_Deathmatch*
            }
            // Parent: None
            // Fields count: 5
            pub mod C_RetakeGameRules {
                pub const m_nMatchSeed: usize = 0xF8; // int32
                pub const m_bBlockersPresent: usize = 0xFC; // bool
                pub const m_bRoundInProgress: usize = 0xFD; // bool
                pub const m_iFirstSecondHalfRound: usize = 0x100; // int32
                pub const m_iBombSite: usize = 0x104; // int32
            }
            // Parent: None
            // Fields count: 13
            pub mod CSPerRoundStats_t {
                pub const m_iKills: usize = 0x30; // int32
                pub const m_iDeaths: usize = 0x34; // int32
                pub const m_iAssists: usize = 0x38; // int32
                pub const m_iDamage: usize = 0x3C; // int32
                pub const m_iEquipmentValue: usize = 0x40; // int32
                pub const m_iMoneySaved: usize = 0x44; // int32
                pub const m_iKillReward: usize = 0x48; // int32
                pub const m_iLiveTime: usize = 0x4C; // int32
                pub const m_iHeadShotKills: usize = 0x50; // int32
                pub const m_iObjective: usize = 0x54; // int32
                pub const m_iCashEarned: usize = 0x58; // int32
                pub const m_iUtilityDamage: usize = 0x5C; // int32
                pub const m_iEnemiesFlashed: usize = 0x60; // int32
            }
            // Parent: CSPerRoundStats_t
            // Fields count: 5
            pub mod CSMatchStats_t {
                pub const m_iEnemy5Ks: usize = 0x68; // int32
                pub const m_iEnemy4Ks: usize = 0x6C; // int32
                pub const m_iEnemy3Ks: usize = 0x70; // int32
                pub const m_iEnemyKnifeKills: usize = 0x74; // int32
                pub const m_iEnemyTaserKills: usize = 0x78; // int32
            }
            // Parent: C_BaseEntity
            // Fields count: 8
            pub mod C_CSGO_TeamPreviewCharacterPosition {
                pub const m_nVariant: usize = 0x550; // int32
                pub const m_nRandom: usize = 0x554; // int32
                pub const m_nOrdinal: usize = 0x558; // int32
                pub const m_sWeaponName: usize = 0x560; // CUtlString
                pub const m_xuid: usize = 0x568; // uint64
                pub const m_agentItem: usize = 0x570; // C_EconItemView
                pub const m_glovesItem: usize = 0x9B8; // C_EconItemView
                pub const m_weaponItem: usize = 0xE00; // C_EconItemView
            }
            // Parent: C_CSGO_TeamPreviewCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamSelectCharacterPosition {
            }
            // Parent: C_CSGO_TeamSelectCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamSelectTerroristPosition {
            }
            // Parent: C_CSGO_TeamSelectCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamSelectCounterTerroristPosition {
            }
            // Parent: C_CSGO_TeamPreviewCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamIntroCharacterPosition {
            }
            // Parent: C_CSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamIntroTerroristPosition {
            }
            // Parent: C_CSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_TeamIntroCounterTerroristPosition {
            }
            // Parent: C_CSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroCharacterPosition {
            }
            // Parent: CCSGO_WingmanIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroTerroristPosition {
            }
            // Parent: CCSGO_WingmanIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroCounterTerroristPosition {
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_CSMinimapBoundary {
            }
            // Parent: C_BaseEntity
            // Fields count: 5
            pub mod C_PlayerPing {
                pub const m_hPlayer: usize = 0x580; // CHandle<C_CSPlayerPawn>
                pub const m_hPingedEntity: usize = 0x584; // CHandle<C_BaseEntity>
                pub const m_iType: usize = 0x588; // int32
                pub const m_bUrgent: usize = 0x58C; // bool
                pub const m_szPlaceName: usize = 0x58D; // char[18]
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 1
            pub mod CCSPlayer_PingServices {
                pub const m_hPlayerPing: usize = 0x40; // CHandle<C_BaseEntity>
            }
            // Parent: C_BaseEntity
            // Fields count: 10
            pub mod C_CSPlayerResource {
                pub const m_bHostageAlive: usize = 0x550; // bool[12]
                pub const m_isHostageFollowingSomeone: usize = 0x55C; // bool[12]
                pub const m_iHostageEntityIDs: usize = 0x568; // CEntityIndex[12]
                pub const m_bombsiteCenterA: usize = 0x598; // 
                pub const m_bombsiteCenterB: usize = 0x5A4; // 
                pub const m_hostageRescueX: usize = 0x5B0; // int32[4]
                pub const m_hostageRescueY: usize = 0x5C0; // int32[4]
                pub const m_hostageRescueZ: usize = 0x5D0; // int32[4]
                pub const m_bEndMatchNextMapAllVoted: usize = 0x5E0; // bool
                pub const m_foundGoalPositions: usize = 0x5E1; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSPlayerControllerAPI {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_ViewModelServices {
            }
            // Parent: CPlayer_CameraServices
            // Fields count: 6
            pub mod CCSPlayerBase_CameraServices {
                pub const m_iFOV: usize = 0x210; // uint32
                pub const m_iFOVStart: usize = 0x214; // uint32
                pub const m_flFOVTime: usize = 0x218; // GameTime_t
                pub const m_flFOVRate: usize = 0x21C; // float32
                pub const m_hZoomOwner: usize = 0x220; // CHandle<C_BaseEntity>
                pub const m_flLastShotFOV: usize = 0x224; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod WeaponPurchaseCount_t {
                pub const m_nItemDefIndex: usize = 0x30; // uint16
                pub const m_nCount: usize = 0x32; // uint16
            }
            // Parent: None
            // Fields count: 1
            pub mod WeaponPurchaseTracker_t {
                pub const m_weaponPurchases: usize = 0x8; // C_UtlVectorEmbeddedNetworkVar<WeaponPurchaseCount_t>
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 4
            pub mod CCSPlayer_ActionTrackingServices {
                pub const m_hLastWeaponBeforeC4AutoSwitch: usize = 0x40; // CHandle<C_BasePlayerWeapon>
                pub const m_bIsRescuing: usize = 0x44; // bool
                pub const m_weaponPurchasesThisMatch: usize = 0x48; // WeaponPurchaseTracker_t
                pub const m_weaponPurchasesThisRound: usize = 0xA0; // WeaponPurchaseTracker_t
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 1
            pub mod CCSPlayer_BulletServices {
                pub const m_totalHitsOnServer: usize = 0x40; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod SellbackPurchaseEntry_t {
                pub const m_unDefIdx: usize = 0x30; // uint16
                pub const m_nCost: usize = 0x34; // int32
                pub const m_nPrevArmor: usize = 0x38; // int32
                pub const m_bPrevHelmet: usize = 0x3C; // bool
                pub const m_hItem: usize = 0x40; // CEntityHandle
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 1
            pub mod CCSPlayer_BuyServices {
                pub const m_vecSellbackPurchaseEntries: usize = 0x40; // C_UtlVectorEmbeddedNetworkVar<SellbackPurchaseEntry_t>
            }
            // Parent: CCSPlayerBase_CameraServices
            // Fields count: 1
            pub mod CCSPlayer_CameraServices {
                pub const m_flDeathCamTilt: usize = 0x228; // float32
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 2
            pub mod CCSPlayer_HostageServices {
                pub const m_hCarriedHostage: usize = 0x40; // CHandle<C_BaseEntity>
                pub const m_hCarriedHostageProp: usize = 0x44; // CHandle<C_BaseEntity>
            }
            // Parent: CPlayer_ItemServices
            // Fields count: 3
            pub mod CCSPlayer_ItemServices {
                pub const m_bHasDefuser: usize = 0x40; // bool
                pub const m_bHasHelmet: usize = 0x41; // bool
                pub const m_bHasHeavyArmor: usize = 0x42; // bool
            }
            // Parent: CPlayer_MovementServices_Humanoid
            // Fields count: 37
            pub mod CCSPlayer_MovementServices {
                pub const m_flMaxFallVelocity: usize = 0x218; // float32
                pub const m_vecLadderNormal: usize = 0x21C; // 
                pub const m_nLadderSurfacePropIndex: usize = 0x228; // int32
                pub const m_flDuckAmount: usize = 0x22C; // float32
                pub const m_flDuckSpeed: usize = 0x230; // float32
                pub const m_bDuckOverride: usize = 0x234; // bool
                pub const m_bDesiresDuck: usize = 0x235; // bool
                pub const m_flDuckOffset: usize = 0x238; // float32
                pub const m_nDuckTimeMsecs: usize = 0x23C; // uint32
                pub const m_nDuckJumpTimeMsecs: usize = 0x240; // uint32
                pub const m_nJumpTimeMsecs: usize = 0x244; // uint32
                pub const m_flLastDuckTime: usize = 0x248; // float32
                pub const m_vecLastPositionAtFullCrouchSpeed: usize = 0x258; // Vector2D
                pub const m_duckUntilOnGround: usize = 0x260; // bool
                pub const m_bHasWalkMovedSinceLastJump: usize = 0x261; // bool
                pub const m_bInStuckTest: usize = 0x262; // bool
                pub const m_flStuckCheckTime: usize = 0x270; // 
                pub const m_nTraceCount: usize = 0x470; // int32
                pub const m_StuckLast: usize = 0x474; // int32
                pub const m_bSpeedCropped: usize = 0x478; // bool
                pub const m_nOldWaterLevel: usize = 0x47C; // int32
                pub const m_flWaterEntryTime: usize = 0x480; // float32
                pub const m_vecForward: usize = 0x484; // 
                pub const m_vecLeft: usize = 0x490; // 
                pub const m_vecUp: usize = 0x49C; // 
                pub const m_nGameCodeHasMovedPlayerAfterCommand: usize = 0x4A8; // int32
                pub const m_bOldJumpPressed: usize = 0x4AC; // bool
                pub const m_flJumpPressedTime: usize = 0x4B0; // float32
                pub const m_flJumpUntil: usize = 0x4B4; // float32
                pub const m_flJumpVel: usize = 0x4B8; // float32
                pub const m_fStashGrenadeParameterWhen: usize = 0x4BC; // GameTime_t
                pub const m_nButtonDownMaskPrev: usize = 0x4C0; // uint64
                pub const m_flOffsetTickCompleteTime: usize = 0x4C8; // float32
                pub const m_flOffsetTickStashedSpeed: usize = 0x4CC; // float32
                pub const m_flStamina: usize = 0x4D0; // float32
                pub const m_flHeightAtJumpStart: usize = 0x4D4; // float32
                pub const m_flMaxJumpHeightThisJump: usize = 0x4D8; // float32
            }
            // Parent: CPlayer_UseServices
            // Fields count: 0
            pub mod CCSPlayer_UseServices {
            }
            // Parent: CPlayer_ViewModelServices
            // Fields count: 1
            pub mod CCSPlayer_ViewModelServices {
                pub const m_hViewModel: usize = 0x40; // CHandle<C_BaseViewModel>[3]
            }
            // Parent: CPlayer_WaterServices
            // Fields count: 3
            pub mod CCSPlayer_WaterServices {
                pub const m_flWaterJumpTime: usize = 0x40; // float32
                pub const m_vecWaterJumpVel: usize = 0x44; // 
                pub const m_flSwimSoundTime: usize = 0x50; // float32
            }
            // Parent: CPlayer_WeaponServices
            // Fields count: 5
            pub mod CCSPlayer_WeaponServices {
                pub const m_flNextAttack: usize = 0xB8; // GameTime_t
                pub const m_bIsLookingAtWeapon: usize = 0xBC; // bool
                pub const m_bIsHoldingLookAtWeapon: usize = 0xBD; // bool
                pub const m_nOldShootPositionHistoryCount: usize = 0xC0; // uint32
                pub const m_nOldInputHistoryCount: usize = 0x458; // uint32
            }
            // Parent: CPlayer_ObserverServices
            // Fields count: 8
            pub mod CCSObserver_ObserverServices {
                pub const m_hLastObserverTarget: usize = 0x58; // CEntityHandle
                pub const m_vecObserverInterpolateOffset: usize = 0x5C; // 
                pub const m_vecObserverInterpStartPos: usize = 0x68; // 
                pub const m_flObsInterp_PathLength: usize = 0x74; // float32
                pub const m_qObsInterp_OrientationStart: usize = 0x80; // Quaternion
                pub const m_qObsInterp_OrientationTravelDir: usize = 0x90; // Quaternion
                pub const m_obsInterpState: usize = 0xA0; // ObserverInterpState_t
                pub const m_bObserverInterpolationNeedsDeferredSetup: usize = 0xA4; // bool
            }
            // Parent: CCSPlayerBase_CameraServices
            // Fields count: 0
            pub mod CCSObserver_CameraServices {
            }
            // Parent: CPlayer_MovementServices
            // Fields count: 0
            pub mod CCSObserver_MovementServices {
            }
            // Parent: CPlayer_UseServices
            // Fields count: 0
            pub mod CCSObserver_UseServices {
            }
            // Parent: CPlayer_ViewModelServices
            // Fields count: 0
            pub mod CCSObserver_ViewModelServices {
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 5
            pub mod CCSPlayerController_ActionTrackingServices {
                pub const m_perRoundStats: usize = 0x40; // C_UtlVectorEmbeddedNetworkVar<CSPerRoundStats_t>
                pub const m_matchStats: usize = 0x90; // CSMatchStats_t
                pub const m_iNumRoundKills: usize = 0x110; // int32
                pub const m_iNumRoundKillsHeadshots: usize = 0x114; // int32
                pub const m_unTotalRoundDamageDealt: usize = 0x118; // uint32
            }
            // Parent: None
            // Fields count: 14
            pub mod CDamageRecord {
                pub const m_PlayerDamager: usize = 0x28; // CHandle<C_CSPlayerPawnBase>
                pub const m_PlayerRecipient: usize = 0x2C; // CHandle<C_CSPlayerPawnBase>
                pub const m_hPlayerControllerDamager: usize = 0x30; // CHandle<CCSPlayerController>
                pub const m_hPlayerControllerRecipient: usize = 0x34; // CHandle<CCSPlayerController>
                pub const m_szPlayerDamagerName: usize = 0x38; // CUtlString
                pub const m_szPlayerRecipientName: usize = 0x40; // CUtlString
                pub const m_DamagerXuid: usize = 0x48; // uint64
                pub const m_RecipientXuid: usize = 0x50; // uint64
                pub const m_iDamage: usize = 0x58; // int32
                pub const m_iActualHealthRemoved: usize = 0x5C; // int32
                pub const m_iNumHits: usize = 0x60; // int32
                pub const m_iLastBulletUpdate: usize = 0x64; // int32
                pub const m_bIsOtherEnemy: usize = 0x68; // bool
                pub const m_killType: usize = 0x69; // EKillTypes_t
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 2
            pub mod CCSPlayerController_DamageServices {
                pub const m_nSendUpdate: usize = 0x40; // int32
                pub const m_DamageList: usize = 0x48; // C_UtlVectorEmbeddedNetworkVar<CDamageRecord>
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 5
            pub mod CCSPlayerController_InGameMoneyServices {
                pub const m_iAccount: usize = 0x40; // int32
                pub const m_iStartAccount: usize = 0x44; // int32
                pub const m_iTotalCashSpent: usize = 0x48; // int32
                pub const m_iCashSpentThisRound: usize = 0x4C; // int32
                pub const m_nPreviousAccount: usize = 0x50; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod ServerAuthoritativeWeaponSlot_t {
                pub const unClass: usize = 0x28; // uint16
                pub const unSlot: usize = 0x2A; // uint16
                pub const unItemDefIdx: usize = 0x2C; // uint16
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 8
            pub mod CCSPlayerController_InventoryServices {
                pub const m_unMusicID: usize = 0x40; // uint16
                pub const m_rank: usize = 0x44; // MedalRank_t[6]
                pub const m_nPersonaDataPublicLevel: usize = 0x5C; // int32
                pub const m_nPersonaDataPublicCommendsLeader: usize = 0x60; // int32
                pub const m_nPersonaDataPublicCommendsTeacher: usize = 0x64; // int32
                pub const m_nPersonaDataPublicCommendsFriendly: usize = 0x68; // int32
                pub const m_nPersonaDataXpTrailLevel: usize = 0x6C; // int32
                pub const m_vecServerAuthoritativeWeaponSlots: usize = 0x70; // C_UtlVectorEmbeddedNetworkVar<ServerAuthoritativeWeaponSlot_t>
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSWeaponBaseVDataAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSWeaponBaseAPI {
            }
            // Parent: None
            // Fields count: 13
            pub mod C_IronSightController {
                pub const m_bIronSightAvailable: usize = 0x10; // bool
                pub const m_flIronSightAmount: usize = 0x14; // float32
                pub const m_flIronSightAmountGained: usize = 0x18; // float32
                pub const m_flIronSightAmountBiased: usize = 0x1C; // float32
                pub const m_flIronSightAmount_Interpolated: usize = 0x20; // float32
                pub const m_flIronSightAmountGained_Interpolated: usize = 0x24; // float32
                pub const m_flIronSightAmountBiased_Interpolated: usize = 0x28; // float32
                pub const m_flInterpolationLastUpdated: usize = 0x2C; // float32
                pub const m_angDeltaAverage: usize = 0x30; // QAngle[8]
                pub const m_angViewLast: usize = 0x90; // QAngle
                pub const m_vecDotCoords: usize = 0x9C; // Vector2D
                pub const m_flDotBlur: usize = 0xA4; // float32
                pub const m_flSpeedRatio: usize = 0xA8; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod CompositeMaterialMatchFilter_t {
                pub const m_nCompositeMaterialMatchFilterType: usize = 0x0; // CompositeMaterialMatchFilterType_t
                pub const m_strMatchFilter: usize = 0x8; // CUtlString
                pub const m_strMatchValue: usize = 0x10; // CUtlString
                pub const m_bPassWhenTrue: usize = 0x18; // bool
            }
            // Parent: None
            // Fields count: 34
            pub mod CompositeMaterialInputLooseVariable_t {
                pub const m_strName: usize = 0x0; // CUtlString
                pub const m_bExposeExternally: usize = 0x8; // bool
                pub const m_strExposedFriendlyName: usize = 0x10; // CUtlString
                pub const m_strExposedFriendlyGroupName: usize = 0x18; // CUtlString
                pub const m_bExposedVariableIsFixedRange: usize = 0x20; // bool
                pub const m_strExposedVisibleWhenTrue: usize = 0x28; // CUtlString
                pub const m_strExposedHiddenWhenTrue: usize = 0x30; // CUtlString
                pub const m_nVariableType: usize = 0x38; // CompositeMaterialInputLooseVariableType_t
                pub const m_bValueBoolean: usize = 0x3C; // bool
                pub const m_nValueIntX: usize = 0x40; // int32
                pub const m_nValueIntY: usize = 0x44; // int32
                pub const m_nValueIntZ: usize = 0x48; // int32
                pub const m_nValueIntW: usize = 0x4C; // int32
                pub const m_bHasFloatBounds: usize = 0x50; // bool
                pub const m_flValueFloatX: usize = 0x54; // float32
                pub const m_flValueFloatX_Min: usize = 0x58; // float32
                pub const m_flValueFloatX_Max: usize = 0x5C; // float32
                pub const m_flValueFloatY: usize = 0x60; // float32
                pub const m_flValueFloatY_Min: usize = 0x64; // float32
                pub const m_flValueFloatY_Max: usize = 0x68; // float32
                pub const m_flValueFloatZ: usize = 0x6C; // float32
                pub const m_flValueFloatZ_Min: usize = 0x70; // float32
                pub const m_flValueFloatZ_Max: usize = 0x74; // float32
                pub const m_flValueFloatW: usize = 0x78; // float32
                pub const m_flValueFloatW_Min: usize = 0x7C; // float32
                pub const m_flValueFloatW_Max: usize = 0x80; // float32
                pub const m_cValueColor4: usize = 0x84; // Color
                pub const m_nValueSystemVar: usize = 0x88; // CompositeMaterialVarSystemVar_t
                pub const m_strResourceMaterial: usize = 0x90; // CResourceName
                pub const m_strTextureContentAssetPath: usize = 0x170; // CUtlString
                pub const m_strTextureRuntimeResourcePath: usize = 0x178; // CResourceName
                pub const m_strTextureCompilationVtexTemplate: usize = 0x258; // CUtlString
                pub const m_nTextureType: usize = 0x260; // CompositeMaterialInputTextureType_t
                pub const m_strString: usize = 0x268; // CUtlString
            }
            // Parent: None
            // Fields count: 5
            pub mod CompMatMutatorCondition_t {
                pub const m_nMutatorCondition: usize = 0x0; // CompMatPropertyMutatorConditionType_t
                pub const m_strMutatorConditionContainerName: usize = 0x8; // CUtlString
                pub const m_strMutatorConditionContainerVarName: usize = 0x10; // CUtlString
                pub const m_strMutatorConditionContainerVarValue: usize = 0x18; // CUtlString
                pub const m_bPassWhenTrue: usize = 0x20; // bool
            }
            // Parent: None
            // Fields count: 28
            pub mod CompMatPropertyMutator_t {
                pub const m_bEnabled: usize = 0x0; // bool
                pub const m_nMutatorCommandType: usize = 0x4; // CompMatPropertyMutatorType_t
                pub const m_strInitWith_Container: usize = 0x8; // CUtlString
                pub const m_strCopyProperty_InputContainerSrc: usize = 0x10; // CUtlString
                pub const m_strCopyProperty_InputContainerProperty: usize = 0x18; // CUtlString
                pub const m_strCopyProperty_TargetProperty: usize = 0x20; // CUtlString
                pub const m_strRandomRollInputVars_SeedInputVar: usize = 0x28; // CUtlString
                pub const m_vecRandomRollInputVars_InputVarsToRoll: usize = 0x30; // CUtlVector<CUtlString>
                pub const m_strCopyMatchingKeys_InputContainerSrc: usize = 0x48; // CUtlString
                pub const m_strCopyKeysWithSuffix_InputContainerSrc: usize = 0x50; // CUtlString
                pub const m_strCopyKeysWithSuffix_FindSuffix: usize = 0x58; // CUtlString
                pub const m_strCopyKeysWithSuffix_ReplaceSuffix: usize = 0x60; // CUtlString
                pub const m_nSetValue_Value: usize = 0x68; // CompositeMaterialInputLooseVariable_t
                pub const m_strGenerateTexture_TargetParam: usize = 0x2D8; // CUtlString
                pub const m_strGenerateTexture_InitialContainer: usize = 0x2E0; // CUtlString
                pub const m_nResolution: usize = 0x2E8; // int32
                pub const m_bIsScratchTarget: usize = 0x2EC; // bool
                pub const m_bSplatDebugInfo: usize = 0x2ED; // bool
                pub const m_bCaptureInRenderDoc: usize = 0x2EE; // bool
                pub const m_vecTexGenInstructions: usize = 0x2F0; // CUtlVector<CompMatPropertyMutator_t>
                pub const m_vecConditionalMutators: usize = 0x308; // CUtlVector<CompMatPropertyMutator_t>
                pub const m_strPopInputQueue_Container: usize = 0x320; // CUtlString
                pub const m_strDrawText_InputContainerSrc: usize = 0x328; // CUtlString
                pub const m_strDrawText_InputContainerProperty: usize = 0x330; // CUtlString
                pub const m_vecDrawText_Position: usize = 0x338; // Vector2D
                pub const m_colDrawText_Color: usize = 0x340; // Color
                pub const m_strDrawText_Font: usize = 0x348; // CUtlString
                pub const m_vecConditions: usize = 0x350; // CUtlVector<CompMatMutatorCondition_t>
            }
            // Parent: None
            // Fields count: 8
            pub mod CompositeMaterialInputContainer_t {
                pub const m_bEnabled: usize = 0x0; // bool
                pub const m_nCompositeMaterialInputContainerSourceType: usize = 0x4; // CompositeMaterialInputContainerSourceType_t
                pub const m_strSpecificContainerMaterial: usize = 0x8; // CResourceName
                pub const m_strAttrName: usize = 0xE8; // CUtlString
                pub const m_strAlias: usize = 0xF0; // CUtlString
                pub const m_vecLooseVariables: usize = 0xF8; // CUtlVector<CompositeMaterialInputLooseVariable_t>
                pub const m_strAttrNameForVar: usize = 0x110; // CUtlString
                pub const m_bExposeExternally: usize = 0x118; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod CompositeMaterialAssemblyProcedure_t {
                pub const m_vecCompMatIncludes: usize = 0x0; // CUtlVector<CResourceName>
                pub const m_vecMatchFilters: usize = 0x18; // CUtlVector<CompositeMaterialMatchFilter_t>
                pub const m_vecCompositeInputContainers: usize = 0x30; // CUtlVector<CompositeMaterialInputContainer_t>
                pub const m_vecPropertyMutators: usize = 0x48; // CUtlVector<CompMatPropertyMutator_t>
            }
            // Parent: None
            // Fields count: 1
            pub mod GeneratedTextureHandle_t {
                pub const m_strBitmapName: usize = 0x0; // CUtlString
            }
            // Parent: None
            // Fields count: 4
            pub mod CompositeMaterial_t {
                pub const m_TargetKVs: usize = 0x8; // KeyValues3
                pub const m_PreGenerationKVs: usize = 0x18; // KeyValues3
                pub const m_FinalKVs: usize = 0x28; // KeyValues3
                pub const m_vecGeneratedTextures: usize = 0x40; // CUtlVector<GeneratedTextureHandle_t>
            }
            // Parent: None
            // Fields count: 8
            pub mod CompositeMaterialEditorPoint_t {
                pub const m_ModelName: usize = 0x0; // CResourceName
                pub const m_nSequenceIndex: usize = 0xE0; // int32
                pub const m_flCycle: usize = 0xE4; // float32
                pub const m_KVModelStateChoices: usize = 0xE8; // KeyValues3
                pub const m_bEnableChildModel: usize = 0xF8; // bool
                pub const m_ChildModelName: usize = 0x100; // CResourceName
                pub const m_vecCompositeMaterialAssemblyProcedures: usize = 0x1E0; // CUtlVector<CompositeMaterialAssemblyProcedure_t>
                pub const m_vecCompositeMaterials: usize = 0x1F8; // CUtlVector<CompositeMaterial_t>
            }
            // Parent: None
            // Fields count: 3
            pub mod CCompositeMaterialEditorDoc {
                pub const m_nVersion: usize = 0x8; // int32
                pub const m_Points: usize = 0x10; // CUtlVector<CompositeMaterialEditorPoint_t>
                pub const m_KVthumbnail: usize = 0x28; // KeyValues3
            }
            // Parent: None
            // Fields count: 43
            pub mod CGlobalLightBase {
                pub const m_bSpotLight: usize = 0x10; // bool
                pub const m_SpotLightOrigin: usize = 0x14; // 
                pub const m_SpotLightAngles: usize = 0x20; // QAngle
                pub const m_ShadowDirection: usize = 0x2C; // 
                pub const m_AmbientDirection: usize = 0x38; // 
                pub const m_SpecularDirection: usize = 0x44; // 
                pub const m_InspectorSpecularDirection: usize = 0x50; // 
                pub const m_flSpecularPower: usize = 0x5C; // float32
                pub const m_flSpecularIndependence: usize = 0x60; // float32
                pub const m_SpecularColor: usize = 0x64; // Color
                pub const m_bStartDisabled: usize = 0x68; // bool
                pub const m_bEnabled: usize = 0x69; // bool
                pub const m_LightColor: usize = 0x6A; // Color
                pub const m_AmbientColor1: usize = 0x6E; // Color
                pub const m_AmbientColor2: usize = 0x72; // Color
                pub const m_AmbientColor3: usize = 0x76; // Color
                pub const m_flSunDistance: usize = 0x7C; // float32
                pub const m_flFOV: usize = 0x80; // float32
                pub const m_flNearZ: usize = 0x84; // float32
                pub const m_flFarZ: usize = 0x88; // float32
                pub const m_bEnableShadows: usize = 0x8C; // bool
                pub const m_bOldEnableShadows: usize = 0x8D; // bool
                pub const m_bBackgroundClearNotRequired: usize = 0x8E; // bool
                pub const m_flCloudScale: usize = 0x90; // float32
                pub const m_flCloud1Speed: usize = 0x94; // float32
                pub const m_flCloud1Direction: usize = 0x98; // float32
                pub const m_flCloud2Speed: usize = 0x9C; // float32
                pub const m_flCloud2Direction: usize = 0xA0; // float32
                pub const m_flAmbientScale1: usize = 0xB0; // float32
                pub const m_flAmbientScale2: usize = 0xB4; // float32
                pub const m_flGroundScale: usize = 0xB8; // float32
                pub const m_flLightScale: usize = 0xBC; // float32
                pub const m_flFoWDarkness: usize = 0xC0; // float32
                pub const m_bEnableSeparateSkyboxFog: usize = 0xC4; // bool
                pub const m_vFowColor: usize = 0xC8; // 
                pub const m_ViewOrigin: usize = 0xD4; // 
                pub const m_ViewAngles: usize = 0xE0; // QAngle
                pub const m_flViewFoV: usize = 0xEC; // float32
                pub const m_WorldPoints: usize = 0xF0; // Vector[8]
                pub const m_vFogOffsetLayer0: usize = 0x4A8; // Vector2D
                pub const m_vFogOffsetLayer1: usize = 0x4B0; // Vector2D
                pub const m_hEnvWind: usize = 0x4B8; // CHandle<C_BaseEntity>
                pub const m_hEnvSky: usize = 0x4BC; // CHandle<C_BaseEntity>
            }
            // Parent: C_BaseEntity
            // Fields count: 1
            pub mod C_GlobalLight {
                pub const m_WindClothForceHandle: usize = 0xA10; // uint16
            }
            // Parent: CAnimGraphControllerBase
            // Fields count: 4
            pub mod C_CSGO_PreviewModel_GraphController {
                pub const m_pszCharacterMode: usize = 0x18; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszWeaponState: usize = 0x38; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszWeaponType: usize = 0x58; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszEndOfMatchCelebration: usize = 0x78; // CAnimGraphParamOptionalRef<char*>
            }
            // Parent: CAnimGraphControllerBase
            // Fields count: 8
            pub mod C_CSGO_PreviewPlayer_GraphController {
                pub const m_pszCharacterMode: usize = 0x18; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszTeamPreviewVariant: usize = 0x38; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszTeamPreviewPosition: usize = 0x58; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszEndOfMatchCelebration: usize = 0x78; // CAnimGraphParamOptionalRef<char*>
                pub const m_nTeamPreviewRandom: usize = 0x98; // CAnimGraphParamOptionalRef<int32>
                pub const m_pszWeaponState: usize = 0xB0; // CAnimGraphParamOptionalRef<char*>
                pub const m_pszWeaponType: usize = 0xD0; // CAnimGraphParamOptionalRef<char*>
                pub const m_bCT: usize = 0xF0; // CAnimGraphParamOptionalRef<bool>
            }
            // Parent: C_BaseEntity
            // Fields count: 10
            pub mod C_CSGO_MapPreviewCameraPathNode {
                pub const m_szParentPathUniqueID: usize = 0x550; // CUtlSymbolLarge
                pub const m_nPathIndex: usize = 0x558; // int32
                pub const m_vInTangentLocal: usize = 0x55C; // 
                pub const m_vOutTangentLocal: usize = 0x568; // 
                pub const m_flFOV: usize = 0x574; // float32
                pub const m_flSpeed: usize = 0x578; // float32
                pub const m_flEaseIn: usize = 0x57C; // float32
                pub const m_flEaseOut: usize = 0x580; // float32
                pub const m_vInTangentWorld: usize = 0x584; // 
                pub const m_vOutTangentWorld: usize = 0x590; // 
            }
            // Parent: C_BaseEntity
            // Fields count: 8
            pub mod C_CSGO_MapPreviewCameraPath {
                pub const m_flZFar: usize = 0x550; // float32
                pub const m_flZNear: usize = 0x554; // float32
                pub const m_bLoop: usize = 0x558; // bool
                pub const m_bVerticalFOV: usize = 0x559; // bool
                pub const m_bConstantSpeed: usize = 0x55A; // bool
                pub const m_flDuration: usize = 0x55C; // float32
                pub const m_flPathLength: usize = 0x5A0; // float32
                pub const m_flPathDuration: usize = 0x5A4; // float32
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CCSPlayer_GlowServices {
            }
            // Parent: None
            // Fields count: 0
            pub mod C_CSObserverPawnAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod C_CSPlayerPawnAPI {
            }
            // Parent: C_BaseEntity
            // Fields count: 7
            pub mod C_VoteController {
                pub const m_iActiveIssueIndex: usize = 0x560; // int32
                pub const m_iOnlyTeamToVote: usize = 0x564; // int32
                pub const m_nVoteOptionCount: usize = 0x568; // int32[5]
                pub const m_nPotentialVotes: usize = 0x57C; // int32
                pub const m_bVotesDirty: usize = 0x580; // bool
                pub const m_bTypeDirty: usize = 0x581; // bool
                pub const m_bIsYesNoVote: usize = 0x582; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 17
            pub mod C_MapVetoPickController {
                pub const m_nDraftType: usize = 0x560; // int32
                pub const m_nTeamWinningCoinToss: usize = 0x564; // int32
                pub const m_nTeamWithFirstChoice: usize = 0x568; // int32[64]
                pub const m_nVoteMapIdsList: usize = 0x668; // int32[7]
                pub const m_nAccountIDs: usize = 0x684; // int32[64]
                pub const m_nMapId0: usize = 0x784; // int32[64]
                pub const m_nMapId1: usize = 0x884; // int32[64]
                pub const m_nMapId2: usize = 0x984; // int32[64]
                pub const m_nMapId3: usize = 0xA84; // int32[64]
                pub const m_nMapId4: usize = 0xB84; // int32[64]
                pub const m_nMapId5: usize = 0xC84; // int32[64]
                pub const m_nStartingSide0: usize = 0xD84; // int32[64]
                pub const m_nCurrentPhase: usize = 0xE84; // int32
                pub const m_nPhaseStartTick: usize = 0xE88; // int32
                pub const m_nPhaseDurationTicks: usize = 0xE8C; // int32
                pub const m_nPostDataUpdateTick: usize = 0xE90; // int32
                pub const m_bDisabledHud: usize = 0xE94; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CPlayerSprayDecalRenderHelper {
            }
            // Parent: C_CSGO_MapPreviewCameraPath
            // Fields count: 7
            pub mod C_CSGO_TeamPreviewCamera {
                pub const m_nVariant: usize = 0x5B0; // int32
                pub const m_bDofEnabled: usize = 0x5B4; // bool
                pub const m_flDofNearBlurry: usize = 0x5B8; // float32
                pub const m_flDofNearCrisp: usize = 0x5BC; // float32
                pub const m_flDofFarCrisp: usize = 0x5C0; // float32
                pub const m_flDofFarBlurry: usize = 0x5C4; // float32
                pub const m_flDofTiltToGround: usize = 0x5C8; // float32
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_TeamSelectCamera {
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_TerroristTeamIntroCamera {
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_TerroristWingmanIntroCamera {
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_CounterTerroristTeamIntroCamera {
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_CounterTerroristWingmanIntroCamera {
            }
            // Parent: C_CSGO_TeamPreviewCamera
            // Fields count: 0
            pub mod C_CSGO_EndOfMatchCamera {
            }
            // Parent: C_CSGO_TeamPreviewCharacterPosition
            // Fields count: 0
            pub mod C_CSGO_EndOfMatchCharacterPosition {
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_CSGO_EndOfMatchLineupEndpoint {
            }
            // Parent: C_CSGO_EndOfMatchLineupEndpoint
            // Fields count: 0
            pub mod C_CSGO_EndOfMatchLineupStart {
            }
            // Parent: C_CSGO_EndOfMatchLineupEndpoint
            // Fields count: 0
            pub mod C_CSGO_EndOfMatchLineupEnd {
            }
            // Parent: C_BaseEntity
            // Fields count: 2
            pub mod C_CsmFovOverride {
                pub const m_cameraName: usize = 0x550; // CUtlString
                pub const m_flCsmFovOverrideValue: usize = 0x558; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod C_PointEntity {
            }
            // Parent: C_BaseEntity
            // Fields count: 24
            pub mod C_EnvCombinedLightProbeVolume {
                pub const m_Color: usize = 0x15A8; // Color
                pub const m_flBrightness: usize = 0x15AC; // float32
                pub const m_hCubemapTexture: usize = 0x15B0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bCustomCubemapTexture: usize = 0x15B8; // bool
                pub const m_hLightProbeTexture: usize = 0x15C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightIndicesTexture: usize = 0x15C8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightScalarsTexture: usize = 0x15D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightShadowsTexture: usize = 0x15D8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vBoxMins: usize = 0x15E0; // 
                pub const m_vBoxMaxs: usize = 0x15EC; // 
                pub const m_bMoveable: usize = 0x15F8; // bool
                pub const m_nHandshake: usize = 0x15FC; // int32
                pub const m_nEnvCubeMapArrayIndex: usize = 0x1600; // int32
                pub const m_nPriority: usize = 0x1604; // int32
                pub const m_bStartDisabled: usize = 0x1608; // bool
                pub const m_flEdgeFadeDist: usize = 0x160C; // float32
                pub const m_vEdgeFadeDists: usize = 0x1610; // 
                pub const m_nLightProbeSizeX: usize = 0x161C; // int32
                pub const m_nLightProbeSizeY: usize = 0x1620; // int32
                pub const m_nLightProbeSizeZ: usize = 0x1624; // int32
                pub const m_nLightProbeAtlasX: usize = 0x1628; // int32
                pub const m_nLightProbeAtlasY: usize = 0x162C; // int32
                pub const m_nLightProbeAtlasZ: usize = 0x1630; // int32
                pub const m_bEnabled: usize = 0x1649; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 18
            pub mod C_EnvCubemap {
                pub const m_hCubemapTexture: usize = 0x5D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bCustomCubemapTexture: usize = 0x5D8; // bool
                pub const m_flInfluenceRadius: usize = 0x5DC; // float32
                pub const m_vBoxProjectMins: usize = 0x5E0; // 
                pub const m_vBoxProjectMaxs: usize = 0x5EC; // 
                pub const m_bMoveable: usize = 0x5F8; // bool
                pub const m_nHandshake: usize = 0x5FC; // int32
                pub const m_nEnvCubeMapArrayIndex: usize = 0x600; // int32
                pub const m_nPriority: usize = 0x604; // int32
                pub const m_flEdgeFadeDist: usize = 0x608; // float32
                pub const m_vEdgeFadeDists: usize = 0x60C; // 
                pub const m_flDiffuseScale: usize = 0x618; // float32
                pub const m_bStartDisabled: usize = 0x61C; // bool
                pub const m_bDefaultEnvMap: usize = 0x61D; // bool
                pub const m_bDefaultSpecEnvMap: usize = 0x61E; // bool
                pub const m_bIndoorCubeMap: usize = 0x61F; // bool
                pub const m_bCopyDiffuseFromDefaultCubemap: usize = 0x620; // bool
                pub const m_bEnabled: usize = 0x630; // bool
            }
            // Parent: C_EnvCubemap
            // Fields count: 0
            pub mod C_EnvCubemapBox {
            }
            // Parent: C_BaseEntity
            // Fields count: 18
            pub mod C_EnvCubemapFog {
                pub const m_flEndDistance: usize = 0x550; // float32
                pub const m_flStartDistance: usize = 0x554; // float32
                pub const m_flFogFalloffExponent: usize = 0x558; // float32
                pub const m_bHeightFogEnabled: usize = 0x55C; // bool
                pub const m_flFogHeightWidth: usize = 0x560; // float32
                pub const m_flFogHeightEnd: usize = 0x564; // float32
                pub const m_flFogHeightStart: usize = 0x568; // float32
                pub const m_flFogHeightExponent: usize = 0x56C; // float32
                pub const m_flLODBias: usize = 0x570; // float32
                pub const m_bActive: usize = 0x574; // bool
                pub const m_bStartDisabled: usize = 0x575; // bool
                pub const m_flFogMaxOpacity: usize = 0x578; // float32
                pub const m_nCubemapSourceType: usize = 0x57C; // int32
                pub const m_hSkyMaterial: usize = 0x580; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_iszSkyEntity: usize = 0x588; // CUtlSymbolLarge
                pub const m_hFogCubemapTexture: usize = 0x590; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bHasHeightFogEnd: usize = 0x598; // bool
                pub const m_bFirstTime: usize = 0x599; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 16
            pub mod C_GradientFog {
                pub const m_hGradientFogTexture: usize = 0x550; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_flFogStartDistance: usize = 0x558; // float32
                pub const m_flFogEndDistance: usize = 0x55C; // float32
                pub const m_bHeightFogEnabled: usize = 0x560; // bool
                pub const m_flFogStartHeight: usize = 0x564; // float32
                pub const m_flFogEndHeight: usize = 0x568; // float32
                pub const m_flFarZ: usize = 0x56C; // float32
                pub const m_flFogMaxOpacity: usize = 0x570; // float32
                pub const m_flFogFalloffExponent: usize = 0x574; // float32
                pub const m_flFogVerticalExponent: usize = 0x578; // float32
                pub const m_fogColor: usize = 0x57C; // Color
                pub const m_flFogStrength: usize = 0x580; // float32
                pub const m_flFadeTime: usize = 0x584; // float32
                pub const m_bStartDisabled: usize = 0x588; // bool
                pub const m_bIsEnabled: usize = 0x589; // bool
                pub const m_bGradientFogNeedsTextures: usize = 0x58A; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 17
            pub mod C_EnvLightProbeVolume {
                pub const m_hLightProbeTexture: usize = 0x1528; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightIndicesTexture: usize = 0x1530; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightScalarsTexture: usize = 0x1538; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightShadowsTexture: usize = 0x1540; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vBoxMins: usize = 0x1548; // 
                pub const m_vBoxMaxs: usize = 0x1554; // 
                pub const m_bMoveable: usize = 0x1560; // bool
                pub const m_nHandshake: usize = 0x1564; // int32
                pub const m_nPriority: usize = 0x1568; // int32
                pub const m_bStartDisabled: usize = 0x156C; // bool
                pub const m_nLightProbeSizeX: usize = 0x1570; // int32
                pub const m_nLightProbeSizeY: usize = 0x1574; // int32
                pub const m_nLightProbeSizeZ: usize = 0x1578; // int32
                pub const m_nLightProbeAtlasX: usize = 0x157C; // int32
                pub const m_nLightProbeAtlasY: usize = 0x1580; // int32
                pub const m_nLightProbeAtlasZ: usize = 0x1584; // int32
                pub const m_bEnabled: usize = 0x1591; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 6
            pub mod C_PlayerVisibility {
                pub const m_flVisibilityStrength: usize = 0x550; // float32
                pub const m_flFogDistanceMultiplier: usize = 0x554; // float32
                pub const m_flFogMaxDensityMultiplier: usize = 0x558; // float32
                pub const m_flFadeTime: usize = 0x55C; // float32
                pub const m_bStartDisabled: usize = 0x560; // bool
                pub const m_bIsEnabled: usize = 0x561; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 8
            pub mod C_TonemapController2 {
                pub const m_flAutoExposureMin: usize = 0x550; // float32
                pub const m_flAutoExposureMax: usize = 0x554; // float32
                pub const m_flTonemapPercentTarget: usize = 0x558; // float32
                pub const m_flTonemapPercentBrightPixels: usize = 0x55C; // float32
                pub const m_flTonemapMinAvgLum: usize = 0x560; // float32
                pub const m_flExposureAdaptationSpeedUp: usize = 0x564; // float32
                pub const m_flExposureAdaptationSpeedDown: usize = 0x568; // float32
                pub const m_flTonemapEVSmoothingRange: usize = 0x56C; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 28
            pub mod C_EnvVolumetricFogController {
                pub const m_flScattering: usize = 0x550; // float32
                pub const m_flAnisotropy: usize = 0x554; // float32
                pub const m_flFadeSpeed: usize = 0x558; // float32
                pub const m_flDrawDistance: usize = 0x55C; // float32
                pub const m_flFadeInStart: usize = 0x560; // float32
                pub const m_flFadeInEnd: usize = 0x564; // float32
                pub const m_flIndirectStrength: usize = 0x568; // float32
                pub const m_nIndirectTextureDimX: usize = 0x56C; // int32
                pub const m_nIndirectTextureDimY: usize = 0x570; // int32
                pub const m_nIndirectTextureDimZ: usize = 0x574; // int32
                pub const m_vBoxMins: usize = 0x578; // 
                pub const m_vBoxMaxs: usize = 0x584; // 
                pub const m_bActive: usize = 0x590; // bool
                pub const m_flStartAnisoTime: usize = 0x594; // GameTime_t
                pub const m_flStartScatterTime: usize = 0x598; // GameTime_t
                pub const m_flStartDrawDistanceTime: usize = 0x59C; // GameTime_t
                pub const m_flStartAnisotropy: usize = 0x5A0; // float32
                pub const m_flStartScattering: usize = 0x5A4; // float32
                pub const m_flStartDrawDistance: usize = 0x5A8; // float32
                pub const m_flDefaultAnisotropy: usize = 0x5AC; // float32
                pub const m_flDefaultScattering: usize = 0x5B0; // float32
                pub const m_flDefaultDrawDistance: usize = 0x5B4; // float32
                pub const m_bStartDisabled: usize = 0x5B8; // bool
                pub const m_bEnableIndirect: usize = 0x5B9; // bool
                pub const m_bIsMaster: usize = 0x5BA; // bool
                pub const m_hFogIndirectTexture: usize = 0x5C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_nForceRefreshCount: usize = 0x5C8; // int32
                pub const m_bFirstTime: usize = 0x5CC; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 7
            pub mod C_EnvVolumetricFogVolume {
                pub const m_bActive: usize = 0x550; // bool
                pub const m_vBoxMins: usize = 0x554; // 
                pub const m_vBoxMaxs: usize = 0x560; // 
                pub const m_bStartDisabled: usize = 0x56C; // bool
                pub const m_flStrength: usize = 0x570; // float32
                pub const m_nFalloffShape: usize = 0x574; // int32
                pub const m_flFalloffExponent: usize = 0x578; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 3
            pub mod C_FogController {
                pub const m_fog: usize = 0x550; // fogparams_t
                pub const m_bUseAngles: usize = 0x5B8; // bool
                pub const m_iChangedVariables: usize = 0x5BC; // int32
            }
            // Parent: C_PointEntity
            // Fields count: 0
            pub mod CInfoTarget {
            }
            // Parent: C_PointEntity
            // Fields count: 0
            pub mod CInfoParticleTarget {
            }
            // Parent: C_BaseEntity
            // Fields count: 3
            pub mod C_InfoVisibilityBox {
                pub const m_nMode: usize = 0x554; // int32
                pub const m_vBoxSize: usize = 0x558; // 
                pub const m_bEnabled: usize = 0x564; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 8
            pub mod CInfoWorldLayer {
                pub const m_pOutputOnEntitiesSpawned: usize = 0x550; // CEntityIOOutput
                pub const m_worldName: usize = 0x578; // CUtlSymbolLarge
                pub const m_layerName: usize = 0x580; // CUtlSymbolLarge
                pub const m_bWorldLayerVisible: usize = 0x588; // bool
                pub const m_bEntitiesSpawned: usize = 0x589; // bool
                pub const m_bCreateAsChildSpawnGroup: usize = 0x58A; // bool
                pub const m_hLayerSpawnGroup: usize = 0x58C; // uint32
                pub const m_bWorldLayerActuallyVisible: usize = 0x590; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 25
            pub mod C_PointCamera {
                pub const m_FOV: usize = 0x550; // float32
                pub const m_Resolution: usize = 0x554; // float32
                pub const m_bFogEnable: usize = 0x558; // bool
                pub const m_FogColor: usize = 0x559; // Color
                pub const m_flFogStart: usize = 0x560; // float32
                pub const m_flFogEnd: usize = 0x564; // float32
                pub const m_flFogMaxDensity: usize = 0x568; // float32
                pub const m_bActive: usize = 0x56C; // bool
                pub const m_bUseScreenAspectRatio: usize = 0x56D; // bool
                pub const m_flAspectRatio: usize = 0x570; // float32
                pub const m_bNoSky: usize = 0x574; // bool
                pub const m_fBrightness: usize = 0x578; // float32
                pub const m_flZFar: usize = 0x57C; // float32
                pub const m_flZNear: usize = 0x580; // float32
                pub const m_bCanHLTVUse: usize = 0x584; // bool
                pub const m_bDofEnabled: usize = 0x585; // bool
                pub const m_flDofNearBlurry: usize = 0x588; // float32
                pub const m_flDofNearCrisp: usize = 0x58C; // float32
                pub const m_flDofFarCrisp: usize = 0x590; // float32
                pub const m_flDofFarBlurry: usize = 0x594; // float32
                pub const m_flDofTiltToGround: usize = 0x598; // float32
                pub const m_TargetFOV: usize = 0x59C; // float32
                pub const m_DegreesPerSecond: usize = 0x5A0; // float32
                pub const m_bIsOn: usize = 0x5A4; // bool
                pub const m_pNext: usize = 0x5A8; // C_PointCamera*
            }
            // Parent: C_PointCamera
            // Fields count: 1
            pub mod C_PointCameraVFOV {
                pub const m_flVerticalFOV: usize = 0x5B0; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 12
            pub mod CPointTemplate {
                pub const m_iszWorldName: usize = 0x550; // CUtlSymbolLarge
                pub const m_iszSource2EntityLumpName: usize = 0x558; // CUtlSymbolLarge
                pub const m_iszEntityFilterName: usize = 0x560; // CUtlSymbolLarge
                pub const m_flTimeoutInterval: usize = 0x568; // float32
                pub const m_bAsynchronouslySpawnEntities: usize = 0x56C; // bool
                pub const m_pOutputOnSpawned: usize = 0x570; // CEntityIOOutput
                pub const m_clientOnlyEntityBehavior: usize = 0x598; // PointTemplateClientOnlyEntityBehavior_t
                pub const m_ownerSpawnGroupType: usize = 0x59C; // PointTemplateOwnerSpawnGroupType_t
                pub const m_createdSpawnGroupHandles: usize = 0x5A0; // CUtlVector<uint32>
                pub const m_SpawnedEntityHandles: usize = 0x5B8; // CUtlVector<CEntityHandle>
                pub const m_ScriptSpawnCallback: usize = 0x5D0; // HSCRIPT
                pub const m_ScriptCallbackScope: usize = 0x5D8; // HSCRIPT
            }
            // Parent: C_BaseEntity
            // Fields count: 4
            pub mod C_SoundAreaEntityBase {
                pub const m_bDisabled: usize = 0x550; // bool
                pub const m_bWasEnabled: usize = 0x558; // bool
                pub const m_iszSoundAreaType: usize = 0x560; // CUtlSymbolLarge
                pub const m_vPos: usize = 0x568; // 
            }
            // Parent: C_SoundAreaEntityBase
            // Fields count: 1
            pub mod C_SoundAreaEntitySphere {
                pub const m_flRadius: usize = 0x578; // float32
            }
            // Parent: C_SoundAreaEntityBase
            // Fields count: 2
            pub mod C_SoundAreaEntityOrientedBox {
                pub const m_vMin: usize = 0x578; // 
                pub const m_vMax: usize = 0x584; // 
            }
            // Parent: C_BaseEntity
            // Fields count: 4
            pub mod C_Team {
                pub const m_aPlayerControllers: usize = 0x550; // C_NetworkUtlVectorBase<CHandle<CBasePlayerController>>
                pub const m_aPlayers: usize = 0x568; // C_NetworkUtlVectorBase<CHandle<C_BasePlayerPawn>>
                pub const m_iScore: usize = 0x580; // int32
                pub const m_szTeamname: usize = 0x584; // char[129]
            }
            // Parent: C_BaseEntity
            // Fields count: 15
            pub mod CBasePlayerController {
                pub const m_nFinalPredictedTick: usize = 0x558; // int32
                pub const m_CommandContext: usize = 0x560; // C_CommandContext
                pub const m_nInButtonsWhichAreToggles: usize = 0x5F8; // uint64
                pub const m_nTickBase: usize = 0x600; // uint32
                pub const m_hPawn: usize = 0x604; // CHandle<C_BasePlayerPawn>
                pub const m_hPredictedPawn: usize = 0x608; // CHandle<C_BasePlayerPawn>
                pub const m_nSplitScreenSlot: usize = 0x60C; // CSplitScreenSlot
                pub const m_hSplitOwner: usize = 0x610; // CHandle<CBasePlayerController>
                pub const m_hSplitScreenPlayers: usize = 0x618; // CUtlVector<CHandle<CBasePlayerController>>
                pub const m_bIsHLTV: usize = 0x630; // bool
                pub const m_iConnected: usize = 0x634; // PlayerConnectedState
                pub const m_iszPlayerName: usize = 0x638; // char[128]
                pub const m_steamID: usize = 0x6C0; // uint64
                pub const m_bIsLocalPlayerController: usize = 0x6C8; // bool
                pub const m_iDesiredFOV: usize = 0x6CC; // uint32
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 14
            pub mod CBasePlayerVData {
                pub const m_sModelName: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_flHeadDamageMultiplier: usize = 0x108; // CSkillFloat
                pub const m_flChestDamageMultiplier: usize = 0x118; // CSkillFloat
                pub const m_flStomachDamageMultiplier: usize = 0x128; // CSkillFloat
                pub const m_flArmDamageMultiplier: usize = 0x138; // CSkillFloat
                pub const m_flLegDamageMultiplier: usize = 0x148; // CSkillFloat
                pub const m_flHoldBreathTime: usize = 0x158; // float32
                pub const m_flDrowningDamageInterval: usize = 0x15C; // float32
                pub const m_nDrowningDamageInitial: usize = 0x160; // int32
                pub const m_nDrowningDamageMax: usize = 0x164; // int32
                pub const m_nWaterSpeed: usize = 0x168; // int32
                pub const m_flUseRange: usize = 0x16C; // float32
                pub const m_flUseAngleTolerance: usize = 0x170; // float32
                pub const m_flCrouchTime: usize = 0x174; // float32
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 20
            pub mod CBasePlayerWeaponVData {
                pub const m_szWorldModel: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_bBuiltRightHanded: usize = 0x108; // bool
                pub const m_bAllowFlipping: usize = 0x109; // bool
                pub const m_sMuzzleAttachment: usize = 0x110; // CUtlString
                pub const m_szMuzzleFlashParticle: usize = 0x118; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_iFlags: usize = 0x1F8; // ItemFlagTypes_t
                pub const m_nPrimaryAmmoType: usize = 0x1F9; // AmmoIndex_t
                pub const m_nSecondaryAmmoType: usize = 0x1FA; // AmmoIndex_t
                pub const m_iMaxClip1: usize = 0x1FC; // int32
                pub const m_iMaxClip2: usize = 0x200; // int32
                pub const m_iDefaultClip1: usize = 0x204; // int32
                pub const m_iDefaultClip2: usize = 0x208; // int32
                pub const m_iWeight: usize = 0x20C; // int32
                pub const m_bAutoSwitchTo: usize = 0x210; // bool
                pub const m_bAutoSwitchFrom: usize = 0x211; // bool
                pub const m_iRumbleEffect: usize = 0x214; // RumbleEffect_t
                pub const m_bLinkedCooldowns: usize = 0x218; // bool
                pub const m_aShootSounds: usize = 0x220; // CUtlMap<WeaponSound_t,CSoundEventName>
                pub const m_iSlot: usize = 0x240; // int32
                pub const m_iPosition: usize = 0x244; // int32
            }
            // Parent: CSkeletonAnimationController
            // Fields count: 13
            pub mod CBaseAnimGraphController {
                pub const m_animGraphNetworkedVars: usize = 0x18; // CAnimGraphNetworkedVariables
                pub const m_bSequenceFinished: usize = 0x14A8; // bool
                pub const m_flSoundSyncTime: usize = 0x14AC; // float32
                pub const m_hSequence: usize = 0x14B0; // HSequence
                pub const m_flSeqStartTime: usize = 0x14B4; // GameTime_t
                pub const m_flSeqFixedCycle: usize = 0x14B8; // float32
                pub const m_nAnimLoopMode: usize = 0x14BC; // AnimLoopMode_t
                pub const m_flPlaybackRate: usize = 0x14C0; // CNetworkedQuantizedFloat
                pub const m_nNotifyState: usize = 0x14CC; // SequenceFinishNotifyState_t
                pub const m_bNetworkedAnimationInputsChanged: usize = 0x14CE; // bool
                pub const m_bNetworkedSequenceChanged: usize = 0x14CF; // bool
                pub const m_bLastUpdateSkipped: usize = 0x14D0; // bool
                pub const m_flPrevAnimUpdateTime: usize = 0x14D4; // GameTime_t
            }
            // Parent: C_BaseEntity
            // Fields count: 31
            pub mod C_BaseModelEntity {
                pub const m_CRenderComponent: usize = 0xA20; // CRenderComponent*
                pub const m_CHitboxComponent: usize = 0xA28; // CHitboxComponent
                pub const m_bInitModelEffects: usize = 0xA70; // bool
                pub const m_bIsStaticProp: usize = 0xA71; // bool
                pub const m_nLastAddDecal: usize = 0xA74; // int32
                pub const m_nDecalsAdded: usize = 0xA78; // int32
                pub const m_iOldHealth: usize = 0xA7C; // int32
                pub const m_nRenderMode: usize = 0xA80; // RenderMode_t
                pub const m_nRenderFX: usize = 0xA81; // RenderFx_t
                pub const m_bAllowFadeInView: usize = 0xA82; // bool
                pub const m_clrRender: usize = 0xA83; // Color
                pub const m_vecRenderAttributes: usize = 0xA88; // C_UtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
                pub const m_bRenderToCubemaps: usize = 0xAF0; // bool
                pub const m_Collision: usize = 0xAF8; // CCollisionProperty
                pub const m_Glow: usize = 0xBA8; // CGlowProperty
                pub const m_flGlowBackfaceMult: usize = 0xC00; // float32
                pub const m_fadeMinDist: usize = 0xC04; // float32
                pub const m_fadeMaxDist: usize = 0xC08; // float32
                pub const m_flFadeScale: usize = 0xC0C; // float32
                pub const m_flShadowStrength: usize = 0xC10; // float32
                pub const m_nObjectCulling: usize = 0xC14; // uint8
                pub const m_nAddDecal: usize = 0xC18; // int32
                pub const m_vDecalPosition: usize = 0xC1C; // 
                pub const m_vDecalForwardAxis: usize = 0xC28; // 
                pub const m_flDecalHealBloodRate: usize = 0xC34; // float32
                pub const m_flDecalHealHeightRate: usize = 0xC38; // float32
                pub const m_ConfigEntitiesToPropagateMaterialDecalsTo: usize = 0xC40; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
                pub const m_vecViewOffset: usize = 0xC58; // CNetworkViewOffsetVector
                pub const m_pClientAlphaProperty: usize = 0xC88; // CClientAlphaProperty*
                pub const m_ClientOverrideTint: usize = 0xC90; // Color
                pub const m_bUseClientOverrideTint: usize = 0xC94; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod CServerOnlyModelEntity {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_ModelPointEntity {
            }
            // Parent: CLogicalEntity
            // Fields count: 7
            pub mod CLogicRelay {
                pub const m_OnTrigger: usize = 0x550; // CEntityIOOutput
                pub const m_OnSpawn: usize = 0x578; // CEntityIOOutput
                pub const m_bDisabled: usize = 0x5A0; // bool
                pub const m_bWaitForRefire: usize = 0x5A1; // bool
                pub const m_bTriggerOnce: usize = 0x5A2; // bool
                pub const m_bFastRetrigger: usize = 0x5A3; // bool
                pub const m_bPassthoughCaller: usize = 0x5A4; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 24
            pub mod C_ParticleSystem {
                pub const m_szSnapshotFileName: usize = 0xCD0; // char[512]
                pub const m_bActive: usize = 0xED0; // bool
                pub const m_bFrozen: usize = 0xED1; // bool
                pub const m_flFreezeTransitionDuration: usize = 0xED4; // float32
                pub const m_nStopType: usize = 0xED8; // int32
                pub const m_bAnimateDuringGameplayPause: usize = 0xEDC; // bool
                pub const m_iEffectIndex: usize = 0xEE0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_flStartTime: usize = 0xEE8; // GameTime_t
                pub const m_flPreSimTime: usize = 0xEEC; // float32
                pub const m_vServerControlPoints: usize = 0xEF0; // Vector[4]
                pub const m_iServerControlPointAssignments: usize = 0xF20; // uint8[4]
                pub const m_hControlPointEnts: usize = 0xF24; // CHandle<C_BaseEntity>[64]
                pub const m_bNoSave: usize = 0x1024; // bool
                pub const m_bNoFreeze: usize = 0x1025; // bool
                pub const m_bNoRamp: usize = 0x1026; // bool
                pub const m_bStartActive: usize = 0x1027; // bool
                pub const m_iszEffectName: usize = 0x1028; // CUtlSymbolLarge
                pub const m_iszControlPointNames: usize = 0x1030; // CUtlSymbolLarge[64]
                pub const m_nDataCP: usize = 0x1230; // int32
                pub const m_vecDataCPValue: usize = 0x1234; // 
                pub const m_nTintCP: usize = 0x1240; // int32
                pub const m_clrTint: usize = 0x1244; // Color
                pub const m_bOldActive: usize = 0x1268; // bool
                pub const m_bOldFrozen: usize = 0x1269; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 16
            pub mod C_PathParticleRope {
                pub const m_bStartActive: usize = 0x550; // bool
                pub const m_flMaxSimulationTime: usize = 0x554; // float32
                pub const m_iszEffectName: usize = 0x558; // CUtlSymbolLarge
                pub const m_PathNodes_Name: usize = 0x560; // CUtlVector<CUtlSymbolLarge>
                pub const m_flParticleSpacing: usize = 0x578; // float32
                pub const m_flSlack: usize = 0x57C; // float32
                pub const m_flRadius: usize = 0x580; // float32
                pub const m_ColorTint: usize = 0x584; // Color
                pub const m_nEffectState: usize = 0x588; // int32
                pub const m_iEffectIndex: usize = 0x590; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_PathNodes_Position: usize = 0x598; // C_NetworkUtlVectorBase<Vector>
                pub const m_PathNodes_TangentIn: usize = 0x5B0; // C_NetworkUtlVectorBase<Vector>
                pub const m_PathNodes_TangentOut: usize = 0x5C8; // C_NetworkUtlVectorBase<Vector>
                pub const m_PathNodes_Color: usize = 0x5E0; // C_NetworkUtlVectorBase<Vector>
                pub const m_PathNodes_PinEnabled: usize = 0x5F8; // C_NetworkUtlVectorBase<bool>
                pub const m_PathNodes_RadiusScale: usize = 0x610; // C_NetworkUtlVectorBase<float32>
            }
            // Parent: C_PathParticleRope
            // Fields count: 0
            pub mod C_PathParticleRopeAlias_path_particle_rope_clientside {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 7
            pub mod C_DynamicLight {
                pub const m_Flags: usize = 0xCD0; // uint8
                pub const m_LightStyle: usize = 0xCD1; // uint8
                pub const m_Radius: usize = 0xCD4; // float32
                pub const m_Exponent: usize = 0xCD8; // int32
                pub const m_InnerAngle: usize = 0xCDC; // float32
                pub const m_OuterAngle: usize = 0xCE0; // float32
                pub const m_SpotRadius: usize = 0xCE4; // float32
            }
            // Parent: C_PointEntity
            // Fields count: 9
            pub mod C_EnvScreenOverlay {
                pub const m_iszOverlayNames: usize = 0x550; // CUtlSymbolLarge[10]
                pub const m_flOverlayTimes: usize = 0x5A0; // float32[10]
                pub const m_flStartTime: usize = 0x5C8; // GameTime_t
                pub const m_iDesiredOverlay: usize = 0x5CC; // int32
                pub const m_bIsActive: usize = 0x5D0; // bool
                pub const m_bWasActive: usize = 0x5D1; // bool
                pub const m_iCachedDesiredOverlay: usize = 0x5D4; // int32
                pub const m_iCurrentOverlay: usize = 0x5D8; // int32
                pub const m_flCurrentOverlayTime: usize = 0x5DC; // GameTime_t
            }
            // Parent: C_BaseModelEntity
            // Fields count: 3
            pub mod C_FuncTrackTrain {
                pub const m_nLongAxis: usize = 0xCD0; // int32
                pub const m_flRadius: usize = 0xCD4; // float32
                pub const m_flLineLength: usize = 0xCD8; // float32
            }
            // Parent: CGlowOverlay
            // Fields count: 7
            pub mod C_LightGlowOverlay {
                pub const m_vecOrigin: usize = 0xD0; // 
                pub const m_vecDirection: usize = 0xDC; // 
                pub const m_nMinDist: usize = 0xE8; // int32
                pub const m_nMaxDist: usize = 0xEC; // int32
                pub const m_nOuterMaxDist: usize = 0xF0; // int32
                pub const m_bOneSided: usize = 0xF4; // bool
                pub const m_bModulateByDot: usize = 0xF5; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 8
            pub mod C_LightGlow {
                pub const m_nHorizontalSize: usize = 0xCD0; // uint32
                pub const m_nVerticalSize: usize = 0xCD4; // uint32
                pub const m_nMinDist: usize = 0xCD8; // uint32
                pub const m_nMaxDist: usize = 0xCDC; // uint32
                pub const m_nOuterMaxDist: usize = 0xCE0; // uint32
                pub const m_flGlowProxySize: usize = 0xCE4; // float32
                pub const m_flHDRColorScale: usize = 0xCE8; // float32
                pub const m_Glow: usize = 0xCF0; // C_LightGlowOverlay
            }
            // Parent: C_BaseEntity
            // Fields count: 1
            pub mod C_RagdollManager {
                pub const m_iCurrentMaxRagdollCount: usize = 0x550; // int8
            }
            // Parent: C_BaseModelEntity
            // Fields count: 2
            pub mod C_SpotlightEnd {
                pub const m_flLightScale: usize = 0xCD0; // float32
                pub const m_Radius: usize = 0xCD4; // float32
            }
            // Parent: C_BaseEntity
            // Fields count: 25
            pub mod C_PointValueRemapper {
                pub const m_bDisabled: usize = 0x550; // bool
                pub const m_bDisabledOld: usize = 0x551; // bool
                pub const m_bUpdateOnClient: usize = 0x552; // bool
                pub const m_nInputType: usize = 0x554; // ValueRemapperInputType_t
                pub const m_hRemapLineStart: usize = 0x558; // CHandle<C_BaseEntity>
                pub const m_hRemapLineEnd: usize = 0x55C; // CHandle<C_BaseEntity>
                pub const m_flMaximumChangePerSecond: usize = 0x560; // float32
                pub const m_flDisengageDistance: usize = 0x564; // float32
                pub const m_flEngageDistance: usize = 0x568; // float32
                pub const m_bRequiresUseKey: usize = 0x56C; // bool
                pub const m_nOutputType: usize = 0x570; // ValueRemapperOutputType_t
                pub const m_hOutputEntities: usize = 0x578; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
                pub const m_nHapticsType: usize = 0x590; // ValueRemapperHapticsType_t
                pub const m_nMomentumType: usize = 0x594; // ValueRemapperMomentumType_t
                pub const m_flMomentumModifier: usize = 0x598; // float32
                pub const m_flSnapValue: usize = 0x59C; // float32
                pub const m_flCurrentMomentum: usize = 0x5A0; // float32
                pub const m_nRatchetType: usize = 0x5A4; // ValueRemapperRatchetType_t
                pub const m_flRatchetOffset: usize = 0x5A8; // float32
                pub const m_flInputOffset: usize = 0x5AC; // float32
                pub const m_bEngaged: usize = 0x5B0; // bool
                pub const m_bFirstUpdate: usize = 0x5B1; // bool
                pub const m_flPreviousValue: usize = 0x5B4; // float32
                pub const m_flPreviousUpdateTickTime: usize = 0x5B8; // GameTime_t
                pub const m_vecPreviousTestPoint: usize = 0x5BC; // 
            }
            // Parent: C_ModelPointEntity
            // Fields count: 12
            pub mod C_PointWorldText {
                pub const m_bForceRecreateNextUpdate: usize = 0xCD8; // bool
                pub const m_messageText: usize = 0xCE8; // char[512]
                pub const m_FontName: usize = 0xEE8; // char[64]
                pub const m_bEnabled: usize = 0xF28; // bool
                pub const m_bFullbright: usize = 0xF29; // bool
                pub const m_flWorldUnitsPerPx: usize = 0xF2C; // float32
                pub const m_flFontSize: usize = 0xF30; // float32
                pub const m_flDepthOffset: usize = 0xF34; // float32
                pub const m_Color: usize = 0xF38; // Color
                pub const m_nJustifyHorizontal: usize = 0xF3C; // PointWorldTextJustifyHorizontal_t
                pub const m_nJustifyVertical: usize = 0xF40; // PointWorldTextJustifyVertical_t
                pub const m_nReorientMode: usize = 0xF44; // PointWorldTextReorientMode_t
            }
            // Parent: C_BaseEntity
            // Fields count: 2
            pub mod C_HandleTest {
                pub const m_Handle: usize = 0x550; // CHandle<C_BaseEntity>
                pub const m_bSendHandle: usize = 0x554; // bool
            }
            // Parent: C_BaseEntity
            // Fields count: 0
            pub mod CClientScriptEntity {
            }
            // Parent: C_BaseEntity
            // Fields count: 1
            pub mod C_EnvWind {
                pub const m_EnvWindShared: usize = 0x550; // C_EnvWindShared
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_BaseToggle {
            }
            // Parent: C_BaseToggle
            // Fields count: 3
            pub mod C_BaseButton {
                pub const m_glowEntity: usize = 0xCD0; // CHandle<C_BaseModelEntity>
                pub const m_usable: usize = 0xCD4; // bool
                pub const m_szDisplayText: usize = 0xCD8; // CUtlSymbolLarge
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_PrecipitationBlocker {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 13
            pub mod C_EntityDissolve {
                pub const m_flStartTime: usize = 0xCD8; // GameTime_t
                pub const m_flFadeInStart: usize = 0xCDC; // float32
                pub const m_flFadeInLength: usize = 0xCE0; // float32
                pub const m_flFadeOutModelStart: usize = 0xCE4; // float32
                pub const m_flFadeOutModelLength: usize = 0xCE8; // float32
                pub const m_flFadeOutStart: usize = 0xCEC; // float32
                pub const m_flFadeOutLength: usize = 0xCF0; // float32
                pub const m_flNextSparkTime: usize = 0xCF4; // GameTime_t
                pub const m_nDissolveType: usize = 0xCF8; // EntityDisolveType_t
                pub const m_vDissolverOrigin: usize = 0xCFC; // 
                pub const m_nMagnitude: usize = 0xD08; // uint32
                pub const m_bCoreExplode: usize = 0xD0C; // bool
                pub const m_bLinkedToServerEnt: usize = 0xD0D; // bool
            }
            // Parent: C_ModelPointEntity
            // Fields count: 0
            pub mod C_EnvProjectedTexture {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 9
            pub mod C_EnvDecal {
                pub const m_hDecalMaterial: usize = 0xCD0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_flWidth: usize = 0xCD8; // float32
                pub const m_flHeight: usize = 0xCDC; // float32
                pub const m_flDepth: usize = 0xCE0; // float32
                pub const m_nRenderOrder: usize = 0xCE4; // uint32
                pub const m_bProjectOnWorld: usize = 0xCE8; // bool
                pub const m_bProjectOnCharacters: usize = 0xCE9; // bool
                pub const m_bProjectOnWater: usize = 0xCEA; // bool
                pub const m_flDepthSortBias: usize = 0xCEC; // float32
            }
            // Parent: CGlowOverlay
            // Fields count: 4
            pub mod CFireOverlay {
                pub const m_pOwner: usize = 0xD0; // C_FireSmoke*
                pub const m_vBaseColors: usize = 0xD8; // Vector[4]
                pub const m_flScale: usize = 0x108; // float32
                pub const m_nGUID: usize = 0x10C; // int32
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_FuncBrush {
            }
            // Parent: C_FuncBrush
            // Fields count: 3
            pub mod C_FuncElectrifiedVolume {
                pub const m_nAmbientEffect: usize = 0xCD0; // ParticleIndex_t
                pub const m_EffectName: usize = 0xCD8; // CUtlSymbolLarge
                pub const m_bState: usize = 0xCE0; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_FuncRotating {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_Breakable {
            }
            // Parent: C_Breakable
            // Fields count: 0
            pub mod C_PhysBox {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 41
            pub mod C_RopeKeyframe {
                pub const m_LinksTouchingSomething: usize = 0xCD8; // CBitVec<10>
                pub const m_nLinksTouchingSomething: usize = 0xCDC; // int32
                pub const m_bApplyWind: usize = 0xCE0; // bool
                pub const m_fPrevLockedPoints: usize = 0xCE4; // int32
                pub const m_iForcePointMoveCounter: usize = 0xCE8; // int32
                pub const m_bPrevEndPointPos: usize = 0xCEC; // bool[2]
                pub const m_vPrevEndPointPos: usize = 0xCF0; // Vector[2]
                pub const m_flCurScroll: usize = 0xD08; // float32
                pub const m_flScrollSpeed: usize = 0xD0C; // float32
                pub const m_RopeFlags: usize = 0xD10; // uint16
                pub const m_iRopeMaterialModelIndex: usize = 0xD18; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_LightValues: usize = 0xF90; // Vector[10]
                pub const m_nSegments: usize = 0x1008; // uint8
                pub const m_hStartPoint: usize = 0x100C; // CHandle<C_BaseEntity>
                pub const m_hEndPoint: usize = 0x1010; // CHandle<C_BaseEntity>
                pub const m_iStartAttachment: usize = 0x1014; // AttachmentHandle_t
                pub const m_iEndAttachment: usize = 0x1015; // AttachmentHandle_t
                pub const m_Subdiv: usize = 0x1016; // uint8
                pub const m_RopeLength: usize = 0x1018; // int16
                pub const m_Slack: usize = 0x101A; // int16
                pub const m_TextureScale: usize = 0x101C; // float32
                pub const m_fLockedPoints: usize = 0x1020; // uint8
                pub const m_nChangeCount: usize = 0x1021; // uint8
                pub const m_Width: usize = 0x1024; // float32
                pub const m_PhysicsDelegate: usize = 0x1028; // C_RopeKeyframe::CPhysicsDelegate
                pub const m_hMaterial: usize = 0x1038; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_TextureHeight: usize = 0x1040; // int32
                pub const m_vecImpulse: usize = 0x1044; // 
                pub const m_vecPreviousImpulse: usize = 0x1050; // 
                pub const m_flCurrentGustTimer: usize = 0x105C; // float32
                pub const m_flCurrentGustLifetime: usize = 0x1060; // float32
                pub const m_flTimeToNextGust: usize = 0x1064; // float32
                pub const m_vWindDir: usize = 0x1068; // 
                pub const m_vColorMod: usize = 0x1074; // 
                pub const m_vCachedEndPointAttachmentPos: usize = 0x1080; // Vector[2]
                pub const m_vCachedEndPointAttachmentAngle: usize = 0x1098; // QAngle[2]
                pub const m_bConstrainBetweenEndpoints: usize = 0x10B0; // bool
                pub const m_bEndPointAttachmentPositionsDirty: usize = 0x0; // bitfield:1
                pub const m_bEndPointAttachmentAnglesDirty: usize = 0x0; // bitfield:1
                pub const m_bNewDataThisFrame: usize = 0x0; // bitfield:1
                pub const m_bPhysicsInitted: usize = 0x0; // bitfield:1
            }
            // Parent: C_PointEntity
            // Fields count: 12
            pub mod C_SceneEntity {
                pub const m_bIsPlayingBack: usize = 0x558; // bool
                pub const m_bPaused: usize = 0x559; // bool
                pub const m_bMultiplayer: usize = 0x55A; // bool
                pub const m_bAutogenerated: usize = 0x55B; // bool
                pub const m_flForceClientTime: usize = 0x55C; // float32
                pub const m_nSceneStringIndex: usize = 0x560; // uint16
                pub const m_bClientOnly: usize = 0x562; // bool
                pub const m_hOwner: usize = 0x564; // CHandle<C_BaseFlex>
                pub const m_hActorList: usize = 0x568; // C_NetworkUtlVectorBase<CHandle<C_BaseFlex>>
                pub const m_bWasPlaying: usize = 0x580; // bool
                pub const m_QueuedEvents: usize = 0x590; // CUtlVector<C_SceneEntity::QueuedEvents_t>
                pub const m_flCurrentTime: usize = 0x5A8; // float32
            }
            // Parent: CGlowOverlay
            // Fields count: 1
            pub mod C_SunGlowOverlay {
                pub const m_bModulateByDot: usize = 0xD0; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 18
            pub mod C_Sun {
                pub const m_fxSSSunFlareEffectIndex: usize = 0xCD0; // ParticleIndex_t
                pub const m_fxSunFlareEffectIndex: usize = 0xCD4; // ParticleIndex_t
                pub const m_fdistNormalize: usize = 0xCD8; // float32
                pub const m_vSunPos: usize = 0xCDC; // 
                pub const m_vDirection: usize = 0xCE8; // 
                pub const m_iszEffectName: usize = 0xCF8; // CUtlSymbolLarge
                pub const m_iszSSEffectName: usize = 0xD00; // CUtlSymbolLarge
                pub const m_clrOverlay: usize = 0xD08; // Color
                pub const m_bOn: usize = 0xD0C; // bool
                pub const m_bmaxColor: usize = 0xD0D; // bool
                pub const m_flSize: usize = 0xD10; // float32
                pub const m_flHazeScale: usize = 0xD14; // float32
                pub const m_flRotation: usize = 0xD18; // float32
                pub const m_flHDRColorScale: usize = 0xD1C; // float32
                pub const m_flAlphaHaze: usize = 0xD20; // float32
                pub const m_flAlphaScale: usize = 0xD24; // float32
                pub const m_flAlphaHdr: usize = 0xD28; // float32
                pub const m_flFarZScale: usize = 0xD2C; // float32
            }
            // Parent: C_BaseToggle
            // Fields count: 2
            pub mod C_BaseTrigger {
                pub const m_bDisabled: usize = 0xCD0; // bool
                pub const m_bClientSidePredicted: usize = 0xCD1; // bool
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_TriggerVolume {
            }
            // Parent: C_BaseTrigger
            // Fields count: 0
            pub mod C_TriggerMultiple {
            }
            // Parent: C_BaseTrigger
            // Fields count: 0
            pub mod C_TriggerLerpObject {
            }
            // Parent: C_BaseTrigger
            // Fields count: 13
            pub mod C_TriggerPhysics {
                pub const m_gravityScale: usize = 0xCD8; // float32
                pub const m_linearLimit: usize = 0xCDC; // float32
                pub const m_linearDamping: usize = 0xCE0; // float32
                pub const m_angularLimit: usize = 0xCE4; // float32
                pub const m_angularDamping: usize = 0xCE8; // float32
                pub const m_linearForce: usize = 0xCEC; // float32
                pub const m_flFrequency: usize = 0xCF0; // float32
                pub const m_flDampingRatio: usize = 0xCF4; // float32
                pub const m_vecLinearForcePointAt: usize = 0xCF8; // 
                pub const m_bCollapseToForcePoint: usize = 0xD04; // bool
                pub const m_vecLinearForcePointAtWorld: usize = 0xD08; // 
                pub const m_vecLinearForceDirection: usize = 0xD14; // 
                pub const m_bConvertToDebrisWhenPossible: usize = 0xD20; // bool
            }
            // Parent: IClientAlphaProperty
            // Fields count: 13
            pub mod CClientAlphaProperty {
                pub const m_nRenderFX: usize = 0x10; // uint8
                pub const m_nRenderMode: usize = 0x11; // uint8
                pub const m_bAlphaOverride: usize = 0x0; // bitfield:1
                pub const m_bShadowAlphaOverride: usize = 0x0; // bitfield:1
                pub const m_nReserved: usize = 0x0; // bitfield:6
                pub const m_nAlpha: usize = 0x13; // uint8
                pub const m_nDesyncOffset: usize = 0x14; // uint16
                pub const m_nReserved2: usize = 0x16; // uint16
                pub const m_nDistFadeStart: usize = 0x18; // uint16
                pub const m_nDistFadeEnd: usize = 0x1A; // uint16
                pub const m_flFadeScale: usize = 0x1C; // float32
                pub const m_flRenderFxStartTime: usize = 0x20; // GameTime_t
                pub const m_flRenderFxDuration: usize = 0x24; // float32
            }
            // Parent: C_BaseModelEntity
            // Fields count: 24
            pub mod C_Beam {
                pub const m_flFrameRate: usize = 0xCD0; // float32
                pub const m_flHDRColorScale: usize = 0xCD4; // float32
                pub const m_flFireTime: usize = 0xCD8; // GameTime_t
                pub const m_flDamage: usize = 0xCDC; // float32
                pub const m_nNumBeamEnts: usize = 0xCE0; // uint8
                pub const m_queryHandleHalo: usize = 0xCE4; // int32
                pub const m_hBaseMaterial: usize = 0xD08; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nHaloIndex: usize = 0xD10; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nBeamType: usize = 0xD18; // BeamType_t
                pub const m_nBeamFlags: usize = 0xD1C; // uint32
                pub const m_hAttachEntity: usize = 0xD20; // CHandle<C_BaseEntity>[10]
                pub const m_nAttachIndex: usize = 0xD48; // AttachmentHandle_t[10]
                pub const m_fWidth: usize = 0xD54; // float32
                pub const m_fEndWidth: usize = 0xD58; // float32
                pub const m_fFadeLength: usize = 0xD5C; // float32
                pub const m_fHaloScale: usize = 0xD60; // float32
                pub const m_fAmplitude: usize = 0xD64; // float32
                pub const m_fStartFrame: usize = 0xD68; // float32
                pub const m_fSpeed: usize = 0xD6C; // float32
                pub const m_flFrame: usize = 0xD70; // float32
                pub const m_nClipStyle: usize = 0xD74; // BeamClipStyle_t
                pub const m_bTurnedOff: usize = 0xD78; // bool
                pub const m_vecEndPos: usize = 0xD7C; // 
                pub const m_hEndEntity: usize = 0xD88; // CHandle<C_BaseEntity>
            }
            // Parent: C_BaseModelEntity
            // Fields count: 9
            pub mod C_FuncLadder {
                pub const m_vecLadderDir: usize = 0xCD0; // 
                pub const m_Dismounts: usize = 0xCE0; // CUtlVector<CHandle<C_InfoLadderDismount>>
                pub const m_vecLocalTop: usize = 0xCF8; // 
                pub const m_vecPlayerMountPositionTop: usize = 0xD04; // 
                pub const m_vecPlayerMountPositionBottom: usize = 0xD10; // 
                pub const m_flAutoRideSpeed: usize = 0xD1C; // float32
                pub const m_bDisabled: usize = 0xD20; // bool
                pub const m_bFakeLadder: usize = 0xD21; // bool
                pub const m_bHasSlack: usize = 0xD22; // bool
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 7
            pub mod CPrecipitationVData {
                pub const m_szParticlePrecipitationEffect: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_flInnerDistance: usize = 0x108; // float32
                pub const m_nAttachType: usize = 0x10C; // ParticleAttachment_t
                pub const m_bBatchSameVolumeType: usize = 0x110; // bool
                pub const m_nRTEnvCP: usize = 0x114; // int32
                pub const m_nRTEnvCPComponent: usize = 0x118; // int32
                pub const m_szModifier: usize = 0x120; // CUtlString
            }
            // Parent: C_BaseModelEntity
            // Fields count: 24
            pub mod C_Sprite {
                pub const m_hSpriteMaterial: usize = 0xCE8; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hAttachedToEntity: usize = 0xCF0; // CHandle<C_BaseEntity>
                pub const m_nAttachment: usize = 0xCF4; // AttachmentHandle_t
                pub const m_flSpriteFramerate: usize = 0xCF8; // float32
                pub const m_flFrame: usize = 0xCFC; // float32
                pub const m_flDieTime: usize = 0xD00; // GameTime_t
                pub const m_nBrightness: usize = 0xD10; // uint32
                pub const m_flBrightnessDuration: usize = 0xD14; // float32
                pub const m_flSpriteScale: usize = 0xD18; // float32
                pub const m_flScaleDuration: usize = 0xD1C; // float32
                pub const m_bWorldSpaceScale: usize = 0xD20; // bool
                pub const m_flGlowProxySize: usize = 0xD24; // float32
                pub const m_flHDRColorScale: usize = 0xD28; // float32
                pub const m_flLastTime: usize = 0xD2C; // GameTime_t
                pub const m_flMaxFrame: usize = 0xD30; // float32
                pub const m_flStartScale: usize = 0xD34; // float32
                pub const m_flDestScale: usize = 0xD38; // float32
                pub const m_flScaleTimeStart: usize = 0xD3C; // GameTime_t
                pub const m_nStartBrightness: usize = 0xD40; // int32
                pub const m_nDestBrightness: usize = 0xD44; // int32
                pub const m_flBrightnessTimeStart: usize = 0xD48; // GameTime_t
                pub const m_hOldSpriteMaterial: usize = 0xD50; // CWeakHandle<InfoForResourceTypeIMaterial2>
                pub const m_nSpriteWidth: usize = 0xDF8; // int32
                pub const m_nSpriteHeight: usize = 0xDFC; // int32
            }
            // Parent: C_Sprite
            // Fields count: 0
            pub mod C_SpriteOriented {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 4
            pub mod C_BaseClientUIEntity {
                pub const m_bEnabled: usize = 0xCD8; // bool
                pub const m_DialogXMLName: usize = 0xCE0; // CUtlSymbolLarge
                pub const m_PanelClassName: usize = 0xCE8; // CUtlSymbolLarge
                pub const m_PanelID: usize = 0xCF0; // CUtlSymbolLarge
            }
            // Parent: C_BaseClientUIEntity
            // Fields count: 2
            pub mod C_PointClientUIDialog {
                pub const m_hActivator: usize = 0xD00; // CHandle<C_BaseEntity>
                pub const m_bStartEnabled: usize = 0xD04; // bool
            }
            // Parent: C_BaseClientUIEntity
            // Fields count: 13
            pub mod C_PointClientUIHUD {
                pub const m_bCheckCSSClasses: usize = 0xD08; // bool
                pub const m_bIgnoreInput: usize = 0xE90; // bool
                pub const m_flWidth: usize = 0xE94; // float32
                pub const m_flHeight: usize = 0xE98; // float32
                pub const m_flDPI: usize = 0xE9C; // float32
                pub const m_flInteractDistance: usize = 0xEA0; // float32
                pub const m_flDepthOffset: usize = 0xEA4; // float32
                pub const m_unOwnerContext: usize = 0xEA8; // uint32
                pub const m_unHorizontalAlign: usize = 0xEAC; // uint32
                pub const m_unVerticalAlign: usize = 0xEB0; // uint32
                pub const m_unOrientation: usize = 0xEB4; // uint32
                pub const m_bAllowInteractionFromAllSceneWorlds: usize = 0xEB8; // bool
                pub const m_vecCSSClasses: usize = 0xEC0; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            }
            // Parent: C_BaseClientUIEntity
            // Fields count: 28
            pub mod C_PointClientUIWorldPanel {
                pub const m_bForceRecreateNextUpdate: usize = 0xD08; // bool
                pub const m_bMoveViewToPlayerNextThink: usize = 0xD09; // bool
                pub const m_bCheckCSSClasses: usize = 0xD0A; // bool
                pub const m_anchorDeltaTransform: usize = 0xD10; // CTransform
                pub const m_pOffScreenIndicator: usize = 0xEB0; // CPointOffScreenIndicatorUi*
                pub const m_bIgnoreInput: usize = 0xED8; // bool
                pub const m_bLit: usize = 0xED9; // bool
                pub const m_bFollowPlayerAcrossTeleport: usize = 0xEDA; // bool
                pub const m_flWidth: usize = 0xEDC; // float32
                pub const m_flHeight: usize = 0xEE0; // float32
                pub const m_flDPI: usize = 0xEE4; // float32
                pub const m_flInteractDistance: usize = 0xEE8; // float32
                pub const m_flDepthOffset: usize = 0xEEC; // float32
                pub const m_unOwnerContext: usize = 0xEF0; // uint32
                pub const m_unHorizontalAlign: usize = 0xEF4; // uint32
                pub const m_unVerticalAlign: usize = 0xEF8; // uint32
                pub const m_unOrientation: usize = 0xEFC; // uint32
                pub const m_bAllowInteractionFromAllSceneWorlds: usize = 0xF00; // bool
                pub const m_vecCSSClasses: usize = 0xF08; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
                pub const m_bOpaque: usize = 0xF20; // bool
                pub const m_bNoDepth: usize = 0xF21; // bool
                pub const m_bRenderBackface: usize = 0xF22; // bool
                pub const m_bUseOffScreenIndicator: usize = 0xF23; // bool
                pub const m_bExcludeFromSaveGames: usize = 0xF24; // bool
                pub const m_bGrabbable: usize = 0xF25; // bool
                pub const m_bOnlyRenderToTexture: usize = 0xF26; // bool
                pub const m_bDisableMipGen: usize = 0xF27; // bool
                pub const m_nExplicitImageLayout: usize = 0xF28; // int32
            }
            // Parent: C_PointClientUIWorldPanel
            // Fields count: 4
            pub mod CPointOffScreenIndicatorUi {
                pub const m_bBeenEnabled: usize = 0xF30; // bool
                pub const m_bHide: usize = 0xF31; // bool
                pub const m_flSeenTargetTime: usize = 0xF34; // float32
                pub const m_pTargetPanel: usize = 0xF38; // C_PointClientUIWorldPanel*
            }
            // Parent: C_PointClientUIWorldPanel
            // Fields count: 1
            pub mod C_PointClientUIWorldTextPanel {
                pub const m_messageText: usize = 0xF30; // char[512]
            }
            // Parent: C_PointEntity
            // Fields count: 9
            pub mod CInfoOffscreenPanoramaTexture {
                pub const m_bDisabled: usize = 0x550; // bool
                pub const m_nResolutionX: usize = 0x554; // int32
                pub const m_nResolutionY: usize = 0x558; // int32
                pub const m_szLayoutFileName: usize = 0x560; // CUtlSymbolLarge
                pub const m_RenderAttrName: usize = 0x568; // CUtlSymbolLarge
                pub const m_TargetEntities: usize = 0x570; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
                pub const m_nTargetChangeCount: usize = 0x588; // int32
                pub const m_vecCSSClasses: usize = 0x590; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
                pub const m_bCheckCSSClasses: usize = 0x708; // bool
            }
            // Parent: IEconItemInterface
            // Fields count: 28
            pub mod C_EconItemView {
                pub const m_bInventoryImageRgbaRequested: usize = 0x60; // bool
                pub const m_bInventoryImageTriedCache: usize = 0x61; // bool
                pub const m_nInventoryImageRgbaWidth: usize = 0x80; // int32
                pub const m_nInventoryImageRgbaHeight: usize = 0x84; // int32
                pub const m_szCurrentLoadCachedFileName: usize = 0x88; // char[260]
                pub const m_bRestoreCustomMaterialAfterPrecache: usize = 0x1B8; // bool
                pub const m_iItemDefinitionIndex: usize = 0x1BA; // uint16
                pub const m_iEntityQuality: usize = 0x1BC; // int32
                pub const m_iEntityLevel: usize = 0x1C0; // uint32
                pub const m_iItemID: usize = 0x1C8; // uint64
                pub const m_iItemIDHigh: usize = 0x1D0; // uint32
                pub const m_iItemIDLow: usize = 0x1D4; // uint32
                pub const m_iAccountID: usize = 0x1D8; // uint32
                pub const m_iInventoryPosition: usize = 0x1DC; // uint32
                pub const m_bInitialized: usize = 0x1E8; // bool
                pub const m_bDisallowSOC: usize = 0x1E9; // bool
                pub const m_bIsStoreItem: usize = 0x1EA; // bool
                pub const m_bIsTradeItem: usize = 0x1EB; // bool
                pub const m_iEntityQuantity: usize = 0x1EC; // int32
                pub const m_iRarityOverride: usize = 0x1F0; // int32
                pub const m_iQualityOverride: usize = 0x1F4; // int32
                pub const m_unClientFlags: usize = 0x1F8; // uint8
                pub const m_unOverrideStyle: usize = 0x1F9; // uint8
                pub const m_AttributeList: usize = 0x210; // CAttributeList
                pub const m_NetworkedDynamicAttributes: usize = 0x270; // CAttributeList
                pub const m_szCustomName: usize = 0x2D0; // char[161]
                pub const m_szCustomNameOverride: usize = 0x371; // char[161]
                pub const m_bInitializedTags: usize = 0x440; // bool
            }
            // Parent: C_BaseTrigger
            // Fields count: 1
            pub mod CBombTarget {
                pub const m_bBombPlantedHere: usize = 0xCD8; // bool
            }
            // Parent: C_BaseTrigger
            // Fields count: 0
            pub mod CHostageRescueZoneShim {
            }
            // Parent: CHostageRescueZoneShim
            // Fields count: 0
            pub mod CHostageRescueZone {
            }
            // Parent: C_BaseTrigger
            // Fields count: 2
            pub mod C_TriggerBuoyancy {
                pub const m_BuoyancyHelper: usize = 0xCD8; // CBuoyancyHelper
                pub const m_flFluidDensity: usize = 0xCF8; // float32
            }
            // Parent: C_BaseModelEntity
            // Fields count: 1
            pub mod CFuncWater {
                pub const m_BuoyancyHelper: usize = 0xCD0; // CBuoyancyHelper
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod CWaterSplasher {
            }
            // Parent: C_PointEntity
            // Fields count: 0
            pub mod C_InfoInstructorHintHostageRescueZone {
            }
            // Parent: CBasePlayerController
            // Fields count: 62
            pub mod CCSPlayerController {
                pub const m_pInGameMoneyServices: usize = 0x6F8; // CCSPlayerController_InGameMoneyServices*
                pub const m_pInventoryServices: usize = 0x700; // CCSPlayerController_InventoryServices*
                pub const m_pActionTrackingServices: usize = 0x708; // CCSPlayerController_ActionTrackingServices*
                pub const m_pDamageServices: usize = 0x710; // CCSPlayerController_DamageServices*
                pub const m_iPing: usize = 0x718; // uint32
                pub const m_bHasCommunicationAbuseMute: usize = 0x71C; // bool
                pub const m_szCrosshairCodes: usize = 0x720; // CUtlSymbolLarge
                pub const m_iPendingTeamNum: usize = 0x728; // uint8
                pub const m_flForceTeamTime: usize = 0x72C; // GameTime_t
                pub const m_iCompTeammateColor: usize = 0x730; // int32
                pub const m_bEverPlayedOnTeam: usize = 0x734; // bool
                pub const m_flPreviousForceJoinTeamTime: usize = 0x738; // GameTime_t
                pub const m_szClan: usize = 0x740; // CUtlSymbolLarge
                pub const m_sSanitizedPlayerName: usize = 0x748; // CUtlString
                pub const m_iCoachingTeam: usize = 0x750; // int32
                pub const m_nPlayerDominated: usize = 0x758; // uint64
                pub const m_nPlayerDominatingMe: usize = 0x760; // uint64
                pub const m_iCompetitiveRanking: usize = 0x768; // int32
                pub const m_iCompetitiveWins: usize = 0x76C; // int32
                pub const m_iCompetitiveRankType: usize = 0x770; // int8
                pub const m_iCompetitiveRankingPredicted_Win: usize = 0x774; // int32
                pub const m_iCompetitiveRankingPredicted_Loss: usize = 0x778; // int32
                pub const m_iCompetitiveRankingPredicted_Tie: usize = 0x77C; // int32
                pub const m_nEndMatchNextMapVote: usize = 0x780; // int32
                pub const m_unActiveQuestId: usize = 0x784; // uint16
                pub const m_nQuestProgressReason: usize = 0x788; // QuestProgress::Reason
                pub const m_unPlayerTvControlFlags: usize = 0x78C; // uint32
                pub const m_iDraftIndex: usize = 0x7B8; // int32
                pub const m_msQueuedModeDisconnectionTimestamp: usize = 0x7BC; // uint32
                pub const m_uiAbandonRecordedReason: usize = 0x7C0; // uint32
                pub const m_bCannotBeKicked: usize = 0x7C4; // bool
                pub const m_bEverFullyConnected: usize = 0x7C5; // bool
                pub const m_bAbandonAllowsSurrender: usize = 0x7C6; // bool
                pub const m_bAbandonOffersInstantSurrender: usize = 0x7C7; // bool
                pub const m_bDisconnection1MinWarningPrinted: usize = 0x7C8; // bool
                pub const m_bScoreReported: usize = 0x7C9; // bool
                pub const m_nDisconnectionTick: usize = 0x7CC; // int32
                pub const m_bControllingBot: usize = 0x7D8; // bool
                pub const m_bHasControlledBotThisRound: usize = 0x7D9; // bool
                pub const m_bHasBeenControlledByPlayerThisRound: usize = 0x7DA; // bool
                pub const m_nBotsControlledThisRound: usize = 0x7DC; // int32
                pub const m_bCanControlObservedBot: usize = 0x7E0; // bool
                pub const m_hPlayerPawn: usize = 0x7E4; // CHandle<C_CSPlayerPawn>
                pub const m_hObserverPawn: usize = 0x7E8; // CHandle<C_CSObserverPawn>
                pub const m_bPawnIsAlive: usize = 0x7EC; // bool
                pub const m_iPawnHealth: usize = 0x7F0; // uint32
                pub const m_iPawnArmor: usize = 0x7F4; // int32
                pub const m_bPawnHasDefuser: usize = 0x7F8; // bool
                pub const m_bPawnHasHelmet: usize = 0x7F9; // bool
                pub const m_nPawnCharacterDefIndex: usize = 0x7FA; // uint16
                pub const m_iPawnLifetimeStart: usize = 0x7FC; // int32
                pub const m_iPawnLifetimeEnd: usize = 0x800; // int32
                pub const m_iPawnBotDifficulty: usize = 0x804; // int32
                pub const m_hOriginalControllerOfCurrentPawn: usize = 0x808; // CHandle<CCSPlayerController>
                pub const m_iScore: usize = 0x80C; // int32
                pub const m_vecKills: usize = 0x810; // C_NetworkUtlVectorBase<EKillTypes_t>
                pub const m_bMvpNoMusic: usize = 0x828; // bool
                pub const m_eMvpReason: usize = 0x82C; // int32
                pub const m_iMusicKitID: usize = 0x830; // int32
                pub const m_iMusicKitMVPs: usize = 0x834; // int32
                pub const m_iMVPs: usize = 0x838; // int32
                pub const m_bIsPlayerNameDirty: usize = 0x83C; // bool
            }
            // Parent: C_BaseTrigger
            // Fields count: 2
            pub mod C_FootstepControl {
                pub const m_source: usize = 0xCD8; // CUtlSymbolLarge
                pub const m_destination: usize = 0xCE0; // CUtlSymbolLarge
            }
            // Parent: CBasePlayerWeaponVData
            // Fields count: 92
            pub mod CCSWeaponBaseVData {
                pub const m_WeaponType: usize = 0x248; // CSWeaponType
                pub const m_WeaponCategory: usize = 0x24C; // CSWeaponCategory
                pub const m_szViewModel: usize = 0x250; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szPlayerModel: usize = 0x330; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szWorldDroppedModel: usize = 0x410; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szAimsightLensMaskModel: usize = 0x4F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szMagazineModel: usize = 0x5D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szHeatEffect: usize = 0x6B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szEjectBrassEffect: usize = 0x790; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashParticleAlt: usize = 0x870; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashThirdPersonParticle: usize = 0x950; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashThirdPersonParticleAlt: usize = 0xA30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szTracerParticle: usize = 0xB10; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_GearSlot: usize = 0xBF0; // gear_slot_t
                pub const m_GearSlotPosition: usize = 0xBF4; // int32
                pub const m_DefaultLoadoutSlot: usize = 0xBF8; // loadout_slot_t
                pub const m_sWrongTeamMsg: usize = 0xC00; // CUtlString
                pub const m_nPrice: usize = 0xC08; // int32
                pub const m_nKillAward: usize = 0xC0C; // int32
                pub const m_nPrimaryReserveAmmoMax: usize = 0xC10; // int32
                pub const m_nSecondaryReserveAmmoMax: usize = 0xC14; // int32
                pub const m_bMeleeWeapon: usize = 0xC18; // bool
                pub const m_bHasBurstMode: usize = 0xC19; // bool
                pub const m_bIsRevolver: usize = 0xC1A; // bool
                pub const m_bCannotShootUnderwater: usize = 0xC1B; // bool
                pub const m_szName: usize = 0xC20; // CGlobalSymbol
                pub const m_szAnimExtension: usize = 0xC28; // CUtlString
                pub const m_eSilencerType: usize = 0xC30; // CSWeaponSilencerType
                pub const m_nCrosshairMinDistance: usize = 0xC34; // int32
                pub const m_nCrosshairDeltaDistance: usize = 0xC38; // int32
                pub const m_bIsFullAuto: usize = 0xC3C; // bool
                pub const m_nNumBullets: usize = 0xC40; // int32
                pub const m_flCycleTime: usize = 0xC44; // CFiringModeFloat
                pub const m_flMaxSpeed: usize = 0xC4C; // CFiringModeFloat
                pub const m_flSpread: usize = 0xC54; // CFiringModeFloat
                pub const m_flInaccuracyCrouch: usize = 0xC5C; // CFiringModeFloat
                pub const m_flInaccuracyStand: usize = 0xC64; // CFiringModeFloat
                pub const m_flInaccuracyJump: usize = 0xC6C; // CFiringModeFloat
                pub const m_flInaccuracyLand: usize = 0xC74; // CFiringModeFloat
                pub const m_flInaccuracyLadder: usize = 0xC7C; // CFiringModeFloat
                pub const m_flInaccuracyFire: usize = 0xC84; // CFiringModeFloat
                pub const m_flInaccuracyMove: usize = 0xC8C; // CFiringModeFloat
                pub const m_flRecoilAngle: usize = 0xC94; // CFiringModeFloat
                pub const m_flRecoilAngleVariance: usize = 0xC9C; // CFiringModeFloat
                pub const m_flRecoilMagnitude: usize = 0xCA4; // CFiringModeFloat
                pub const m_flRecoilMagnitudeVariance: usize = 0xCAC; // CFiringModeFloat
                pub const m_nTracerFrequency: usize = 0xCB4; // CFiringModeInt
                pub const m_flInaccuracyJumpInitial: usize = 0xCBC; // float32
                pub const m_flInaccuracyJumpApex: usize = 0xCC0; // float32
                pub const m_flInaccuracyReload: usize = 0xCC4; // float32
                pub const m_nRecoilSeed: usize = 0xCC8; // int32
                pub const m_nSpreadSeed: usize = 0xCCC; // int32
                pub const m_flTimeToIdleAfterFire: usize = 0xCD0; // float32
                pub const m_flIdleInterval: usize = 0xCD4; // float32
                pub const m_flAttackMovespeedFactor: usize = 0xCD8; // float32
                pub const m_flHeatPerShot: usize = 0xCDC; // float32
                pub const m_flInaccuracyPitchShift: usize = 0xCE0; // float32
                pub const m_flInaccuracyAltSoundThreshold: usize = 0xCE4; // float32
                pub const m_flBotAudibleRange: usize = 0xCE8; // float32
                pub const m_szUseRadioSubtitle: usize = 0xCF0; // CUtlString
                pub const m_bUnzoomsAfterShot: usize = 0xCF8; // bool
                pub const m_bHideViewModelWhenZoomed: usize = 0xCF9; // bool
                pub const m_nZoomLevels: usize = 0xCFC; // int32
                pub const m_nZoomFOV1: usize = 0xD00; // int32
                pub const m_nZoomFOV2: usize = 0xD04; // int32
                pub const m_flZoomTime0: usize = 0xD08; // float32
                pub const m_flZoomTime1: usize = 0xD0C; // float32
                pub const m_flZoomTime2: usize = 0xD10; // float32
                pub const m_flIronSightPullUpSpeed: usize = 0xD14; // float32
                pub const m_flIronSightPutDownSpeed: usize = 0xD18; // float32
                pub const m_flIronSightFOV: usize = 0xD1C; // float32
                pub const m_flIronSightPivotForward: usize = 0xD20; // float32
                pub const m_flIronSightLooseness: usize = 0xD24; // float32
                pub const m_angPivotAngle: usize = 0xD28; // QAngle
                pub const m_vecIronSightEyePos: usize = 0xD34; // 
                pub const m_nDamage: usize = 0xD40; // int32
                pub const m_flHeadshotMultiplier: usize = 0xD44; // float32
                pub const m_flArmorRatio: usize = 0xD48; // float32
                pub const m_flPenetration: usize = 0xD4C; // float32
                pub const m_flRange: usize = 0xD50; // float32
                pub const m_flRangeModifier: usize = 0xD54; // float32
                pub const m_flFlinchVelocityModifierLarge: usize = 0xD58; // float32
                pub const m_flFlinchVelocityModifierSmall: usize = 0xD5C; // float32
                pub const m_flRecoveryTimeCrouch: usize = 0xD60; // float32
                pub const m_flRecoveryTimeStand: usize = 0xD64; // float32
                pub const m_flRecoveryTimeCrouchFinal: usize = 0xD68; // float32
                pub const m_flRecoveryTimeStandFinal: usize = 0xD6C; // float32
                pub const m_nRecoveryTransitionStartBullet: usize = 0xD70; // int32
                pub const m_nRecoveryTransitionEndBullet: usize = 0xD74; // int32
                pub const m_flThrowVelocity: usize = 0xD78; // float32
                pub const m_vSmokeColor: usize = 0xD7C; // 
                pub const m_szAnimClass: usize = 0xD88; // CGlobalSymbol
            }
            // Parent: C_ModelPointEntity
            // Fields count: 16
            pub mod C_PlayerSprayDecal {
                pub const m_nUniqueID: usize = 0xCD0; // int32
                pub const m_unAccountID: usize = 0xCD4; // uint32
                pub const m_unTraceID: usize = 0xCD8; // uint32
                pub const m_rtGcTime: usize = 0xCDC; // uint32
                pub const m_vecEndPos: usize = 0xCE0; // 
                pub const m_vecStart: usize = 0xCEC; // 
                pub const m_vecLeft: usize = 0xCF8; // 
                pub const m_vecNormal: usize = 0xD04; // 
                pub const m_nPlayer: usize = 0xD10; // int32
                pub const m_nEntity: usize = 0xD14; // int32
                pub const m_nHitbox: usize = 0xD18; // int32
                pub const m_flCreationTime: usize = 0xD1C; // float32
                pub const m_nTintID: usize = 0xD20; // int32
                pub const m_nVersion: usize = 0xD24; // uint8
                pub const m_ubSignature: usize = 0xD25; // uint8[128]
                pub const m_SprayRenderHelper: usize = 0xDB0; // CPlayerSprayDecalRenderHelper
            }
            // Parent: C_BaseModelEntity
            // Fields count: 8
            pub mod C_FuncConveyor {
                pub const m_vecMoveDirEntitySpace: usize = 0xCD8; // 
                pub const m_flTargetSpeed: usize = 0xCE4; // float32
                pub const m_nTransitionStartTick: usize = 0xCE8; // GameTick_t
                pub const m_nTransitionDurationTicks: usize = 0xCEC; // int32
                pub const m_flTransitionStartSpeed: usize = 0xCF0; // float32
                pub const m_hConveyorModels: usize = 0xCF8; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
                pub const m_flCurrentConveyorOffset: usize = 0xD10; // float32
                pub const m_flCurrentConveyorSpeed: usize = 0xD14; // float32
            }
            // Parent: C_BaseModelEntity
            // Fields count: 2
            pub mod CGrenadeTracer {
                pub const m_flTracerDuration: usize = 0xCF0; // float32
                pub const m_nType: usize = 0xCF4; // GrenadeType_t
            }
            // Parent: C_BaseModelEntity
            // Fields count: 19
            pub mod C_Inferno {
                pub const m_nfxFireDamageEffect: usize = 0xD10; // ParticleIndex_t
                pub const m_firePositions: usize = 0xD14; // Vector[64]
                pub const m_fireParentPositions: usize = 0x1014; // Vector[64]
                pub const m_bFireIsBurning: usize = 0x1314; // bool[64]
                pub const m_BurnNormal: usize = 0x1354; // Vector[64]
                pub const m_fireCount: usize = 0x1654; // int32
                pub const m_nInfernoType: usize = 0x1658; // int32
                pub const m_nFireLifetime: usize = 0x165C; // float32
                pub const m_bInPostEffectTime: usize = 0x1660; // bool
                pub const m_lastFireCount: usize = 0x1664; // int32
                pub const m_nFireEffectTickBegin: usize = 0x1668; // int32
                pub const m_drawableCount: usize = 0x8270; // int32
                pub const m_blosCheck: usize = 0x8274; // bool
                pub const m_nlosperiod: usize = 0x8278; // int32
                pub const m_maxFireHalfWidth: usize = 0x827C; // float32
                pub const m_maxFireHeight: usize = 0x8280; // float32
                pub const m_minBounds: usize = 0x8284; // 
                pub const m_maxBounds: usize = 0x8290; // 
                pub const m_flLastGrassBurnThink: usize = 0x829C; // float32
            }
            // Parent: C_Inferno
            // Fields count: 0
            pub mod C_FireCrackerBlast {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 51
            pub mod C_BarnLight {
                pub const m_bEnabled: usize = 0xCD0; // bool
                pub const m_nColorMode: usize = 0xCD4; // int32
                pub const m_Color: usize = 0xCD8; // Color
                pub const m_flColorTemperature: usize = 0xCDC; // float32
                pub const m_flBrightness: usize = 0xCE0; // float32
                pub const m_flBrightnessScale: usize = 0xCE4; // float32
                pub const m_nDirectLight: usize = 0xCE8; // int32
                pub const m_nBakedShadowIndex: usize = 0xCEC; // int32
                pub const m_nLuminaireShape: usize = 0xCF0; // int32
                pub const m_flLuminaireSize: usize = 0xCF4; // float32
                pub const m_flLuminaireAnisotropy: usize = 0xCF8; // float32
                pub const m_LightStyleString: usize = 0xD00; // CUtlString
                pub const m_flLightStyleStartTime: usize = 0xD08; // GameTime_t
                pub const m_QueuedLightStyleStrings: usize = 0xD10; // C_NetworkUtlVectorBase<CUtlString>
                pub const m_LightStyleEvents: usize = 0xD28; // C_NetworkUtlVectorBase<CUtlString>
                pub const m_LightStyleTargets: usize = 0xD40; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
                pub const m_StyleEvent: usize = 0xD58; // CEntityIOOutput[4]
                pub const m_hLightCookie: usize = 0xDF8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_flShape: usize = 0xE00; // float32
                pub const m_flSoftX: usize = 0xE04; // float32
                pub const m_flSoftY: usize = 0xE08; // float32
                pub const m_flSkirt: usize = 0xE0C; // float32
                pub const m_flSkirtNear: usize = 0xE10; // float32
                pub const m_vSizeParams: usize = 0xE14; // 
                pub const m_flRange: usize = 0xE20; // float32
                pub const m_vShear: usize = 0xE24; // 
                pub const m_nBakeSpecularToCubemaps: usize = 0xE30; // int32
                pub const m_vBakeSpecularToCubemapsSize: usize = 0xE34; // 
                pub const m_nCastShadows: usize = 0xE40; // int32
                pub const m_nShadowMapSize: usize = 0xE44; // int32
                pub const m_nShadowPriority: usize = 0xE48; // int32
                pub const m_bContactShadow: usize = 0xE4C; // bool
                pub const m_nBounceLight: usize = 0xE50; // int32
                pub const m_flBounceScale: usize = 0xE54; // float32
                pub const m_flMinRoughness: usize = 0xE58; // float32
                pub const m_vAlternateColor: usize = 0xE5C; // 
                pub const m_fAlternateColorBrightness: usize = 0xE68; // float32
                pub const m_nFog: usize = 0xE6C; // int32
                pub const m_flFogStrength: usize = 0xE70; // float32
                pub const m_nFogShadows: usize = 0xE74; // int32
                pub const m_flFogScale: usize = 0xE78; // float32
                pub const m_flFadeSizeStart: usize = 0xE7C; // float32
                pub const m_flFadeSizeEnd: usize = 0xE80; // float32
                pub const m_flShadowFadeSizeStart: usize = 0xE84; // float32
                pub const m_flShadowFadeSizeEnd: usize = 0xE88; // float32
                pub const m_bPrecomputedFieldsValid: usize = 0xE8C; // bool
                pub const m_vPrecomputedBoundsMins: usize = 0xE90; // 
                pub const m_vPrecomputedBoundsMaxs: usize = 0xE9C; // 
                pub const m_vPrecomputedOBBOrigin: usize = 0xEA8; // 
                pub const m_vPrecomputedOBBAngles: usize = 0xEB4; // QAngle
                pub const m_vPrecomputedOBBExtent: usize = 0xEC0; // 
            }
            // Parent: C_BarnLight
            // Fields count: 1
            pub mod C_RectLight {
                pub const m_bShowLight: usize = 0xF18; // bool
            }
            // Parent: C_BarnLight
            // Fields count: 3
            pub mod C_OmniLight {
                pub const m_flInnerAngle: usize = 0xF18; // float32
                pub const m_flOuterAngle: usize = 0xF1C; // float32
                pub const m_bShowLight: usize = 0xF20; // bool
            }
            // Parent: C_Team
            // Fields count: 10
            pub mod C_CSTeam {
                pub const m_szTeamMatchStat: usize = 0x608; // char[512]
                pub const m_numMapVictories: usize = 0x808; // int32
                pub const m_bSurrendered: usize = 0x80C; // bool
                pub const m_scoreFirstHalf: usize = 0x810; // int32
                pub const m_scoreSecondHalf: usize = 0x814; // int32
                pub const m_scoreOvertime: usize = 0x818; // int32
                pub const m_szClanTeamname: usize = 0x81C; // char[129]
                pub const m_iClanID: usize = 0x8A0; // uint32
                pub const m_szTeamFlagImage: usize = 0x8A4; // char[8]
                pub const m_szTeamLogoImage: usize = 0x8AC; // char[8]
            }
            // Parent: C_ParticleSystem
            // Fields count: 0
            pub mod C_MapPreviewParticleSystem {
            }
            // Parent: C_PointEntity
            // Fields count: 5
            pub mod CInfoDynamicShadowHint {
                pub const m_bDisabled: usize = 0x550; // bool
                pub const m_flRange: usize = 0x554; // float32
                pub const m_nImportance: usize = 0x558; // int32
                pub const m_nLightChoice: usize = 0x55C; // int32
                pub const m_hLight: usize = 0x560; // CHandle<C_BaseEntity>
            }
            // Parent: CInfoDynamicShadowHint
            // Fields count: 2
            pub mod CInfoDynamicShadowHintBox {
                pub const m_vBoxMins: usize = 0x568; // 
                pub const m_vBoxMaxs: usize = 0x574; // 
            }
            // Parent: C_BaseModelEntity
            // Fields count: 12
            pub mod C_EnvSky {
                pub const m_hSkyMaterial: usize = 0xCD0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hSkyMaterialLightingOnly: usize = 0xCD8; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_bStartDisabled: usize = 0xCE0; // bool
                pub const m_vTintColor: usize = 0xCE1; // Color
                pub const m_vTintColorLightingOnly: usize = 0xCE5; // Color
                pub const m_flBrightnessScale: usize = 0xCEC; // float32
                pub const m_nFogType: usize = 0xCF0; // int32
                pub const m_flFogMinStart: usize = 0xCF4; // float32
                pub const m_flFogMinEnd: usize = 0xCF8; // float32
                pub const m_flFogMaxStart: usize = 0xCFC; // float32
                pub const m_flFogMaxEnd: usize = 0xD00; // float32
                pub const m_bEnabled: usize = 0xD04; // bool
            }
            // Parent: C_TonemapController2
            // Fields count: 0
            pub mod C_TonemapController2Alias_env_tonemap_controller2 {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 1
            pub mod C_LightEntity {
                pub const m_CLightComponent: usize = 0xCD0; // CLightComponent*
            }
            // Parent: C_LightEntity
            // Fields count: 0
            pub mod C_LightSpotEntity {
            }
            // Parent: C_LightEntity
            // Fields count: 0
            pub mod C_LightOrthoEntity {
            }
            // Parent: C_LightEntity
            // Fields count: 0
            pub mod C_LightDirectionalEntity {
            }
            // Parent: C_LightDirectionalEntity
            // Fields count: 0
            pub mod C_LightEnvironmentEntity {
            }
            // Parent: C_BaseTrigger
            // Fields count: 16
            pub mod C_PostProcessingVolume {
                pub const m_hPostSettings: usize = 0xCE8; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
                pub const m_flFadeDuration: usize = 0xCF0; // float32
                pub const m_flMinLogExposure: usize = 0xCF4; // float32
                pub const m_flMaxLogExposure: usize = 0xCF8; // float32
                pub const m_flMinExposure: usize = 0xCFC; // float32
                pub const m_flMaxExposure: usize = 0xD00; // float32
                pub const m_flExposureCompensation: usize = 0xD04; // float32
                pub const m_flExposureFadeSpeedUp: usize = 0xD08; // float32
                pub const m_flExposureFadeSpeedDown: usize = 0xD0C; // float32
                pub const m_flTonemapEVSmoothingRange: usize = 0xD10; // float32
                pub const m_bMaster: usize = 0xD14; // bool
                pub const m_bExposureControl: usize = 0xD15; // bool
                pub const m_flRate: usize = 0xD18; // float32
                pub const m_flTonemapPercentTarget: usize = 0xD1C; // float32
                pub const m_flTonemapPercentBrightPixels: usize = 0xD20; // float32
                pub const m_flTonemapMinAvgLum: usize = 0xD24; // float32
            }
            // Parent: C_ParticleSystem
            // Fields count: 5
            pub mod C_EnvParticleGlow {
                pub const m_flAlphaScale: usize = 0x1280; // float32
                pub const m_flRadiusScale: usize = 0x1284; // float32
                pub const m_flSelfIllumScale: usize = 0x1288; // float32
                pub const m_ColorTint: usize = 0x128C; // Color
                pub const m_hTextureOverride: usize = 0x1290; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: C_BaseModelEntity
            // Fields count: 8
            pub mod C_TextureBasedAnimatable {
                pub const m_bLoop: usize = 0xCD0; // bool
                pub const m_flFPS: usize = 0xCD4; // float32
                pub const m_hPositionKeys: usize = 0xCD8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hRotationKeys: usize = 0xCE0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vAnimationBoundsMin: usize = 0xCE8; // 
                pub const m_vAnimationBoundsMax: usize = 0xCF4; // 
                pub const m_flStartTime: usize = 0xD00; // float32
                pub const m_flStartFrame: usize = 0xD04; // float32
            }
            // Parent: C_BaseModelEntity
            // Fields count: 0
            pub mod C_World {
            }
            // Parent: C_BaseModelEntity
            // Fields count: 13
            pub mod CBaseAnimGraph {
                pub const m_bInitiallyPopulateInterpHistory: usize = 0xD48; // bool
                pub const m_bSuppressAnimEventSounds: usize = 0xD4A; // bool
                pub const m_bAnimGraphUpdateEnabled: usize = 0xD58; // bool
                pub const m_flMaxSlopeDistance: usize = 0xD5C; // float32
                pub const m_vLastSlopeCheckPos: usize = 0xD60; // 
                pub const m_bAnimationUpdateScheduled: usize = 0xD6C; // bool
                pub const m_vecForce: usize = 0xD70; // 
                pub const m_nForceBone: usize = 0xD7C; // int32
                pub const m_pClientsideRagdoll: usize = 0xD80; // CBaseAnimGraph*
                pub const m_bBuiltRagdoll: usize = 0xD88; // bool
                pub const m_pRagdollPose: usize = 0xDA0; // PhysicsRagdollPose_t*
                pub const m_bClientRagdoll: usize = 0xDA8; // bool
                pub const m_bHasAnimatedMaterialAttributes: usize = 0xDB8; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 4
            pub mod CBaseProp {
                pub const m_bModelOverrodeBlockLOS: usize = 0xED8; // bool
                pub const m_iShapeType: usize = 0xEDC; // int32
                pub const m_bConformToCollisionBounds: usize = 0xEE0; // bool
                pub const m_mPreferredCatchTransform: usize = 0xEE4; // matrix3x4_t
            }
            // Parent: CBaseProp
            // Fields count: 30
            pub mod C_BreakableProp {
                pub const m_OnBreak: usize = 0xF20; // CEntityIOOutput
                pub const m_OnHealthChanged: usize = 0xF48; // CEntityOutputTemplate<float32>
                pub const m_OnTakeDamage: usize = 0xF70; // CEntityIOOutput
                pub const m_impactEnergyScale: usize = 0xF98; // float32
                pub const m_iMinHealthDmg: usize = 0xF9C; // int32
                pub const m_flPressureDelay: usize = 0xFA0; // float32
                pub const m_hBreaker: usize = 0xFA4; // CHandle<C_BaseEntity>
                pub const m_PerformanceMode: usize = 0xFA8; // PerformanceMode_t
                pub const m_flDmgModBullet: usize = 0xFAC; // float32
                pub const m_flDmgModClub: usize = 0xFB0; // float32
                pub const m_flDmgModExplosive: usize = 0xFB4; // float32
                pub const m_flDmgModFire: usize = 0xFB8; // float32
                pub const m_iszPhysicsDamageTableName: usize = 0xFC0; // CUtlSymbolLarge
                pub const m_iszBasePropData: usize = 0xFC8; // CUtlSymbolLarge
                pub const m_iInteractions: usize = 0xFD0; // int32
                pub const m_flPreventDamageBeforeTime: usize = 0xFD4; // GameTime_t
                pub const m_bHasBreakPiecesOrCommands: usize = 0xFD8; // bool
                pub const m_explodeDamage: usize = 0xFDC; // float32
                pub const m_explodeRadius: usize = 0xFE0; // float32
                pub const m_explosionDelay: usize = 0xFE8; // float32
                pub const m_explosionBuildupSound: usize = 0xFF0; // CUtlSymbolLarge
                pub const m_explosionCustomEffect: usize = 0xFF8; // CUtlSymbolLarge
                pub const m_explosionCustomSound: usize = 0x1000; // CUtlSymbolLarge
                pub const m_explosionModifier: usize = 0x1008; // CUtlSymbolLarge
                pub const m_hPhysicsAttacker: usize = 0x1010; // CHandle<C_BasePlayerPawn>
                pub const m_flLastPhysicsInfluenceTime: usize = 0x1014; // GameTime_t
                pub const m_flDefaultFadeScale: usize = 0x1018; // float32
                pub const m_hLastAttacker: usize = 0x101C; // CHandle<C_BaseEntity>
                pub const m_hFlareEnt: usize = 0x1020; // CHandle<C_BaseEntity>
                pub const m_noGhostCollision: usize = 0x1024; // bool
            }
            // Parent: C_BreakableProp
            // Fields count: 23
            pub mod C_DynamicProp {
                pub const m_bUseHitboxesForRenderBox: usize = 0x1028; // bool
                pub const m_bUseAnimGraph: usize = 0x1029; // bool
                pub const m_pOutputAnimBegun: usize = 0x1030; // CEntityIOOutput
                pub const m_pOutputAnimOver: usize = 0x1058; // CEntityIOOutput
                pub const m_pOutputAnimLoopCycleOver: usize = 0x1080; // CEntityIOOutput
                pub const m_OnAnimReachedStart: usize = 0x10A8; // CEntityIOOutput
                pub const m_OnAnimReachedEnd: usize = 0x10D0; // CEntityIOOutput
                pub const m_iszIdleAnim: usize = 0x10F8; // CUtlSymbolLarge
                pub const m_nIdleAnimLoopMode: usize = 0x1100; // AnimLoopMode_t
                pub const m_bRandomizeCycle: usize = 0x1104; // bool
                pub const m_bStartDisabled: usize = 0x1105; // bool
                pub const m_bFiredStartEndOutput: usize = 0x1106; // bool
                pub const m_bForceNpcExclude: usize = 0x1107; // bool
                pub const m_bCreateNonSolid: usize = 0x1108; // bool
                pub const m_bIsOverrideProp: usize = 0x1109; // bool
                pub const m_iInitialGlowState: usize = 0x110C; // int32
                pub const m_nGlowRange: usize = 0x1110; // int32
                pub const m_nGlowRangeMin: usize = 0x1114; // int32
                pub const m_glowColor: usize = 0x1118; // Color
                pub const m_nGlowTeam: usize = 0x111C; // int32
                pub const m_iCachedFrameCount: usize = 0x1120; // int32
                pub const m_vecCachedRenderMins: usize = 0x1124; // 
                pub const m_vecCachedRenderMaxs: usize = 0x1130; // 
            }
            // Parent: C_DynamicProp
            // Fields count: 0
            pub mod C_DynamicPropAlias_dynamic_prop {
            }
            // Parent: C_DynamicProp
            // Fields count: 0
            pub mod C_DynamicPropAlias_prop_dynamic_override {
            }
            // Parent: C_DynamicProp
            // Fields count: 0
            pub mod C_DynamicPropAlias_cable_dynamic {
            }
            // Parent: C_BaseTrigger
            // Fields count: 9
            pub mod C_ColorCorrectionVolume {
                pub const m_LastEnterWeight: usize = 0xCD8; // float32
                pub const m_LastEnterTime: usize = 0xCDC; // float32
                pub const m_LastExitWeight: usize = 0xCE0; // float32
                pub const m_LastExitTime: usize = 0xCE4; // float32
                pub const m_bEnabled: usize = 0xCE8; // bool
                pub const m_MaxWeight: usize = 0xCEC; // float32
                pub const m_FadeDuration: usize = 0xCF0; // float32
                pub const m_Weight: usize = 0xCF4; // float32
                pub const m_lookupFilename: usize = 0xCF8; // char[512]
            }
            // Parent: C_FuncBrush
            // Fields count: 8
            pub mod C_FuncMonitor {
                pub const m_targetCamera: usize = 0xCD0; // CUtlString
                pub const m_nResolutionEnum: usize = 0xCD8; // int32
                pub const m_bRenderShadows: usize = 0xCDC; // bool
                pub const m_bUseUniqueColorTarget: usize = 0xCDD; // bool
                pub const m_brushModelName: usize = 0xCE0; // CUtlString
                pub const m_hTargetCamera: usize = 0xCE8; // CHandle<C_BaseEntity>
                pub const m_bEnabled: usize = 0xCEC; // bool
                pub const m_bDraw3DSkybox: usize = 0xCED; // bool
            }
            // Parent: C_BaseToggle
            // Fields count: 0
            pub mod C_FuncMoveLinear {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 2
            pub mod C_PhysMagnet {
                pub const m_aAttachedObjectsFromServer: usize = 0xED8; // CUtlVector<int32>
                pub const m_aAttachedObjects: usize = 0xEF0; // CUtlVector<CHandle<C_BaseEntity>>
            }
            // Parent: CBaseAnimGraph
            // Fields count: 13
            pub mod C_PointCommentaryNode {
                pub const m_bActive: usize = 0xEE0; // bool
                pub const m_bWasActive: usize = 0xEE1; // bool
                pub const m_flEndTime: usize = 0xEE4; // GameTime_t
                pub const m_flStartTime: usize = 0xEE8; // GameTime_t
                pub const m_flStartTimeInCommentary: usize = 0xEEC; // float32
                pub const m_iszCommentaryFile: usize = 0xEF0; // CUtlSymbolLarge
                pub const m_iszTitle: usize = 0xEF8; // CUtlSymbolLarge
                pub const m_iszSpeakers: usize = 0xF00; // CUtlSymbolLarge
                pub const m_iNodeNumber: usize = 0xF08; // int32
                pub const m_iNodeNumberMax: usize = 0xF0C; // int32
                pub const m_bListenedTo: usize = 0xF10; // bool
                pub const m_hViewPosition: usize = 0xF20; // CHandle<C_BaseEntity>
                pub const m_bRestartAfterRestore: usize = 0xF24; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_WaterBullet {
            }
            // Parent: C_BaseToggle
            // Fields count: 1
            pub mod C_BaseDoor {
                pub const m_bIsUsable: usize = 0xCD0; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 19
            pub mod C_BaseFlex {
                pub const m_flexWeight: usize = 0xEE8; // C_NetworkUtlVectorBase<float32>
                pub const m_vLookTargetPosition: usize = 0xF00; // 
                pub const m_blinktoggle: usize = 0xF18; // bool
                pub const m_nLastFlexUpdateFrameCount: usize = 0xF78; // int32
                pub const m_CachedViewTarget: usize = 0xF7C; // 
                pub const m_nNextSceneEventId: usize = 0xF88; // uint32
                pub const m_iBlink: usize = 0xF8C; // int32
                pub const m_blinktime: usize = 0xF90; // float32
                pub const m_prevblinktoggle: usize = 0xF94; // bool
                pub const m_iJawOpen: usize = 0xF98; // int32
                pub const m_flJawOpenAmount: usize = 0xF9C; // float32
                pub const m_flBlinkAmount: usize = 0xFA0; // float32
                pub const m_iMouthAttachment: usize = 0xFA4; // AttachmentHandle_t
                pub const m_iEyeAttachment: usize = 0xFA5; // AttachmentHandle_t
                pub const m_bResetFlexWeightsOnModelChange: usize = 0xFA6; // bool
                pub const m_nEyeOcclusionRendererBone: usize = 0xFC0; // int32
                pub const m_mEyeOcclusionRendererCameraToBoneTransform: usize = 0xFC4; // matrix3x4_t
                pub const m_vEyeOcclusionRendererHalfExtent: usize = 0xFF4; // 
                pub const m_PhonemeClasses: usize = 0x1010; // C_BaseFlex::Emphasized_Phoneme[3]
            }
            // Parent: CBaseAnimGraph
            // Fields count: 14
            pub mod C_ClientRagdoll {
                pub const m_bFadeOut: usize = 0xED8; // bool
                pub const m_bImportant: usize = 0xED9; // bool
                pub const m_flEffectTime: usize = 0xEDC; // GameTime_t
                pub const m_gibDespawnTime: usize = 0xEE0; // GameTime_t
                pub const m_iCurrentFriction: usize = 0xEE4; // int32
                pub const m_iMinFriction: usize = 0xEE8; // int32
                pub const m_iMaxFriction: usize = 0xEEC; // int32
                pub const m_iFrictionAnimState: usize = 0xEF0; // int32
                pub const m_bReleaseRagdoll: usize = 0xEF4; // bool
                pub const m_iEyeAttachment: usize = 0xEF5; // AttachmentHandle_t
                pub const m_bFadingOut: usize = 0xEF6; // bool
                pub const m_flScaleEnd: usize = 0xEF8; // float32[10]
                pub const m_flScaleTimeStart: usize = 0xF20; // GameTime_t[10]
                pub const m_flScaleTimeEnd: usize = 0xF48; // GameTime_t[10]
            }
            // Parent: C_BaseTrigger
            // Fields count: 8
            pub mod C_Precipitation {
                pub const m_flDensity: usize = 0xCD8; // float32
                pub const m_flParticleInnerDist: usize = 0xCE8; // float32
                pub const m_pParticleDef: usize = 0xCF0; // char*
                pub const m_tParticlePrecipTraceTimer: usize = 0xD18; // TimedEvent[1]
                pub const m_bActiveParticlePrecipEmitter: usize = 0xD20; // bool[1]
                pub const m_bParticlePrecipInitialized: usize = 0xD21; // bool
                pub const m_bHasSimulatedSinceLastSceneObjectUpdate: usize = 0xD22; // bool
                pub const m_nAvailableSheetSequencesMaxIndex: usize = 0xD24; // int32
            }
            // Parent: C_Sprite
            // Fields count: 2
            pub mod C_FireSprite {
                pub const m_vecMoveDir: usize = 0xE00; // 
                pub const m_bFadeFromAbove: usize = 0xE0C; // bool
            }
            // Parent: C_Sprite
            // Fields count: 0
            pub mod C_FireFromAboveSprite {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 23
            pub mod C_Fish {
                pub const m_pos: usize = 0xED8; // 
                pub const m_vel: usize = 0xEE4; // 
                pub const m_angles: usize = 0xEF0; // QAngle
                pub const m_localLifeState: usize = 0xEFC; // int32
                pub const m_deathDepth: usize = 0xF00; // float32
                pub const m_deathAngle: usize = 0xF04; // float32
                pub const m_buoyancy: usize = 0xF08; // float32
                pub const m_wiggleTimer: usize = 0xF10; // CountdownTimer
                pub const m_wigglePhase: usize = 0xF28; // float32
                pub const m_wiggleRate: usize = 0xF2C; // float32
                pub const m_actualPos: usize = 0xF30; // 
                pub const m_actualAngles: usize = 0xF3C; // QAngle
                pub const m_poolOrigin: usize = 0xF48; // 
                pub const m_waterLevel: usize = 0xF54; // float32
                pub const m_gotUpdate: usize = 0xF58; // bool
                pub const m_x: usize = 0xF5C; // float32
                pub const m_y: usize = 0xF60; // float32
                pub const m_z: usize = 0xF64; // float32
                pub const m_angle: usize = 0xF68; // float32
                pub const m_errorHistory: usize = 0xF6C; // float32[20]
                pub const m_errorHistoryIndex: usize = 0xFBC; // int32
                pub const m_errorHistoryCount: usize = 0xFC0; // int32
                pub const m_averageError: usize = 0xFC4; // float32
            }
            // Parent: C_BreakableProp
            // Fields count: 1
            pub mod C_PhysicsProp {
                pub const m_bAwake: usize = 0x1028; // bool
            }
            // Parent: C_DynamicProp
            // Fields count: 7
            pub mod C_BasePropDoor {
                pub const m_eDoorState: usize = 0x1150; // DoorState_t
                pub const m_modelChanged: usize = 0x1154; // bool
                pub const m_bLocked: usize = 0x1155; // bool
                pub const m_closedPosition: usize = 0x1158; // 
                pub const m_closedAngles: usize = 0x1164; // QAngle
                pub const m_hMaster: usize = 0x1170; // CHandle<C_BasePropDoor>
                pub const m_vWhereToSetLightingOrigin: usize = 0x1174; // 
            }
            // Parent: C_BasePropDoor
            // Fields count: 0
            pub mod C_PropDoorRotating {
            }
            // Parent: C_BreakableProp
            // Fields count: 15
            pub mod C_PhysPropClientside {
                pub const m_flTouchDelta: usize = 0x1028; // GameTime_t
                pub const m_fDeathTime: usize = 0x102C; // GameTime_t
                pub const m_impactEnergyScale: usize = 0x1030; // float32
                pub const m_inertiaScale: usize = 0x1034; // float32
                pub const m_flDmgModBullet: usize = 0x1038; // float32
                pub const m_flDmgModClub: usize = 0x103C; // float32
                pub const m_flDmgModExplosive: usize = 0x1040; // float32
                pub const m_flDmgModFire: usize = 0x1044; // float32
                pub const m_iszPhysicsDamageTableName: usize = 0x1048; // CUtlSymbolLarge
                pub const m_iszBasePropData: usize = 0x1050; // CUtlSymbolLarge
                pub const m_iInteractions: usize = 0x1058; // int32
                pub const m_bHasBreakPiecesOrCommands: usize = 0x105C; // bool
                pub const m_vecDamagePosition: usize = 0x1060; // 
                pub const m_vecDamageDirection: usize = 0x106C; // 
                pub const m_nDamageType: usize = 0x1078; // int32
            }
            // Parent: CBaseAnimGraph
            // Fields count: 8
            pub mod C_RagdollProp {
                pub const m_ragPos: usize = 0xEE0; // C_NetworkUtlVectorBase<Vector>
                pub const m_ragAngles: usize = 0xEF8; // C_NetworkUtlVectorBase<QAngle>
                pub const m_flBlendWeight: usize = 0xF10; // float32
                pub const m_hRagdollSource: usize = 0xF14; // CHandle<C_BaseEntity>
                pub const m_iEyeAttachment: usize = 0xF18; // AttachmentHandle_t
                pub const m_flBlendWeightCurrent: usize = 0xF1C; // float32
                pub const m_parentPhysicsBoneIndices: usize = 0xF20; // CUtlVector<int32>
                pub const m_worldSpaceBoneComputationOrder: usize = 0xF38; // CUtlVector<int32>
            }
            // Parent: CBaseAnimGraph
            // Fields count: 25
            pub mod C_LocalTempEntity {
                pub const flags: usize = 0xEF0; // int32
                pub const die: usize = 0xEF4; // GameTime_t
                pub const m_flFrameMax: usize = 0xEF8; // float32
                pub const x: usize = 0xEFC; // float32
                pub const y: usize = 0xF00; // float32
                pub const fadeSpeed: usize = 0xF04; // float32
                pub const bounceFactor: usize = 0xF08; // float32
                pub const hitSound: usize = 0xF0C; // int32
                pub const priority: usize = 0xF10; // int32
                pub const tentOffset: usize = 0xF14; // 
                pub const m_vecTempEntAngVelocity: usize = 0xF20; // QAngle
                pub const tempent_renderamt: usize = 0xF2C; // int32
                pub const m_vecNormal: usize = 0xF30; // 
                pub const m_flSpriteScale: usize = 0xF3C; // float32
                pub const m_nFlickerFrame: usize = 0xF40; // int32
                pub const m_flFrameRate: usize = 0xF44; // float32
                pub const m_flFrame: usize = 0xF48; // float32
                pub const m_pszImpactEffect: usize = 0xF50; // char*
                pub const m_pszParticleEffect: usize = 0xF58; // char*
                pub const m_bParticleCollision: usize = 0xF60; // bool
                pub const m_iLastCollisionFrame: usize = 0xF64; // int32
                pub const m_vLastCollisionOrigin: usize = 0xF68; // 
                pub const m_vecTempEntVelocity: usize = 0xF74; // 
                pub const m_vecPrevAbsOrigin: usize = 0xF80; // 
                pub const m_vecTempEntAcceleration: usize = 0xF8C; // 
            }
            // Parent: C_PhysicsProp
            // Fields count: 1
            pub mod C_ShatterGlassShardPhysics {
                pub const m_ShardDesc: usize = 0x1038; // shard_model_desc_t
            }
            // Parent: C_BaseFlex
            // Fields count: 20
            pub mod C_EconEntity {
                pub const m_flFlexDelayTime: usize = 0x1080; // float32
                pub const m_flFlexDelayedWeight: usize = 0x1088; // float32*
                pub const m_bAttributesInitialized: usize = 0x1090; // bool
                pub const m_AttributeManager: usize = 0x1098; // C_AttributeContainer
                pub const m_OriginalOwnerXuidLow: usize = 0x1540; // uint32
                pub const m_OriginalOwnerXuidHigh: usize = 0x1544; // uint32
                pub const m_nFallbackPaintKit: usize = 0x1548; // int32
                pub const m_nFallbackSeed: usize = 0x154C; // int32
                pub const m_flFallbackWear: usize = 0x1550; // float32
                pub const m_nFallbackStatTrak: usize = 0x1554; // int32
                pub const m_bClientside: usize = 0x1558; // bool
                pub const m_bParticleSystemsCreated: usize = 0x1559; // bool
                pub const m_vecAttachedParticles: usize = 0x1560; // CUtlVector<int32>
                pub const m_hViewmodelAttachment: usize = 0x1578; // CHandle<CBaseAnimGraph>
                pub const m_iOldTeam: usize = 0x157C; // int32
                pub const m_bAttachmentDirty: usize = 0x1580; // bool
                pub const m_nUnloadedModelIndex: usize = 0x1584; // int32
                pub const m_iNumOwnerValidationRetries: usize = 0x1588; // int32
                pub const m_hOldProvidee: usize = 0x1598; // CHandle<C_BaseEntity>
                pub const m_vecAttachedModels: usize = 0x15A0; // CUtlVector<C_EconEntity::AttachedModelData_t>
            }
            // Parent: C_EconEntity
            // Fields count: 2
            pub mod C_EconWearable {
                pub const m_nForceSkin: usize = 0x15B8; // int32
                pub const m_bAlwaysAllow: usize = 0x15BC; // bool
            }
            // Parent: C_BaseFlex
            // Fields count: 12
            pub mod C_BaseGrenade {
                pub const m_bHasWarnedAI: usize = 0x1070; // bool
                pub const m_bIsSmokeGrenade: usize = 0x1071; // bool
                pub const m_bIsLive: usize = 0x1072; // bool
                pub const m_DmgRadius: usize = 0x1074; // float32
                pub const m_flDetonateTime: usize = 0x1078; // GameTime_t
                pub const m_flWarnAITime: usize = 0x107C; // float32
                pub const m_flDamage: usize = 0x1080; // float32
                pub const m_iszBounceSound: usize = 0x1088; // CUtlSymbolLarge
                pub const m_ExplosionSound: usize = 0x1090; // CUtlString
                pub const m_hThrower: usize = 0x109C; // CHandle<C_CSPlayerPawn>
                pub const m_flNextAttack: usize = 0x10B4; // GameTime_t
                pub const m_hOriginalThrower: usize = 0x10B8; // CHandle<C_CSPlayerPawn>
            }
            // Parent: C_PhysicsProp
            // Fields count: 0
            pub mod C_PhysicsPropMultiplayer {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 1
            pub mod C_ViewmodelWeapon {
                pub const m_worldModel: usize = 0xED8; // char*
            }
            // Parent: CBaseAnimGraph
            // Fields count: 17
            pub mod C_BaseViewModel {
                pub const m_vecLastFacing: usize = 0xEE0; // 
                pub const m_nViewModelIndex: usize = 0xEEC; // uint32
                pub const m_nAnimationParity: usize = 0xEF0; // uint32
                pub const m_flAnimationStartTime: usize = 0xEF4; // float32
                pub const m_hWeapon: usize = 0xEF8; // CHandle<C_BasePlayerWeapon>
                pub const m_sVMName: usize = 0xF00; // CUtlSymbolLarge
                pub const m_sAnimationPrefix: usize = 0xF08; // CUtlSymbolLarge
                pub const m_hWeaponModel: usize = 0xF10; // CHandle<C_ViewmodelWeapon>
                pub const m_iCameraAttachment: usize = 0xF14; // AttachmentHandle_t
                pub const m_vecLastCameraAngles: usize = 0xF18; // QAngle
                pub const m_previousElapsedDuration: usize = 0xF24; // float32
                pub const m_previousCycle: usize = 0xF28; // float32
                pub const m_nOldAnimationParity: usize = 0xF2C; // int32
                pub const m_hOldLayerSequence: usize = 0xF30; // HSequence
                pub const m_oldLayer: usize = 0xF34; // int32
                pub const m_oldLayerStartTime: usize = 0xF38; // float32
                pub const m_hControlPanel: usize = 0xF3C; // CHandle<C_BaseEntity>
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_ViewmodelAttachmentModel {
            }
            // Parent: C_BaseViewModel
            // Fields count: 3
            pub mod C_PredictedViewModel {
                pub const m_vPredictedLagOffset: usize = 0xF40; // 
                pub const m_targetSpeed: usize = 0xF4C; // QAngle
                pub const m_currentSpeed: usize = 0xF58; // QAngle
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_WorldModelStattrak {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_WorldModelNametag {
            }
            // Parent: C_BaseGrenade
            // Fields count: 16
            pub mod C_BaseCSGrenadeProjectile {
                pub const m_vInitialPosition: usize = 0x10C0; // 
                pub const m_vInitialVelocity: usize = 0x10CC; // 
                pub const m_nBounces: usize = 0x10D8; // int32
                pub const m_nExplodeEffectIndex: usize = 0x10E0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_nExplodeEffectTickBegin: usize = 0x10E8; // int32
                pub const m_vecExplodeEffectOrigin: usize = 0x10EC; // 
                pub const m_flSpawnTime: usize = 0x10F8; // GameTime_t
                pub const vecLastTrailLinePos: usize = 0x10FC; // 
                pub const flNextTrailLineTime: usize = 0x1108; // GameTime_t
                pub const m_bExplodeEffectBegan: usize = 0x110C; // bool
                pub const m_bCanCreateGrenadeTrail: usize = 0x110D; // bool
                pub const m_nSnapshotTrajectoryEffectIndex: usize = 0x1110; // ParticleIndex_t
                pub const m_hSnapshotTrajectoryParticleSnapshot: usize = 0x1118; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
                pub const m_arrTrajectoryTrailPoints: usize = 0x1120; // CUtlVector<Vector>
                pub const m_arrTrajectoryTrailPointCreationTimes: usize = 0x1138; // CUtlVector<float32>
                pub const m_flTrajectoryTrailEffectCreationTime: usize = 0x1150; // float32
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 0
            pub mod C_SensorGrenadeProjectile {
            }
            // Parent: C_BaseGrenade
            // Fields count: 0
            pub mod CBreachChargeProjectile {
            }
            // Parent: C_BaseGrenade
            // Fields count: 0
            pub mod CBumpMineProjectile {
            }
            // Parent: C_BaseGrenade
            // Fields count: 0
            pub mod CTripWireFireProjectile {
            }
            // Parent: C_BaseFlex
            // Fields count: 6
            pub mod C_CSGO_PreviewModel {
                pub const m_animgraph: usize = 0x1070; // CUtlString
                pub const m_animgraphCharacterModeString: usize = 0x1078; // CGlobalSymbol
                pub const m_defaultAnim: usize = 0x1080; // CUtlString
                pub const m_nDefaultAnimLoopMode: usize = 0x1088; // AnimLoopMode_t
                pub const m_flInitialModelScale: usize = 0x108C; // float32
                pub const m_sInitialWeaponState: usize = 0x1090; // CUtlString
            }
            // Parent: C_CSGO_PreviewModel
            // Fields count: 0
            pub mod C_CSGO_PreviewModelAlias_csgo_item_previewmodel {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 6
            pub mod C_BulletHitModel {
                pub const m_matLocal: usize = 0xED8; // matrix3x4_t
                pub const m_iBoneIndex: usize = 0xF08; // int32
                pub const m_hPlayerParent: usize = 0xF0C; // CHandle<C_BaseEntity>
                pub const m_bIsHit: usize = 0xF10; // bool
                pub const m_flTimeCreated: usize = 0xF14; // float32
                pub const m_vecStartPos: usize = 0xF18; // 
            }
            // Parent: CBaseAnimGraph
            // Fields count: 6
            pub mod C_PickUpModelSlerper {
                pub const m_hPlayerParent: usize = 0xED8; // CHandle<C_BaseEntity>
                pub const m_hItem: usize = 0xEDC; // CHandle<C_BaseEntity>
                pub const m_flTimePickedUp: usize = 0xEE0; // float32
                pub const m_angOriginal: usize = 0xEE4; // QAngle
                pub const m_vecPosOriginal: usize = 0xEF0; // 
                pub const m_angRandom: usize = 0xF00; // QAngle
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_WorldModelGloves {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod C_HostageCarriableProp {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 1
            pub mod C_Multimeter {
                pub const m_hTargetC4: usize = 0xEE0; // CHandle<C_PlantedC4>
            }
            // Parent: CBaseAnimGraph
            // Fields count: 29
            pub mod C_PlantedC4 {
                pub const m_bBombTicking: usize = 0xED8; // bool
                pub const m_nBombSite: usize = 0xEDC; // int32
                pub const m_nSourceSoundscapeHash: usize = 0xEE0; // int32
                pub const m_entitySpottedState: usize = 0xEE8; // EntitySpottedState_t
                pub const m_flNextGlow: usize = 0xF00; // GameTime_t
                pub const m_flNextBeep: usize = 0xF04; // GameTime_t
                pub const m_flC4Blow: usize = 0xF08; // GameTime_t
                pub const m_bCannotBeDefused: usize = 0xF0C; // bool
                pub const m_bHasExploded: usize = 0xF0D; // bool
                pub const m_flTimerLength: usize = 0xF10; // float32
                pub const m_bBeingDefused: usize = 0xF14; // bool
                pub const m_bTriggerWarning: usize = 0xF18; // float32
                pub const m_bExplodeWarning: usize = 0xF1C; // float32
                pub const m_bC4Activated: usize = 0xF20; // bool
                pub const m_bTenSecWarning: usize = 0xF21; // bool
                pub const m_flDefuseLength: usize = 0xF24; // float32
                pub const m_flDefuseCountDown: usize = 0xF28; // GameTime_t
                pub const m_bBombDefused: usize = 0xF2C; // bool
                pub const m_hBombDefuser: usize = 0xF30; // CHandle<C_CSPlayerPawn>
                pub const m_hControlPanel: usize = 0xF34; // CHandle<C_BaseEntity>
                pub const m_hDefuserMultimeter: usize = 0xF38; // CHandle<C_Multimeter>
                pub const m_flNextRadarFlashTime: usize = 0xF3C; // GameTime_t
                pub const m_bRadarFlash: usize = 0xF40; // bool
                pub const m_pBombDefuser: usize = 0xF44; // CHandle<C_CSPlayerPawn>
                pub const m_fLastDefuseTime: usize = 0xF48; // GameTime_t
                pub const m_pPredictionOwner: usize = 0xF50; // CBasePlayerController*
                pub const m_vecC4ExplodeSpectatePos: usize = 0xF58; // 
                pub const m_vecC4ExplodeSpectateAng: usize = 0xF64; // QAngle
                pub const m_flC4ExplodeSpectateDuration: usize = 0xF70; // float32
            }
            // Parent: C_EconEntity
            // Fields count: 2
            pub mod C_Item {
                pub const m_bShouldGlow: usize = 0x15B8; // bool
                pub const m_pReticleHintTextName: usize = 0x15B9; // char[256]
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 0
            pub mod C_HEGrenadeProjectile {
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 0
            pub mod C_FlashbangProjectile {
            }
            // Parent: C_DynamicProp
            // Fields count: 8
            pub mod C_Chicken {
                pub const m_hHolidayHatAddon: usize = 0x1148; // CHandle<CBaseAnimGraph>
                pub const m_jumpedThisFrame: usize = 0x114C; // bool
                pub const m_leader: usize = 0x1150; // CHandle<C_CSPlayerPawn>
                pub const m_AttributeManager: usize = 0x1158; // C_AttributeContainer
                pub const m_OriginalOwnerXuidLow: usize = 0x1600; // uint32
                pub const m_OriginalOwnerXuidHigh: usize = 0x1604; // uint32
                pub const m_bAttributesInitialized: usize = 0x1608; // bool
                pub const m_hWaterWakeParticles: usize = 0x160C; // ParticleIndex_t
            }
            // Parent: C_EconEntity
            // Fields count: 7
            pub mod C_BasePlayerWeapon {
                pub const m_nNextPrimaryAttackTick: usize = 0x15B8; // GameTick_t
                pub const m_flNextPrimaryAttackTickRatio: usize = 0x15BC; // float32
                pub const m_nNextSecondaryAttackTick: usize = 0x15C0; // GameTick_t
                pub const m_flNextSecondaryAttackTickRatio: usize = 0x15C4; // float32
                pub const m_iClip1: usize = 0x15C8; // int32
                pub const m_iClip2: usize = 0x15CC; // int32
                pub const m_pReserveAmmo: usize = 0x15D0; // int32[2]
            }
            // Parent: C_RagdollProp
            // Fields count: 7
            pub mod C_RagdollPropAttached {
                pub const m_boneIndexAttached: usize = 0xF50; // uint32
                pub const m_ragdollAttachedObjectIndex: usize = 0xF54; // uint32
                pub const m_attachmentPointBoneSpace: usize = 0xF58; // 
                pub const m_attachmentPointRagdollSpace: usize = 0xF64; // 
                pub const m_vecOffset: usize = 0xF70; // 
                pub const m_parentTime: usize = 0xF7C; // float32
                pub const m_bHasParent: usize = 0xF80; // bool
            }
            // Parent: C_BaseFlex
            // Fields count: 8
            pub mod C_BaseCombatCharacter {
                pub const m_hMyWearables: usize = 0x1070; // C_NetworkUtlVectorBase<CHandle<C_EconWearable>>
                pub const m_bloodColor: usize = 0x1088; // int32
                pub const m_leftFootAttachment: usize = 0x108C; // AttachmentHandle_t
                pub const m_rightFootAttachment: usize = 0x108D; // AttachmentHandle_t
                pub const m_nWaterWakeMode: usize = 0x1090; // C_BaseCombatCharacter::WaterWakeMode_t
                pub const m_flWaterWorldZ: usize = 0x1094; // float32
                pub const m_flWaterNextTraceTime: usize = 0x1098; // float32
                pub const m_flFieldOfView: usize = 0x109C; // float32
            }
            // Parent: C_BaseCombatCharacter
            // Fields count: 28
            pub mod C_BasePlayerPawn {
                pub const m_pWeaponServices: usize = 0x1100; // CPlayer_WeaponServices*
                pub const m_pItemServices: usize = 0x1108; // CPlayer_ItemServices*
                pub const m_pAutoaimServices: usize = 0x1110; // CPlayer_AutoaimServices*
                pub const m_pObserverServices: usize = 0x1118; // CPlayer_ObserverServices*
                pub const m_pWaterServices: usize = 0x1120; // CPlayer_WaterServices*
                pub const m_pUseServices: usize = 0x1128; // CPlayer_UseServices*
                pub const m_pFlashlightServices: usize = 0x1130; // CPlayer_FlashlightServices*
                pub const m_pCameraServices: usize = 0x1138; // CPlayer_CameraServices*
                pub const m_pMovementServices: usize = 0x1140; // CPlayer_MovementServices*
                pub const m_ServerViewAngleChanges: usize = 0x1150; // C_UtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
                pub const m_nHighestConsumedServerViewAngleChangeIndex: usize = 0x11A0; // uint32
                pub const v_angle: usize = 0x11A4; // QAngle
                pub const v_anglePrevious: usize = 0x11B0; // QAngle
                pub const m_iHideHUD: usize = 0x11BC; // uint32
                pub const m_skybox3d: usize = 0x11C0; // sky3dparams_t
                pub const m_flDeathTime: usize = 0x1250; // GameTime_t
                pub const m_vecPredictionError: usize = 0x1254; // 
                pub const m_flPredictionErrorTime: usize = 0x1260; // GameTime_t
                pub const m_vecLastCameraSetupLocalOrigin: usize = 0x1264; // 
                pub const m_flLastCameraSetupTime: usize = 0x1270; // GameTime_t
                pub const m_flFOVSensitivityAdjust: usize = 0x1274; // float32
                pub const m_flMouseSensitivity: usize = 0x1278; // float32
                pub const m_vOldOrigin: usize = 0x127C; // 
                pub const m_flOldSimulationTime: usize = 0x1288; // float32
                pub const m_nLastExecutedCommandNumber: usize = 0x128C; // int32
                pub const m_nLastExecutedCommandTick: usize = 0x1290; // int32
                pub const m_hController: usize = 0x1294; // CHandle<CBasePlayerController>
                pub const m_bIsSwappingToPredictableController: usize = 0x1298; // bool
            }
            // Parent: C_PredictedViewModel
            // Fields count: 6
            pub mod C_CSGOViewModel {
                pub const m_bShouldIgnoreOffsetAndAccuracy: usize = 0xF68; // bool
                pub const m_nWeaponParity: usize = 0xF6C; // uint32
                pub const m_nOldWeaponParity: usize = 0xF70; // uint32
                pub const m_nLastKnownAssociatedWeaponEntIndex: usize = 0xF74; // CEntityIndex
                pub const m_bNeedToQueueHighResComposite: usize = 0xF78; // bool
                pub const m_vLoweredWeaponOffset: usize = 0xFDC; // QAngle
            }
            // Parent: C_BasePlayerWeapon
            // Fields count: 71
            pub mod C_CSWeaponBase {
                pub const m_flFireSequenceStartTime: usize = 0x162C; // float32
                pub const m_nFireSequenceStartTimeChange: usize = 0x1630; // int32
                pub const m_nFireSequenceStartTimeAck: usize = 0x1634; // int32
                pub const m_ePlayerFireEvent: usize = 0x1638; // PlayerAnimEvent_t
                pub const m_ePlayerFireEventAttackType: usize = 0x163C; // WeaponAttackType_t
                pub const m_seqIdle: usize = 0x1640; // HSequence
                pub const m_seqFirePrimary: usize = 0x1644; // HSequence
                pub const m_seqFireSecondary: usize = 0x1648; // HSequence
                pub const m_thirdPersonFireSequences: usize = 0x1650; // CUtlVector<HSequence>
                pub const m_hCurrentThirdPersonSequence: usize = 0x1668; // HSequence
                pub const m_nSilencerBoneIndex: usize = 0x166C; // int32
                pub const m_thirdPersonSequences: usize = 0x1670; // HSequence[7]
                pub const m_ClientPreviousWeaponState: usize = 0x16A8; // CSWeaponState_t
                pub const m_iState: usize = 0x16AC; // CSWeaponState_t
                pub const m_flCrosshairDistance: usize = 0x16B0; // float32
                pub const m_iAmmoLastCheck: usize = 0x16B4; // int32
                pub const m_iAlpha: usize = 0x16B8; // int32
                pub const m_iScopeTextureID: usize = 0x16BC; // int32
                pub const m_iCrosshairTextureID: usize = 0x16C0; // int32
                pub const m_flGunAccuracyPositionDeprecated: usize = 0x16C4; // float32
                pub const m_nLastEmptySoundCmdNum: usize = 0x16C8; // int32
                pub const m_nViewModelIndex: usize = 0x16CC; // uint32
                pub const m_bReloadsWithClips: usize = 0x16D0; // bool
                pub const m_flTimeWeaponIdle: usize = 0x16D4; // GameTime_t
                pub const m_bFireOnEmpty: usize = 0x16D8; // bool
                pub const m_OnPlayerPickup: usize = 0x16E0; // CEntityIOOutput
                pub const m_weaponMode: usize = 0x1708; // CSWeaponMode
                pub const m_flTurningInaccuracyDelta: usize = 0x170C; // float32
                pub const m_vecTurningInaccuracyEyeDirLast: usize = 0x1710; // 
                pub const m_flTurningInaccuracy: usize = 0x171C; // float32
                pub const m_fAccuracyPenalty: usize = 0x1720; // float32
                pub const m_flLastAccuracyUpdateTime: usize = 0x1724; // GameTime_t
                pub const m_fAccuracySmoothedForZoom: usize = 0x1728; // float32
                pub const m_fScopeZoomEndTime: usize = 0x172C; // GameTime_t
                pub const m_iRecoilIndex: usize = 0x1730; // int32
                pub const m_flRecoilIndex: usize = 0x1734; // float32
                pub const m_bBurstMode: usize = 0x1738; // bool
                pub const m_nPostponeFireReadyTicks: usize = 0x173C; // GameTick_t
                pub const m_flPostponeFireReadyFrac: usize = 0x1740; // float32
                pub const m_bInReload: usize = 0x1744; // bool
                pub const m_bReloadVisuallyComplete: usize = 0x1745; // bool
                pub const m_flDroppedAtTime: usize = 0x1748; // GameTime_t
                pub const m_bIsHauledBack: usize = 0x174C; // bool
                pub const m_bSilencerOn: usize = 0x174D; // bool
                pub const m_flTimeSilencerSwitchComplete: usize = 0x1750; // GameTime_t
                pub const m_iOriginalTeamNumber: usize = 0x1754; // int32
                pub const m_flNextAttackRenderTimeOffset: usize = 0x1758; // float32
                pub const m_bVisualsDataSet: usize = 0x17E0; // bool
                pub const m_bOldFirstPersonSpectatedState: usize = 0x17E1; // bool
                pub const m_hOurPing: usize = 0x17E4; // CHandle<C_BaseEntity>
                pub const m_nOurPingIndex: usize = 0x17E8; // CEntityIndex
                pub const m_vecOurPingPos: usize = 0x17EC; // 
                pub const m_bGlowForPing: usize = 0x17F8; // bool
                pub const m_bUIWeapon: usize = 0x17F9; // bool
                pub const m_hPrevOwner: usize = 0x1808; // CHandle<C_CSPlayerPawn>
                pub const m_nDropTick: usize = 0x180C; // GameTick_t
                pub const m_donated: usize = 0x182C; // bool
                pub const m_fLastShotTime: usize = 0x1830; // GameTime_t
                pub const m_bWasOwnedByCT: usize = 0x1834; // bool
                pub const m_bWasOwnedByTerrorist: usize = 0x1835; // bool
                pub const m_gunHeat: usize = 0x1838; // float32
                pub const m_smokeAttachments: usize = 0x183C; // uint32
                pub const m_lastSmokeTime: usize = 0x1840; // GameTime_t
                pub const m_flNextClientFireBulletTime: usize = 0x1844; // float32
                pub const m_flNextClientFireBulletTime_Repredict: usize = 0x1848; // float32
                pub const m_IronSightController: usize = 0x1920; // C_IronSightController
                pub const m_iIronSightMode: usize = 0x19D0; // int32
                pub const m_flLastLOSTraceFailureTime: usize = 0x19E0; // GameTime_t
                pub const m_iNumEmptyAttacks: usize = 0x19E4; // int32
                pub const m_flLastMagDropRequestTime: usize = 0x1A60; // GameTime_t
                pub const m_flWatTickOffset: usize = 0x1A64; // float32
            }
            // Parent: C_CSWeaponBase
            // Fields count: 6
            pub mod C_CSWeaponBaseGun {
                pub const m_zoomLevel: usize = 0x1A70; // int32
                pub const m_iBurstShotsRemaining: usize = 0x1A74; // int32
                pub const m_iSilencerBodygroup: usize = 0x1A78; // int32
                pub const m_silencedModelIndex: usize = 0x1A88; // int32
                pub const m_inPrecache: usize = 0x1A8C; // bool
                pub const m_bNeedsBoltAction: usize = 0x1A8D; // bool
            }
            // Parent: C_CSWeaponBase
            // Fields count: 11
            pub mod C_C4 {
                pub const m_szScreenText: usize = 0x1A70; // char[32]
                pub const m_activeLightParticleIndex: usize = 0x1A90; // ParticleIndex_t
                pub const m_eActiveLightEffect: usize = 0x1A94; // C4LightEffect_t
                pub const m_bStartedArming: usize = 0x1A98; // bool
                pub const m_fArmedTime: usize = 0x1A9C; // GameTime_t
                pub const m_bBombPlacedAnimation: usize = 0x1AA0; // bool
                pub const m_bIsPlantingViaUse: usize = 0x1AA1; // bool
                pub const m_entitySpottedState: usize = 0x1AA8; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0x1AC0; // int32
                pub const m_bPlayedArmingBeeps: usize = 0x1AC4; // bool[7]
                pub const m_bBombPlanted: usize = 0x1ACB; // bool
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_DEagle {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponElite {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod C_WeaponNOVA {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod C_WeaponSawedoff {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 1
            pub mod C_WeaponTaser {
                pub const m_fFireTime: usize = 0x1A90; // GameTime_t
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod C_WeaponXM1014 {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod C_Knife {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod C_Melee {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 1
            pub mod C_WeaponShield {
                pub const m_flDisplayHealth: usize = 0x1A90; // float32
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 1
            pub mod C_MolotovProjectile {
                pub const m_bIsIncGrenade: usize = 0x1158; // bool
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 3
            pub mod C_DecoyProjectile {
                pub const m_nDecoyShotTick: usize = 0x1158; // int32
                pub const m_nClientLastKnownDecoyShotTick: usize = 0x115C; // int32
                pub const m_flTimeParticleEffectSpawn: usize = 0x1180; // GameTime_t
            }
            // Parent: C_BaseCSGrenadeProjectile
            // Fields count: 8
            pub mod C_SmokeGrenadeProjectile {
                pub const m_nSmokeEffectTickBegin: usize = 0x1160; // int32
                pub const m_bDidSmokeEffect: usize = 0x1164; // bool
                pub const m_nRandomSeed: usize = 0x1168; // int32
                pub const m_vSmokeColor: usize = 0x116C; // 
                pub const m_vSmokeDetonationPos: usize = 0x1178; // 
                pub const m_VoxelFrameData: usize = 0x1188; // CUtlVector<uint8>
                pub const m_bSmokeVolumeDataReceived: usize = 0x11A0; // bool
                pub const m_bSmokeEffectSpawned: usize = 0x11A1; // bool
            }
            // Parent: C_CSWeaponBase
            // Fields count: 14
            pub mod C_BaseCSGrenade {
                pub const m_bClientPredictDelete: usize = 0x1A70; // bool
                pub const m_bRedraw: usize = 0x1A71; // bool
                pub const m_bIsHeldByPlayer: usize = 0x1A72; // bool
                pub const m_bPinPulled: usize = 0x1A73; // bool
                pub const m_bJumpThrow: usize = 0x1A74; // bool
                pub const m_bThrowAnimating: usize = 0x1A75; // bool
                pub const m_fThrowTime: usize = 0x1A78; // GameTime_t
                pub const m_flThrowStrength: usize = 0x1A7C; // float32
                pub const m_flThrowStrengthApproach: usize = 0x1A80; // float32
                pub const m_fDropTime: usize = 0x1A84; // GameTime_t
                pub const m_bJustPulledPin: usize = 0x1A88; // bool
                pub const m_nNextHoldTick: usize = 0x1A8C; // GameTick_t
                pub const m_flNextHoldFrac: usize = 0x1A90; // float32
                pub const m_hSwitchToWeaponAfterThrow: usize = 0x1A94; // CHandle<C_CSWeaponBase>
            }
            // Parent: C_CSWeaponBase
            // Fields count: 2
            pub mod C_WeaponBaseItem {
                pub const m_SequenceCompleteTimer: usize = 0x1A70; // CountdownTimer
                pub const m_bRedraw: usize = 0x1A88; // bool
            }
            // Parent: C_Item
            // Fields count: 2
            pub mod C_ItemDogtags {
                pub const m_OwningPlayer: usize = 0x16C0; // CHandle<C_CSPlayerPawn>
                pub const m_KillingPlayer: usize = 0x16C4; // CHandle<C_CSPlayerPawn>
            }
            // Parent: C_WeaponBaseItem
            // Fields count: 0
            pub mod C_Item_Healthshot {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 2
            pub mod C_Fists {
                pub const m_bPlayingUninterruptableAct: usize = 0x1A70; // bool
                pub const m_nUninterruptableActivity: usize = 0x1A74; // PlayerAnimEvent_t
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_SensorGrenade {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod CBreachCharge {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod CBumpMine {
            }
            // Parent: C_CSWeaponBase
            // Fields count: 0
            pub mod CTablet {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod CTripWireFire {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponZoneRepulsor {
            }
            // Parent: C_BasePlayerPawn
            // Fields count: 142
            pub mod C_CSPlayerPawnBase {
                pub const m_pPingServices: usize = 0x12C0; // CCSPlayer_PingServices*
                pub const m_pViewModelServices: usize = 0x12C8; // CPlayer_ViewModelServices*
                pub const m_fRenderingClipPlane: usize = 0x12D8; // float32[4]
                pub const m_nLastClipPlaneSetupFrame: usize = 0x12E8; // int32
                pub const m_vecLastClipCameraPos: usize = 0x12EC; // 
                pub const m_vecLastClipCameraForward: usize = 0x12F8; // 
                pub const m_bClipHitStaticWorld: usize = 0x1304; // bool
                pub const m_bCachedPlaneIsValid: usize = 0x1305; // bool
                pub const m_pClippingWeapon: usize = 0x1308; // C_CSWeaponBase*
                pub const m_previousPlayerState: usize = 0x1310; // CSPlayerState
                pub const m_flLastCollisionCeiling: usize = 0x1314; // float32
                pub const m_flLastCollisionCeilingChangeTime: usize = 0x1318; // float32
                pub const m_grenadeParameterStashTime: usize = 0x1338; // GameTime_t
                pub const m_bGrenadeParametersStashed: usize = 0x133C; // bool
                pub const m_angStashedShootAngles: usize = 0x1340; // QAngle
                pub const m_vecStashedGrenadeThrowPosition: usize = 0x134C; // 
                pub const m_vecStashedVelocity: usize = 0x1358; // 
                pub const m_angShootAngleHistory: usize = 0x1364; // QAngle[2]
                pub const m_vecThrowPositionHistory: usize = 0x137C; // Vector[2]
                pub const m_vecVelocityHistory: usize = 0x1394; // Vector[2]
                pub const m_thirdPersonHeading: usize = 0x13B0; // QAngle
                pub const m_flSlopeDropOffset: usize = 0x13C8; // float32
                pub const m_flSlopeDropHeight: usize = 0x13D8; // float32
                pub const m_vHeadConstraintOffset: usize = 0x13E8; // 
                pub const m_bIsScoped: usize = 0x1400; // bool
                pub const m_bIsWalking: usize = 0x1401; // bool
                pub const m_bResumeZoom: usize = 0x1402; // bool
                pub const m_iPlayerState: usize = 0x1404; // CSPlayerState
                pub const m_bIsDefusing: usize = 0x1408; // bool
                pub const m_bIsGrabbingHostage: usize = 0x1409; // bool
                pub const m_iBlockingUseActionInProgress: usize = 0x140C; // CSPlayerBlockingUseAction_t
                pub const m_bIsRescuing: usize = 0x1410; // bool
                pub const m_fImmuneToGunGameDamageTime: usize = 0x1414; // GameTime_t
                pub const m_fImmuneToGunGameDamageTimeLast: usize = 0x1418; // GameTime_t
                pub const m_bGunGameImmunity: usize = 0x141C; // bool
                pub const m_GunGameImmunityColor: usize = 0x141D; // Color
                pub const m_bHasMovedSinceSpawn: usize = 0x1421; // bool
                pub const m_fMolotovUseTime: usize = 0x1424; // float32
                pub const m_fMolotovDamageTime: usize = 0x1428; // float32
                pub const m_nWhichBombZone: usize = 0x142C; // int32
                pub const m_bInNoDefuseArea: usize = 0x1430; // bool
                pub const m_iThrowGrenadeCounter: usize = 0x1434; // int32
                pub const m_bWaitForNoAttack: usize = 0x1438; // bool
                pub const m_flGuardianTooFarDistFrac: usize = 0x143C; // float32
                pub const m_flDetectedByEnemySensorTime: usize = 0x1440; // GameTime_t
                pub const m_flNextGuardianTooFarWarning: usize = 0x1444; // float32
                pub const m_bSuppressGuardianTooFarWarningAudio: usize = 0x1448; // bool
                pub const m_bKilledByTaser: usize = 0x1449; // bool
                pub const m_iMoveState: usize = 0x144C; // int32
                pub const m_bCanMoveDuringFreezePeriod: usize = 0x1450; // bool
                pub const m_flLowerBodyYawTarget: usize = 0x1454; // float32
                pub const m_bStrafing: usize = 0x1458; // bool
                pub const m_flLastSpawnTimeIndex: usize = 0x145C; // GameTime_t
                pub const m_flEmitSoundTime: usize = 0x1460; // GameTime_t
                pub const m_iAddonBits: usize = 0x1464; // int32
                pub const m_iPrimaryAddon: usize = 0x1468; // int32
                pub const m_iSecondaryAddon: usize = 0x146C; // int32
                pub const m_iProgressBarDuration: usize = 0x1470; // int32
                pub const m_flProgressBarStartTime: usize = 0x1474; // float32
                pub const m_iDirection: usize = 0x1478; // int32
                pub const m_iShotsFired: usize = 0x147C; // int32
                pub const m_bNightVisionOn: usize = 0x1480; // bool
                pub const m_bHasNightVision: usize = 0x1481; // bool
                pub const m_flVelocityModifier: usize = 0x1484; // float32
                pub const m_flHitHeading: usize = 0x1488; // float32
                pub const m_nHitBodyPart: usize = 0x148C; // int32
                pub const m_iStartAccount: usize = 0x1490; // int32
                pub const m_vecIntroStartEyePosition: usize = 0x1494; // 
                pub const m_vecIntroStartPlayerForward: usize = 0x14A0; // 
                pub const m_flClientDeathTime: usize = 0x14AC; // GameTime_t
                pub const m_flNightVisionAlpha: usize = 0x14B0; // float32
                pub const m_bScreenTearFrameCaptured: usize = 0x14B4; // bool
                pub const m_flFlashBangTime: usize = 0x14B8; // float32
                pub const m_flFlashScreenshotAlpha: usize = 0x14BC; // float32
                pub const m_flFlashOverlayAlpha: usize = 0x14C0; // float32
                pub const m_bFlashBuildUp: usize = 0x14C4; // bool
                pub const m_bFlashDspHasBeenCleared: usize = 0x14C5; // bool
                pub const m_bFlashScreenshotHasBeenGrabbed: usize = 0x14C6; // bool
                pub const m_flFlashMaxAlpha: usize = 0x14C8; // float32
                pub const m_flFlashDuration: usize = 0x14CC; // float32
                pub const m_lastStandingPos: usize = 0x14D0; // 
                pub const m_vecLastMuzzleFlashPos: usize = 0x14DC; // 
                pub const m_angLastMuzzleFlashAngle: usize = 0x14E8; // QAngle
                pub const m_hMuzzleFlashShape: usize = 0x14F4; // CHandle<C_BaseEntity>
                pub const m_iHealthBarRenderMaskIndex: usize = 0x14F8; // int32
                pub const m_flHealthFadeValue: usize = 0x14FC; // float32
                pub const m_flHealthFadeAlpha: usize = 0x1500; // float32
                pub const m_nMyCollisionGroup: usize = 0x1504; // int32
                pub const m_ignoreLadderJumpTime: usize = 0x1508; // float32
                pub const m_ladderSurpressionTimer: usize = 0x1510; // CountdownTimer
                pub const m_lastLadderNormal: usize = 0x1528; // 
                pub const m_lastLadderPos: usize = 0x1534; // 
                pub const m_flDeathCCWeight: usize = 0x1548; // float32
                pub const m_bOldIsScoped: usize = 0x154C; // bool
                pub const m_flPrevRoundEndTime: usize = 0x1550; // float32
                pub const m_flPrevMatchEndTime: usize = 0x1554; // float32
                pub const m_unCurrentEquipmentValue: usize = 0x1558; // uint16
                pub const m_unRoundStartEquipmentValue: usize = 0x155A; // uint16
                pub const m_unFreezetimeEndEquipmentValue: usize = 0x155C; // uint16
                pub const m_vecThirdPersonViewPositionOverride: usize = 0x1560; // 
                pub const m_nHeavyAssaultSuitCooldownRemaining: usize = 0x156C; // int32
                pub const m_ArmorValue: usize = 0x1570; // int32
                pub const m_angEyeAngles: usize = 0x1578; // QAngle
                pub const m_fNextThinkPushAway: usize = 0x1590; // float32
                pub const m_bShouldAutobuyDMWeapons: usize = 0x1594; // bool
                pub const m_bShouldAutobuyNow: usize = 0x1595; // bool
                pub const m_bHud_MiniScoreHidden: usize = 0x1596; // bool
                pub const m_bHud_RadarHidden: usize = 0x1597; // bool
                pub const m_nLastKillerIndex: usize = 0x1598; // CEntityIndex
                pub const m_nLastConcurrentKilled: usize = 0x159C; // int32
                pub const m_nDeathCamMusic: usize = 0x15A0; // int32
                pub const m_iIDEntIndex: usize = 0x15A4; // CEntityIndex
                pub const m_delayTargetIDTimer: usize = 0x15A8; // CountdownTimer
                pub const m_iTargetedWeaponEntIndex: usize = 0x15C0; // CEntityIndex
                pub const m_iOldIDEntIndex: usize = 0x15C4; // CEntityIndex
                pub const m_holdTargetIDTimer: usize = 0x15C8; // CountdownTimer
                pub const m_flCurrentMusicStartTime: usize = 0x15E4; // float32
                pub const m_flMusicRoundStartTime: usize = 0x15E8; // float32
                pub const m_bDeferStartMusicOnWarmup: usize = 0x15EC; // bool
                pub const m_cycleLatch: usize = 0x15F0; // int32
                pub const m_serverIntendedCycle: usize = 0x15F4; // float32
                pub const m_vecPlayerPatchEconIndices: usize = 0x15F8; // uint32[5]
                pub const m_bHideTargetID: usize = 0x1614; // bool
                pub const m_flLastSmokeOverlayAlpha: usize = 0x1618; // float32
                pub const m_flLastSmokeAge: usize = 0x161C; // float32
                pub const m_vLastSmokeOverlayColor: usize = 0x1620; // 
                pub const m_nPlayerSmokedFx: usize = 0x162C; // ParticleIndex_t
                pub const m_nPlayerInfernoBodyFx: usize = 0x1630; // ParticleIndex_t
                pub const m_nPlayerInfernoFootFx: usize = 0x1634; // ParticleIndex_t
                pub const m_flNextMagDropTime: usize = 0x1638; // float32
                pub const m_nLastMagDropAttachmentIndex: usize = 0x163C; // int32
                pub const m_vecBulletHitModels: usize = 0x1640; // CUtlVector<C_BulletHitModel*>
                pub const m_vecPickupModelSlerpers: usize = 0x1658; // CUtlVector<C_PickUpModelSlerper*>
                pub const m_vecLastAliveLocalVelocity: usize = 0x1670; // 
                pub const m_entitySpottedState: usize = 0x1698; // EntitySpottedState_t
                pub const m_nSurvivalTeamNumber: usize = 0x16B0; // int32
                pub const m_bGuardianShouldSprayCustomXMark: usize = 0x16B4; // bool
                pub const m_bHasDeathInfo: usize = 0x16B5; // bool
                pub const m_flDeathInfoTime: usize = 0x16B8; // float32
                pub const m_vecDeathInfoOrigin: usize = 0x16BC; // 
                pub const m_bKilledByHeadshot: usize = 0x16C8; // bool
                pub const m_hOriginalController: usize = 0x16CC; // CHandle<CCSPlayerController>
            }
            // Parent: C_CSPlayerPawnBase
            // Fields count: 1
            pub mod C_CSObserverPawn {
                pub const m_hDetectParentChange: usize = 0x1718; // CEntityHandle
            }
            // Parent: C_CSPlayerPawnBase
            // Fields count: 52
            pub mod C_CSPlayerPawn {
                pub const m_pBulletServices: usize = 0x1718; // CCSPlayer_BulletServices*
                pub const m_pHostageServices: usize = 0x1720; // CCSPlayer_HostageServices*
                pub const m_pBuyServices: usize = 0x1728; // CCSPlayer_BuyServices*
                pub const m_pGlowServices: usize = 0x1730; // CCSPlayer_GlowServices*
                pub const m_pActionTrackingServices: usize = 0x1738; // CCSPlayer_ActionTrackingServices*
                pub const m_flHealthShotBoostExpirationTime: usize = 0x1740; // GameTime_t
                pub const m_flLastFiredWeaponTime: usize = 0x1744; // GameTime_t
                pub const m_bHasFemaleVoice: usize = 0x1748; // bool
                pub const m_flLandseconds: usize = 0x174C; // float32
                pub const m_flOldFallVelocity: usize = 0x1750; // float32
                pub const m_szLastPlaceName: usize = 0x1754; // char[18]
                pub const m_bPrevDefuser: usize = 0x1766; // bool
                pub const m_bPrevHelmet: usize = 0x1767; // bool
                pub const m_nPrevArmorVal: usize = 0x1768; // int32
                pub const m_nPrevGrenadeAmmoCount: usize = 0x176C; // int32
                pub const m_unPreviousWeaponHash: usize = 0x1770; // uint32
                pub const m_unWeaponHash: usize = 0x1774; // uint32
                pub const m_bInBuyZone: usize = 0x1778; // bool
                pub const m_bPreviouslyInBuyZone: usize = 0x1779; // bool
                pub const m_aimPunchAngle: usize = 0x177C; // QAngle
                pub const m_aimPunchAngleVel: usize = 0x1788; // QAngle
                pub const m_aimPunchTickBase: usize = 0x1794; // int32
                pub const m_aimPunchTickFraction: usize = 0x1798; // float32
                pub const m_aimPunchCache: usize = 0x17A0; // CUtlVector<QAngle>
                pub const m_bInLanding: usize = 0x17C0; // bool
                pub const m_flLandingTime: usize = 0x17C4; // float32
                pub const m_bInHostageRescueZone: usize = 0x17C8; // bool
                pub const m_bInBombZone: usize = 0x17C9; // bool
                pub const m_bIsBuyMenuOpen: usize = 0x17CA; // bool
                pub const m_flTimeOfLastInjury: usize = 0x17CC; // GameTime_t
                pub const m_flNextSprayDecalTime: usize = 0x17D0; // GameTime_t
                pub const m_iRetakesOffering: usize = 0x18E8; // int32
                pub const m_iRetakesOfferingCard: usize = 0x18EC; // int32
                pub const m_bRetakesHasDefuseKit: usize = 0x18F0; // bool
                pub const m_bRetakesMVPLastRound: usize = 0x18F1; // bool
                pub const m_iRetakesMVPBoostItem: usize = 0x18F4; // int32
                pub const m_RetakesMVPBoostExtraUtility: usize = 0x18F8; // loadout_slot_t
                pub const m_bNeedToReApplyGloves: usize = 0x1918; // bool
                pub const m_EconGloves: usize = 0x1920; // C_EconItemView
                pub const m_nEconGlovesChanged: usize = 0x1D68; // uint8
                pub const m_bMustSyncRagdollState: usize = 0x1D69; // bool
                pub const m_nRagdollDamageBone: usize = 0x1D6C; // int32
                pub const m_vRagdollDamageForce: usize = 0x1D70; // 
                pub const m_vRagdollDamagePosition: usize = 0x1D7C; // 
                pub const m_szRagdollDamageWeaponName: usize = 0x1D88; // char[64]
                pub const m_bRagdollDamageHeadshot: usize = 0x1DC8; // bool
                pub const m_vRagdollServerOrigin: usize = 0x1DCC; // 
                pub const m_bLastHeadBoneTransformIsValid: usize = 0x23E0; // bool
                pub const m_lastLandTime: usize = 0x23E4; // GameTime_t
                pub const m_bOnGroundLastTick: usize = 0x23E8; // bool
                pub const m_qDeathEyeAngles: usize = 0x2404; // QAngle
                pub const m_bSkipOneHeadConstraintUpdate: usize = 0x2410; // bool
            }
            // Parent: C_BaseCombatCharacter
            // Fields count: 23
            pub mod C_Hostage {
                pub const m_entitySpottedState: usize = 0x1100; // EntitySpottedState_t
                pub const m_leader: usize = 0x1118; // CHandle<C_BaseEntity>
                pub const m_reuseTimer: usize = 0x1120; // CountdownTimer
                pub const m_vel: usize = 0x1138; // 
                pub const m_isRescued: usize = 0x1144; // bool
                pub const m_jumpedThisFrame: usize = 0x1145; // bool
                pub const m_nHostageState: usize = 0x1148; // int32
                pub const m_bHandsHaveBeenCut: usize = 0x114C; // bool
                pub const m_hHostageGrabber: usize = 0x1150; // CHandle<C_CSPlayerPawn>
                pub const m_fLastGrabTime: usize = 0x1154; // GameTime_t
                pub const m_vecGrabbedPos: usize = 0x1158; // 
                pub const m_flRescueStartTime: usize = 0x1164; // GameTime_t
                pub const m_flGrabSuccessTime: usize = 0x1168; // GameTime_t
                pub const m_flDropStartTime: usize = 0x116C; // GameTime_t
                pub const m_flDeadOrRescuedTime: usize = 0x1170; // GameTime_t
                pub const m_blinkTimer: usize = 0x1178; // CountdownTimer
                pub const m_lookAt: usize = 0x1190; // 
                pub const m_lookAroundTimer: usize = 0x11A0; // CountdownTimer
                pub const m_isInit: usize = 0x11B8; // bool
                pub const m_eyeAttachment: usize = 0x11B9; // AttachmentHandle_t
                pub const m_chestAttachment: usize = 0x11BA; // AttachmentHandle_t
                pub const m_pPredictionOwner: usize = 0x11C0; // CBasePlayerController*
                pub const m_fNewestAlphaThinkTime: usize = 0x11C8; // GameTime_t
            }
            // Parent: C_BaseCombatCharacter
            // Fields count: 0
            pub mod C_NetTestBaseCombatCharacter {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_AK47 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponAug {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponAWP {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponBizon {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponFamas {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponFiveSeven {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponG3SG1 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponGalilAR {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponGlock {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponHKP2000 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponUSPSilencer {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponM4A1 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponM4A1Silencer {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponMAC10 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponMag7 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponMP5SD {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponMP7 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponMP9 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponNegev {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponP250 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponCZ75a {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponP90 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponSCAR20 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponSG556 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponSSG08 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponTec9 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponUMP45 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponM249 {
            }
            // Parent: C_CSWeaponBaseGun
            // Fields count: 0
            pub mod C_WeaponRevolver {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_MolotovGrenade {
            }
            // Parent: C_MolotovGrenade
            // Fields count: 0
            pub mod C_IncendiaryGrenade {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_DecoyGrenade {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_Flashbang {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_HEGrenade {
            }
            // Parent: C_BaseCSGrenade
            // Fields count: 0
            pub mod C_SmokeGrenade {
            }
            // Parent: C_CSPlayerPawn
            // Fields count: 3
            pub mod C_CSGO_PreviewPlayer {
                pub const m_animgraph: usize = 0x2418; // CUtlString
                pub const m_animgraphCharacterModeString: usize = 0x2420; // CGlobalSymbol
                pub const m_flInitialModelScale: usize = 0x2428; // float32
            }
            // Parent: C_CSGO_PreviewPlayer
            // Fields count: 0
            pub mod C_CSGO_PreviewPlayerAlias_csgo_player_previewmodel {
            }
            // Parent: C_CSGO_PreviewPlayer
            // Fields count: 0
            pub mod C_CSGO_TeamPreviewModel {
            }
        }
        // Module: engine2.dll
        // Classes count: 48
        // Enums count: 4
        pub mod engine2 {
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SpawnDebugOverrideState_t {
                SPAWN_DEBUG_OVERRIDE_NONE = 0x0,
                SPAWN_DEBUG_OVERRIDE_FORCE_ENABLED = 0x1,
                SPAWN_DEBUG_OVERRIDE_FORCE_DISABLED = 0x2
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum SpawnDebugRestrictionOverrideState_t {
                SPAWN_DEBUG_RESTRICT_NONE = 0x0,
                SPAWN_DEBUG_RESTRICT_IGNORE_MANAGER_DISTANCE_REQS = 0x1,
                SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_DISTANCE_LOS_REQS = 0x2,
                SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_COOLDOWN_LIMITS = 0x4,
                SPAWN_DEBUG_RESTRICT_IGNORE_TARGET_COOLDOWN_LIMITS = 0x8
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum EntityDormancyType_t {
                ENTITY_NOT_DORMANT = 0x0,
                ENTITY_DORMANT = 0x1,
                ENTITY_SUSPENDED = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum EntityIOTargetType_t {
                ENTITY_IO_TARGET_INVALID = 0xFFFFFFFFFFFFFFFF,
                ENTITY_IO_TARGET_ENTITYNAME = 0x2,
                ENTITY_IO_TARGET_EHANDLE = 0x6,
                ENTITY_IO_TARGET_ENTITYNAME_OR_CLASSNAME = 0x7
            }
            // Parent: None
            // Fields count: 4
            pub mod EngineLoopState_t {
                pub const m_nPlatWindowWidth: usize = 0x18; // int32
                pub const m_nPlatWindowHeight: usize = 0x1C; // int32
                pub const m_nRenderWidth: usize = 0x20; // int32
                pub const m_nRenderHeight: usize = 0x24; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod EventModInitialized_t {
            }
            // Parent: None
            // Fields count: 1
            pub mod EventFrameBoundary_t {
                pub const m_flFrameTime: usize = 0x0; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod EventProfileStorageAvailable_t {
                pub const m_nSplitScreenSlot: usize = 0x0; // CSplitScreenSlot
            }
            // Parent: None
            // Fields count: 0
            pub mod EventSplitScreenStateChanged_t {
            }
            // Parent: None
            // Fields count: 8
            pub mod EventSetTime_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_nClientOutputFrames: usize = 0x28; // int32
                pub const m_flRealTime: usize = 0x30; // float64
                pub const m_flRenderTime: usize = 0x38; // float64
                pub const m_flRenderFrameTime: usize = 0x40; // float64
                pub const m_flRenderFrameTimeUnbounded: usize = 0x48; // float64
                pub const m_flRenderFrameTimeUnscaled: usize = 0x50; // float64
                pub const m_flTickRemainder: usize = 0x58; // float64
            }
            // Parent: None
            // Fields count: 2
            pub mod EventClientPollInput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRealTime: usize = 0x28; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod EventClientProcessInput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRealTime: usize = 0x28; // float32
                pub const m_flTickInterval: usize = 0x2C; // float32
                pub const m_flTickStartTime: usize = 0x30; // float64
            }
            // Parent: None
            // Fields count: 3
            pub mod EventClientProcessGameInput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRealTime: usize = 0x28; // float32
                pub const m_flFrameTime: usize = 0x2C; // float32
            }
            // Parent: None
            // Fields count: 6
            pub mod EventClientPreOutput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRenderTime: usize = 0x28; // float64
                pub const m_flRenderFrameTime: usize = 0x30; // float64
                pub const m_flRenderFrameTimeUnbounded: usize = 0x38; // float64
                pub const m_flRealTime: usize = 0x40; // float32
                pub const m_bRenderOnly: usize = 0x44; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod EventClientSceneSystemThreadStateChange_t {
                pub const m_bThreadsActive: usize = 0x0; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod EventClientOutput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRenderTime: usize = 0x28; // float32
                pub const m_flRealTime: usize = 0x2C; // float32
                pub const m_flRenderFrameTimeUnbounded: usize = 0x30; // float32
                pub const m_bRenderOnly: usize = 0x34; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod EventClientPostOutput_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRenderTime: usize = 0x28; // float64
                pub const m_flRenderFrameTime: usize = 0x30; // float32
                pub const m_flRenderFrameTimeUnbounded: usize = 0x34; // float32
                pub const m_bRenderOnly: usize = 0x38; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod EventClientFrameSimulate_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRealTime: usize = 0x28; // float32
                pub const m_flFrameTime: usize = 0x2C; // float32
                pub const m_flWhenScheduleSendTickPacket: usize = 0x30; // float64
            }
            // Parent: None
            // Fields count: 3
            pub mod EventSimpleLoopFrameUpdate_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_flRealTime: usize = 0x28; // float32
                pub const m_flFrameTime: usize = 0x2C; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod EventSimulate_t {
                pub const m_LoopState: usize = 0x0; // EngineLoopState_t
                pub const m_bFirstTick: usize = 0x28; // bool
                pub const m_bLastTick: usize = 0x29; // bool
            }
            // Parent: EventSimulate_t
            // Fields count: 4
            pub mod EventAdvanceTick_t {
                pub const m_nCurrentTick: usize = 0x30; // int32
                pub const m_nCurrentTickThisFrame: usize = 0x34; // int32
                pub const m_nTotalTicksThisFrame: usize = 0x38; // int32
                pub const m_nTotalTicks: usize = 0x3C; // int32
            }
            // Parent: EventSimulate_t
            // Fields count: 4
            pub mod EventPostAdvanceTick_t {
                pub const m_nCurrentTick: usize = 0x30; // int32
                pub const m_nCurrentTickThisFrame: usize = 0x34; // int32
                pub const m_nTotalTicksThisFrame: usize = 0x38; // int32
                pub const m_nTotalTicks: usize = 0x3C; // int32
            }
            // Parent: EventAdvanceTick_t
            // Fields count: 0
            pub mod EventServerAdvanceTick_t {
            }
            // Parent: EventPostAdvanceTick_t
            // Fields count: 0
            pub mod EventServerPostAdvanceTick_t {
            }
            // Parent: EventAdvanceTick_t
            // Fields count: 0
            pub mod EventClientAdvanceTick_t {
            }
            // Parent: EventPostAdvanceTick_t
            // Fields count: 0
            pub mod EventClientPostAdvanceTick_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod EventClientPredictionPostNetupdate_t {
            }
            // Parent: None
            // Fields count: 1
            pub mod EventClientPollNetworking_t {
                pub const m_nTickCount: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod EventClientProcessNetworking_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventClientPreSimulate_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventClientSimulate_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventServerPollNetworking_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventServerProcessNetworking_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventServerSimulate_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventServerPostSimulate_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventClientPostSimulate_t {
            }
            // Parent: EventSimulate_t
            // Fields count: 0
            pub mod EventClientPauseSimulate_t {
            }
            // Parent: None
            // Fields count: 1
            pub mod EventPostDataUpdate_t {
                pub const m_nCount: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod EventPreDataUpdate_t {
                pub const m_nCount: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod EventAppShutdown_t {
                pub const m_nDummy0: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod CNetworkVarChainer {
                pub const m_PathIndex: usize = 0x20; // ChangeAccessorFieldPathIndex_t
            }
            // Parent: None
            // Fields count: 0
            pub mod CVariantDefaultAllocator {
            }
            // Parent: None
            // Fields count: 0
            pub mod EntOutput_t {
            }
            // Parent: None
            // Fields count: 7
            pub mod EntComponentInfo_t {
                pub const m_pName: usize = 0x0; // char*
                pub const m_pCPPClassname: usize = 0x8; // char*
                pub const m_pNetworkDataReferencedDescription: usize = 0x10; // char*
                pub const m_pNetworkDataReferencedPtrPropDescription: usize = 0x18; // char*
                pub const m_nRuntimeIndex: usize = 0x20; // int32
                pub const m_nFlags: usize = 0x24; // uint32
                pub const m_pBaseClassComponentHelper: usize = 0x60; // CEntityComponentHelper*
            }
            // Parent: None
            // Fields count: 0
            pub mod CEntityComponent {
            }
            // Parent: None
            // Fields count: 0
            pub mod EntInput_t {
            }
            // Parent: None
            // Fields count: 4
            pub mod CEntityComponentHelper {
                pub const m_flags: usize = 0x8; // uint32
                pub const m_pInfo: usize = 0x10; // EntComponentInfo_t*
                pub const m_nPriority: usize = 0x18; // int32
                pub const m_pNext: usize = 0x20; // CEntityComponentHelper*
            }
            // Parent: None
            // Fields count: 11
            pub mod CEntityIdentity {
                pub const m_nameStringableIndex: usize = 0x14; // int32
                pub const m_name: usize = 0x18; // CUtlSymbolLarge
                pub const m_designerName: usize = 0x20; // CUtlSymbolLarge
                pub const m_flags: usize = 0x30; // uint32
                pub const m_worldGroupId: usize = 0x38; // WorldGroupId_t
                pub const m_fDataObjectTypes: usize = 0x3C; // uint32
                pub const m_PathIndex: usize = 0x40; // ChangeAccessorFieldPathIndex_t
                pub const m_pPrev: usize = 0x58; // CEntityIdentity*
                pub const m_pNext: usize = 0x60; // CEntityIdentity*
                pub const m_pPrevByClass: usize = 0x68; // CEntityIdentity*
                pub const m_pNextByClass: usize = 0x70; // CEntityIdentity*
            }
            // Parent: None
            // Fields count: 0
            pub mod CEmptyEntityInstance {
            }
            // Parent: None
            // Fields count: 4
            pub mod CEntityInstance {
                pub const m_iszPrivateVScripts: usize = 0x8; // CUtlSymbolLarge
                pub const m_pEntity: usize = 0x10; // CEntityIdentity*
                pub const m_CScriptComponent: usize = 0x28; // CScriptComponent*
                pub const m_bVisibleinPVS: usize = 0x30; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod CEntityIOOutput {
                pub const m_Value: usize = 0x18; // CVariantBase<CVariantDefaultAllocator>
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CScriptComponent {
                pub const m_scriptClassName: usize = 0x30; // CUtlSymbolLarge
            }
        }
        // Module: host.dll
        // Classes count: 2
        // Enums count: 0
        pub mod host {
            // Parent: None
            // Fields count: 1
            pub mod CAnimScriptBase {
                pub const m_bIsValid: usize = 0x8; // bool
            }
            // Parent: CAnimScriptBase
            // Fields count: 1
            pub mod EmptyTestScript {
                pub const m_hTest: usize = 0x10; // CAnimScriptParam<float32>
            }
        }
        // Module: materialsystem2.dll
        // Classes count: 13
        // Enums count: 5
        pub mod materialsystem2 {
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum HorizJustification_e {
                HORIZ_JUSTIFICATION_LEFT = 0x0,
                HORIZ_JUSTIFICATION_CENTER = 0x1,
                HORIZ_JUSTIFICATION_RIGHT = 0x2,
                HORIZ_JUSTIFICATION_NONE = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum VertJustification_e {
                VERT_JUSTIFICATION_TOP = 0x0,
                VERT_JUSTIFICATION_CENTER = 0x1,
                VERT_JUSTIFICATION_BOTTOM = 0x2,
                VERT_JUSTIFICATION_NONE = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum LayoutPositionType_e {
                LAYOUTPOSITIONTYPE_VIEWPORT_RELATIVE = 0x0,
                LAYOUTPOSITIONTYPE_FRACTIONAL = 0x1,
                LAYOUTPOSITIONTYPE_NONE = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum BloomBlendMode_t {
                BLOOM_BLEND_ADD = 0x0,
                BLOOM_BLEND_SCREEN = 0x1,
                BLOOM_BLEND_BLUR = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ViewFadeMode_t {
                VIEW_FADE_CONSTANT_COLOR = 0x0,
                VIEW_FADE_MODULATE = 0x1,
                VIEW_FADE_MOD2X = 0x2
            }
            // Parent: None
            // Fields count: 1
            pub mod MaterialParam_t {
                pub const m_name: usize = 0x0; // CUtlString
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamInt_t {
                pub const m_nValue: usize = 0x8; // int32
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamFloat_t {
                pub const m_flValue: usize = 0x8; // float32
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamVector_t {
                pub const m_value: usize = 0x8; // Vector4D
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamTexture_t {
                pub const m_pValue: usize = 0x8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamString_t {
                pub const m_value: usize = 0x8; // CUtlString
            }
            // Parent: MaterialParam_t
            // Fields count: 1
            pub mod MaterialParamBuffer_t {
                pub const m_value: usize = 0x8; // CUtlBinaryBlock
            }
            // Parent: None
            // Fields count: 14
            pub mod MaterialResourceData_t {
                pub const m_materialName: usize = 0x0; // CUtlString
                pub const m_shaderName: usize = 0x8; // CUtlString
                pub const m_intParams: usize = 0x10; // CUtlVector<MaterialParamInt_t>
                pub const m_floatParams: usize = 0x28; // CUtlVector<MaterialParamFloat_t>
                pub const m_vectorParams: usize = 0x40; // CUtlVector<MaterialParamVector_t>
                pub const m_textureParams: usize = 0x58; // CUtlVector<MaterialParamTexture_t>
                pub const m_dynamicParams: usize = 0x70; // CUtlVector<MaterialParamBuffer_t>
                pub const m_dynamicTextureParams: usize = 0x88; // CUtlVector<MaterialParamBuffer_t>
                pub const m_intAttributes: usize = 0xA0; // CUtlVector<MaterialParamInt_t>
                pub const m_floatAttributes: usize = 0xB8; // CUtlVector<MaterialParamFloat_t>
                pub const m_vectorAttributes: usize = 0xD0; // CUtlVector<MaterialParamVector_t>
                pub const m_textureAttributes: usize = 0xE8; // CUtlVector<MaterialParamTexture_t>
                pub const m_stringAttributes: usize = 0x100; // CUtlVector<MaterialParamString_t>
                pub const m_renderAttributesUsed: usize = 0x118; // CUtlVector<CUtlString>
            }
            // Parent: None
            // Fields count: 15
            pub mod PostProcessingTonemapParameters_t {
                pub const m_flExposureBias: usize = 0x0; // float32
                pub const m_flShoulderStrength: usize = 0x4; // float32
                pub const m_flLinearStrength: usize = 0x8; // float32
                pub const m_flLinearAngle: usize = 0xC; // float32
                pub const m_flToeStrength: usize = 0x10; // float32
                pub const m_flToeNum: usize = 0x14; // float32
                pub const m_flToeDenom: usize = 0x18; // float32
                pub const m_flWhitePoint: usize = 0x1C; // float32
                pub const m_flLuminanceSource: usize = 0x20; // float32
                pub const m_flExposureBiasShadows: usize = 0x24; // float32
                pub const m_flExposureBiasHighlights: usize = 0x28; // float32
                pub const m_flMinShadowLum: usize = 0x2C; // float32
                pub const m_flMaxShadowLum: usize = 0x30; // float32
                pub const m_flMinHighlightLum: usize = 0x34; // float32
                pub const m_flMaxHighlightLum: usize = 0x38; // float32
            }
            // Parent: None
            // Fields count: 10
            pub mod PostProcessingBloomParameters_t {
                pub const m_blendMode: usize = 0x0; // BloomBlendMode_t
                pub const m_flBloomStrength: usize = 0x4; // float32
                pub const m_flScreenBloomStrength: usize = 0x8; // float32
                pub const m_flBlurBloomStrength: usize = 0xC; // float32
                pub const m_flBloomThreshold: usize = 0x10; // float32
                pub const m_flBloomThresholdWidth: usize = 0x14; // float32
                pub const m_flSkyboxBloomStrength: usize = 0x18; // float32
                pub const m_flBloomStartValue: usize = 0x1C; // float32
                pub const m_flBlurWeight: usize = 0x20; // float32[5]
                pub const m_vBlurTint: usize = 0x34; // Vector[5]
            }
            // Parent: None
            // Fields count: 6
            pub mod PostProcessingVignetteParameters_t {
                pub const m_flVignetteStrength: usize = 0x0; // float32
                pub const m_vCenter: usize = 0x4; // Vector2D
                pub const m_flRadius: usize = 0xC; // float32
                pub const m_flRoundness: usize = 0x10; // float32
                pub const m_flFeather: usize = 0x14; // float32
                pub const m_vColorTint: usize = 0x18; // 
            }
            // Parent: None
            // Fields count: 5
            pub mod PostProcessingLocalContrastParameters_t {
                pub const m_flLocalContrastStrength: usize = 0x0; // float32
                pub const m_flLocalContrastEdgeStrength: usize = 0x4; // float32
                pub const m_flLocalContrastVignetteStart: usize = 0x8; // float32
                pub const m_flLocalContrastVignetteEnd: usize = 0xC; // float32
                pub const m_flLocalContrastVignetteBlur: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 11
            pub mod PostProcessingResource_t {
                pub const m_bHasTonemapParams: usize = 0x0; // bool
                pub const m_toneMapParams: usize = 0x4; // PostProcessingTonemapParameters_t
                pub const m_bHasBloomParams: usize = 0x40; // bool
                pub const m_bloomParams: usize = 0x44; // PostProcessingBloomParameters_t
                pub const m_bHasVignetteParams: usize = 0xB4; // bool
                pub const m_vignetteParams: usize = 0xB8; // PostProcessingVignetteParameters_t
                pub const m_bHasLocalContrastParams: usize = 0xDC; // bool
                pub const m_localConstrastParams: usize = 0xE0; // PostProcessingLocalContrastParameters_t
                pub const m_nColorCorrectionVolumeDim: usize = 0xF4; // int32
                pub const m_colorCorrectionVolumeData: usize = 0xF8; // CUtlBinaryBlock
                pub const m_bHasColorCorrection: usize = 0x110; // bool
            }
        }
        // Module: meshsystem.dll
        // Classes count: 0
        // Enums count: 0
        pub mod meshsystem {
        }
        // Module: networksystem.dll
        // Classes count: 1
        // Enums count: 0
        pub mod networksystem {
            // Parent: None
            // Fields count: 1
            pub mod ChangeAccessorFieldPathIndex_t {
                pub const m_Value: usize = 0x0; // int16
            }
        }
        // Module: panorama.dll
        // Classes count: 0
        // Enums count: 2
        pub mod panorama {
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum ELayoutNodeType {
                ROOT = 0x0,
                STYLES = 0x1,
                SCRIPT_BODY = 0x2,
                SCRIPTS = 0x3,
                SNIPPETS = 0x4,
                INCLUDE = 0x5,
                SNIPPET = 0x6,
                PANEL = 0x7,
                PANEL_ATTRIBUTE = 0x8,
                PANEL_ATTRIBUTE_VALUE = 0x9,
                REFERENCE_CONTENT = 0xA,
                REFERENCE_COMPILED = 0xB,
                REFERENCE_PASSTHROUGH = 0xC
            }
            // Alignment: 4
            // Members count: 15
            #[repr(u32)]
            pub enum EStyleNodeType {
                ROOT = 0x0,
                EXPRESSION = 0x1,
                PROPERTY = 0x2,
                DEFINE = 0x3,
                IMPORT = 0x4,
                KEYFRAMES = 0x5,
                KEYFRAME_SELECTOR = 0x6,
                STYLE_SELECTOR = 0x7,
                WHITESPACE = 0x8,
                EXPRESSION_TEXT = 0x9,
                EXPRESSION_URL = 0xA,
                EXPRESSION_CONCAT = 0xB,
                REFERENCE_CONTENT = 0xC,
                REFERENCE_COMPILED = 0xD,
                REFERENCE_PASSTHROUGH = 0xE
            }
        }
        // Module: particles.dll
        // Classes count: 441
        // Enums count: 71
        pub mod particles {
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ParticleControlPointAxis_t {
                PARTICLE_CP_AXIS_X = 0x0,
                PARTICLE_CP_AXIS_Y = 0x1,
                PARTICLE_CP_AXIS_Z = 0x2,
                PARTICLE_CP_AXIS_NEGATIVE_X = 0x3,
                PARTICLE_CP_AXIS_NEGATIVE_Y = 0x4,
                PARTICLE_CP_AXIS_NEGATIVE_Z = 0x5
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ParticleImpulseType_t {
                IMPULSE_TYPE_NONE = 0x0,
                IMPULSE_TYPE_GENERIC = 0x1,
                IMPULSE_TYPE_ROPE = 0x2,
                IMPULSE_TYPE_EXPLOSION = 0x4,
                IMPULSE_TYPE_EXPLOSION_UNDERWATER = 0x8,
                IMPULSE_TYPE_PARTICLE_SYSTEM = 0x10
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleFalloffFunction_t {
                PARTICLE_FALLOFF_CONSTANT = 0x0,
                PARTICLE_FALLOFF_LINEAR = 0x1,
                PARTICLE_FALLOFF_EXPONENTIAL = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum AnimationType_t {
                ANIMATION_TYPE_FIXED_RATE = 0x0,
                ANIMATION_TYPE_FIT_LIFETIME = 0x1,
                ANIMATION_TYPE_MANUAL_FRAMES = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ClosestPointTestType_t {
                PARTICLE_CLOSEST_TYPE_BOX = 0x0,
                PARTICLE_CLOSEST_TYPE_CAPSULE = 0x1,
                PARTICLE_CLOSEST_TYPE_HYBRID = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum InheritableBoolType_t {
                INHERITABLE_BOOL_INHERIT = 0x0,
                INHERITABLE_BOOL_FALSE = 0x1,
                INHERITABLE_BOOL_TRUE = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleHitboxBiasType_t {
                PARTICLE_HITBOX_BIAS_ENTITY = 0x0,
                PARTICLE_HITBOX_BIAS_HITBOX = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleAttrBoxFlags_t {
                PARTICLE_ATTR_BOX_FLAGS_NONE = 0x0,
                PARTICLE_ATTR_BOX_FLAGS_WATER = 0x1
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum PFuncVisualizationType_t {
                PFUNC_VISUALIZATION_SPHERE_WIREFRAME = 0x0,
                PFUNC_VISUALIZATION_SPHERE_SOLID = 0x1,
                PFUNC_VISUALIZATION_BOX = 0x2,
                PFUNC_VISUALIZATION_RING = 0x3,
                PFUNC_VISUALIZATION_PLANE = 0x4,
                PFUNC_VISUALIZATION_LINE = 0x5,
                PFUNC_VISUALIZATION_CYLINDER = 0x6
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PetGroundType_t {
                PET_GROUND_NONE = 0x0,
                PET_GROUND_GRID = 0x1,
                PET_GROUND_PLANE = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum SpriteCardShaderType_t {
                SPRITECARD_SHADER_BASE = 0x0,
                SPRITECARD_SHADER_CUSTOM = 0x1
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleTopology_t {
                PARTICLE_TOPOLOGY_POINTS = 0x0,
                PARTICLE_TOPOLOGY_LINES = 0x1,
                PARTICLE_TOPOLOGY_TRIS = 0x2,
                PARTICLE_TOPOLOGY_QUADS = 0x3,
                PARTICLE_TOPOLOGY_CUBES = 0x4
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleDetailLevel_t {
                PARTICLEDETAIL_LOW = 0x0,
                PARTICLEDETAIL_MEDIUM = 0x1,
                PARTICLEDETAIL_HIGH = 0x2,
                PARTICLEDETAIL_ULTRA = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleTraceSet_t {
                PARTICLE_TRACE_SET_ALL = 0x0,
                PARTICLE_TRACE_SET_STATIC = 0x1,
                PARTICLE_TRACE_SET_STATIC_AND_KEYFRAMED = 0x2,
                PARTICLE_TRACE_SET_DYNAMIC = 0x3
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleCollisionMode_t {
                COLLISION_MODE_PER_PARTICLE_TRACE = 0x3,
                COLLISION_MODE_USE_NEAREST_TRACE = 0x2,
                COLLISION_MODE_PER_FRAME_PLANESET = 0x1,
                COLLISION_MODE_INITIAL_TRACE_DOWN = 0x0,
                COLLISION_MODE_DISABLED = 0xFFFFFFFFFFFFFFFF
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleColorBlendMode_t {
                PARTICLEBLEND_DEFAULT = 0x0,
                PARTICLEBLEND_OVERLAY = 0x1,
                PARTICLEBLEND_DARKEN = 0x2,
                PARTICLEBLEND_LIGHTEN = 0x3,
                PARTICLEBLEND_MULTIPLY = 0x4
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum Detail2Combo_t {
                DETAIL_2_COMBO_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
                DETAIL_2_COMBO_OFF = 0x0,
                DETAIL_2_COMBO_ADD = 0x1,
                DETAIL_2_COMBO_ADD_SELF_ILLUM = 0x2,
                DETAIL_2_COMBO_MOD2X = 0x3,
                DETAIL_2_COMBO_MUL = 0x4,
                DETAIL_2_COMBO_CROSSFADE = 0x5
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum DetailCombo_t {
                DETAIL_COMBO_OFF = 0x0,
                DETAIL_COMBO_ADD = 0x1,
                DETAIL_COMBO_ADD_SELF_ILLUM = 0x2,
                DETAIL_COMBO_MOD2X = 0x3
            }
            // Alignment: 4
            // Members count: 9
            #[repr(u32)]
            pub enum ScalarExpressionType_t {
                SCALAR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
                SCALAR_EXPRESSION_ADD = 0x0,
                SCALAR_EXPRESSION_SUBTRACT = 0x1,
                SCALAR_EXPRESSION_MUL = 0x2,
                SCALAR_EXPRESSION_DIVIDE = 0x3,
                SCALAR_EXPRESSION_INPUT_1 = 0x4,
                SCALAR_EXPRESSION_MIN = 0x5,
                SCALAR_EXPRESSION_MAX = 0x6,
                SCALAR_EXPRESSION_MOD = 0x7
            }
            // Alignment: 4
            // Members count: 9
            #[repr(u32)]
            pub enum VectorExpressionType_t {
                VECTOR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
                VECTOR_EXPRESSION_ADD = 0x0,
                VECTOR_EXPRESSION_SUBTRACT = 0x1,
                VECTOR_EXPRESSION_MUL = 0x2,
                VECTOR_EXPRESSION_DIVIDE = 0x3,
                VECTOR_EXPRESSION_INPUT_1 = 0x4,
                VECTOR_EXPRESSION_MIN = 0x5,
                VECTOR_EXPRESSION_MAX = 0x6,
                VECTOR_EXPRESSION_CROSSPRODUCT = 0x7
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum VectorFloatExpressionType_t {
                VECTOR_FLOAT_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
                VECTOR_FLOAT_EXPRESSION_DOTPRODUCT = 0x0,
                VECTOR_FLOAT_EXPRESSION_DISTANCE = 0x1,
                VECTOR_FLOAT_EXPRESSION_DISTANCESQR = 0x2,
                VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTH = 0x3,
                VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTHSQR = 0x4,
                VECTOR_FLOAT_EXPRESSION_INPUT1_NOISE = 0x5
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum MissingParentInheritBehavior_t {
                MISSING_PARENT_DO_NOTHING = 0xFFFFFFFFFFFFFFFF,
                MISSING_PARENT_KILL = 0x0,
                MISSING_PARENT_FIND_NEW = 0x1,
                MISSING_PARENT_SAME_INDEX = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum HitboxLerpType_t {
                HITBOX_LERP_LIFETIME = 0x0,
                HITBOX_LERP_CONSTANT = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleSelection_t {
                PARTICLE_SELECTION_FIRST = 0x0,
                PARTICLE_SELECTION_LAST = 0x1,
                PARTICLE_SELECTION_NUMBER = 0x2
            }
            // Alignment: 4
            // Members count: 12
            #[repr(u32)]
            pub enum ParticlePinDistance_t {
                PARTICLE_PIN_DISTANCE_NONE = 0xFFFFFFFFFFFFFFFF,
                PARTICLE_PIN_DISTANCE_NEIGHBOR = 0x0,
                PARTICLE_PIN_DISTANCE_FARTHEST = 0x1,
                PARTICLE_PIN_DISTANCE_FIRST = 0x2,
                PARTICLE_PIN_DISTANCE_LAST = 0x3,
                PARTICLE_PIN_DISTANCE_CENTER = 0x5,
                PARTICLE_PIN_DISTANCE_CP = 0x6,
                PARTICLE_PIN_DISTANCE_CP_PAIR_EITHER = 0x7,
                PARTICLE_PIN_DISTANCE_CP_PAIR_BOTH = 0x8,
                PARTICLE_PIN_SPEED = 0x9,
                PARTICLE_PIN_COLLECTION_AGE = 0xA,
                PARTICLE_PIN_FLOAT_VALUE = 0xB
            }
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum ParticleColorBlendType_t {
                PARTICLE_COLOR_BLEND_MULTIPLY = 0x0,
                PARTICLE_COLOR_BLEND_MULTIPLY2X = 0x1,
                PARTICLE_COLOR_BLEND_DIVIDE = 0x2,
                PARTICLE_COLOR_BLEND_ADD = 0x3,
                PARTICLE_COLOR_BLEND_SUBTRACT = 0x4,
                PARTICLE_COLOR_BLEND_MOD2X = 0x5,
                PARTICLE_COLOR_BLEND_SCREEN = 0x6,
                PARTICLE_COLOR_BLEND_MAX = 0x7,
                PARTICLE_COLOR_BLEND_MIN = 0x8,
                PARTICLE_COLOR_BLEND_REPLACE = 0x9,
                PARTICLE_COLOR_BLEND_AVERAGE = 0xA,
                PARTICLE_COLOR_BLEND_NEGATE = 0xB,
                PARTICLE_COLOR_BLEND_LUMINANCE = 0xC
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ParticleSetMethod_t {
                PARTICLE_SET_REPLACE_VALUE = 0x0,
                PARTICLE_SET_SCALE_INITIAL_VALUE = 0x1,
                PARTICLE_SET_ADD_TO_INITIAL_VALUE = 0x2,
                PARTICLE_SET_RAMP_CURRENT_VALUE = 0x3,
                PARTICLE_SET_SCALE_CURRENT_VALUE = 0x4,
                PARTICLE_SET_ADD_TO_CURRENT_VALUE = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleDirectionNoiseType_t {
                PARTICLE_DIR_NOISE_PERLIN = 0x0,
                PARTICLE_DIR_NOISE_CURL = 0x1,
                PARTICLE_DIR_NOISE_WORLEY_BASIC = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleRotationLockType_t {
                PARTICLE_ROTATION_LOCK_NONE = 0x0,
                PARTICLE_ROTATION_LOCK_ROTATIONS = 0x1,
                PARTICLE_ROTATION_LOCK_NORMAL = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleEndcapMode_t {
                PARTICLE_ENDCAP_ALWAYS_ON = 0xFFFFFFFFFFFFFFFF,
                PARTICLE_ENDCAP_ENDCAP_OFF = 0x0,
                PARTICLE_ENDCAP_ENDCAP_ON = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleLightingQuality_t {
                PARTICLE_LIGHTING_PER_PARTICLE = 0x0,
                PARTICLE_LIGHTING_PER_VERTEX = 0x1,
                PARTICLE_LIGHTING_PER_PIXEL = 0xFFFFFFFFFFFFFFFF
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum StandardLightingAttenuationStyle_t {
                LIGHT_STYLE_OLD = 0x0,
                LIGHT_STYLE_NEW = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleTraceMissBehavior_t {
                PARTICLE_TRACE_MISS_BEHAVIOR_NONE = 0x0,
                PARTICLE_TRACE_MISS_BEHAVIOR_KILL = 0x1,
                PARTICLE_TRACE_MISS_BEHAVIOR_TRACE_END = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleOrientationSetMode_t {
                PARTICLE_ORIENTATION_SET_FROM_VELOCITY = 0x0,
                PARTICLE_ORIENTATION_SET_FROM_ROTATIONS = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleLightnintBranchBehavior_t {
                PARTICLE_LIGHTNING_BRANCH_CURRENT_DIR = 0x0,
                PARTICLE_LIGHTNING_BRANCH_ENDPOINT_DIR = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleLightFogLightingMode_t {
                PARTICLE_LIGHT_FOG_LIGHTING_MODE_NONE = 0x0,
                PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC = 0x2,
                PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC_NOSHADOWS = 0x4
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleSequenceCropOverride_t {
                PARTICLE_SEQUENCE_CROP_OVERRIDE_DEFAULT = 0xFFFFFFFFFFFFFFFF,
                PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_OFF = 0x0,
                PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_ON = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleParentSetMode_t {
                PARTICLE_SET_PARENT_NO = 0x0,
                PARTICLE_SET_PARENT_IMMEDIATE = 0x1,
                PARTICLE_SET_PARENT_ROOT = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum MaterialProxyType_t {
                MATERIAL_PROXY_STATUS_EFFECT = 0x0,
                MATERIAL_PROXY_TINT = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum BBoxVolumeType_t {
                BBOX_VOLUME = 0x0,
                BBOX_DIMENSIONS = 0x1,
                BBOX_MINS_MAXS = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleHitboxDataSelection_t {
                PARTICLE_HITBOX_AVERAGE_SPEED = 0x0,
                PARTICLE_HITBOX_COUNT = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum SnapshotIndexType_t {
                SNAPSHOT_INDEX_INCREMENT = 0x0,
                SNAPSHOT_INDEX_DIRECT = 0x1
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ParticleOrientationChoiceList_t {
                PARTICLE_ORIENTATION_SCREEN_ALIGNED = 0x0,
                PARTICLE_ORIENTATION_SCREEN_Z_ALIGNED = 0x1,
                PARTICLE_ORIENTATION_WORLD_Z_ALIGNED = 0x2,
                PARTICLE_ORIENTATION_ALIGN_TO_PARTICLE_NORMAL = 0x3,
                PARTICLE_ORIENTATION_SCREENALIGN_TO_PARTICLE_NORMAL = 0x4,
                PARTICLE_ORIENTATION_FULL_3AXIS_ROTATION = 0x5
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum ParticleOutputBlendMode_t {
                PARTICLE_OUTPUT_BLEND_MODE_ALPHA = 0x0,
                PARTICLE_OUTPUT_BLEND_MODE_ADD = 0x1,
                PARTICLE_OUTPUT_BLEND_MODE_BLEND_ADD = 0x2,
                PARTICLE_OUTPUT_BLEND_MODE_HALF_BLEND_ADD = 0x3,
                PARTICLE_OUTPUT_BLEND_MODE_NEG_HALF_BLEND_ADD = 0x4,
                PARTICLE_OUTPUT_BLEND_MODE_MOD2X = 0x5,
                PARTICLE_OUTPUT_BLEND_MODE_LIGHTEN = 0x6
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleAlphaReferenceType_t {
                PARTICLE_ALPHA_REFERENCE_ALPHA_ALPHA = 0x0,
                PARTICLE_ALPHA_REFERENCE_OPAQUE_ALPHA = 0x1,
                PARTICLE_ALPHA_REFERENCE_ALPHA_OPAQUE = 0x2,
                PARTICLE_ALPHA_REFERENCE_OPAQUE_OPAQUE = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum BlurFilterType_t {
                BLURFILTER_GAUSSIAN = 0x0,
                BLURFILTER_BOX = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleLightTypeChoiceList_t {
                PARTICLE_LIGHT_TYPE_POINT = 0x0,
                PARTICLE_LIGHT_TYPE_SPOT = 0x1,
                PARTICLE_LIGHT_TYPE_FX = 0x2,
                PARTICLE_LIGHT_TYPE_CAPSULE = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleLightUnitChoiceList_t {
                PARTICLE_LIGHT_UNIT_CANDELAS = 0x0,
                PARTICLE_LIGHT_UNIT_LUMENS = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleOmni2LightTypeChoiceList_t {
                PARTICLE_OMNI2_LIGHT_TYPE_POINT = 0x0,
                PARTICLE_OMNI2_LIGHT_TYPE_SPHERE = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleLightBehaviorChoiceList_t {
                PARTICLE_LIGHT_BEHAVIOR_FOLLOW_DIRECTION = 0x0,
                PARTICLE_LIGHT_BEHAVIOR_ROPE = 0x1,
                PARTICLE_LIGHT_BEHAVIOR_TRAILS = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleDepthFeatheringMode_t {
                PARTICLE_DEPTH_FEATHERING_OFF = 0x0,
                PARTICLE_DEPTH_FEATHERING_ON_OPTIONAL = 0x1,
                PARTICLE_DEPTH_FEATHERING_ON_REQUIRED = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleVRHandChoiceList_t {
                PARTICLE_VRHAND_LEFT = 0x0,
                PARTICLE_VRHAND_RIGHT = 0x1,
                PARTICLE_VRHAND_CP = 0x2,
                PARTICLE_VRHAND_CP_OBJECT = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ParticleSortingChoiceList_t {
                PARTICLE_SORTING_NEAREST = 0x0,
                PARTICLE_SORTING_CREATION_TIME = 0x1
            }
            // Alignment: 4
            // Members count: 10
            #[repr(u32)]
            pub enum SpriteCardTextureType_t {
                SPRITECARD_TEXTURE_DIFFUSE = 0x0,
                SPRITECARD_TEXTURE_ZOOM = 0x1,
                SPRITECARD_TEXTURE_1D_COLOR_LOOKUP = 0x2,
                SPRITECARD_TEXTURE_UVDISTORTION = 0x3,
                SPRITECARD_TEXTURE_UVDISTORTION_ZOOM = 0x4,
                SPRITECARD_TEXTURE_NORMALMAP = 0x5,
                SPRITECARD_TEXTURE_ANIMMOTIONVEC = 0x6,
                SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_A = 0x7,
                SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_B = 0x8,
                SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_C = 0x9
            }
            // Alignment: 4
            // Members count: 15
            #[repr(u32)]
            pub enum SpriteCardTextureChannel_t {
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGB = 0x0,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA = 0x1,
                SPRITECARD_TEXTURE_CHANNEL_MIX_A = 0x2,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A = 0x3,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_ALPHAMASK = 0x4,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_RGBMASK = 0x5,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA_RGBALPHA = 0x6,
                SPRITECARD_TEXTURE_CHANNEL_MIX_A_RGBALPHA = 0x7,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A_RGBALPHA = 0x8,
                SPRITECARD_TEXTURE_CHANNEL_MIX_R = 0x9,
                SPRITECARD_TEXTURE_CHANNEL_MIX_G = 0xA,
                SPRITECARD_TEXTURE_CHANNEL_MIX_B = 0xB,
                SPRITECARD_TEXTURE_CHANNEL_MIX_RALPHA = 0xC,
                SPRITECARD_TEXTURE_CHANNEL_MIX_GALPHA = 0xD,
                SPRITECARD_TEXTURE_CHANNEL_MIX_BALPHA = 0xE
            }
            // Alignment: 4
            // Members count: 14
            #[repr(u32)]
            pub enum SpriteCardPerParticleScale_t {
                SPRITECARD_TEXTURE_PP_SCALE_NONE = 0x0,
                SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_AGE = 0x1,
                SPRITECARD_TEXTURE_PP_SCALE_ANIMATION_FRAME = 0x2,
                SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA1 = 0x3,
                SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA2 = 0x4,
                SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_ALPHA = 0x5,
                SPRITECARD_TEXTURE_PP_SCALE_SHADER_RADIUS = 0x6,
                SPRITECARD_TEXTURE_PP_SCALE_ROLL = 0x7,
                SPRITECARD_TEXTURE_PP_SCALE_YAW = 0x8,
                SPRITECARD_TEXTURE_PP_SCALE_PITCH = 0x9,
                SPRITECARD_TEXTURE_PP_SCALE_RANDOM = 0xA,
                SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM = 0xB,
                SPRITECARD_TEXTURE_PP_SCALE_RANDOM_TIME = 0xC,
                SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM_TIME = 0xD
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum ParticleTextureLayerBlendType_t {
                SPRITECARD_TEXTURE_BLEND_MULTIPLY = 0x0,
                SPRITECARD_TEXTURE_BLEND_MOD2X = 0x1,
                SPRITECARD_TEXTURE_BLEND_REPLACE = 0x2,
                SPRITECARD_TEXTURE_BLEND_ADD = 0x3,
                SPRITECARD_TEXTURE_BLEND_SUBTRACT = 0x4,
                SPRITECARD_TEXTURE_BLEND_AVERAGE = 0x5,
                SPRITECARD_TEXTURE_BLEND_LUMINANCE = 0x6
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ParticlePostProcessPriorityGroup_t {
                PARTICLE_POST_PROCESS_PRIORITY_LEVEL_VOLUME = 0x0,
                PARTICLE_POST_PROCESS_PRIORITY_LEVEL_OVERRIDE = 0x1,
                PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_EFFECT = 0x2,
                PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_LOW = 0x3,
                PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_HIGH = 0x4,
                PARTICLE_POST_PROCESS_PRIORITY_GLOBAL_UI = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ParticleFogType_t {
                PARTICLE_FOG_GAME_DEFAULT = 0x0,
                PARTICLE_FOG_ENABLED = 0x1,
                PARTICLE_FOG_DISABLED = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum TextureRepetitionMode_t {
                TEXTURE_REPETITION_PARTICLE = 0x0,
                TEXTURE_REPETITION_PATH = 0x1
            }
            // Alignment: 4
            // Members count: 24
            #[repr(u32)]
            pub enum ParticleFloatType_t {
                PF_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PF_TYPE_LITERAL = 0x0,
                PF_TYPE_NAMED_VALUE = 0x1,
                PF_TYPE_RANDOM_UNIFORM = 0x2,
                PF_TYPE_RANDOM_BIASED = 0x3,
                PF_TYPE_COLLECTION_AGE = 0x4,
                PF_TYPE_ENDCAP_AGE = 0x5,
                PF_TYPE_CONTROL_POINT_COMPONENT = 0x6,
                PF_TYPE_CONTROL_POINT_CHANGE_AGE = 0x7,
                PF_TYPE_CONTROL_POINT_SPEED = 0x8,
                PF_TYPE_PARTICLE_DETAIL_LEVEL = 0x9,
                PF_TYPE_CONCURRENT_DEF_COUNT = 0xA,
                PF_TYPE_CLOSEST_CAMERA_DISTANCE = 0xB,
                PF_TYPE_RENDERER_CAMERA_DISTANCE = 0xC,
                PF_TYPE_RENDERER_CAMERA_DOT_PRODUCT = 0xD,
                PF_TYPE_PARTICLE_NOISE = 0xE,
                PF_TYPE_PARTICLE_AGE = 0xF,
                PF_TYPE_PARTICLE_AGE_NORMALIZED = 0x10,
                PF_TYPE_PARTICLE_FLOAT = 0x11,
                PF_TYPE_PARTICLE_VECTOR_COMPONENT = 0x12,
                PF_TYPE_PARTICLE_SPEED = 0x13,
                PF_TYPE_PARTICLE_NUMBER = 0x14,
                PF_TYPE_PARTICLE_NUMBER_NORMALIZED = 0x15,
                PF_TYPE_COUNT = 0x16
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleFloatBiasType_t {
                PF_BIAS_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PF_BIAS_TYPE_STANDARD = 0x0,
                PF_BIAS_TYPE_GAIN = 0x1,
                PF_BIAS_TYPE_EXPONENTIAL = 0x2,
                PF_BIAS_TYPE_COUNT = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum PFNoiseType_t {
                PF_NOISE_TYPE_PERLIN = 0x0,
                PF_NOISE_TYPE_SIMPLEX = 0x1,
                PF_NOISE_TYPE_WORLEY = 0x2,
                PF_NOISE_TYPE_CURL = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum PFNoiseModifier_t {
                PF_NOISE_MODIFIER_NONE = 0x0,
                PF_NOISE_MODIFIER_LINES = 0x1,
                PF_NOISE_MODIFIER_CLUMPS = 0x2,
                PF_NOISE_MODIFIER_RINGS = 0x3
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum PFNoiseTurbulence_t {
                PF_NOISE_TURB_NONE = 0x0,
                PF_NOISE_TURB_HIGHLIGHT = 0x1,
                PF_NOISE_TURB_FEEDBACK = 0x2,
                PF_NOISE_TURB_LOOPY = 0x3,
                PF_NOISE_TURB_CONTRAST = 0x4,
                PF_NOISE_TURB_ALTERNATE = 0x5
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleFloatRandomMode_t {
                PF_RANDOM_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PF_RANDOM_MODE_CONSTANT = 0x0,
                PF_RANDOM_MODE_VARYING = 0x1,
                PF_RANDOM_MODE_COUNT = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ParticleFloatInputMode_t {
                PF_INPUT_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PF_INPUT_MODE_CLAMPED = 0x0,
                PF_INPUT_MODE_LOOPED = 0x1,
                PF_INPUT_MODE_COUNT = 0x2
            }
            // Alignment: 4
            // Members count: 8
            #[repr(u32)]
            pub enum ParticleFloatMapType_t {
                PF_MAP_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PF_MAP_TYPE_DIRECT = 0x0,
                PF_MAP_TYPE_MULT = 0x1,
                PF_MAP_TYPE_REMAP = 0x2,
                PF_MAP_TYPE_REMAP_BIASED = 0x3,
                PF_MAP_TYPE_CURVE = 0x4,
                PF_MAP_TYPE_NOTCHED = 0x5,
                PF_MAP_TYPE_COUNT = 0x6
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleTransformType_t {
                PT_TYPE_INVALID = 0x0,
                PT_TYPE_NAMED_VALUE = 0x1,
                PT_TYPE_CONTROL_POINT = 0x2,
                PT_TYPE_CONTROL_POINT_RANGE = 0x3,
                PT_TYPE_COUNT = 0x4
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum ParticleModelType_t {
                PM_TYPE_INVALID = 0x0,
                PM_TYPE_NAMED_VALUE_MODEL = 0x1,
                PM_TYPE_NAMED_VALUE_EHANDLE = 0x2,
                PM_TYPE_CONTROL_POINT = 0x3,
                PM_TYPE_COUNT = 0x4
            }
            // Alignment: 4
            // Members count: 19
            #[repr(u32)]
            pub enum ParticleVecType_t {
                PVEC_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
                PVEC_TYPE_LITERAL = 0x0,
                PVEC_TYPE_LITERAL_COLOR = 0x1,
                PVEC_TYPE_NAMED_VALUE = 0x2,
                PVEC_TYPE_PARTICLE_VECTOR = 0x3,
                PVEC_TYPE_PARTICLE_VELOCITY = 0x4,
                PVEC_TYPE_CP_VALUE = 0x5,
                PVEC_TYPE_CP_RELATIVE_POSITION = 0x6,
                PVEC_TYPE_CP_RELATIVE_DIR = 0x7,
                PVEC_TYPE_CP_RELATIVE_RANDOM_DIR = 0x8,
                PVEC_TYPE_FLOAT_COMPONENTS = 0x9,
                PVEC_TYPE_FLOAT_INTERP_CLAMPED = 0xA,
                PVEC_TYPE_FLOAT_INTERP_OPEN = 0xB,
                PVEC_TYPE_FLOAT_INTERP_GRADIENT = 0xC,
                PVEC_TYPE_RANDOM_UNIFORM = 0xD,
                PVEC_TYPE_RANDOM_UNIFORM_OFFSET = 0xE,
                PVEC_TYPE_CP_DELTA = 0xF,
                PVEC_TYPE_CLOSEST_CAMERA_POSITION = 0x10,
                PVEC_TYPE_COUNT = 0x11
            }
            // Parent: None
            // Fields count: 2
            pub mod CRandomNumberGeneratorParameters {
                pub const m_bDistributeEvenly: usize = 0x0; // bool
                pub const m_nSeed: usize = 0x4; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod MaterialVariable_t {
                pub const m_strVariable: usize = 0x0; // CUtlString
                pub const m_nVariableField: usize = 0x8; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod RenderProjectedMaterial_t {
                pub const m_hMaterial: usize = 0x0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: None
            // Fields count: 1
            pub mod ParticleAttributeIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod ParticlePreviewBodyGroup_t {
                pub const m_bodyGroupName: usize = 0x0; // CUtlString
                pub const m_nValue: usize = 0x8; // int32
            }
            // Parent: None
            // Fields count: 16
            pub mod ParticlePreviewState_t {
                pub const m_previewModel: usize = 0x0; // CUtlString
                pub const m_nModSpecificData: usize = 0x8; // uint32
                pub const m_groundType: usize = 0xC; // PetGroundType_t
                pub const m_sequenceName: usize = 0x10; // CUtlString
                pub const m_nFireParticleOnSequenceFrame: usize = 0x18; // int32
                pub const m_hitboxSetName: usize = 0x20; // CUtlString
                pub const m_materialGroupName: usize = 0x28; // CUtlString
                pub const m_vecBodyGroups: usize = 0x30; // CUtlVector<ParticlePreviewBodyGroup_t>
                pub const m_flPlaybackSpeed: usize = 0x48; // float32
                pub const m_flParticleSimulationRate: usize = 0x4C; // float32
                pub const m_bShouldDrawHitboxes: usize = 0x50; // bool
                pub const m_bShouldDrawAttachments: usize = 0x51; // bool
                pub const m_bShouldDrawAttachmentNames: usize = 0x52; // bool
                pub const m_bShouldDrawControlPointAxes: usize = 0x53; // bool
                pub const m_bAnimationNonLooping: usize = 0x54; // bool
                pub const m_vecPreviewGravity: usize = 0x58; // 
            }
            // Parent: None
            // Fields count: 6
            pub mod ParticleControlPointDriver_t {
                pub const m_iControlPoint: usize = 0x0; // int32
                pub const m_iAttachType: usize = 0x4; // ParticleAttachment_t
                pub const m_attachmentName: usize = 0x8; // CUtlString
                pub const m_vecOffset: usize = 0x10; // 
                pub const m_angOffset: usize = 0x1C; // QAngle
                pub const m_entityName: usize = 0x28; // CUtlString
            }
            // Parent: None
            // Fields count: 3
            pub mod ParticleControlPointConfiguration_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_drivers: usize = 0x8; // CUtlVector<ParticleControlPointDriver_t>
                pub const m_previewState: usize = 0x20; // ParticlePreviewState_t
            }
            // Parent: None
            // Fields count: 0
            pub mod IParticleCollection {
            }
            // Parent: None
            // Fields count: 0
            pub mod IControlPointEditorData {
            }
            // Parent: None
            // Fields count: 0
            pub mod IParticleSystemDefinition {
            }
            // Parent: None
            // Fields count: 18
            pub mod CParticleVisibilityInputs {
                pub const m_flCameraBias: usize = 0x0; // float32
                pub const m_nCPin: usize = 0x4; // int32
                pub const m_flProxyRadius: usize = 0x8; // float32
                pub const m_flInputMin: usize = 0xC; // float32
                pub const m_flInputMax: usize = 0x10; // float32
                pub const m_flNoPixelVisibilityFallback: usize = 0x14; // float32
                pub const m_flDistanceInputMin: usize = 0x18; // float32
                pub const m_flDistanceInputMax: usize = 0x1C; // float32
                pub const m_flDotInputMin: usize = 0x20; // float32
                pub const m_flDotInputMax: usize = 0x24; // float32
                pub const m_bDotCPAngles: usize = 0x28; // bool
                pub const m_bDotCameraAngles: usize = 0x29; // bool
                pub const m_flAlphaScaleMin: usize = 0x2C; // float32
                pub const m_flAlphaScaleMax: usize = 0x30; // float32
                pub const m_flRadiusScaleMin: usize = 0x34; // float32
                pub const m_flRadiusScaleMax: usize = 0x38; // float32
                pub const m_flRadiusScaleFOVBase: usize = 0x3C; // float32
                pub const m_bRightEye: usize = 0x40; // bool
            }
            // Parent: None
            // Fields count: 8
            pub mod CPathParameters {
                pub const m_nStartControlPointNumber: usize = 0x0; // int32
                pub const m_nEndControlPointNumber: usize = 0x4; // int32
                pub const m_nBulgeControl: usize = 0x8; // int32
                pub const m_flBulge: usize = 0xC; // float32
                pub const m_flMidPoint: usize = 0x10; // float32
                pub const m_vStartPointOffset: usize = 0x14; // 
                pub const m_vMidPointOffset: usize = 0x20; // 
                pub const m_vEndOffset: usize = 0x2C; // 
            }
            // Parent: None
            // Fields count: 5
            pub mod ParticleChildrenInfo_t {
                pub const m_ChildRef: usize = 0x0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_flDelay: usize = 0x8; // float32
                pub const m_bEndCap: usize = 0xC; // bool
                pub const m_bDisableChild: usize = 0xD; // bool
                pub const m_nDetailLevel: usize = 0x10; // ParticleDetailLevel_t
            }
            // Parent: None
            // Fields count: 3
            pub mod ControlPointReference_t {
                pub const m_controlPointNameString: usize = 0x0; // int32
                pub const m_vOffsetFromControlPoint: usize = 0x4; // 
                pub const m_bOffsetInLocalSpace: usize = 0x10; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod ModelReference_t {
                pub const m_model: usize = 0x0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_flRelativeProbabilityOfSpawn: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod SequenceWeightedList_t {
                pub const m_nSequence: usize = 0x0; // int32
                pub const m_flRelativeWeight: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CollisionGroupContext_t {
                pub const m_nCollisionGroupNumber: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod PointDefinition_t {
                pub const m_nControlPoint: usize = 0x0; // int32
                pub const m_bLocalCoords: usize = 0x4; // bool
                pub const m_vOffset: usize = 0x8; // 
            }
            // Parent: PointDefinition_t
            // Fields count: 1
            pub mod PointDefinitionWithTimeValues_t {
                pub const m_flTimeDuration: usize = 0x14; // float32
            }
            // Parent: IParticleSystemDefinition
            // Fields count: 64
            pub mod CParticleSystemDefinition {
                pub const m_nBehaviorVersion: usize = 0x8; // int32
                pub const m_PreEmissionOperators: usize = 0x10; // CUtlVector<CParticleFunctionPreEmission*>
                pub const m_Emitters: usize = 0x28; // CUtlVector<CParticleFunctionEmitter*>
                pub const m_Initializers: usize = 0x40; // CUtlVector<CParticleFunctionInitializer*>
                pub const m_Operators: usize = 0x58; // CUtlVector<CParticleFunctionOperator*>
                pub const m_ForceGenerators: usize = 0x70; // CUtlVector<CParticleFunctionForce*>
                pub const m_Constraints: usize = 0x88; // CUtlVector<CParticleFunctionConstraint*>
                pub const m_Renderers: usize = 0xA0; // CUtlVector<CParticleFunctionRenderer*>
                pub const m_Children: usize = 0xB8; // CUtlVector<ParticleChildrenInfo_t>
                pub const m_nFirstMultipleOverride_BackwardCompat: usize = 0x178; // int32
                pub const m_nInitialParticles: usize = 0x210; // int32
                pub const m_nMaxParticles: usize = 0x214; // int32
                pub const m_nGroupID: usize = 0x218; // int32
                pub const m_BoundingBoxMin: usize = 0x21C; // 
                pub const m_BoundingBoxMax: usize = 0x228; // 
                pub const m_flDepthSortBias: usize = 0x234; // float32
                pub const m_nSortOverridePositionCP: usize = 0x238; // int32
                pub const m_bInfiniteBounds: usize = 0x23C; // bool
                pub const m_bEnableNamedValues: usize = 0x23D; // bool
                pub const m_NamedValueDomain: usize = 0x240; // CUtlString
                pub const m_NamedValueLocals: usize = 0x248; // CUtlVector<ParticleNamedValueSource_t*>
                pub const m_ConstantColor: usize = 0x260; // Color
                pub const m_ConstantNormal: usize = 0x264; // 
                pub const m_flConstantRadius: usize = 0x270; // float32
                pub const m_flConstantRotation: usize = 0x274; // float32
                pub const m_flConstantRotationSpeed: usize = 0x278; // float32
                pub const m_flConstantLifespan: usize = 0x27C; // float32
                pub const m_nConstantSequenceNumber: usize = 0x280; // int32
                pub const m_nConstantSequenceNumber1: usize = 0x284; // int32
                pub const m_nSnapshotControlPoint: usize = 0x288; // int32
                pub const m_hSnapshot: usize = 0x290; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
                pub const m_pszCullReplacementName: usize = 0x298; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_flCullRadius: usize = 0x2A0; // float32
                pub const m_flCullFillCost: usize = 0x2A4; // float32
                pub const m_nCullControlPoint: usize = 0x2A8; // int32
                pub const m_hFallback: usize = 0x2B0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_nFallbackMaxCount: usize = 0x2B8; // int32
                pub const m_hLowViolenceDef: usize = 0x2C0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_hReferenceReplacement: usize = 0x2C8; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_flPreSimulationTime: usize = 0x2D0; // float32
                pub const m_flStopSimulationAfterTime: usize = 0x2D4; // float32
                pub const m_flMaximumTimeStep: usize = 0x2D8; // float32
                pub const m_flMaximumSimTime: usize = 0x2DC; // float32
                pub const m_flMinimumSimTime: usize = 0x2E0; // float32
                pub const m_flMinimumTimeStep: usize = 0x2E4; // float32
                pub const m_nMinimumFrames: usize = 0x2E8; // int32
                pub const m_nMinCPULevel: usize = 0x2EC; // int32
                pub const m_nMinGPULevel: usize = 0x2F0; // int32
                pub const m_flNoDrawTimeToGoToSleep: usize = 0x2F4; // float32
                pub const m_flMaxDrawDistance: usize = 0x2F8; // float32
                pub const m_flStartFadeDistance: usize = 0x2FC; // float32
                pub const m_flMaxCreationDistance: usize = 0x300; // float32
                pub const m_nAggregationMinAvailableParticles: usize = 0x304; // int32
                pub const m_flAggregateRadius: usize = 0x308; // float32
                pub const m_bShouldBatch: usize = 0x30C; // bool
                pub const m_bShouldHitboxesFallbackToRenderBounds: usize = 0x30D; // bool
                pub const m_bShouldHitboxesFallbackToSnapshot: usize = 0x30E; // bool
                pub const m_nViewModelEffect: usize = 0x310; // InheritableBoolType_t
                pub const m_bScreenSpaceEffect: usize = 0x314; // bool
                pub const m_pszTargetLayerID: usize = 0x318; // CUtlSymbolLarge
                pub const m_nSkipRenderControlPoint: usize = 0x320; // int32
                pub const m_nAllowRenderControlPoint: usize = 0x324; // int32
                pub const m_bShouldSort: usize = 0x328; // bool
                pub const m_controlPointConfigurations: usize = 0x370; // CUtlVector<ParticleControlPointConfiguration_t>
            }
            // Parent: None
            // Fields count: 16
            pub mod CParticleFunction {
                pub const m_flOpStrength: usize = 0x8; // CParticleCollectionFloatInput
                pub const m_nOpEndCapState: usize = 0x160; // ParticleEndcapMode_t
                pub const m_flOpStartFadeInTime: usize = 0x164; // float32
                pub const m_flOpEndFadeInTime: usize = 0x168; // float32
                pub const m_flOpStartFadeOutTime: usize = 0x16C; // float32
                pub const m_flOpEndFadeOutTime: usize = 0x170; // float32
                pub const m_flOpFadeOscillatePeriod: usize = 0x174; // float32
                pub const m_bNormalizeToStopTime: usize = 0x178; // bool
                pub const m_flOpTimeOffsetMin: usize = 0x17C; // float32
                pub const m_flOpTimeOffsetMax: usize = 0x180; // float32
                pub const m_nOpTimeOffsetSeed: usize = 0x184; // int32
                pub const m_nOpTimeScaleSeed: usize = 0x188; // int32
                pub const m_flOpTimeScaleMin: usize = 0x18C; // float32
                pub const m_flOpTimeScaleMax: usize = 0x190; // float32
                pub const m_bDisableOperator: usize = 0x196; // bool
                pub const m_Notes: usize = 0x198; // CUtlString
            }
            // Parent: CParticleFunction
            // Fields count: 1
            pub mod CParticleFunctionInitializer {
                pub const m_nAssociatedEmitterIndex: usize = 0x1B8; // int32
            }
            // Parent: CParticleFunction
            // Fields count: 1
            pub mod CParticleFunctionEmitter {
                pub const m_nEmitterIndex: usize = 0x1B8; // int32
            }
            // Parent: CParticleFunction
            // Fields count: 0
            pub mod CParticleFunctionConstraint {
            }
            // Parent: CParticleFunction
            // Fields count: 0
            pub mod CParticleFunctionOperator {
            }
            // Parent: CParticleFunction
            // Fields count: 0
            pub mod CParticleFunctionForce {
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod CParticleFunctionPreEmission {
                pub const m_bRunOnce: usize = 0x1C0; // bool
            }
            // Parent: CParticleFunction
            // Fields count: 3
            pub mod CParticleFunctionRenderer {
                pub const VisibilityInputs: usize = 0x1B8; // CParticleVisibilityInputs
                pub const m_bCannotBeRefracted: usize = 0x1FC; // bool
                pub const m_bSkipRenderingOnMobile: usize = 0x1FD; // bool
            }
            // Parent: None
            // Fields count: 16
            pub mod TextureControls_t {
                pub const m_flFinalTextureScaleU: usize = 0x0; // CParticleCollectionRendererFloatInput
                pub const m_flFinalTextureScaleV: usize = 0x158; // CParticleCollectionRendererFloatInput
                pub const m_flFinalTextureOffsetU: usize = 0x2B0; // CParticleCollectionRendererFloatInput
                pub const m_flFinalTextureOffsetV: usize = 0x408; // CParticleCollectionRendererFloatInput
                pub const m_flFinalTextureUVRotation: usize = 0x560; // CParticleCollectionRendererFloatInput
                pub const m_flZoomScale: usize = 0x6B8; // CParticleCollectionRendererFloatInput
                pub const m_flDistortion: usize = 0x810; // CParticleCollectionRendererFloatInput
                pub const m_bRandomizeOffsets: usize = 0x968; // bool
                pub const m_bClampUVs: usize = 0x969; // bool
                pub const m_nPerParticleBlend: usize = 0x96C; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleScale: usize = 0x970; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleOffsetU: usize = 0x974; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleOffsetV: usize = 0x978; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleRotation: usize = 0x97C; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleZoom: usize = 0x980; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleDistortion: usize = 0x984; // SpriteCardPerParticleScale_t
            }
            // Parent: None
            // Fields count: 9
            pub mod TextureGroup_t {
                pub const m_bEnabled: usize = 0x0; // bool
                pub const m_bReplaceTextureWithGradient: usize = 0x1; // bool
                pub const m_hTexture: usize = 0x8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_Gradient: usize = 0x10; // CColorGradient
                pub const m_nTextureType: usize = 0x28; // SpriteCardTextureType_t
                pub const m_nTextureChannels: usize = 0x2C; // SpriteCardTextureChannel_t
                pub const m_nTextureBlendMode: usize = 0x30; // ParticleTextureLayerBlendType_t
                pub const m_flTextureBlend: usize = 0x38; // CParticleCollectionRendererFloatInput
                pub const m_TextureControls: usize = 0x190; // TextureControls_t
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 62
            pub mod CBaseRendererSource2 {
                pub const m_flRadiusScale: usize = 0x200; // CParticleCollectionRendererFloatInput
                pub const m_flAlphaScale: usize = 0x358; // CParticleCollectionRendererFloatInput
                pub const m_flRollScale: usize = 0x4B0; // CParticleCollectionRendererFloatInput
                pub const m_nAlpha2Field: usize = 0x608; // ParticleAttributeIndex_t
                pub const m_vecColorScale: usize = 0x610; // CParticleCollectionRendererVecInput
                pub const m_nColorBlendType: usize = 0xC68; // ParticleColorBlendType_t
                pub const m_nShaderType: usize = 0xC6C; // SpriteCardShaderType_t
                pub const m_strShaderOverride: usize = 0xC70; // CUtlString
                pub const m_flCenterXOffset: usize = 0xC78; // CParticleCollectionRendererFloatInput
                pub const m_flCenterYOffset: usize = 0xDD0; // CParticleCollectionRendererFloatInput
                pub const m_flBumpStrength: usize = 0xF28; // float32
                pub const m_nCropTextureOverride: usize = 0xF2C; // ParticleSequenceCropOverride_t
                pub const m_vecTexturesInput: usize = 0xF30; // CUtlVector<TextureGroup_t>
                pub const m_flAnimationRate: usize = 0xF48; // float32
                pub const m_nAnimationType: usize = 0xF4C; // AnimationType_t
                pub const m_bAnimateInFPS: usize = 0xF50; // bool
                pub const m_flSelfIllumAmount: usize = 0xF58; // CParticleCollectionRendererFloatInput
                pub const m_flDiffuseAmount: usize = 0x10B0; // CParticleCollectionRendererFloatInput
                pub const m_flDiffuseClamp: usize = 0x1208; // CParticleCollectionRendererFloatInput
                pub const m_nLightingControlPoint: usize = 0x1360; // int32
                pub const m_nSelfIllumPerParticle: usize = 0x1364; // ParticleAttributeIndex_t
                pub const m_nOutputBlendMode: usize = 0x1368; // ParticleOutputBlendMode_t
                pub const m_bGammaCorrectVertexColors: usize = 0x136C; // bool
                pub const m_bSaturateColorPreAlphaBlend: usize = 0x136D; // bool
                pub const m_flAddSelfAmount: usize = 0x1370; // CParticleCollectionRendererFloatInput
                pub const m_flDesaturation: usize = 0x14C8; // CParticleCollectionRendererFloatInput
                pub const m_flOverbrightFactor: usize = 0x1620; // CParticleCollectionRendererFloatInput
                pub const m_nHSVShiftControlPoint: usize = 0x1778; // int32
                pub const m_nFogType: usize = 0x177C; // ParticleFogType_t
                pub const m_flFogAmount: usize = 0x1780; // CParticleCollectionRendererFloatInput
                pub const m_bTintByFOW: usize = 0x18D8; // bool
                pub const m_bTintByGlobalLight: usize = 0x18D9; // bool
                pub const m_nPerParticleAlphaReference: usize = 0x18DC; // SpriteCardPerParticleScale_t
                pub const m_nPerParticleAlphaRefWindow: usize = 0x18E0; // SpriteCardPerParticleScale_t
                pub const m_nAlphaReferenceType: usize = 0x18E4; // ParticleAlphaReferenceType_t
                pub const m_flAlphaReferenceSoftness: usize = 0x18E8; // CParticleCollectionRendererFloatInput
                pub const m_flSourceAlphaValueToMapToZero: usize = 0x1A40; // CParticleCollectionRendererFloatInput
                pub const m_flSourceAlphaValueToMapToOne: usize = 0x1B98; // CParticleCollectionRendererFloatInput
                pub const m_bRefract: usize = 0x1CF0; // bool
                pub const m_bRefractSolid: usize = 0x1CF1; // bool
                pub const m_flRefractAmount: usize = 0x1CF8; // CParticleCollectionRendererFloatInput
                pub const m_nRefractBlurRadius: usize = 0x1E50; // int32
                pub const m_nRefractBlurType: usize = 0x1E54; // BlurFilterType_t
                pub const m_bOnlyRenderInEffectsBloomPass: usize = 0x1E58; // bool
                pub const m_bOnlyRenderInEffectsWaterPass: usize = 0x1E59; // bool
                pub const m_bUseMixedResolutionRendering: usize = 0x1E5A; // bool
                pub const m_bOnlyRenderInEffecsGameOverlay: usize = 0x1E5B; // bool
                pub const m_stencilTestID: usize = 0x1E5C; // char[128]
                pub const m_bStencilTestExclude: usize = 0x1EDC; // bool
                pub const m_stencilWriteID: usize = 0x1EDD; // char[128]
                pub const m_bWriteStencilOnDepthPass: usize = 0x1F5D; // bool
                pub const m_bWriteStencilOnDepthFail: usize = 0x1F5E; // bool
                pub const m_bReverseZBuffering: usize = 0x1F5F; // bool
                pub const m_bDisableZBuffering: usize = 0x1F60; // bool
                pub const m_nFeatheringMode: usize = 0x1F64; // ParticleDepthFeatheringMode_t
                pub const m_flFeatheringMinDist: usize = 0x1F68; // CParticleCollectionRendererFloatInput
                pub const m_flFeatheringMaxDist: usize = 0x20C0; // CParticleCollectionRendererFloatInput
                pub const m_flFeatheringFilter: usize = 0x2218; // CParticleCollectionRendererFloatInput
                pub const m_flDepthBias: usize = 0x2370; // CParticleCollectionRendererFloatInput
                pub const m_nSortMethod: usize = 0x24C8; // ParticleSortingChoiceList_t
                pub const m_bBlendFramesSeq0: usize = 0x24CC; // bool
                pub const m_bMaxLuminanceBlendingSequence0: usize = 0x24CD; // bool
            }
            // Parent: CBaseRendererSource2
            // Fields count: 27
            pub mod C_OP_RenderSprites {
                pub const m_nSequenceOverride: usize = 0x2710; // CParticleCollectionRendererFloatInput
                pub const m_nOrientationType: usize = 0x2868; // ParticleOrientationChoiceList_t
                pub const m_nOrientationControlPoint: usize = 0x286C; // int32
                pub const m_bUseYawWithNormalAligned: usize = 0x2870; // bool
                pub const m_flMinSize: usize = 0x2878; // CParticleCollectionRendererFloatInput
                pub const m_flMaxSize: usize = 0x29D0; // CParticleCollectionRendererFloatInput
                pub const m_flAlphaAdjustWithSizeAdjust: usize = 0x2B28; // CParticleCollectionRendererFloatInput
                pub const m_flStartFadeSize: usize = 0x2C80; // CParticleCollectionRendererFloatInput
                pub const m_flEndFadeSize: usize = 0x2DD8; // CParticleCollectionRendererFloatInput
                pub const m_flStartFadeDot: usize = 0x2F30; // float32
                pub const m_flEndFadeDot: usize = 0x2F34; // float32
                pub const m_bDistanceAlpha: usize = 0x2F38; // bool
                pub const m_bSoftEdges: usize = 0x2F39; // bool
                pub const m_flEdgeSoftnessStart: usize = 0x2F3C; // float32
                pub const m_flEdgeSoftnessEnd: usize = 0x2F40; // float32
                pub const m_bOutline: usize = 0x2F44; // bool
                pub const m_OutlineColor: usize = 0x2F45; // Color
                pub const m_nOutlineAlpha: usize = 0x2F4C; // int32
                pub const m_flOutlineStart0: usize = 0x2F50; // float32
                pub const m_flOutlineStart1: usize = 0x2F54; // float32
                pub const m_flOutlineEnd0: usize = 0x2F58; // float32
                pub const m_flOutlineEnd1: usize = 0x2F5C; // float32
                pub const m_nLightingMode: usize = 0x2F60; // ParticleLightingQuality_t
                pub const m_flLightingTessellation: usize = 0x2F68; // CParticleCollectionRendererFloatInput
                pub const m_flLightingDirectionality: usize = 0x30C0; // CParticleCollectionRendererFloatInput
                pub const m_bParticleShadows: usize = 0x3218; // bool
                pub const m_flShadowDensity: usize = 0x321C; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod FloatInputMaterialVariable_t {
                pub const m_strVariable: usize = 0x0; // CUtlString
                pub const m_flInput: usize = 0x8; // CParticleCollectionFloatInput
            }
            // Parent: None
            // Fields count: 2
            pub mod VecInputMaterialVariable_t {
                pub const m_strVariable: usize = 0x0; // CUtlString
                pub const m_vecInput: usize = 0x8; // CParticleCollectionVecInput
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 22
            pub mod C_OP_RenderCables {
                pub const m_flRadiusScale: usize = 0x200; // CParticleCollectionFloatInput
                pub const m_flAlphaScale: usize = 0x358; // CParticleCollectionFloatInput
                pub const m_vecColorScale: usize = 0x4B0; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0xB08; // ParticleColorBlendType_t
                pub const m_hMaterial: usize = 0xB10; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nTextureRepetitionMode: usize = 0xB18; // TextureRepetitionMode_t
                pub const m_flTextureRepeatsPerSegment: usize = 0xB20; // CParticleCollectionFloatInput
                pub const m_flTextureRepeatsCircumference: usize = 0xC78; // CParticleCollectionFloatInput
                pub const m_flColorMapOffsetV: usize = 0xDD0; // CParticleCollectionFloatInput
                pub const m_flColorMapOffsetU: usize = 0xF28; // CParticleCollectionFloatInput
                pub const m_flNormalMapOffsetV: usize = 0x1080; // CParticleCollectionFloatInput
                pub const m_flNormalMapOffsetU: usize = 0x11D8; // CParticleCollectionFloatInput
                pub const m_bDrawCableCaps: usize = 0x1330; // bool
                pub const m_flCapRoundness: usize = 0x1334; // float32
                pub const m_flCapOffsetAmount: usize = 0x1338; // float32
                pub const m_flTessScale: usize = 0x133C; // float32
                pub const m_nMinTesselation: usize = 0x1340; // int32
                pub const m_nMaxTesselation: usize = 0x1344; // int32
                pub const m_nRoundness: usize = 0x1348; // int32
                pub const m_LightingTransform: usize = 0x1350; // CParticleTransformInput
                pub const m_MaterialFloatVars: usize = 0x13B8; // CUtlVector<FloatInputMaterialVariable_t>
                pub const m_MaterialVecVars: usize = 0x13E8; // CUtlVector<VecInputMaterialVariable_t>
            }
            // Parent: None
            // Fields count: 0
            pub mod CParticleInput {
            }
            // Parent: CParticleInput
            // Fields count: 46
            pub mod CParticleFloatInput {
                pub const m_nType: usize = 0x10; // ParticleFloatType_t
                pub const m_nMapType: usize = 0x14; // ParticleFloatMapType_t
                pub const m_flLiteralValue: usize = 0x18; // float32
                pub const m_NamedValue: usize = 0x20; // CParticleNamedValueRef
                pub const m_nControlPoint: usize = 0x60; // int32
                pub const m_nScalarAttribute: usize = 0x64; // ParticleAttributeIndex_t
                pub const m_nVectorAttribute: usize = 0x68; // ParticleAttributeIndex_t
                pub const m_nVectorComponent: usize = 0x6C; // int32
                pub const m_flRandomMin: usize = 0x70; // float32
                pub const m_flRandomMax: usize = 0x74; // float32
                pub const m_bHasRandomSignFlip: usize = 0x78; // bool
                pub const m_nRandomSeed: usize = 0x7C; // int32
                pub const m_nRandomMode: usize = 0x80; // ParticleFloatRandomMode_t
                pub const m_flLOD0: usize = 0x88; // float32
                pub const m_flLOD1: usize = 0x8C; // float32
                pub const m_flLOD2: usize = 0x90; // float32
                pub const m_flLOD3: usize = 0x94; // float32
                pub const m_nNoiseInputVectorAttribute: usize = 0x98; // ParticleAttributeIndex_t
                pub const m_flNoiseOutputMin: usize = 0x9C; // float32
                pub const m_flNoiseOutputMax: usize = 0xA0; // float32
                pub const m_flNoiseScale: usize = 0xA4; // float32
                pub const m_vecNoiseOffsetRate: usize = 0xA8; // 
                pub const m_flNoiseOffset: usize = 0xB4; // float32
                pub const m_nNoiseOctaves: usize = 0xB8; // int32
                pub const m_nNoiseTurbulence: usize = 0xBC; // PFNoiseTurbulence_t
                pub const m_nNoiseType: usize = 0xC0; // PFNoiseType_t
                pub const m_nNoiseModifier: usize = 0xC4; // PFNoiseModifier_t
                pub const m_flNoiseTurbulenceScale: usize = 0xC8; // float32
                pub const m_flNoiseTurbulenceMix: usize = 0xCC; // float32
                pub const m_flNoiseImgPreviewScale: usize = 0xD0; // float32
                pub const m_bNoiseImgPreviewLive: usize = 0xD4; // bool
                pub const m_flNoCameraFallback: usize = 0xE0; // float32
                pub const m_bUseBoundsCenter: usize = 0xE4; // bool
                pub const m_nInputMode: usize = 0xE8; // ParticleFloatInputMode_t
                pub const m_flMultFactor: usize = 0xEC; // float32
                pub const m_flInput0: usize = 0xF0; // float32
                pub const m_flInput1: usize = 0xF4; // float32
                pub const m_flOutput0: usize = 0xF8; // float32
                pub const m_flOutput1: usize = 0xFC; // float32
                pub const m_flNotchedRangeMin: usize = 0x100; // float32
                pub const m_flNotchedRangeMax: usize = 0x104; // float32
                pub const m_flNotchedOutputOutside: usize = 0x108; // float32
                pub const m_flNotchedOutputInside: usize = 0x10C; // float32
                pub const m_nBiasType: usize = 0x110; // ParticleFloatBiasType_t
                pub const m_flBiasParameter: usize = 0x114; // float32
                pub const m_Curve: usize = 0x118; // CPiecewiseCurve
            }
            // Parent: CParticleFloatInput
            // Fields count: 0
            pub mod CPerParticleFloatInput {
            }
            // Parent: CParticleFloatInput
            // Fields count: 0
            pub mod CParticleCollectionFloatInput {
            }
            // Parent: CParticleCollectionFloatInput
            // Fields count: 0
            pub mod CParticleCollectionRendererFloatInput {
            }
            // Parent: CParticleFloatInput
            // Fields count: 0
            pub mod CParticleRemapFloatInput {
            }
            // Parent: CParticleInput
            // Fields count: 8
            pub mod CParticleTransformInput {
                pub const m_nType: usize = 0x10; // ParticleTransformType_t
                pub const m_NamedValue: usize = 0x18; // CParticleNamedValueRef
                pub const m_bFollowNamedValue: usize = 0x58; // bool
                pub const m_bSupportsDisabled: usize = 0x59; // bool
                pub const m_bUseOrientation: usize = 0x5A; // bool
                pub const m_nControlPoint: usize = 0x5C; // int32
                pub const m_nControlPointRangeMax: usize = 0x60; // int32
                pub const m_flEndCPGrowthTime: usize = 0x64; // float32
            }
            // Parent: CParticleInput
            // Fields count: 3
            pub mod CParticleModelInput {
                pub const m_nType: usize = 0x10; // ParticleModelType_t
                pub const m_NamedValue: usize = 0x18; // CParticleNamedValueRef
                pub const m_nControlPoint: usize = 0x58; // int32
            }
            // Parent: CParticleInput
            // Fields count: 23
            pub mod CParticleVecInput {
                pub const m_nType: usize = 0x10; // ParticleVecType_t
                pub const m_vLiteralValue: usize = 0x14; // 
                pub const m_LiteralColor: usize = 0x20; // Color
                pub const m_NamedValue: usize = 0x28; // CParticleNamedValueRef
                pub const m_bFollowNamedValue: usize = 0x68; // bool
                pub const m_nVectorAttribute: usize = 0x6C; // ParticleAttributeIndex_t
                pub const m_vVectorAttributeScale: usize = 0x70; // 
                pub const m_nControlPoint: usize = 0x7C; // int32
                pub const m_nDeltaControlPoint: usize = 0x80; // int32
                pub const m_vCPValueScale: usize = 0x84; // 
                pub const m_vCPRelativePosition: usize = 0x90; // 
                pub const m_vCPRelativeDir: usize = 0x9C; // 
                pub const m_FloatComponentX: usize = 0xA8; // CParticleFloatInput
                pub const m_FloatComponentY: usize = 0x200; // CParticleFloatInput
                pub const m_FloatComponentZ: usize = 0x358; // CParticleFloatInput
                pub const m_FloatInterp: usize = 0x4B0; // CParticleFloatInput
                pub const m_flInterpInput0: usize = 0x608; // float32
                pub const m_flInterpInput1: usize = 0x60C; // float32
                pub const m_vInterpOutput0: usize = 0x610; // 
                pub const m_vInterpOutput1: usize = 0x61C; // 
                pub const m_Gradient: usize = 0x628; // CColorGradient
                pub const m_vRandomMin: usize = 0x640; // 
                pub const m_vRandomMax: usize = 0x64C; // 
            }
            // Parent: CParticleVecInput
            // Fields count: 0
            pub mod CPerParticleVecInput {
            }
            // Parent: CParticleVecInput
            // Fields count: 0
            pub mod CParticleCollectionVecInput {
            }
            // Parent: CParticleCollectionVecInput
            // Fields count: 0
            pub mod CParticleCollectionRendererVecInput {
            }
            // Parent: None
            // Fields count: 1
            pub mod PARTICLE_EHANDLE__ {
                pub const unused: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PARTICLE_WORLD_HANDLE__ {
                pub const unused: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod IParticleEffect {
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 0
            pub mod CParticleCollectionBindingInstance {
            }
            // Parent: None
            // Fields count: 6
            pub mod ParticleNamedValueConfiguration_t {
                pub const m_ConfigName: usize = 0x0; // CUtlString
                pub const m_ConfigValue: usize = 0x8; // KeyValues3
                pub const m_iAttachType: usize = 0x18; // ParticleAttachment_t
                pub const m_BoundEntityPath: usize = 0x20; // CUtlString
                pub const m_strEntityScope: usize = 0x28; // CUtlString
                pub const m_strAttachmentName: usize = 0x30; // CUtlString
            }
            // Parent: None
            // Fields count: 5
            pub mod ParticleNamedValueSource_t {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_IsPublic: usize = 0x8; // bool
                pub const m_ValueType: usize = 0xC; // PulseValueType_t
                pub const m_DefaultConfig: usize = 0x10; // ParticleNamedValueConfiguration_t
                pub const m_NamedConfigs: usize = 0x48; // CUtlVector<ParticleNamedValueConfiguration_t>
            }
            // Parent: None
            // Fields count: 2
            pub mod CParticleVariableRef {
                pub const m_variableName: usize = 0x0; // CKV3MemberNameWithStorage
                pub const m_variableType: usize = 0x38; // PulseValueType_t
            }
            // Parent: None
            // Fields count: 0
            pub mod CParticleProperty {
            }
            // Parent: IParticleEffect
            // Fields count: 32
            pub mod CNewParticleEffect {
                pub const m_pNext: usize = 0x10; // CNewParticleEffect*
                pub const m_pPrev: usize = 0x18; // CNewParticleEffect*
                pub const m_pParticles: usize = 0x20; // IParticleCollection*
                pub const m_pDebugName: usize = 0x28; // char*
                pub const m_bDontRemove: usize = 0x0; // bitfield:1
                pub const m_bRemove: usize = 0x0; // bitfield:1
                pub const m_bNeedsBBoxUpdate: usize = 0x0; // bitfield:1
                pub const m_bIsFirstFrame: usize = 0x0; // bitfield:1
                pub const m_bAutoUpdateBBox: usize = 0x0; // bitfield:1
                pub const m_bAllocated: usize = 0x0; // bitfield:1
                pub const m_bSimulate: usize = 0x0; // bitfield:1
                pub const m_bShouldPerformCullCheck: usize = 0x0; // bitfield:1
                pub const m_bForceNoDraw: usize = 0x0; // bitfield:1
                pub const m_bShouldSave: usize = 0x0; // bitfield:1
                pub const m_bDisableAggregation: usize = 0x0; // bitfield:1
                pub const m_bShouldSimulateDuringGamePaused: usize = 0x0; // bitfield:1
                pub const m_bShouldCheckFoW: usize = 0x0; // bitfield:1
                pub const m_vSortOrigin: usize = 0x40; // 
                pub const m_flScale: usize = 0x4C; // float32
                pub const m_hOwner: usize = 0x50; // PARTICLE_EHANDLE__*
                pub const m_pOwningParticleProperty: usize = 0x58; // CParticleProperty*
                pub const m_flFreezeTransitionStart: usize = 0x70; // float32
                pub const m_flFreezeTransitionDuration: usize = 0x74; // float32
                pub const m_flFreezeTransitionOverride: usize = 0x78; // float32
                pub const m_bFreezeTransitionActive: usize = 0x7C; // bool
                pub const m_bFreezeTargetState: usize = 0x7D; // bool
                pub const m_bCanFreeze: usize = 0x7E; // bool
                pub const m_LastMin: usize = 0x80; // 
                pub const m_LastMax: usize = 0x8C; // 
                pub const m_nSplitScreenUser: usize = 0x98; // CSplitScreenSlot
                pub const m_vecAggregationCenter: usize = 0x9C; // 
                pub const m_RefCount: usize = 0xC0; // int32
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 5
            pub mod C_OP_ConstrainDistance {
                pub const m_fMinDistance: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_fMaxDistance: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_nControlPointNumber: usize = 0x470; // int32
                pub const m_CenterOffset: usize = 0x474; // 
                pub const m_bGlobalCenter: usize = 0x480; // bool
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 2
            pub mod C_OP_CollideWithSelf {
                pub const m_flRadiusScale: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flMinimumSpeed: usize = 0x318; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 2
            pub mod C_OP_CollideWithParentParticles {
                pub const m_flParentRadiusScale: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flRadiusScale: usize = 0x318; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 8
            pub mod C_OP_ConstrainDistanceToPath {
                pub const m_fMinDistance: usize = 0x1C0; // float32
                pub const m_flMaxDistance0: usize = 0x1C4; // float32
                pub const m_flMaxDistanceMid: usize = 0x1C8; // float32
                pub const m_flMaxDistance1: usize = 0x1CC; // float32
                pub const m_PathParameters: usize = 0x1D0; // CPathParameters
                pub const m_flTravelTime: usize = 0x210; // float32
                pub const m_nFieldScale: usize = 0x214; // ParticleAttributeIndex_t
                pub const m_nManualTField: usize = 0x218; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 5
            pub mod C_OP_ConstrainDistanceToUserSpecifiedPath {
                pub const m_fMinDistance: usize = 0x1C0; // float32
                pub const m_flMaxDistance: usize = 0x1C4; // float32
                pub const m_flTimeScale: usize = 0x1C8; // float32
                pub const m_bLoopedPath: usize = 0x1CC; // bool
                pub const m_pointList: usize = 0x1D0; // CUtlVector<PointDefinitionWithTimeValues_t>
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 8
            pub mod C_OP_PlanarConstraint {
                pub const m_PointOnPlane: usize = 0x1C0; // 
                pub const m_PlaneNormal: usize = 0x1CC; // 
                pub const m_nControlPointNumber: usize = 0x1D8; // int32
                pub const m_bGlobalOrigin: usize = 0x1DC; // bool
                pub const m_bGlobalNormal: usize = 0x1DD; // bool
                pub const m_flRadiusScale: usize = 0x1E0; // CPerParticleFloatInput
                pub const m_flMaximumDistanceToCP: usize = 0x338; // CParticleCollectionFloatInput
                pub const m_bUseOldCode: usize = 0x490; // bool
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 0
            pub mod C_OP_WorldCollideConstraint {
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 27
            pub mod C_OP_WorldTraceConstraint {
                pub const m_nCP: usize = 0x1C0; // int32
                pub const m_vecCpOffset: usize = 0x1C4; // 
                pub const m_nCollisionMode: usize = 0x1D0; // ParticleCollisionMode_t
                pub const m_nCollisionModeMin: usize = 0x1D4; // ParticleCollisionMode_t
                pub const m_nTraceSet: usize = 0x1D8; // ParticleTraceSet_t
                pub const m_CollisionGroupName: usize = 0x1DC; // char[128]
                pub const m_bWorldOnly: usize = 0x25C; // bool
                pub const m_bBrushOnly: usize = 0x25D; // bool
                pub const m_bIncludeWater: usize = 0x25E; // bool
                pub const m_nIgnoreCP: usize = 0x260; // int32
                pub const m_flCpMovementTolerance: usize = 0x264; // float32
                pub const m_flRetestRate: usize = 0x268; // float32
                pub const m_flTraceTolerance: usize = 0x26C; // float32
                pub const m_flCollisionConfirmationSpeed: usize = 0x270; // float32
                pub const m_nMaxTracesPerFrame: usize = 0x274; // float32
                pub const m_flRadiusScale: usize = 0x278; // CPerParticleFloatInput
                pub const m_flBounceAmount: usize = 0x3D0; // CPerParticleFloatInput
                pub const m_flSlideAmount: usize = 0x528; // CPerParticleFloatInput
                pub const m_flRandomDirScale: usize = 0x680; // CPerParticleFloatInput
                pub const m_bDecayBounce: usize = 0x7D8; // bool
                pub const m_bKillonContact: usize = 0x7D9; // bool
                pub const m_flMinSpeed: usize = 0x7DC; // float32
                pub const m_bSetNormal: usize = 0x7E0; // bool
                pub const m_nStickOnCollisionField: usize = 0x7E4; // ParticleAttributeIndex_t
                pub const m_flStopSpeed: usize = 0x7E8; // CPerParticleFloatInput
                pub const m_nEntityStickDataField: usize = 0x940; // ParticleAttributeIndex_t
                pub const m_nEntityStickNormalField: usize = 0x944; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 5
            pub mod C_OP_BoxConstraint {
                pub const m_vecMin: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_vecMax: usize = 0x818; // CParticleCollectionVecInput
                pub const m_nCP: usize = 0xE70; // int32
                pub const m_bLocalSpace: usize = 0xE74; // bool
                pub const m_bAccountForRadius: usize = 0xE75; // bool
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 1
            pub mod C_OP_ShapeMatchingConstraint {
                pub const m_flShapeRestorationTime: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 5
            pub mod C_OP_RopeSpringConstraint {
                pub const m_flRestLength: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flMinDistance: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_flMaxDistance: usize = 0x470; // CParticleCollectionFloatInput
                pub const m_flAdjustmentScale: usize = 0x5C8; // float32
                pub const m_flInitialRestingLength: usize = 0x5D0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 5
            pub mod C_OP_SpringToVectorConstraint {
                pub const m_flRestLength: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flMinDistance: usize = 0x318; // CPerParticleFloatInput
                pub const m_flMaxDistance: usize = 0x470; // CPerParticleFloatInput
                pub const m_flRestingLength: usize = 0x5C8; // CPerParticleFloatInput
                pub const m_vecAnchorVector: usize = 0x720; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 2
            pub mod C_OP_ConstrainLineLength {
                pub const m_flMinDistance: usize = 0x1C0; // float32
                pub const m_flMaxDistance: usize = 0x1C4; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 11
            pub mod C_INIT_RingWave {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_flParticlesPerOrbit: usize = 0x228; // CParticleCollectionFloatInput
                pub const m_flInitialRadius: usize = 0x380; // CPerParticleFloatInput
                pub const m_flThickness: usize = 0x4D8; // CPerParticleFloatInput
                pub const m_flInitialSpeedMin: usize = 0x630; // CPerParticleFloatInput
                pub const m_flInitialSpeedMax: usize = 0x788; // CPerParticleFloatInput
                pub const m_flRoll: usize = 0x8E0; // CPerParticleFloatInput
                pub const m_flPitch: usize = 0xA38; // CPerParticleFloatInput
                pub const m_flYaw: usize = 0xB90; // CPerParticleFloatInput
                pub const m_bEvenDistribution: usize = 0xCE8; // bool
                pub const m_bXYVelocityOnly: usize = 0xCE9; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 7
            pub mod C_INIT_CreateSpiralSphere {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nOverrideCP: usize = 0x1C4; // int32
                pub const m_nDensity: usize = 0x1C8; // int32
                pub const m_flInitialRadius: usize = 0x1CC; // float32
                pub const m_flInitialSpeedMin: usize = 0x1D0; // float32
                pub const m_flInitialSpeedMax: usize = 0x1D4; // float32
                pub const m_bUseParticleCount: usize = 0x1D8; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_CreateInEpitrochoid {
                pub const m_nComponent1: usize = 0x1C0; // int32
                pub const m_nComponent2: usize = 0x1C4; // int32
                pub const m_TransformInput: usize = 0x1C8; // CParticleTransformInput
                pub const m_flParticleDensity: usize = 0x230; // CPerParticleFloatInput
                pub const m_flOffset: usize = 0x388; // CPerParticleFloatInput
                pub const m_flRadius1: usize = 0x4E0; // CPerParticleFloatInput
                pub const m_flRadius2: usize = 0x638; // CPerParticleFloatInput
                pub const m_bUseCount: usize = 0x790; // bool
                pub const m_bUseLocalCoords: usize = 0x791; // bool
                pub const m_bOffsetExistingPos: usize = 0x792; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 14
            pub mod C_INIT_CreatePhyllotaxis {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nScaleCP: usize = 0x1C4; // int32
                pub const m_nComponent: usize = 0x1C8; // int32
                pub const m_fRadCentCore: usize = 0x1CC; // float32
                pub const m_fRadPerPoint: usize = 0x1D0; // float32
                pub const m_fRadPerPointTo: usize = 0x1D4; // float32
                pub const m_fpointAngle: usize = 0x1D8; // float32
                pub const m_fsizeOverall: usize = 0x1DC; // float32
                pub const m_fRadBias: usize = 0x1E0; // float32
                pub const m_fMinRad: usize = 0x1E4; // float32
                pub const m_fDistBias: usize = 0x1E8; // float32
                pub const m_bUseLocalCoords: usize = 0x1EC; // bool
                pub const m_bUseWithContEmit: usize = 0x1ED; // bool
                pub const m_bUseOrigRadius: usize = 0x1EE; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 14
            pub mod C_INIT_CreateOnModel {
                pub const m_modelInput: usize = 0x1C0; // CParticleModelInput
                pub const m_transformInput: usize = 0x220; // CParticleTransformInput
                pub const m_nForceInModel: usize = 0x288; // int32
                pub const m_nDesiredHitbox: usize = 0x28C; // int32
                pub const m_nHitboxValueFromControlPointIndex: usize = 0x290; // int32
                pub const m_vecHitBoxScale: usize = 0x298; // CParticleCollectionVecInput
                pub const m_flBoneVelocity: usize = 0x8F0; // float32
                pub const m_flMaxBoneVelocity: usize = 0x8F4; // float32
                pub const m_vecDirectionBias: usize = 0x8F8; // CParticleCollectionVecInput
                pub const m_HitboxSetName: usize = 0xF50; // char[128]
                pub const m_bLocalCoords: usize = 0xFD0; // bool
                pub const m_bUseBones: usize = 0xFD1; // bool
                pub const m_bUseMesh: usize = 0xFD2; // bool
                pub const m_flShellSize: usize = 0xFD8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 14
            pub mod C_INIT_CreateOnModelAtHeight {
                pub const m_bUseBones: usize = 0x1C0; // bool
                pub const m_bForceZ: usize = 0x1C1; // bool
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
                pub const m_nHeightCP: usize = 0x1C8; // int32
                pub const m_bUseWaterHeight: usize = 0x1CC; // bool
                pub const m_flDesiredHeight: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_vecHitBoxScale: usize = 0x328; // CParticleCollectionVecInput
                pub const m_vecDirectionBias: usize = 0x980; // CParticleCollectionVecInput
                pub const m_nBiasType: usize = 0xFD8; // ParticleHitboxBiasType_t
                pub const m_bLocalCoords: usize = 0xFDC; // bool
                pub const m_bPreferMovingBoxes: usize = 0xFDD; // bool
                pub const m_HitboxSetName: usize = 0xFDE; // char[128]
                pub const m_flHitboxVelocityScale: usize = 0x1060; // CParticleCollectionFloatInput
                pub const m_flMaxBoneVelocity: usize = 0x11B8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 9
            pub mod C_INIT_SetHitboxToClosest {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nDesiredHitbox: usize = 0x1C4; // int32
                pub const m_vecHitBoxScale: usize = 0x1C8; // CParticleCollectionVecInput
                pub const m_HitboxSetName: usize = 0x820; // char[128]
                pub const m_bUseBones: usize = 0x8A0; // bool
                pub const m_bUseClosestPointOnHitbox: usize = 0x8A1; // bool
                pub const m_nTestType: usize = 0x8A4; // ClosestPointTestType_t
                pub const m_flHybridRatio: usize = 0x8A8; // CParticleCollectionFloatInput
                pub const m_bUpdatePosition: usize = 0xA00; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 9
            pub mod C_INIT_SetHitboxToModel {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nForceInModel: usize = 0x1C4; // int32
                pub const m_nDesiredHitbox: usize = 0x1C8; // int32
                pub const m_vecHitBoxScale: usize = 0x1D0; // CParticleCollectionVecInput
                pub const m_vecDirectionBias: usize = 0x828; // 
                pub const m_bMaintainHitbox: usize = 0x834; // bool
                pub const m_bUseBones: usize = 0x835; // bool
                pub const m_HitboxSetName: usize = 0x836; // char[128]
                pub const m_flShellSize: usize = 0x8B8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 14
            pub mod C_INIT_CreateWithinSphereTransform {
                pub const m_fRadiusMin: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_fRadiusMax: usize = 0x318; // CPerParticleFloatInput
                pub const m_vecDistanceBias: usize = 0x470; // CPerParticleVecInput
                pub const m_vecDistanceBiasAbs: usize = 0xAC8; // 
                pub const m_TransformInput: usize = 0xAD8; // CParticleTransformInput
                pub const m_fSpeedMin: usize = 0xB40; // CPerParticleFloatInput
                pub const m_fSpeedMax: usize = 0xC98; // CPerParticleFloatInput
                pub const m_fSpeedRandExp: usize = 0xDF0; // float32
                pub const m_bLocalCoords: usize = 0xDF4; // bool
                pub const m_flEndCPGrowthTime: usize = 0xDF8; // float32
                pub const m_LocalCoordinateSystemSpeedMin: usize = 0xE00; // CPerParticleVecInput
                pub const m_LocalCoordinateSystemSpeedMax: usize = 0x1458; // CPerParticleVecInput
                pub const m_nFieldOutput: usize = 0x1AB0; // ParticleAttributeIndex_t
                pub const m_nFieldVelocity: usize = 0x1AB4; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_CreateWithinBox {
                pub const m_vecMin: usize = 0x1C0; // CPerParticleVecInput
                pub const m_vecMax: usize = 0x818; // CPerParticleVecInput
                pub const m_nControlPointNumber: usize = 0xE70; // int32
                pub const m_bLocalSpace: usize = 0xE74; // bool
                pub const m_randomnessParameters: usize = 0xE78; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_CreateOnGrid {
                pub const m_nXCount: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_nYCount: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_nZCount: usize = 0x470; // CParticleCollectionFloatInput
                pub const m_nXSpacing: usize = 0x5C8; // CParticleCollectionFloatInput
                pub const m_nYSpacing: usize = 0x720; // CParticleCollectionFloatInput
                pub const m_nZSpacing: usize = 0x878; // CParticleCollectionFloatInput
                pub const m_nControlPointNumber: usize = 0x9D0; // int32
                pub const m_bLocalSpace: usize = 0x9D4; // bool
                pub const m_bCenter: usize = 0x9D5; // bool
                pub const m_bHollow: usize = 0x9D6; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_PositionOffset {
                pub const m_OffsetMin: usize = 0x1C0; // CPerParticleVecInput
                pub const m_OffsetMax: usize = 0x818; // CPerParticleVecInput
                pub const m_TransformInput: usize = 0xE70; // CParticleTransformInput
                pub const m_bLocalCoords: usize = 0xED8; // bool
                pub const m_bProportional: usize = 0xED9; // bool
                pub const m_randomnessParameters: usize = 0xEDC; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_PositionOffsetToCP {
                pub const m_nControlPointNumberStart: usize = 0x1C0; // int32
                pub const m_nControlPointNumberEnd: usize = 0x1C4; // int32
                pub const m_bLocalCoords: usize = 0x1C8; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 13
            pub mod C_INIT_PositionPlaceOnGround {
                pub const m_flOffset: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flMaxTraceLength: usize = 0x318; // CPerParticleFloatInput
                pub const m_CollisionGroupName: usize = 0x470; // char[128]
                pub const m_nTraceSet: usize = 0x4F0; // ParticleTraceSet_t
                pub const m_nTraceMissBehavior: usize = 0x500; // ParticleTraceMissBehavior_t
                pub const m_bIncludeWater: usize = 0x504; // bool
                pub const m_bSetNormal: usize = 0x505; // bool
                pub const m_bSetPXYZOnly: usize = 0x506; // bool
                pub const m_bTraceAlongNormal: usize = 0x507; // bool
                pub const m_bOffsetonColOnly: usize = 0x508; // bool
                pub const m_flOffsetByRadiusFactor: usize = 0x50C; // float32
                pub const m_nPreserveOffsetCP: usize = 0x510; // int32
                pub const m_nIgnoreCP: usize = 0x514; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_VelocityFromNormal {
                pub const m_fSpeedMin: usize = 0x1C0; // float32
                pub const m_fSpeedMax: usize = 0x1C4; // float32
                pub const m_bIgnoreDt: usize = 0x1C8; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 7
            pub mod C_INIT_VelocityRandom {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_fSpeedMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_fSpeedMax: usize = 0x320; // CPerParticleFloatInput
                pub const m_LocalCoordinateSystemSpeedMin: usize = 0x478; // CPerParticleVecInput
                pub const m_LocalCoordinateSystemSpeedMax: usize = 0xAD0; // CPerParticleVecInput
                pub const m_bIgnoreDT: usize = 0x1128; // bool
                pub const m_randomnessParameters: usize = 0x112C; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_InitialVelocityNoise {
                pub const m_vecAbsVal: usize = 0x1C0; // 
                pub const m_vecAbsValInv: usize = 0x1CC; // 
                pub const m_vecOffsetLoc: usize = 0x1D8; // CPerParticleVecInput
                pub const m_flOffset: usize = 0x830; // CPerParticleFloatInput
                pub const m_vecOutputMin: usize = 0x988; // CPerParticleVecInput
                pub const m_vecOutputMax: usize = 0xFE0; // CPerParticleVecInput
                pub const m_flNoiseScale: usize = 0x1638; // CPerParticleFloatInput
                pub const m_flNoiseScaleLoc: usize = 0x1790; // CPerParticleFloatInput
                pub const m_TransformInput: usize = 0x18E8; // CParticleTransformInput
                pub const m_bIgnoreDt: usize = 0x1950; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_InitialVelocityFromHitbox {
                pub const m_flVelocityMin: usize = 0x1C0; // float32
                pub const m_flVelocityMax: usize = 0x1C4; // float32
                pub const m_nControlPointNumber: usize = 0x1C8; // int32
                pub const m_HitboxSetName: usize = 0x1CC; // char[128]
                pub const m_bUseBones: usize = 0x24C; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_VelocityRadialRandom {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_fSpeedMin: usize = 0x1C4; // float32
                pub const m_fSpeedMax: usize = 0x1C8; // float32
                pub const m_vecLocalCoordinateSystemSpeedScale: usize = 0x1CC; // 
                pub const m_bIgnoreDelta: usize = 0x1D9; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_RandomLifeTime {
                pub const m_fLifetimeMin: usize = 0x1C0; // float32
                pub const m_fLifetimeMax: usize = 0x1C4; // float32
                pub const m_fLifetimeRandExponent: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RandomScalar {
                pub const m_flMin: usize = 0x1C0; // float32
                pub const m_flMax: usize = 0x1C4; // float32
                pub const m_flExponent: usize = 0x1C8; // float32
                pub const m_nFieldOutput: usize = 0x1CC; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RandomVector {
                pub const m_vecMin: usize = 0x1C0; // 
                pub const m_vecMax: usize = 0x1CC; // 
                pub const m_nFieldOutput: usize = 0x1D8; // ParticleAttributeIndex_t
                pub const m_randomnessParameters: usize = 0x1DC; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RandomVectorComponent {
                pub const m_flMin: usize = 0x1C0; // float32
                pub const m_flMax: usize = 0x1C4; // float32
                pub const m_nFieldOutput: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_nComponent: usize = 0x1CC; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_AddVectorToVector {
                pub const m_vecScale: usize = 0x1C0; // 
                pub const m_nFieldOutput: usize = 0x1CC; // ParticleAttributeIndex_t
                pub const m_nFieldInput: usize = 0x1D0; // ParticleAttributeIndex_t
                pub const m_vOffsetMin: usize = 0x1D4; // 
                pub const m_vOffsetMax: usize = 0x1E0; // 
                pub const m_randomnessParameters: usize = 0x1EC; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_RandomAlphaWindowThreshold {
                pub const m_flMin: usize = 0x1C0; // float32
                pub const m_flMax: usize = 0x1C4; // float32
                pub const m_flExponent: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_RandomRadius {
                pub const m_flRadiusMin: usize = 0x1C0; // float32
                pub const m_flRadiusMax: usize = 0x1C4; // float32
                pub const m_flRadiusRandExponent: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RandomAlpha {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nAlphaMin: usize = 0x1C4; // int32
                pub const m_nAlphaMax: usize = 0x1C8; // int32
                pub const m_flAlphaRandExponent: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod CGeneralRandomRotation {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flDegrees: usize = 0x1C4; // float32
                pub const m_flDegreesMin: usize = 0x1C8; // float32
                pub const m_flDegreesMax: usize = 0x1CC; // float32
                pub const m_flRotationRandExponent: usize = 0x1D0; // float32
                pub const m_bRandomlyFlipDirection: usize = 0x1D4; // bool
            }
            // Parent: CGeneralRandomRotation
            // Fields count: 0
            pub mod C_INIT_RandomRotation {
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_Orient2DRelToCP {
                pub const m_nCP: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flRotOffset: usize = 0x1C8; // float32
            }
            // Parent: CGeneralRandomRotation
            // Fields count: 0
            pub mod C_INIT_RandomRotationSpeed {
            }
            // Parent: CGeneralRandomRotation
            // Fields count: 0
            pub mod C_INIT_RandomYaw {
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_RandomColor {
                pub const m_ColorMin: usize = 0x1DC; // Color
                pub const m_ColorMax: usize = 0x1E0; // Color
                pub const m_TintMin: usize = 0x1E4; // Color
                pub const m_TintMax: usize = 0x1E8; // Color
                pub const m_flTintPerc: usize = 0x1EC; // float32
                pub const m_flUpdateThreshold: usize = 0x1F0; // float32
                pub const m_nTintCP: usize = 0x1F4; // int32
                pub const m_nFieldOutput: usize = 0x1F8; // ParticleAttributeIndex_t
                pub const m_nTintBlendMode: usize = 0x1FC; // ParticleColorBlendMode_t
                pub const m_flLightAmplification: usize = 0x200; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 7
            pub mod C_INIT_ColorLitPerParticle {
                pub const m_ColorMin: usize = 0x1D8; // Color
                pub const m_ColorMax: usize = 0x1DC; // Color
                pub const m_TintMin: usize = 0x1E0; // Color
                pub const m_TintMax: usize = 0x1E4; // Color
                pub const m_flTintPerc: usize = 0x1E8; // float32
                pub const m_nTintBlendMode: usize = 0x1EC; // ParticleColorBlendMode_t
                pub const m_flLightAmplification: usize = 0x1F0; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_RandomTrailLength {
                pub const m_flMinLength: usize = 0x1C0; // float32
                pub const m_flMaxLength: usize = 0x1C4; // float32
                pub const m_flLengthRandExponent: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_RandomSequence {
                pub const m_nSequenceMin: usize = 0x1C0; // int32
                pub const m_nSequenceMax: usize = 0x1C4; // int32
                pub const m_bShuffle: usize = 0x1C8; // bool
                pub const m_bLinear: usize = 0x1C9; // bool
                pub const m_WeightedList: usize = 0x1D0; // CUtlVector<SequenceWeightedList_t>
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_SequenceFromCP {
                pub const m_bKillUnused: usize = 0x1C0; // bool
                pub const m_bRadiusScale: usize = 0x1C1; // bool
                pub const m_nCP: usize = 0x1C4; // int32
                pub const m_vecOffset: usize = 0x1C8; // 
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_RandomModelSequence {
                pub const m_ActivityName: usize = 0x1C0; // char[256]
                pub const m_SequenceName: usize = 0x2C0; // char[256]
                pub const m_hModel: usize = 0x3C0; // CStrongHandle<InfoForResourceTypeCModel>
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_ScaleVelocity {
                pub const m_vecScale: usize = 0x1C0; // CParticleCollectionVecInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_PositionWarp {
                pub const m_vecWarpMin: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_vecWarpMax: usize = 0x818; // CParticleCollectionVecInput
                pub const m_nScaleControlPointNumber: usize = 0xE70; // int32
                pub const m_nControlPointNumber: usize = 0xE74; // int32
                pub const m_nRadiusComponent: usize = 0xE78; // int32
                pub const m_flWarpTime: usize = 0xE7C; // float32
                pub const m_flWarpStartTime: usize = 0xE80; // float32
                pub const m_flPrevPosScale: usize = 0xE84; // float32
                pub const m_bInvertWarp: usize = 0xE88; // bool
                pub const m_bUseCount: usize = 0xE89; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_PositionWarpScalar {
                pub const m_vecWarpMin: usize = 0x1C0; // 
                pub const m_vecWarpMax: usize = 0x1CC; // 
                pub const m_InputValue: usize = 0x1D8; // CPerParticleFloatInput
                pub const m_flPrevPosScale: usize = 0x330; // float32
                pub const m_nScaleControlPointNumber: usize = 0x334; // int32
                pub const m_nControlPointNumber: usize = 0x338; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_CreationNoise {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_bAbsVal: usize = 0x1C4; // bool
                pub const m_bAbsValInv: usize = 0x1C5; // bool
                pub const m_flOffset: usize = 0x1C8; // float32
                pub const m_flOutputMin: usize = 0x1CC; // float32
                pub const m_flOutputMax: usize = 0x1D0; // float32
                pub const m_flNoiseScale: usize = 0x1D4; // float32
                pub const m_flNoiseScaleLoc: usize = 0x1D8; // float32
                pub const m_vecOffsetLoc: usize = 0x1DC; // 
                pub const m_flWorldTimeScale: usize = 0x1E8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_CreateAlongPath {
                pub const m_fMaxDistance: usize = 0x1C0; // float32
                pub const m_PathParams: usize = 0x1D0; // CPathParameters
                pub const m_bUseRandomCPs: usize = 0x210; // bool
                pub const m_vEndOffset: usize = 0x214; // 
                pub const m_bSaveOffset: usize = 0x220; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 7
            pub mod C_INIT_MoveBetweenPoints {
                pub const m_flSpeedMin: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flSpeedMax: usize = 0x318; // CPerParticleFloatInput
                pub const m_flEndSpread: usize = 0x470; // CPerParticleFloatInput
                pub const m_flStartOffset: usize = 0x5C8; // CPerParticleFloatInput
                pub const m_flEndOffset: usize = 0x720; // CPerParticleFloatInput
                pub const m_nEndControlPointNumber: usize = 0x878; // int32
                pub const m_bTrailBias: usize = 0x87C; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 11
            pub mod C_INIT_RemapScalar {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
                pub const m_flStartTime: usize = 0x1D8; // float32
                pub const m_flEndTime: usize = 0x1DC; // float32
                pub const m_nSetMethod: usize = 0x1E0; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x1E4; // bool
                pub const m_flRemapBias: usize = 0x1E8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 12
            pub mod C_INIT_RemapParticleCountToScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nInputMin: usize = 0x1C4; // int32
                pub const m_nInputMax: usize = 0x1C8; // int32
                pub const m_nScaleControlPoint: usize = 0x1CC; // int32
                pub const m_nScaleControlPointField: usize = 0x1D0; // int32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_nSetMethod: usize = 0x1DC; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x1E0; // bool
                pub const m_bInvert: usize = 0x1E1; // bool
                pub const m_bWrap: usize = 0x1E2; // bool
                pub const m_flRemapBias: usize = 0x1E4; // float32
            }
            // Parent: C_INIT_RemapParticleCountToScalar
            // Fields count: 4
            pub mod C_INIT_RemapParticleCountToNamedModelElementScalar {
                pub const m_hModel: usize = 0x1F0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_outputMinName: usize = 0x1F8; // CUtlString
                pub const m_outputMaxName: usize = 0x200; // CUtlString
                pub const m_bModelFromRenderer: usize = 0x208; // bool
            }
            // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
            // Fields count: 0
            pub mod C_INIT_RemapParticleCountToNamedModelSequenceScalar {
            }
            // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
            // Fields count: 0
            pub mod C_INIT_RemapParticleCountToNamedModelBodyPartScalar {
            }
            // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
            // Fields count: 0
            pub mod C_INIT_RemapParticleCountToNamedModelMeshGroupScalar {
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_InheritVelocity {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_flVelocityScale: usize = 0x1C4; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_VelocityFromCP {
                pub const m_velocityInput: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_transformInput: usize = 0x818; // CParticleTransformInput
                pub const m_flVelocityScale: usize = 0x880; // float32
                pub const m_bDirectionOnly: usize = 0x884; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 8
            pub mod C_INIT_AgeNoise {
                pub const m_bAbsVal: usize = 0x1C0; // bool
                pub const m_bAbsValInv: usize = 0x1C1; // bool
                pub const m_flOffset: usize = 0x1C4; // float32
                pub const m_flAgeMin: usize = 0x1C8; // float32
                pub const m_flAgeMax: usize = 0x1CC; // float32
                pub const m_flNoiseScale: usize = 0x1D0; // float32
                pub const m_flNoiseScaleLoc: usize = 0x1D4; // float32
                pub const m_vecOffsetLoc: usize = 0x1D8; // 
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_SequenceLifeTime {
                pub const m_flFramerate: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 12
            pub mod C_INIT_RemapScalarToVector {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_vecOutputMin: usize = 0x1D0; // 
                pub const m_vecOutputMax: usize = 0x1DC; // 
                pub const m_flStartTime: usize = 0x1E8; // float32
                pub const m_flEndTime: usize = 0x1EC; // float32
                pub const m_nSetMethod: usize = 0x1F0; // ParticleSetMethod_t
                pub const m_nControlPointNumber: usize = 0x1F4; // int32
                pub const m_bLocalCoords: usize = 0x1F8; // bool
                pub const m_flRemapBias: usize = 0x1FC; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_OffsetVectorToVector {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_vecOutputMin: usize = 0x1C8; // 
                pub const m_vecOutputMax: usize = 0x1D4; // 
                pub const m_randomnessParameters: usize = 0x1E0; // CRandomNumberGeneratorParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_CreateSequentialPathV2 {
                pub const m_fMaxDistance: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flNumToAssign: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_bLoop: usize = 0x470; // bool
                pub const m_bCPPairs: usize = 0x471; // bool
                pub const m_bSaveOffset: usize = 0x472; // bool
                pub const m_PathParams: usize = 0x480; // CPathParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_CreateSequentialPath {
                pub const m_fMaxDistance: usize = 0x1C0; // float32
                pub const m_flNumToAssign: usize = 0x1C4; // float32
                pub const m_bLoop: usize = 0x1C8; // bool
                pub const m_bCPPairs: usize = 0x1C9; // bool
                pub const m_bSaveOffset: usize = 0x1CA; // bool
                pub const m_PathParams: usize = 0x1D0; // CPathParameters
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 13
            pub mod C_INIT_InitialRepulsionVelocity {
                pub const m_CollisionGroupName: usize = 0x1C0; // char[128]
                pub const m_nTraceSet: usize = 0x240; // ParticleTraceSet_t
                pub const m_vecOutputMin: usize = 0x244; // 
                pub const m_vecOutputMax: usize = 0x250; // 
                pub const m_nControlPointNumber: usize = 0x25C; // int32
                pub const m_bPerParticle: usize = 0x260; // bool
                pub const m_bTranslate: usize = 0x261; // bool
                pub const m_bProportional: usize = 0x262; // bool
                pub const m_flTraceLength: usize = 0x264; // float32
                pub const m_bPerParticleTR: usize = 0x268; // bool
                pub const m_bInherit: usize = 0x269; // bool
                pub const m_nChildCP: usize = 0x26C; // int32
                pub const m_nChildGroupID: usize = 0x270; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_RandomYawFlip {
                pub const m_flPercent: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_RandomSecondSequence {
                pub const m_nSequenceMin: usize = 0x1C0; // int32
                pub const m_nSequenceMax: usize = 0x1C4; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 11
            pub mod C_INIT_RemapCPtoScalar {
                pub const m_nCPInput: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nField: usize = 0x1C8; // int32
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_flStartTime: usize = 0x1DC; // float32
                pub const m_flEndTime: usize = 0x1E0; // float32
                pub const m_nSetMethod: usize = 0x1E4; // ParticleSetMethod_t
                pub const m_flRemapBias: usize = 0x1E8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 13
            pub mod C_INIT_RemapTransformToVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vInputMin: usize = 0x1C4; // 
                pub const m_vInputMax: usize = 0x1D0; // 
                pub const m_vOutputMin: usize = 0x1DC; // 
                pub const m_vOutputMax: usize = 0x1E8; // 
                pub const m_TransformInput: usize = 0x1F8; // CParticleTransformInput
                pub const m_LocalSpaceTransform: usize = 0x260; // CParticleTransformInput
                pub const m_flStartTime: usize = 0x2C8; // float32
                pub const m_flEndTime: usize = 0x2CC; // float32
                pub const m_nSetMethod: usize = 0x2D0; // ParticleSetMethod_t
                pub const m_bOffset: usize = 0x2D4; // bool
                pub const m_bAccelerate: usize = 0x2D5; // bool
                pub const m_flRemapBias: usize = 0x2D8; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 9
            pub mod C_INIT_ChaoticAttractor {
                pub const m_flAParm: usize = 0x1C0; // float32
                pub const m_flBParm: usize = 0x1C4; // float32
                pub const m_flCParm: usize = 0x1C8; // float32
                pub const m_flDParm: usize = 0x1CC; // float32
                pub const m_flScale: usize = 0x1D0; // float32
                pub const m_flSpeedMin: usize = 0x1D4; // float32
                pub const m_flSpeedMax: usize = 0x1D8; // float32
                pub const m_nBaseCP: usize = 0x1DC; // int32
                pub const m_bUniformSpeed: usize = 0x1E0; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_CreateFromParentParticles {
                pub const m_flVelocityScale: usize = 0x1C0; // float32
                pub const m_flIncrement: usize = 0x1C4; // float32
                pub const m_bRandomDistribution: usize = 0x1C8; // bool
                pub const m_nRandomSeed: usize = 0x1CC; // int32
                pub const m_bSubFrame: usize = 0x1D0; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_InheritFromParentParticles {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nIncrement: usize = 0x1C8; // int32
                pub const m_bRandomDistribution: usize = 0x1CC; // bool
                pub const m_nRandomSeed: usize = 0x1D0; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_CreateFromCPs {
                pub const m_nIncrement: usize = 0x1C0; // int32
                pub const m_nMinCP: usize = 0x1C4; // int32
                pub const m_nMaxCP: usize = 0x1C8; // int32
                pub const m_nDynamicCPCount: usize = 0x1D0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 15
            pub mod C_INIT_DistanceToCPInit {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x478; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x5D0; // CPerParticleFloatInput
                pub const m_nStartCP: usize = 0x728; // int32
                pub const m_bLOS: usize = 0x72C; // bool
                pub const m_CollisionGroupName: usize = 0x72D; // char[128]
                pub const m_nTraceSet: usize = 0x7B0; // ParticleTraceSet_t
                pub const m_flMaxTraceLength: usize = 0x7B8; // CPerParticleFloatInput
                pub const m_flLOSScale: usize = 0x910; // float32
                pub const m_nSetMethod: usize = 0x914; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x918; // bool
                pub const m_vecDistanceScale: usize = 0x91C; // 
                pub const m_flRemapBias: usize = 0x928; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 8
            pub mod C_INIT_LifespanFromVelocity {
                pub const m_vecComponentScale: usize = 0x1C0; // 
                pub const m_flTraceOffset: usize = 0x1CC; // float32
                pub const m_flMaxTraceLength: usize = 0x1D0; // float32
                pub const m_flTraceTolerance: usize = 0x1D4; // float32
                pub const m_nMaxPlanes: usize = 0x1D8; // int32
                pub const m_CollisionGroupName: usize = 0x1E0; // char[128]
                pub const m_nTraceSet: usize = 0x260; // ParticleTraceSet_t
                pub const m_bIncludeWater: usize = 0x270; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_CreateFromPlaneCache {
                pub const m_vecOffsetMin: usize = 0x1C0; // 
                pub const m_vecOffsetMax: usize = 0x1CC; // 
                pub const m_bUseNormal: usize = 0x1D9; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_ModelCull {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_bBoundBox: usize = 0x1C4; // bool
                pub const m_bCullOutside: usize = 0x1C5; // bool
                pub const m_bUseBones: usize = 0x1C6; // bool
                pub const m_HitboxSetName: usize = 0x1C7; // char[128]
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_DistanceCull {
                pub const m_nControlPoint: usize = 0x1C0; // int32
                pub const m_flDistance: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_bCullInside: usize = 0x320; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 3
            pub mod C_INIT_PlaneCull {
                pub const m_nControlPoint: usize = 0x1C0; // int32
                pub const m_flDistance: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_bCullInside: usize = 0x320; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_DistanceToNeighborCull {
                pub const m_flDistance: usize = 0x1C0; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 8
            pub mod C_INIT_RtEnvCull {
                pub const m_vecTestDir: usize = 0x1C0; // 
                pub const m_vecTestNormal: usize = 0x1CC; // 
                pub const m_bUseVelocity: usize = 0x1D8; // bool
                pub const m_bCullOnMiss: usize = 0x1D9; // bool
                pub const m_bLifeAdjust: usize = 0x1DA; // bool
                pub const m_RtEnvName: usize = 0x1DB; // char[128]
                pub const m_nRTEnvCP: usize = 0x25C; // int32
                pub const m_nComponent: usize = 0x260; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_NormalAlignToCP {
                pub const m_transformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_nControlPointAxis: usize = 0x228; // ParticleControlPointAxis_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_NormalOffset {
                pub const m_OffsetMin: usize = 0x1C0; // 
                pub const m_OffsetMax: usize = 0x1CC; // 
                pub const m_nControlPointNumber: usize = 0x1D8; // int32
                pub const m_bLocalCoords: usize = 0x1DC; // bool
                pub const m_bNormalize: usize = 0x1DD; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_RemapSpeedToScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
                pub const m_flStartTime: usize = 0x1C8; // float32
                pub const m_flEndTime: usize = 0x1CC; // float32
                pub const m_flInputMin: usize = 0x1D0; // float32
                pub const m_flInputMax: usize = 0x1D4; // float32
                pub const m_flOutputMin: usize = 0x1D8; // float32
                pub const m_flOutputMax: usize = 0x1DC; // float32
                pub const m_nSetMethod: usize = 0x1E0; // ParticleSetMethod_t
                pub const m_bPerParticle: usize = 0x1E4; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 10
            pub mod C_INIT_InitFromCPSnapshot {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nAttributeToRead: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nAttributeToWrite: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_nLocalSpaceCP: usize = 0x1CC; // int32
                pub const m_bRandom: usize = 0x1D0; // bool
                pub const m_bReverse: usize = 0x1D1; // bool
                pub const m_nSnapShotIncrement: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_nManualSnapshotIndex: usize = 0x330; // CPerParticleFloatInput
                pub const m_nRandomSeed: usize = 0x488; // int32
                pub const m_bLocalSpaceAngles: usize = 0x48C; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 19
            pub mod C_INIT_InitSkinnedPositionFromCPSnapshot {
                pub const m_nSnapshotControlPointNumber: usize = 0x1C0; // int32
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
                pub const m_bRandom: usize = 0x1C8; // bool
                pub const m_nRandomSeed: usize = 0x1CC; // int32
                pub const m_bRigid: usize = 0x1D0; // bool
                pub const m_bSetNormal: usize = 0x1D1; // bool
                pub const m_bIgnoreDt: usize = 0x1D2; // bool
                pub const m_flMinNormalVelocity: usize = 0x1D4; // float32
                pub const m_flMaxNormalVelocity: usize = 0x1D8; // float32
                pub const m_nIndexType: usize = 0x1DC; // SnapshotIndexType_t
                pub const m_flReadIndex: usize = 0x1E0; // CPerParticleFloatInput
                pub const m_flIncrement: usize = 0x338; // float32
                pub const m_nFullLoopIncrement: usize = 0x33C; // int32
                pub const m_nSnapShotStartPoint: usize = 0x340; // int32
                pub const m_flBoneVelocity: usize = 0x344; // float32
                pub const m_flBoneVelocityMax: usize = 0x348; // float32
                pub const m_bCopyColor: usize = 0x34C; // bool
                pub const m_bCopyAlpha: usize = 0x34D; // bool
                pub const m_bSetRadius: usize = 0x34E; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_InitFromParentKilled {
                pub const m_nAttributeToCopy: usize = 0x1C0; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_InitFromVectorFieldSnapshot {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nLocalSpaceCP: usize = 0x1C4; // int32
                pub const m_nWeightUpdateCP: usize = 0x1C8; // int32
                pub const m_bUseVerticalVelocity: usize = 0x1CC; // bool
                pub const m_vecScale: usize = 0x1D0; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_RemapInitialDirectionToTransformToVector {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_nFieldOutput: usize = 0x228; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x22C; // float32
                pub const m_flOffsetRot: usize = 0x230; // float32
                pub const m_vecOffsetAxis: usize = 0x234; // 
                pub const m_bNormalize: usize = 0x240; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RemapInitialTransformDirectionToRotation {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_nFieldOutput: usize = 0x228; // ParticleAttributeIndex_t
                pub const m_flOffsetRot: usize = 0x22C; // float32
                pub const m_nComponent: usize = 0x230; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_RemapQAnglesToRotation {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_RemapTransformOrientationToRotations {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_vecRotation: usize = 0x228; // 
                pub const m_bUseQuat: usize = 0x234; // bool
                pub const m_bWriteNormal: usize = 0x235; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_SetRigidAttachment {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_bLocalSpace: usize = 0x1CC; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_RemapInitialVisibilityScalar {
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 1
            pub mod C_INIT_RadiusFromCPObject {
                pub const m_nControlPoint: usize = 0x1C0; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 8
            pub mod C_INIT_InitialSequenceFromModel {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nFieldOutputAnim: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_nSetMethod: usize = 0x1DC; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_GlobalScale {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_nScaleControlPointNumber: usize = 0x1C4; // int32
                pub const m_nControlPointNumber: usize = 0x1C8; // int32
                pub const m_bScaleRadius: usize = 0x1CC; // bool
                pub const m_bScalePosition: usize = 0x1CD; // bool
                pub const m_bScaleVelocity: usize = 0x1CE; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_PointList {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_pointList: usize = 0x1C8; // CUtlVector<PointDefinition_t>
                pub const m_bPlaceAlongPath: usize = 0x1E0; // bool
                pub const m_bClosedLoop: usize = 0x1E1; // bool
                pub const m_nNumPointsAlongPath: usize = 0x1E4; // int32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_RandomNamedModelElement {
                pub const m_hModel: usize = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_names: usize = 0x1C8; // CUtlVector<CUtlString>
                pub const m_bShuffle: usize = 0x1E0; // bool
                pub const m_bLinear: usize = 0x1E1; // bool
                pub const m_bModelFromRenderer: usize = 0x1E2; // bool
                pub const m_nFieldOutput: usize = 0x1E4; // ParticleAttributeIndex_t
            }
            // Parent: C_INIT_RandomNamedModelElement
            // Fields count: 0
            pub mod C_INIT_RandomNamedModelSequence {
            }
            // Parent: C_INIT_RandomNamedModelElement
            // Fields count: 0
            pub mod C_INIT_RandomNamedModelBodyPart {
            }
            // Parent: C_INIT_RandomNamedModelElement
            // Fields count: 0
            pub mod C_INIT_RandomNamedModelMeshGroup {
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 7
            pub mod C_INIT_RemapNamedModelElementToScalar {
                pub const m_hModel: usize = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_names: usize = 0x1C8; // CUtlVector<CUtlString>
                pub const m_values: usize = 0x1E0; // CUtlVector<float32>
                pub const m_nFieldInput: usize = 0x1F8; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1FC; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x200; // ParticleSetMethod_t
                pub const m_bModelFromRenderer: usize = 0x204; // bool
            }
            // Parent: C_INIT_RemapNamedModelElementToScalar
            // Fields count: 0
            pub mod C_INIT_RemapNamedModelSequenceToScalar {
            }
            // Parent: C_INIT_RemapNamedModelElementToScalar
            // Fields count: 0
            pub mod C_INIT_RemapNamedModelBodyPartToScalar {
            }
            // Parent: C_INIT_RemapNamedModelElementToScalar
            // Fields count: 0
            pub mod C_INIT_RemapNamedModelMeshGroupToScalar {
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 18
            pub mod C_INIT_StatusEffect {
                pub const m_nDetail2Combo: usize = 0x1C0; // Detail2Combo_t
                pub const m_flDetail2Rotation: usize = 0x1C4; // float32
                pub const m_flDetail2Scale: usize = 0x1C8; // float32
                pub const m_flDetail2BlendFactor: usize = 0x1CC; // float32
                pub const m_flColorWarpIntensity: usize = 0x1D0; // float32
                pub const m_flDiffuseWarpBlendToFull: usize = 0x1D4; // float32
                pub const m_flEnvMapIntensity: usize = 0x1D8; // float32
                pub const m_flAmbientScale: usize = 0x1DC; // float32
                pub const m_specularColor: usize = 0x1E0; // Color
                pub const m_flSpecularScale: usize = 0x1E4; // float32
                pub const m_flSpecularExponent: usize = 0x1E8; // float32
                pub const m_flSpecularExponentBlendToFull: usize = 0x1EC; // float32
                pub const m_flSpecularBlendToFull: usize = 0x1F0; // float32
                pub const m_rimLightColor: usize = 0x1F4; // Color
                pub const m_flRimLightScale: usize = 0x1F8; // float32
                pub const m_flReflectionsTintByBaseBlendToNone: usize = 0x1FC; // float32
                pub const m_flMetalnessBlendToFull: usize = 0x200; // float32
                pub const m_flSelfIllumBlendToFull: usize = 0x204; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 19
            pub mod C_INIT_StatusEffectCitadel {
                pub const m_flSFXColorWarpAmount: usize = 0x1C0; // float32
                pub const m_flSFXNormalAmount: usize = 0x1C4; // float32
                pub const m_flSFXMetalnessAmount: usize = 0x1C8; // float32
                pub const m_flSFXRoughnessAmount: usize = 0x1CC; // float32
                pub const m_flSFXSelfIllumAmount: usize = 0x1D0; // float32
                pub const m_flSFXSScale: usize = 0x1D4; // float32
                pub const m_flSFXSScrollX: usize = 0x1D8; // float32
                pub const m_flSFXSScrollY: usize = 0x1DC; // float32
                pub const m_flSFXSScrollZ: usize = 0x1E0; // float32
                pub const m_flSFXSOffsetX: usize = 0x1E4; // float32
                pub const m_flSFXSOffsetY: usize = 0x1E8; // float32
                pub const m_flSFXSOffsetZ: usize = 0x1EC; // float32
                pub const m_nDetailCombo: usize = 0x1F0; // DetailCombo_t
                pub const m_flSFXSDetailAmount: usize = 0x1F4; // float32
                pub const m_flSFXSDetailScale: usize = 0x1F8; // float32
                pub const m_flSFXSDetailScrollX: usize = 0x1FC; // float32
                pub const m_flSFXSDetailScrollY: usize = 0x200; // float32
                pub const m_flSFXSDetailScrollZ: usize = 0x204; // float32
                pub const m_flSFXSUseModelUVs: usize = 0x208; // float32
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_CreateParticleImpulse {
                pub const m_InputRadius: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_InputMagnitude: usize = 0x318; // CPerParticleFloatInput
                pub const m_nFalloffFunction: usize = 0x470; // ParticleFalloffFunction_t
                pub const m_InputFalloffExp: usize = 0x478; // CPerParticleFloatInput
                pub const m_nImpulseType: usize = 0x5D0; // ParticleImpulseType_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_QuantizeFloat {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_SetAttributeToScalarExpression {
                pub const m_nExpression: usize = 0x1C0; // ScalarExpressionType_t
                pub const m_flInput1: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInput2: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputRemap: usize = 0x478; // CParticleRemapFloatInput
                pub const m_nOutputField: usize = 0x5D0; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x5D4; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 6
            pub mod C_INIT_SetVectorAttributeToVectorExpression {
                pub const m_nExpression: usize = 0x1C0; // VectorExpressionType_t
                pub const m_vInput1: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vInput2: usize = 0x820; // CPerParticleVecInput
                pub const m_nOutputField: usize = 0xE78; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0xE7C; // ParticleSetMethod_t
                pub const m_bNormalizedOutput: usize = 0xE80; // bool
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_InitFloatCollection {
                pub const m_InputValue: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 4
            pub mod C_INIT_InitFloat {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x31C; // ParticleSetMethod_t
                pub const m_InputStrength: usize = 0x320; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 2
            pub mod C_INIT_InitVecCollection {
                pub const m_InputValue: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_nOutputField: usize = 0x818; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionInitializer
            // Fields count: 5
            pub mod C_INIT_InitVec {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleVecInput
                pub const m_nOutputField: usize = 0x818; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x81C; // ParticleSetMethod_t
                pub const m_bNormalizedOutput: usize = 0x820; // bool
                pub const m_bWritePreviousPosition: usize = 0x821; // bool
            }
            // Parent: CParticleFunctionEmitter
            // Fields count: 6
            pub mod C_OP_InstantaneousEmitter {
                pub const m_nParticlesToEmit: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flStartTime: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_flInitFromKilledParentParticles: usize = 0x470; // float32
                pub const m_flParentParticleScale: usize = 0x478; // CParticleCollectionFloatInput
                pub const m_nMaxEmittedPerFrame: usize = 0x5D0; // int32
                pub const m_nSnapshotControlPoint: usize = 0x5D4; // int32
            }
            // Parent: CParticleFunctionEmitter
            // Fields count: 10
            pub mod C_OP_ContinuousEmitter {
                pub const m_flEmissionDuration: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flStartTime: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_flEmitRate: usize = 0x470; // CParticleCollectionFloatInput
                pub const m_flEmissionScale: usize = 0x5C8; // float32
                pub const m_flScalePerParentParticle: usize = 0x5CC; // float32
                pub const m_bInitFromKilledParentParticles: usize = 0x5D0; // bool
                pub const m_nSnapshotControlPoint: usize = 0x5D4; // int32
                pub const m_nLimitPerUpdate: usize = 0x5D8; // int32
                pub const m_bForceEmitOnFirstUpdate: usize = 0x5DC; // bool
                pub const m_bForceEmitOnLastUpdate: usize = 0x5DD; // bool
            }
            // Parent: CParticleFunctionEmitter
            // Fields count: 15
            pub mod C_OP_NoiseEmitter {
                pub const m_flEmissionDuration: usize = 0x1C0; // float32
                pub const m_flStartTime: usize = 0x1C4; // float32
                pub const m_flEmissionScale: usize = 0x1C8; // float32
                pub const m_nScaleControlPoint: usize = 0x1CC; // int32
                pub const m_nScaleControlPointField: usize = 0x1D0; // int32
                pub const m_nWorldNoisePoint: usize = 0x1D4; // int32
                pub const m_bAbsVal: usize = 0x1D8; // bool
                pub const m_bAbsValInv: usize = 0x1D9; // bool
                pub const m_flOffset: usize = 0x1DC; // float32
                pub const m_flOutputMin: usize = 0x1E0; // float32
                pub const m_flOutputMax: usize = 0x1E4; // float32
                pub const m_flNoiseScale: usize = 0x1E8; // float32
                pub const m_flWorldNoiseScale: usize = 0x1EC; // float32
                pub const m_vecOffsetLoc: usize = 0x1F0; // 
                pub const m_flWorldTimeScale: usize = 0x1FC; // float32
            }
            // Parent: CParticleFunctionEmitter
            // Fields count: 8
            pub mod C_OP_MaintainEmitter {
                pub const m_nParticlesToMaintain: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flStartTime: usize = 0x318; // float32
                pub const m_flEmissionDuration: usize = 0x320; // CParticleCollectionFloatInput
                pub const m_flEmissionRate: usize = 0x478; // float32
                pub const m_nSnapshotControlPoint: usize = 0x47C; // int32
                pub const m_bEmitInstantaneously: usize = 0x480; // bool
                pub const m_bFinalEmitOnStop: usize = 0x481; // bool
                pub const m_flScale: usize = 0x488; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionForce
            // Fields count: 2
            pub mod C_OP_RandomForce {
                pub const m_MinForce: usize = 0x1D0; // 
                pub const m_MaxForce: usize = 0x1DC; // 
            }
            // Parent: CParticleFunctionForce
            // Fields count: 2
            pub mod C_OP_CPVelocityForce {
                pub const m_nControlPointNumber: usize = 0x1D0; // int32
                pub const m_flScale: usize = 0x1D8; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionForce
            // Fields count: 3
            pub mod C_OP_ParentVortices {
                pub const m_flForceScale: usize = 0x1D0; // float32
                pub const m_vecTwistAxis: usize = 0x1D4; // 
                pub const m_bFlipBasedOnYaw: usize = 0x1E0; // bool
            }
            // Parent: CParticleFunctionForce
            // Fields count: 4
            pub mod C_OP_TwistAroundAxis {
                pub const m_fForceAmount: usize = 0x1D0; // float32
                pub const m_TwistAxis: usize = 0x1D4; // 
                pub const m_bLocalSpace: usize = 0x1E0; // bool
                pub const m_nControlPointNumber: usize = 0x1E4; // int32
            }
            // Parent: CParticleFunctionForce
            // Fields count: 6
            pub mod C_OP_AttractToControlPoint {
                pub const m_vecComponentScale: usize = 0x1D0; // 
                pub const m_fForceAmount: usize = 0x1E0; // CPerParticleFloatInput
                pub const m_fFalloffPower: usize = 0x338; // float32
                pub const m_TransformInput: usize = 0x340; // CParticleTransformInput
                pub const m_fForceAmountMin: usize = 0x3A8; // CPerParticleFloatInput
                pub const m_bApplyMinForce: usize = 0x500; // bool
            }
            // Parent: CParticleFunctionForce
            // Fields count: 7
            pub mod C_OP_ForceBasedOnDistanceToPlane {
                pub const m_flMinDist: usize = 0x1D0; // float32
                pub const m_vecForceAtMinDist: usize = 0x1D4; // 
                pub const m_flMaxDist: usize = 0x1E0; // float32
                pub const m_vecForceAtMaxDist: usize = 0x1E4; // 
                pub const m_vecPlaneNormal: usize = 0x1F0; // 
                pub const m_nControlPointNumber: usize = 0x1FC; // int32
                pub const m_flExponent: usize = 0x200; // float32
            }
            // Parent: CParticleFunctionForce
            // Fields count: 4
            pub mod C_OP_TimeVaryingForce {
                pub const m_flStartLerpTime: usize = 0x1D0; // float32
                pub const m_StartingForce: usize = 0x1D4; // 
                pub const m_flEndLerpTime: usize = 0x1E0; // float32
                pub const m_EndingForce: usize = 0x1E4; // 
            }
            // Parent: CParticleFunctionForce
            // Fields count: 8
            pub mod C_OP_TurbulenceForce {
                pub const m_flNoiseCoordScale0: usize = 0x1D0; // float32
                pub const m_flNoiseCoordScale1: usize = 0x1D4; // float32
                pub const m_flNoiseCoordScale2: usize = 0x1D8; // float32
                pub const m_flNoiseCoordScale3: usize = 0x1DC; // float32
                pub const m_vecNoiseAmount0: usize = 0x1E0; // 
                pub const m_vecNoiseAmount1: usize = 0x1EC; // 
                pub const m_vecNoiseAmount2: usize = 0x1F8; // 
                pub const m_vecNoiseAmount3: usize = 0x204; // 
            }
            // Parent: CParticleFunctionForce
            // Fields count: 7
            pub mod C_OP_CurlNoiseForce {
                pub const m_nNoiseType: usize = 0x1D0; // ParticleDirectionNoiseType_t
                pub const m_vecNoiseFreq: usize = 0x1D8; // CPerParticleVecInput
                pub const m_vecNoiseScale: usize = 0x830; // CPerParticleVecInput
                pub const m_vecOffset: usize = 0xE88; // CPerParticleVecInput
                pub const m_vecOffsetRate: usize = 0x14E0; // CPerParticleVecInput
                pub const m_flWorleySeed: usize = 0x1B38; // CPerParticleFloatInput
                pub const m_flWorleyJitter: usize = 0x1C90; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionForce
            // Fields count: 3
            pub mod C_OP_PerParticleForce {
                pub const m_flForceScale: usize = 0x1D0; // CPerParticleFloatInput
                pub const m_vForce: usize = 0x328; // CPerParticleVecInput
                pub const m_nCP: usize = 0x980; // int32
            }
            // Parent: CParticleFunctionForce
            // Fields count: 1
            pub mod C_OP_WindForce {
                pub const m_vForce: usize = 0x1D0; // 
            }
            // Parent: CParticleFunctionForce
            // Fields count: 11
            pub mod C_OP_ExternalWindForce {
                pub const m_vecSamplePosition: usize = 0x1D0; // CPerParticleVecInput
                pub const m_vecScale: usize = 0x828; // CPerParticleVecInput
                pub const m_bSampleWind: usize = 0xE80; // bool
                pub const m_bSampleWater: usize = 0xE81; // bool
                pub const m_bDampenNearWaterPlane: usize = 0xE82; // bool
                pub const m_bSampleGravity: usize = 0xE83; // bool
                pub const m_vecGravityForce: usize = 0xE88; // CPerParticleVecInput
                pub const m_bUseBasicMovementGravity: usize = 0x14E0; // bool
                pub const m_flLocalGravityScale: usize = 0x14E8; // CPerParticleFloatInput
                pub const m_flLocalBuoyancyScale: usize = 0x1640; // CPerParticleFloatInput
                pub const m_vecBuoyancyForce: usize = 0x1798; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionForce
            // Fields count: 5
            pub mod C_OP_ExternalGameImpulseForce {
                pub const m_flForceScale: usize = 0x1D0; // CPerParticleFloatInput
                pub const m_bRopes: usize = 0x328; // bool
                pub const m_bRopesZOnly: usize = 0x329; // bool
                pub const m_bExplosions: usize = 0x32A; // bool
                pub const m_bParticles: usize = 0x32B; // bool
            }
            // Parent: CParticleFunctionForce
            // Fields count: 3
            pub mod C_OP_LocalAccelerationForce {
                pub const m_nCP: usize = 0x1D0; // int32
                pub const m_nScaleCP: usize = 0x1D4; // int32
                pub const m_vecAccel: usize = 0x1D8; // CParticleCollectionVecInput
            }
            // Parent: CParticleFunctionForce
            // Fields count: 3
            pub mod C_OP_DensityForce {
                pub const m_flRadiusScale: usize = 0x1D0; // float32
                pub const m_flForceScale: usize = 0x1D4; // float32
                pub const m_flTargetDensity: usize = 0x1D8; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_BasicMovement {
                pub const m_Gravity: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_fDrag: usize = 0x818; // CParticleCollectionFloatInput
                pub const m_nMaxConstraintPasses: usize = 0x970; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_FadeAndKill {
                pub const m_flStartFadeInTime: usize = 0x1C0; // float32
                pub const m_flEndFadeInTime: usize = 0x1C4; // float32
                pub const m_flStartFadeOutTime: usize = 0x1C8; // float32
                pub const m_flEndFadeOutTime: usize = 0x1CC; // float32
                pub const m_flStartAlpha: usize = 0x1D0; // float32
                pub const m_flEndAlpha: usize = 0x1D4; // float32
                pub const m_bForcePreserveParticleOrder: usize = 0x1D8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_FadeAndKillForTracers {
                pub const m_flStartFadeInTime: usize = 0x1C0; // float32
                pub const m_flEndFadeInTime: usize = 0x1C4; // float32
                pub const m_flStartFadeOutTime: usize = 0x1C8; // float32
                pub const m_flEndFadeOutTime: usize = 0x1CC; // float32
                pub const m_flStartAlpha: usize = 0x1D0; // float32
                pub const m_flEndAlpha: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_FadeIn {
                pub const m_flFadeInTimeMin: usize = 0x1C0; // float32
                pub const m_flFadeInTimeMax: usize = 0x1C4; // float32
                pub const m_flFadeInTimeExp: usize = 0x1C8; // float32
                pub const m_bProportional: usize = 0x1CC; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_FadeOut {
                pub const m_flFadeOutTimeMin: usize = 0x1C0; // float32
                pub const m_flFadeOutTimeMax: usize = 0x1C4; // float32
                pub const m_flFadeOutTimeExp: usize = 0x1C8; // float32
                pub const m_flFadeBias: usize = 0x1CC; // float32
                pub const m_bProportional: usize = 0x200; // bool
                pub const m_bEaseInAndOut: usize = 0x201; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_FadeInSimple {
                pub const m_flFadeInTime: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_FadeOutSimple {
                pub const m_flFadeOutTime: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_ClampScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flOutputMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x320; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_ClampVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecOutputMin: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vecOutputMax: usize = 0x820; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 13
            pub mod C_OP_OscillateScalar {
                pub const m_RateMin: usize = 0x1C0; // float32
                pub const m_RateMax: usize = 0x1C4; // float32
                pub const m_FrequencyMin: usize = 0x1C8; // float32
                pub const m_FrequencyMax: usize = 0x1CC; // float32
                pub const m_nField: usize = 0x1D0; // ParticleAttributeIndex_t
                pub const m_bProportional: usize = 0x1D4; // bool
                pub const m_bProportionalOp: usize = 0x1D5; // bool
                pub const m_flStartTime_min: usize = 0x1D8; // float32
                pub const m_flStartTime_max: usize = 0x1DC; // float32
                pub const m_flEndTime_min: usize = 0x1E0; // float32
                pub const m_flEndTime_max: usize = 0x1E4; // float32
                pub const m_flOscMult: usize = 0x1E8; // float32
                pub const m_flOscAdd: usize = 0x1EC; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_OscillateScalarSimple {
                pub const m_Rate: usize = 0x1C0; // float32
                pub const m_Frequency: usize = 0x1C4; // float32
                pub const m_nField: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_flOscMult: usize = 0x1CC; // float32
                pub const m_flOscAdd: usize = 0x1D0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 15
            pub mod C_OP_OscillateVector {
                pub const m_RateMin: usize = 0x1C0; // 
                pub const m_RateMax: usize = 0x1CC; // 
                pub const m_FrequencyMin: usize = 0x1D8; // 
                pub const m_FrequencyMax: usize = 0x1E4; // 
                pub const m_nField: usize = 0x1F0; // ParticleAttributeIndex_t
                pub const m_bProportional: usize = 0x1F4; // bool
                pub const m_bProportionalOp: usize = 0x1F5; // bool
                pub const m_bOffset: usize = 0x1F6; // bool
                pub const m_flStartTime_min: usize = 0x1F8; // float32
                pub const m_flStartTime_max: usize = 0x1FC; // float32
                pub const m_flEndTime_min: usize = 0x200; // float32
                pub const m_flEndTime_max: usize = 0x204; // float32
                pub const m_flOscMult: usize = 0x208; // CPerParticleFloatInput
                pub const m_flOscAdd: usize = 0x360; // CPerParticleFloatInput
                pub const m_flRateScale: usize = 0x4B8; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_OscillateVectorSimple {
                pub const m_Rate: usize = 0x1C0; // 
                pub const m_Frequency: usize = 0x1CC; // 
                pub const m_nField: usize = 0x1D8; // ParticleAttributeIndex_t
                pub const m_flOscMult: usize = 0x1DC; // float32
                pub const m_flOscAdd: usize = 0x1E0; // float32
                pub const m_bOffset: usize = 0x1E4; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_DifferencePreviousParticle {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
                pub const m_nSetMethod: usize = 0x1D8; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x1DC; // bool
                pub const m_bSetPreviousParticle: usize = 0x1DD; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_PointVectorAtNextParticle {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInterpolation: usize = 0x1C8; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapScalar {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
                pub const m_bOldCode: usize = 0x1D8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapDensityToVector {
                pub const m_flRadiusScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flDensityMin: usize = 0x1C8; // float32
                pub const m_flDensityMax: usize = 0x1CC; // float32
                pub const m_vecOutputMin: usize = 0x1D0; // 
                pub const m_vecOutputMax: usize = 0x1DC; // 
                pub const m_bUseParentDensity: usize = 0x1E8; // bool
                pub const m_nVoxelGridResolution: usize = 0x1EC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_Diffusion {
                pub const m_flRadiusScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nVoxelGridResolution: usize = 0x1C8; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_RemapScalarEndCap {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_ReinitializeScalarEndCap {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flOutputMin: usize = 0x1C4; // float32
                pub const m_flOutputMax: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapScalarOnceTimed {
                pub const m_bProportional: usize = 0x1C0; // bool
                pub const m_nFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_flRemapTime: usize = 0x1DC; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapParticleCountOnScalarEndCap {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nInputMin: usize = 0x1C4; // int32
                pub const m_nInputMax: usize = 0x1C8; // int32
                pub const m_flOutputMin: usize = 0x1CC; // float32
                pub const m_flOutputMax: usize = 0x1D0; // float32
                pub const m_bBackwards: usize = 0x1D4; // bool
                pub const m_nSetMethod: usize = 0x1D8; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapParticleCountToScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nInputMin: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_nInputMax: usize = 0x320; // CParticleCollectionFloatInput
                pub const m_flOutputMin: usize = 0x478; // CParticleCollectionFloatInput
                pub const m_flOutputMax: usize = 0x5D0; // CParticleCollectionFloatInput
                pub const m_bActiveRange: usize = 0x728; // bool
                pub const m_nSetMethod: usize = 0x72C; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapVisibilityScalar {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // float32
                pub const m_flInputMax: usize = 0x1CC; // float32
                pub const m_flOutputMin: usize = 0x1D0; // float32
                pub const m_flOutputMax: usize = 0x1D4; // float32
                pub const m_flRadiusScale: usize = 0x1D8; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapTransformVisibilityToScalar {
                pub const m_nSetMethod: usize = 0x1C0; // ParticleSetMethod_t
                pub const m_TransformInput: usize = 0x1C8; // CParticleTransformInput
                pub const m_nFieldOutput: usize = 0x230; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x234; // float32
                pub const m_flInputMax: usize = 0x238; // float32
                pub const m_flOutputMin: usize = 0x23C; // float32
                pub const m_flOutputMax: usize = 0x240; // float32
                pub const m_flRadius: usize = 0x244; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapTransformVisibilityToVector {
                pub const m_nSetMethod: usize = 0x1C0; // ParticleSetMethod_t
                pub const m_TransformInput: usize = 0x1C8; // CParticleTransformInput
                pub const m_nFieldOutput: usize = 0x230; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x234; // float32
                pub const m_flInputMax: usize = 0x238; // float32
                pub const m_vecOutputMin: usize = 0x23C; // 
                pub const m_vecOutputMax: usize = 0x248; // 
                pub const m_flRadius: usize = 0x254; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_LerpScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flOutput: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flStartTime: usize = 0x320; // float32
                pub const m_flEndTime: usize = 0x324; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_LerpEndCapScalar {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flOutput: usize = 0x1C4; // float32
                pub const m_flLerpTime: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_LerpEndCapVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecOutput: usize = 0x1C4; // 
                pub const m_flLerpTime: usize = 0x1D0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_LerpVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecOutput: usize = 0x1C4; // 
                pub const m_flStartTime: usize = 0x1D0; // float32
                pub const m_flEndTime: usize = 0x1D4; // float32
                pub const m_nSetMethod: usize = 0x1D8; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_LerpToOtherAttribute {
                pub const m_flInterpolation: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_nFieldInputFrom: usize = 0x318; // ParticleAttributeIndex_t
                pub const m_nFieldInput: usize = 0x31C; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x320; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapSpeed {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C4; // float32
                pub const m_flInputMax: usize = 0x1C8; // float32
                pub const m_flOutputMin: usize = 0x1CC; // float32
                pub const m_flOutputMax: usize = 0x1D0; // float32
                pub const m_nSetMethod: usize = 0x1D4; // ParticleSetMethod_t
                pub const m_bIgnoreDelta: usize = 0x1D8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_RemapVectortoCP {
                pub const m_nOutControlPointNumber: usize = 0x1C0; // int32
                pub const m_nFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nParticleNumber: usize = 0x1C8; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RampScalarLinear {
                pub const m_RateMin: usize = 0x1C0; // float32
                pub const m_RateMax: usize = 0x1C4; // float32
                pub const m_flStartTime_min: usize = 0x1C8; // float32
                pub const m_flStartTime_max: usize = 0x1CC; // float32
                pub const m_flEndTime_min: usize = 0x1D0; // float32
                pub const m_flEndTime_max: usize = 0x1D4; // float32
                pub const m_nField: usize = 0x200; // ParticleAttributeIndex_t
                pub const m_bProportionalOp: usize = 0x204; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 10
            pub mod C_OP_RampScalarSpline {
                pub const m_RateMin: usize = 0x1C0; // float32
                pub const m_RateMax: usize = 0x1C4; // float32
                pub const m_flStartTime_min: usize = 0x1C8; // float32
                pub const m_flStartTime_max: usize = 0x1CC; // float32
                pub const m_flEndTime_min: usize = 0x1D0; // float32
                pub const m_flEndTime_max: usize = 0x1D4; // float32
                pub const m_flBias: usize = 0x1D8; // float32
                pub const m_nField: usize = 0x200; // ParticleAttributeIndex_t
                pub const m_bProportionalOp: usize = 0x204; // bool
                pub const m_bEaseOut: usize = 0x205; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RampScalarLinearSimple {
                pub const m_Rate: usize = 0x1C0; // float32
                pub const m_flStartTime: usize = 0x1C4; // float32
                pub const m_flEndTime: usize = 0x1C8; // float32
                pub const m_nField: usize = 0x1F0; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_RampScalarSplineSimple {
                pub const m_Rate: usize = 0x1C0; // float32
                pub const m_flStartTime: usize = 0x1C4; // float32
                pub const m_flEndTime: usize = 0x1C8; // float32
                pub const m_nField: usize = 0x1F0; // ParticleAttributeIndex_t
                pub const m_bEaseOut: usize = 0x1F4; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 10
            pub mod C_OP_ChladniWave {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x478; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x5D0; // CPerParticleFloatInput
                pub const m_vecWaveLength: usize = 0x728; // CPerParticleVecInput
                pub const m_vecHarmonics: usize = 0xD80; // CPerParticleVecInput
                pub const m_nSetMethod: usize = 0x13D8; // ParticleSetMethod_t
                pub const m_nLocalSpaceControlPoint: usize = 0x13DC; // int32
                pub const m_b3D: usize = 0x13E0; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_Noise {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flOutputMin: usize = 0x1C4; // float32
                pub const m_flOutputMax: usize = 0x1C8; // float32
                pub const m_fl4NoiseScale: usize = 0x1CC; // float32
                pub const m_bAdditive: usize = 0x1D0; // bool
                pub const m_flNoiseAnimationTimeScale: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_VectorNoise {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecOutputMin: usize = 0x1C4; // 
                pub const m_vecOutputMax: usize = 0x1D0; // 
                pub const m_fl4NoiseScale: usize = 0x1DC; // float32
                pub const m_bAdditive: usize = 0x1E0; // bool
                pub const m_bOffset: usize = 0x1E1; // bool
                pub const m_flNoiseAnimationTimeScale: usize = 0x1E4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_Decay {
                pub const m_bRopeDecay: usize = 0x1C0; // bool
                pub const m_bForcePreserveParticleOrder: usize = 0x1C1; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_DecayOffscreen {
                pub const m_flOffscreenTime: usize = 0x1C0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_EndCapTimedFreeze {
                pub const m_flFreezeTime: usize = 0x1C0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_EndCapTimedDecay {
                pub const m_flDecayTime: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 0
            pub mod C_OP_EndCapDecay {
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_VelocityDecay {
                pub const m_flMinVelocity: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_AlphaDecay {
                pub const m_flMinAlpha: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_RadiusDecay {
                pub const m_flMinRadius: usize = 0x1C0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_DecayMaintainCount {
                pub const m_nParticlesToMaintain: usize = 0x1C0; // int32
                pub const m_flDecayDelay: usize = 0x1C4; // float32
                pub const m_nSnapshotControlPoint: usize = 0x1C8; // int32
                pub const m_bLifespanDecay: usize = 0x1CC; // bool
                pub const m_flScale: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_bKillNewest: usize = 0x328; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_DecayClampCount {
                pub const m_nCount: usize = 0x1C0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_Cull {
                pub const m_flCullPerc: usize = 0x1C0; // float32
                pub const m_flCullStart: usize = 0x1C4; // float32
                pub const m_flCullEnd: usize = 0x1C8; // float32
                pub const m_flCullExp: usize = 0x1CC; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod CGeneralSpin {
                pub const m_nSpinRateDegrees: usize = 0x1C0; // int32
                pub const m_nSpinRateMinDegrees: usize = 0x1C4; // int32
                pub const m_fSpinRateStopTime: usize = 0x1CC; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 0
            pub mod CSpinUpdateBase {
            }
            // Parent: CGeneralSpin
            // Fields count: 0
            pub mod C_OP_Spin {
            }
            // Parent: CSpinUpdateBase
            // Fields count: 0
            pub mod C_OP_SpinUpdate {
            }
            // Parent: CGeneralSpin
            // Fields count: 0
            pub mod C_OP_SpinYaw {
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_InterpolateRadius {
                pub const m_flStartTime: usize = 0x1C0; // float32
                pub const m_flEndTime: usize = 0x1C4; // float32
                pub const m_flStartScale: usize = 0x1C8; // float32
                pub const m_flEndScale: usize = 0x1CC; // float32
                pub const m_bEaseInAndOut: usize = 0x1D0; // bool
                pub const m_flBias: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_ColorInterpolate {
                pub const m_ColorFade: usize = 0x1C0; // Color
                pub const m_flFadeStartTime: usize = 0x1D0; // float32
                pub const m_flFadeEndTime: usize = 0x1D4; // float32
                pub const m_nFieldOutput: usize = 0x1D8; // ParticleAttributeIndex_t
                pub const m_bEaseInOut: usize = 0x1DC; // bool
                pub const m_bUseNewCode: usize = 0x1DD; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_ColorInterpolateRandom {
                pub const m_ColorFadeMin: usize = 0x1C0; // Color
                pub const m_ColorFadeMax: usize = 0x1DC; // Color
                pub const m_flFadeStartTime: usize = 0x1EC; // float32
                pub const m_flFadeEndTime: usize = 0x1F0; // float32
                pub const m_nFieldOutput: usize = 0x1F4; // ParticleAttributeIndex_t
                pub const m_bEaseInOut: usize = 0x1F8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 15
            pub mod C_OP_PositionLock {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_flStartTime_min: usize = 0x228; // float32
                pub const m_flStartTime_max: usize = 0x22C; // float32
                pub const m_flStartTime_exp: usize = 0x230; // float32
                pub const m_flEndTime_min: usize = 0x234; // float32
                pub const m_flEndTime_max: usize = 0x238; // float32
                pub const m_flEndTime_exp: usize = 0x23C; // float32
                pub const m_flRange: usize = 0x240; // float32
                pub const m_flRangeBias: usize = 0x248; // CParticleCollectionFloatInput
                pub const m_flJumpThreshold: usize = 0x3A0; // float32
                pub const m_flPrevPosScale: usize = 0x3A4; // float32
                pub const m_bLockRot: usize = 0x3A8; // bool
                pub const m_vecScale: usize = 0x3B0; // CParticleCollectionVecInput
                pub const m_nFieldOutput: usize = 0xA08; // ParticleAttributeIndex_t
                pub const m_nFieldOutputPrev: usize = 0xA0C; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 33
            pub mod C_OP_ControlpointLight {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_nControlPoint1: usize = 0x650; // int32
                pub const m_nControlPoint2: usize = 0x654; // int32
                pub const m_nControlPoint3: usize = 0x658; // int32
                pub const m_nControlPoint4: usize = 0x65C; // int32
                pub const m_vecCPOffset1: usize = 0x660; // 
                pub const m_vecCPOffset2: usize = 0x66C; // 
                pub const m_vecCPOffset3: usize = 0x678; // 
                pub const m_vecCPOffset4: usize = 0x684; // 
                pub const m_LightFiftyDist1: usize = 0x690; // float32
                pub const m_LightZeroDist1: usize = 0x694; // float32
                pub const m_LightFiftyDist2: usize = 0x698; // float32
                pub const m_LightZeroDist2: usize = 0x69C; // float32
                pub const m_LightFiftyDist3: usize = 0x6A0; // float32
                pub const m_LightZeroDist3: usize = 0x6A4; // float32
                pub const m_LightFiftyDist4: usize = 0x6A8; // float32
                pub const m_LightZeroDist4: usize = 0x6AC; // float32
                pub const m_LightColor1: usize = 0x6B0; // Color
                pub const m_LightColor2: usize = 0x6B4; // Color
                pub const m_LightColor3: usize = 0x6B8; // Color
                pub const m_LightColor4: usize = 0x6BC; // Color
                pub const m_bLightType1: usize = 0x6C0; // bool
                pub const m_bLightType2: usize = 0x6C1; // bool
                pub const m_bLightType3: usize = 0x6C2; // bool
                pub const m_bLightType4: usize = 0x6C3; // bool
                pub const m_bLightDynamic1: usize = 0x6C4; // bool
                pub const m_bLightDynamic2: usize = 0x6C5; // bool
                pub const m_bLightDynamic3: usize = 0x6C6; // bool
                pub const m_bLightDynamic4: usize = 0x6C7; // bool
                pub const m_bUseNormal: usize = 0x6C8; // bool
                pub const m_bUseHLambert: usize = 0x6C9; // bool
                pub const m_bClampLowerRange: usize = 0x6CE; // bool
                pub const m_bClampUpperRange: usize = 0x6CF; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_GlobalLight {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_bClampLowerRange: usize = 0x1C4; // bool
                pub const m_bClampUpperRange: usize = 0x1C5; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_SetChildControlPoints {
                pub const m_nChildGroupID: usize = 0x1C0; // int32
                pub const m_nFirstControlPoint: usize = 0x1C4; // int32
                pub const m_nNumControlPoints: usize = 0x1C8; // int32
                pub const m_nFirstSourcePoint: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_bReverse: usize = 0x328; // bool
                pub const m_bSetOrientation: usize = 0x329; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_SetControlPointsToParticle {
                pub const m_nChildGroupID: usize = 0x1C0; // int32
                pub const m_nFirstControlPoint: usize = 0x1C4; // int32
                pub const m_nNumControlPoints: usize = 0x1C8; // int32
                pub const m_nFirstSourcePoint: usize = 0x1CC; // int32
                pub const m_bSetOrientation: usize = 0x1D0; // bool
                pub const m_nOrientationMode: usize = 0x1D4; // ParticleOrientationSetMode_t
                pub const m_nSetParent: usize = 0x1D8; // ParticleParentSetMode_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_SetControlPointsToModelParticles {
                pub const m_HitboxSetName: usize = 0x1C0; // char[128]
                pub const m_AttachmentName: usize = 0x240; // char[128]
                pub const m_nFirstControlPoint: usize = 0x2C0; // int32
                pub const m_nNumControlPoints: usize = 0x2C4; // int32
                pub const m_nFirstSourcePoint: usize = 0x2C8; // int32
                pub const m_bSkin: usize = 0x2CC; // bool
                pub const m_bAttachment: usize = 0x2CD; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_SetPerChildControlPoint {
                pub const m_nChildGroupID: usize = 0x1C0; // int32
                pub const m_nFirstControlPoint: usize = 0x1C4; // int32
                pub const m_nNumControlPoints: usize = 0x1C8; // int32
                pub const m_nParticleIncrement: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_nFirstSourcePoint: usize = 0x328; // CParticleCollectionFloatInput
                pub const m_bSetOrientation: usize = 0x480; // bool
                pub const m_nOrientationField: usize = 0x484; // ParticleAttributeIndex_t
                pub const m_bNumBasedOnParticleCount: usize = 0x488; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_SetPerChildControlPointFromAttribute {
                pub const m_nChildGroupID: usize = 0x1C0; // int32
                pub const m_nFirstControlPoint: usize = 0x1C4; // int32
                pub const m_nNumControlPoints: usize = 0x1C8; // int32
                pub const m_nParticleIncrement: usize = 0x1CC; // int32
                pub const m_nFirstSourcePoint: usize = 0x1D0; // int32
                pub const m_bNumBasedOnParticleCount: usize = 0x1D4; // bool
                pub const m_nAttributeToRead: usize = 0x1D8; // ParticleAttributeIndex_t
                pub const m_nCPField: usize = 0x1DC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RemapTransformOrientationToYaw {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_nFieldOutput: usize = 0x228; // ParticleAttributeIndex_t
                pub const m_flRotOffset: usize = 0x22C; // float32
                pub const m_flSpinStrength: usize = 0x230; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_DampenToCP {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_flRange: usize = 0x1C4; // float32
                pub const m_flScale: usize = 0x1C8; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_SetToCP {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_vecOffset: usize = 0x1C4; // 
                pub const m_bOffsetLocal: usize = 0x1D0; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 13
            pub mod C_OP_PinParticleToCP {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_vecOffset: usize = 0x1C8; // CParticleCollectionVecInput
                pub const m_bOffsetLocal: usize = 0x820; // bool
                pub const m_nParticleSelection: usize = 0x824; // ParticleSelection_t
                pub const m_nParticleNumber: usize = 0x828; // CParticleCollectionFloatInput
                pub const m_nPinBreakType: usize = 0x980; // ParticlePinDistance_t
                pub const m_flBreakDistance: usize = 0x988; // CParticleCollectionFloatInput
                pub const m_flBreakSpeed: usize = 0xAE0; // CParticleCollectionFloatInput
                pub const m_flAge: usize = 0xC38; // CParticleCollectionFloatInput
                pub const m_nBreakControlPointNumber: usize = 0xD90; // int32
                pub const m_nBreakControlPointNumber2: usize = 0xD94; // int32
                pub const m_flBreakValue: usize = 0xD98; // CParticleCollectionFloatInput
                pub const m_flInterpolation: usize = 0xEF0; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_MovementRigidAttachToCP {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nScaleControlPoint: usize = 0x1C4; // int32
                pub const m_nScaleCPField: usize = 0x1C8; // int32
                pub const m_nFieldInput: usize = 0x1CC; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1D0; // ParticleAttributeIndex_t
                pub const m_bOffsetLocal: usize = 0x1D4; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_LerpToInitialPosition {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_flInterpolation: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_nCacheField: usize = 0x320; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x328; // CParticleCollectionFloatInput
                pub const m_vecScale: usize = 0x480; // CParticleCollectionVecInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 13
            pub mod C_OP_DistanceBetweenTransforms {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_TransformStart: usize = 0x1C8; // CParticleTransformInput
                pub const m_TransformEnd: usize = 0x230; // CParticleTransformInput
                pub const m_flInputMin: usize = 0x298; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0x3F0; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x548; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x6A0; // CPerParticleFloatInput
                pub const m_flMaxTraceLength: usize = 0x7F8; // float32
                pub const m_flLOSScale: usize = 0x7FC; // float32
                pub const m_CollisionGroupName: usize = 0x800; // char[128]
                pub const m_nTraceSet: usize = 0x880; // ParticleTraceSet_t
                pub const m_bLOS: usize = 0x884; // bool
                pub const m_nSetMethod: usize = 0x888; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 10
            pub mod C_OP_PercentageBetweenTransforms {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C4; // float32
                pub const m_flInputMax: usize = 0x1C8; // float32
                pub const m_flOutputMin: usize = 0x1CC; // float32
                pub const m_flOutputMax: usize = 0x1D0; // float32
                pub const m_TransformStart: usize = 0x1D8; // CParticleTransformInput
                pub const m_TransformEnd: usize = 0x240; // CParticleTransformInput
                pub const m_nSetMethod: usize = 0x2A8; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x2AC; // bool
                pub const m_bRadialCheck: usize = 0x2AD; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 10
            pub mod C_OP_PercentageBetweenTransformsVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C4; // float32
                pub const m_flInputMax: usize = 0x1C8; // float32
                pub const m_vecOutputMin: usize = 0x1CC; // 
                pub const m_vecOutputMax: usize = 0x1D8; // 
                pub const m_TransformStart: usize = 0x1E8; // CParticleTransformInput
                pub const m_TransformEnd: usize = 0x250; // CParticleTransformInput
                pub const m_nSetMethod: usize = 0x2B8; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x2BC; // bool
                pub const m_bRadialCheck: usize = 0x2BD; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 12
            pub mod C_OP_PercentageBetweenTransformLerpCPs {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C4; // float32
                pub const m_flInputMax: usize = 0x1C8; // float32
                pub const m_TransformStart: usize = 0x1D0; // CParticleTransformInput
                pub const m_TransformEnd: usize = 0x238; // CParticleTransformInput
                pub const m_nOutputStartCP: usize = 0x2A0; // int32
                pub const m_nOutputStartField: usize = 0x2A4; // int32
                pub const m_nOutputEndCP: usize = 0x2A8; // int32
                pub const m_nOutputEndField: usize = 0x2AC; // int32
                pub const m_nSetMethod: usize = 0x2B0; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x2B4; // bool
                pub const m_bRadialCheck: usize = 0x2B5; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_DistanceBetweenVecs {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecPoint1: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vecPoint2: usize = 0x820; // CPerParticleVecInput
                pub const m_flInputMin: usize = 0xE78; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0xFD0; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x1128; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x1280; // CPerParticleFloatInput
                pub const m_nSetMethod: usize = 0x13D8; // ParticleSetMethod_t
                pub const m_bDeltaTime: usize = 0x13DC; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_DirectionBetweenVecsToVec {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecPoint1: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vecPoint2: usize = 0x820; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 15
            pub mod C_OP_DistanceToTransform {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x478; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x5D0; // CPerParticleFloatInput
                pub const m_TransformStart: usize = 0x728; // CParticleTransformInput
                pub const m_bLOS: usize = 0x790; // bool
                pub const m_CollisionGroupName: usize = 0x791; // char[128]
                pub const m_nTraceSet: usize = 0x814; // ParticleTraceSet_t
                pub const m_flMaxTraceLength: usize = 0x818; // float32
                pub const m_flLOSScale: usize = 0x81C; // float32
                pub const m_nSetMethod: usize = 0x820; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x824; // bool
                pub const m_bAdditive: usize = 0x825; // bool
                pub const m_vecComponentScale: usize = 0x828; // CPerParticleVecInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_CylindricalDistanceToTransform {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInputMax: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputMin: usize = 0x478; // CPerParticleFloatInput
                pub const m_flOutputMax: usize = 0x5D0; // CPerParticleFloatInput
                pub const m_TransformStart: usize = 0x728; // CParticleTransformInput
                pub const m_TransformEnd: usize = 0x790; // CParticleTransformInput
                pub const m_nSetMethod: usize = 0x7F8; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x7FC; // bool
                pub const m_bAdditive: usize = 0x7FD; // bool
                pub const m_bCapsule: usize = 0x7FE; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RtEnvCull {
                pub const m_vecTestDir: usize = 0x1C0; // 
                pub const m_vecTestNormal: usize = 0x1CC; // 
                pub const m_bCullOnMiss: usize = 0x1D8; // bool
                pub const m_bStickInsteadOfCull: usize = 0x1D9; // bool
                pub const m_RtEnvName: usize = 0x1DA; // char[128]
                pub const m_nRTEnvCP: usize = 0x25C; // int32
                pub const m_nComponent: usize = 0x260; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_MovementLoopInsideSphere {
                pub const m_nCP: usize = 0x1C0; // int32
                pub const m_flDistance: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_vecScale: usize = 0x320; // CParticleCollectionVecInput
                pub const m_nDistSqrAttr: usize = 0x978; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_MoveToHitbox {
                pub const m_modelInput: usize = 0x1C0; // CParticleModelInput
                pub const m_transformInput: usize = 0x220; // CParticleTransformInput
                pub const m_flLifeTimeLerpStart: usize = 0x28C; // float32
                pub const m_flLifeTimeLerpEnd: usize = 0x290; // float32
                pub const m_flPrevPosScale: usize = 0x294; // float32
                pub const m_HitboxSetName: usize = 0x298; // char[128]
                pub const m_bUseBones: usize = 0x318; // bool
                pub const m_nLerpType: usize = 0x31C; // HitboxLerpType_t
                pub const m_flInterpolation: usize = 0x320; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 15
            pub mod C_OP_LockToBone {
                pub const m_modelInput: usize = 0x1C0; // CParticleModelInput
                pub const m_transformInput: usize = 0x220; // CParticleTransformInput
                pub const m_flLifeTimeFadeStart: usize = 0x288; // float32
                pub const m_flLifeTimeFadeEnd: usize = 0x28C; // float32
                pub const m_flJumpThreshold: usize = 0x290; // float32
                pub const m_flPrevPosScale: usize = 0x294; // float32
                pub const m_HitboxSetName: usize = 0x298; // char[128]
                pub const m_bRigid: usize = 0x318; // bool
                pub const m_bUseBones: usize = 0x319; // bool
                pub const m_nFieldOutput: usize = 0x31C; // ParticleAttributeIndex_t
                pub const m_nFieldOutputPrev: usize = 0x320; // ParticleAttributeIndex_t
                pub const m_nRotationSetType: usize = 0x324; // ParticleRotationLockType_t
                pub const m_bRigidRotationLock: usize = 0x328; // bool
                pub const m_vecRotation: usize = 0x330; // CPerParticleVecInput
                pub const m_flRotLerp: usize = 0x988; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_SnapshotRigidSkinToBones {
                pub const m_bTransformNormals: usize = 0x1C0; // bool
                pub const m_bTransformRadii: usize = 0x1C1; // bool
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_SnapshotSkinToBones {
                pub const m_bTransformNormals: usize = 0x1C0; // bool
                pub const m_bTransformRadii: usize = 0x1C1; // bool
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
                pub const m_flLifeTimeFadeStart: usize = 0x1C8; // float32
                pub const m_flLifeTimeFadeEnd: usize = 0x1CC; // float32
                pub const m_flJumpThreshold: usize = 0x1D0; // float32
                pub const m_flPrevPosScale: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_CPOffsetToPercentageBetweenCPs {
                pub const m_flInputMin: usize = 0x1C0; // float32
                pub const m_flInputMax: usize = 0x1C4; // float32
                pub const m_flInputBias: usize = 0x1C8; // float32
                pub const m_nStartCP: usize = 0x1CC; // int32
                pub const m_nEndCP: usize = 0x1D0; // int32
                pub const m_nOffsetCP: usize = 0x1D4; // int32
                pub const m_nOuputCP: usize = 0x1D8; // int32
                pub const m_nInputCP: usize = 0x1DC; // int32
                pub const m_bRadialCheck: usize = 0x1E0; // bool
                pub const m_bScaleOffset: usize = 0x1E1; // bool
                pub const m_vecOffset: usize = 0x1E4; // 
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_PlaneCull {
                pub const m_nPlaneControlPoint: usize = 0x1C0; // int32
                pub const m_vecPlaneDirection: usize = 0x1C4; // 
                pub const m_bLocalSpace: usize = 0x1D0; // bool
                pub const m_flPlaneOffset: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_DistanceCull {
                pub const m_nControlPoint: usize = 0x1C0; // int32
                pub const m_vecPointOffset: usize = 0x1C4; // 
                pub const m_flDistance: usize = 0x1D0; // float32
                pub const m_bCullInside: usize = 0x1D4; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_ModelCull {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_bBoundBox: usize = 0x1C4; // bool
                pub const m_bCullOutside: usize = 0x1C5; // bool
                pub const m_bUseBones: usize = 0x1C6; // bool
                pub const m_HitboxSetName: usize = 0x1C7; // char[128]
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_ModelDampenMovement {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_bBoundBox: usize = 0x1C4; // bool
                pub const m_bOutside: usize = 0x1C5; // bool
                pub const m_bUseBones: usize = 0x1C6; // bool
                pub const m_HitboxSetName: usize = 0x1C7; // char[128]
                pub const m_vecPosOffset: usize = 0x248; // CPerParticleVecInput
                pub const m_fDrag: usize = 0x8A0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_SequenceFromModel {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nFieldOutputAnim: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_nSetMethod: usize = 0x1DC; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_VelocityMatchingForce {
                pub const m_flDirScale: usize = 0x1C0; // float32
                pub const m_flSpdScale: usize = 0x1C4; // float32
                pub const m_nCPBroadcast: usize = 0x1C8; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_MovementMaintainOffset {
                pub const m_vecOffset: usize = 0x1C0; // 
                pub const m_nCP: usize = 0x1CC; // int32
                pub const m_bRadiusScale: usize = 0x1D0; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 17
            pub mod C_OP_MovementPlaceOnGround {
                pub const m_flOffset: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flMaxTraceLength: usize = 0x318; // float32
                pub const m_flTolerance: usize = 0x31C; // float32
                pub const m_flTraceOffset: usize = 0x320; // float32
                pub const m_flLerpRate: usize = 0x324; // float32
                pub const m_CollisionGroupName: usize = 0x328; // char[128]
                pub const m_nTraceSet: usize = 0x3A8; // ParticleTraceSet_t
                pub const m_nRefCP1: usize = 0x3AC; // int32
                pub const m_nRefCP2: usize = 0x3B0; // int32
                pub const m_nLerpCP: usize = 0x3B4; // int32
                pub const m_nTraceMissBehavior: usize = 0x3C0; // ParticleTraceMissBehavior_t
                pub const m_bIncludeShotHull: usize = 0x3C4; // bool
                pub const m_bIncludeWater: usize = 0x3C5; // bool
                pub const m_bSetNormal: usize = 0x3C8; // bool
                pub const m_bScaleOffset: usize = 0x3C9; // bool
                pub const m_nPreserveOffsetCP: usize = 0x3CC; // int32
                pub const m_nIgnoreCP: usize = 0x3D0; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_InheritFromParentParticles {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nIncrement: usize = 0x1C8; // int32
                pub const m_bRandomDistribution: usize = 0x1CC; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_InheritFromParentParticlesV2 {
                pub const m_flScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nIncrement: usize = 0x1C8; // int32
                pub const m_bRandomDistribution: usize = 0x1CC; // bool
                pub const m_nMissingParentBehavior: usize = 0x1D0; // MissingParentInheritBehavior_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_ReadFromNeighboringParticle {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nIncrement: usize = 0x1C8; // int32
                pub const m_DistanceCheck: usize = 0x1D0; // CPerParticleFloatInput
                pub const m_flInterpolation: usize = 0x328; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_InheritFromPeerSystem {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nIncrement: usize = 0x1C8; // int32
                pub const m_nGroupID: usize = 0x1CC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_RemapVectorComponentToScalar {
                pub const m_nFieldInput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nComponent: usize = 0x1C8; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_OrientTo2dDirection {
                pub const m_flRotOffset: usize = 0x1C0; // float32
                pub const m_flSpinStrength: usize = 0x1C4; // float32
                pub const m_nFieldOutput: usize = 0x1C8; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_RestartAfterDuration {
                pub const m_flDurationMin: usize = 0x1C0; // float32
                pub const m_flDurationMax: usize = 0x1C4; // float32
                pub const m_nCP: usize = 0x1C8; // int32
                pub const m_nCPField: usize = 0x1CC; // int32
                pub const m_nChildGroupID: usize = 0x1D0; // int32
                pub const m_bOnlyChildren: usize = 0x1D4; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_Orient2DRelToCP {
                pub const m_flRotOffset: usize = 0x1C0; // float32
                pub const m_flSpinStrength: usize = 0x1C4; // float32
                pub const m_nCP: usize = 0x1C8; // int32
                pub const m_nFieldOutput: usize = 0x1CC; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_MovementRotateParticleAroundAxis {
                pub const m_vecRotAxis: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_flRotRate: usize = 0x818; // CParticleCollectionFloatInput
                pub const m_TransformInput: usize = 0x970; // CParticleTransformInput
                pub const m_bLocalSpace: usize = 0x9D8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RotateVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_vecRotAxisMin: usize = 0x1C4; // 
                pub const m_vecRotAxisMax: usize = 0x1D0; // 
                pub const m_flRotRateMin: usize = 0x1DC; // float32
                pub const m_flRotRateMax: usize = 0x1E0; // float32
                pub const m_bNormalize: usize = 0x1E4; // bool
                pub const m_flScale: usize = 0x1E8; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_MaxVelocity {
                pub const m_flMaxVelocity: usize = 0x1C0; // float32
                pub const m_flMinVelocity: usize = 0x1C4; // float32
                pub const m_nOverrideCP: usize = 0x1C8; // int32
                pub const m_nOverrideCPField: usize = 0x1CC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_LagCompensation {
                pub const m_nDesiredVelocityCP: usize = 0x1C0; // int32
                pub const m_nLatencyCP: usize = 0x1C4; // int32
                pub const m_nLatencyCPField: usize = 0x1C8; // int32
                pub const m_nDesiredVelocityCPField: usize = 0x1CC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_MaintainSequentialPath {
                pub const m_fMaxDistance: usize = 0x1C0; // float32
                pub const m_flNumToAssign: usize = 0x1C4; // float32
                pub const m_flCohesionStrength: usize = 0x1C8; // float32
                pub const m_flTolerance: usize = 0x1CC; // float32
                pub const m_bLoop: usize = 0x1D0; // bool
                pub const m_bUseParticleCount: usize = 0x1D1; // bool
                pub const m_PathParams: usize = 0x1E0; // CPathParameters
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_LockToSavedSequentialPathV2 {
                pub const m_flFadeStart: usize = 0x1C0; // float32
                pub const m_flFadeEnd: usize = 0x1C4; // float32
                pub const m_bCPPairs: usize = 0x1C8; // bool
                pub const m_PathParams: usize = 0x1D0; // CPathParameters
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_LockToSavedSequentialPath {
                pub const m_flFadeStart: usize = 0x1C4; // float32
                pub const m_flFadeEnd: usize = 0x1C8; // float32
                pub const m_bCPPairs: usize = 0x1CC; // bool
                pub const m_PathParams: usize = 0x1D0; // CPathParameters
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_RemapDotProductToScalar {
                pub const m_nInputCP1: usize = 0x1C0; // int32
                pub const m_nInputCP2: usize = 0x1C4; // int32
                pub const m_nFieldOutput: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_bUseParticleVelocity: usize = 0x1DC; // bool
                pub const m_nSetMethod: usize = 0x1E0; // ParticleSetMethod_t
                pub const m_bActiveRange: usize = 0x1E4; // bool
                pub const m_bUseParticleNormal: usize = 0x1E5; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_RemapCPtoScalar {
                pub const m_nCPInput: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nField: usize = 0x1C8; // int32
                pub const m_flInputMin: usize = 0x1CC; // float32
                pub const m_flInputMax: usize = 0x1D0; // float32
                pub const m_flOutputMin: usize = 0x1D4; // float32
                pub const m_flOutputMax: usize = 0x1D8; // float32
                pub const m_flStartTime: usize = 0x1DC; // float32
                pub const m_flEndTime: usize = 0x1E0; // float32
                pub const m_flInterpRate: usize = 0x1E4; // float32
                pub const m_nSetMethod: usize = 0x1E8; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_NormalLock {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 13
            pub mod C_OP_RemapCPtoVector {
                pub const m_nCPInput: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nLocalSpaceCP: usize = 0x1C8; // int32
                pub const m_vInputMin: usize = 0x1CC; // 
                pub const m_vInputMax: usize = 0x1D8; // 
                pub const m_vOutputMin: usize = 0x1E4; // 
                pub const m_vOutputMax: usize = 0x1F0; // 
                pub const m_flStartTime: usize = 0x1FC; // float32
                pub const m_flEndTime: usize = 0x200; // float32
                pub const m_flInterpRate: usize = 0x204; // float32
                pub const m_nSetMethod: usize = 0x208; // ParticleSetMethod_t
                pub const m_bOffset: usize = 0x20C; // bool
                pub const m_bAccelerate: usize = 0x20D; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_SetCPtoVector {
                pub const m_nCPInput: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_RemapTransformToVelocity {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_RemapVelocityToVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x1C4; // float32
                pub const m_bNormalize: usize = 0x1C8; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RemapCPVelocityToVector {
                pub const m_nControlPoint: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x1C8; // float32
                pub const m_bNormalize: usize = 0x1CC; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_SetCPOrientationToDirection {
                pub const m_nInputControlPoint: usize = 0x1C0; // int32
                pub const m_nOutputControlPoint: usize = 0x1C4; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapDirectionToCPToVector {
                pub const m_nCP: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x1C8; // float32
                pub const m_flOffsetRot: usize = 0x1CC; // float32
                pub const m_vecOffsetAxis: usize = 0x1D0; // 
                pub const m_bNormalize: usize = 0x1DC; // bool
                pub const m_nFieldStrength: usize = 0x1E0; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RemapCrossProductOfTwoVectorsToVector {
                pub const m_InputVec1: usize = 0x1C0; // CPerParticleVecInput
                pub const m_InputVec2: usize = 0x818; // CPerParticleVecInput
                pub const m_nFieldOutput: usize = 0xE70; // ParticleAttributeIndex_t
                pub const m_bNormalize: usize = 0xE74; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_NormalizeVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x1C4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_RemapControlPointDirectionToVector {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flScale: usize = 0x1C4; // float32
                pub const m_nControlPointNumber: usize = 0x1C8; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_SetCPOrientationToGroundNormal {
                pub const m_flInterpRate: usize = 0x1C0; // float32
                pub const m_flMaxTraceLength: usize = 0x1C4; // float32
                pub const m_flTolerance: usize = 0x1C8; // float32
                pub const m_flTraceOffset: usize = 0x1CC; // float32
                pub const m_CollisionGroupName: usize = 0x1D0; // char[128]
                pub const m_nTraceSet: usize = 0x250; // ParticleTraceSet_t
                pub const m_nInputCP: usize = 0x254; // int32
                pub const m_nOutputCP: usize = 0x258; // int32
                pub const m_bIncludeWater: usize = 0x268; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RemapTransformOrientationToRotations {
                pub const m_TransformInput: usize = 0x1C0; // CParticleTransformInput
                pub const m_vecRotation: usize = 0x228; // 
                pub const m_bUseQuat: usize = 0x234; // bool
                pub const m_bWriteNormal: usize = 0x235; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_RemapControlPointOrientationToRotation {
                pub const m_nCP: usize = 0x1C0; // int32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flOffsetRot: usize = 0x1C8; // float32
                pub const m_nComponent: usize = 0x1CC; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_LockToPointList {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_pointList: usize = 0x1C8; // CUtlVector<PointDefinition_t>
                pub const m_bPlaceAlongPath: usize = 0x1E0; // bool
                pub const m_bClosedLoop: usize = 0x1E1; // bool
                pub const m_nNumPointsAlongPath: usize = 0x1E4; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_RemapNamedModelElementOnceTimed {
                pub const m_hModel: usize = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_inNames: usize = 0x1C8; // CUtlVector<CUtlString>
                pub const m_outNames: usize = 0x1E0; // CUtlVector<CUtlString>
                pub const m_fallbackNames: usize = 0x1F8; // CUtlVector<CUtlString>
                pub const m_bModelFromRenderer: usize = 0x210; // bool
                pub const m_bProportional: usize = 0x211; // bool
                pub const m_nFieldInput: usize = 0x214; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x218; // ParticleAttributeIndex_t
                pub const m_flRemapTime: usize = 0x21C; // float32
            }
            // Parent: C_OP_RemapNamedModelElementOnceTimed
            // Fields count: 0
            pub mod C_OP_RemapNamedModelSequenceOnceTimed {
            }
            // Parent: C_OP_RemapNamedModelElementOnceTimed
            // Fields count: 0
            pub mod C_OP_RemapNamedModelBodyPartOnceTimed {
            }
            // Parent: C_OP_RemapNamedModelElementOnceTimed
            // Fields count: 0
            pub mod C_OP_RemapNamedModelMeshGroupOnceTimed {
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 7
            pub mod C_OP_RemapNamedModelElementEndCap {
                pub const m_hModel: usize = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_inNames: usize = 0x1C8; // CUtlVector<CUtlString>
                pub const m_outNames: usize = 0x1E0; // CUtlVector<CUtlString>
                pub const m_fallbackNames: usize = 0x1F8; // CUtlVector<CUtlString>
                pub const m_bModelFromRenderer: usize = 0x210; // bool
                pub const m_nFieldInput: usize = 0x214; // ParticleAttributeIndex_t
                pub const m_nFieldOutput: usize = 0x218; // ParticleAttributeIndex_t
            }
            // Parent: C_OP_RemapNamedModelElementEndCap
            // Fields count: 0
            pub mod C_OP_RemapNamedModelSequenceEndCap {
            }
            // Parent: C_OP_RemapNamedModelElementEndCap
            // Fields count: 0
            pub mod C_OP_RemapNamedModelBodyPartEndCap {
            }
            // Parent: C_OP_RemapNamedModelElementEndCap
            // Fields count: 0
            pub mod C_OP_RemapNamedModelMeshGroupEndCap {
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 12
            pub mod C_OP_SetFromCPSnapshot {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nAttributeToRead: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nAttributeToWrite: usize = 0x1C8; // ParticleAttributeIndex_t
                pub const m_nLocalSpaceCP: usize = 0x1CC; // int32
                pub const m_bRandom: usize = 0x1D0; // bool
                pub const m_bReverse: usize = 0x1D1; // bool
                pub const m_nRandomSeed: usize = 0x1D4; // int32
                pub const m_nSnapShotStartPoint: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_nSnapShotIncrement: usize = 0x330; // CParticleCollectionFloatInput
                pub const m_flInterpolation: usize = 0x488; // CPerParticleFloatInput
                pub const m_bSubSample: usize = 0x5E0; // bool
                pub const m_bPrev: usize = 0x5E1; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 9
            pub mod C_OP_VectorFieldSnapshot {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nAttributeToWrite: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_nLocalSpaceCP: usize = 0x1C8; // int32
                pub const m_flInterpolation: usize = 0x1D0; // CPerParticleFloatInput
                pub const m_vecScale: usize = 0x328; // CPerParticleVecInput
                pub const m_flBoundaryDampening: usize = 0x980; // float32
                pub const m_bSetVelocity: usize = 0x984; // bool
                pub const m_bLockToSurface: usize = 0x985; // bool
                pub const m_flGridSpacing: usize = 0x988; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_SetAttributeToScalarExpression {
                pub const m_nExpression: usize = 0x1C0; // ScalarExpressionType_t
                pub const m_flInput1: usize = 0x1C8; // CPerParticleFloatInput
                pub const m_flInput2: usize = 0x320; // CPerParticleFloatInput
                pub const m_flOutputRemap: usize = 0x478; // CParticleRemapFloatInput
                pub const m_nOutputField: usize = 0x5D0; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x5D4; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_SetVectorAttributeToVectorExpression {
                pub const m_nExpression: usize = 0x1C0; // VectorExpressionType_t
                pub const m_vInput1: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vInput2: usize = 0x820; // CPerParticleVecInput
                pub const m_nOutputField: usize = 0xE78; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0xE7C; // ParticleSetMethod_t
                pub const m_bNormalizedOutput: usize = 0xE80; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_SetFloatAttributeToVectorExpression {
                pub const m_nExpression: usize = 0x1C0; // VectorFloatExpressionType_t
                pub const m_vInput1: usize = 0x1C8; // CPerParticleVecInput
                pub const m_vInput2: usize = 0x820; // CPerParticleVecInput
                pub const m_flOutputRemap: usize = 0xE78; // CParticleRemapFloatInput
                pub const m_nOutputField: usize = 0xFD0; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0xFD4; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 12
            pub mod C_OP_MovementSkinnedPositionFromCPSnapshot {
                pub const m_nSnapshotControlPointNumber: usize = 0x1C0; // int32
                pub const m_nControlPointNumber: usize = 0x1C4; // int32
                pub const m_bRandom: usize = 0x1C8; // bool
                pub const m_nRandomSeed: usize = 0x1CC; // int32
                pub const m_bSetNormal: usize = 0x1D0; // bool
                pub const m_bSetRadius: usize = 0x1D1; // bool
                pub const m_nIndexType: usize = 0x1D4; // SnapshotIndexType_t
                pub const m_flReadIndex: usize = 0x1D8; // CPerParticleFloatInput
                pub const m_flIncrement: usize = 0x330; // CParticleCollectionFloatInput
                pub const m_nFullLoopIncrement: usize = 0x488; // CParticleCollectionFloatInput
                pub const m_nSnapShotStartPoint: usize = 0x5E0; // CParticleCollectionFloatInput
                pub const m_flInterpolation: usize = 0x738; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_MovementMoveAlongSkinnedCPSnapshot {
                pub const m_nControlPointNumber: usize = 0x1C0; // int32
                pub const m_nSnapshotControlPointNumber: usize = 0x1C4; // int32
                pub const m_bSetNormal: usize = 0x1C8; // bool
                pub const m_bSetRadius: usize = 0x1C9; // bool
                pub const m_flInterpolation: usize = 0x1D0; // CPerParticleFloatInput
                pub const m_flTValue: usize = 0x328; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_QuantizeFloat {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 4
            pub mod C_OP_SetFloatCollection {
                pub const m_InputValue: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x31C; // ParticleSetMethod_t
                pub const m_Lerp: usize = 0x320; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_SetFloat {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_nOutputField: usize = 0x318; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x31C; // ParticleSetMethod_t
                pub const m_Lerp: usize = 0x320; // CPerParticleFloatInput
                pub const m_bUseNewCode: usize = 0x478; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_SetVec {
                pub const m_InputValue: usize = 0x1C0; // CPerParticleVecInput
                pub const m_nOutputField: usize = 0x818; // ParticleAttributeIndex_t
                pub const m_nSetMethod: usize = 0x81C; // ParticleSetMethod_t
                pub const m_Lerp: usize = 0x820; // CPerParticleFloatInput
                pub const m_bNormalizedOutput: usize = 0x978; // bool
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_DragRelativeToPlane {
                pub const m_flDragAtPlane: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flFalloff: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_bDirectional: usize = 0x470; // bool
                pub const m_vecPlaneNormal: usize = 0x478; // CParticleCollectionVecInput
                pub const m_nControlPointNumber: usize = 0xAD0; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 2
            pub mod C_OP_RemapDensityGradientToVectorAttribute {
                pub const m_flRadiusScale: usize = 0x1C0; // float32
                pub const m_nFieldOutput: usize = 0x1C4; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_LockPoints {
                pub const m_nMinCol: usize = 0x1C0; // int32
                pub const m_nMaxCol: usize = 0x1C4; // int32
                pub const m_nMinRow: usize = 0x1C8; // int32
                pub const m_nMaxRow: usize = 0x1CC; // int32
                pub const m_nControlPoint: usize = 0x1D0; // int32
                pub const m_flBlendValue: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_RemapDistanceToLineSegmentBase {
                pub const m_nCP0: usize = 0x1C0; // int32
                pub const m_nCP1: usize = 0x1C4; // int32
                pub const m_flMinInputValue: usize = 0x1C8; // float32
                pub const m_flMaxInputValue: usize = 0x1CC; // float32
                pub const m_bInfiniteLine: usize = 0x1D0; // bool
            }
            // Parent: C_OP_RemapDistanceToLineSegmentBase
            // Fields count: 3
            pub mod C_OP_RemapDistanceToLineSegmentToScalar {
                pub const m_nFieldOutput: usize = 0x1E0; // ParticleAttributeIndex_t
                pub const m_flMinOutputValue: usize = 0x1E4; // float32
                pub const m_flMaxOutputValue: usize = 0x1E8; // float32
            }
            // Parent: C_OP_RemapDistanceToLineSegmentBase
            // Fields count: 3
            pub mod C_OP_RemapDistanceToLineSegmentToVector {
                pub const m_nFieldOutput: usize = 0x1E0; // ParticleAttributeIndex_t
                pub const m_vMinOutputValue: usize = 0x1E4; // 
                pub const m_vMaxOutputValue: usize = 0x1F0; // 
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_TeleportBeam {
                pub const m_nCPPosition: usize = 0x1C0; // int32
                pub const m_nCPVelocity: usize = 0x1C4; // int32
                pub const m_nCPMisc: usize = 0x1C8; // int32
                pub const m_nCPColor: usize = 0x1CC; // int32
                pub const m_nCPInvalidColor: usize = 0x1D0; // int32
                pub const m_nCPExtraArcData: usize = 0x1D4; // int32
                pub const m_vGravity: usize = 0x1D8; // 
                pub const m_flArcMaxDuration: usize = 0x1E4; // float32
                pub const m_flSegmentBreak: usize = 0x1E8; // float32
                pub const m_flArcSpeed: usize = 0x1EC; // float32
                pub const m_flAlpha: usize = 0x1F0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 10
            pub mod C_OP_CycleScalar {
                pub const m_nDestField: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_flStartValue: usize = 0x1C4; // float32
                pub const m_flEndValue: usize = 0x1C8; // float32
                pub const m_flCycleTime: usize = 0x1CC; // float32
                pub const m_bDoNotRepeatCycle: usize = 0x1D0; // bool
                pub const m_bSynchronizeParticles: usize = 0x1D1; // bool
                pub const m_nCPScale: usize = 0x1D4; // int32
                pub const m_nCPFieldMin: usize = 0x1D8; // int32
                pub const m_nCPFieldMax: usize = 0x1DC; // int32
                pub const m_nSetMethod: usize = 0x1E0; // ParticleSetMethod_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 11
            pub mod C_OP_CalculateVectorAttribute {
                pub const m_vStartValue: usize = 0x1C0; // 
                pub const m_nFieldInput1: usize = 0x1CC; // ParticleAttributeIndex_t
                pub const m_flInputScale1: usize = 0x1D0; // float32
                pub const m_nFieldInput2: usize = 0x1D4; // ParticleAttributeIndex_t
                pub const m_flInputScale2: usize = 0x1D8; // float32
                pub const m_nControlPointInput1: usize = 0x1DC; // ControlPointReference_t
                pub const m_flControlPointScale1: usize = 0x1F0; // float32
                pub const m_nControlPointInput2: usize = 0x1F4; // ControlPointReference_t
                pub const m_flControlPointScale2: usize = 0x208; // float32
                pub const m_nFieldOutput: usize = 0x20C; // ParticleAttributeIndex_t
                pub const m_vFinalOutputScale: usize = 0x210; // 
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_ColorAdjustHSL {
                pub const m_flHueAdjust: usize = 0x1C0; // CPerParticleFloatInput
                pub const m_flSaturationAdjust: usize = 0x318; // CPerParticleFloatInput
                pub const m_flLightnessAdjust: usize = 0x470; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 5
            pub mod C_OP_ConnectParentParticleToNearest {
                pub const m_nFirstControlPoint: usize = 0x1C0; // int32
                pub const m_nSecondControlPoint: usize = 0x1C4; // int32
                pub const m_bUseRadius: usize = 0x1C8; // bool
                pub const m_flRadiusScale: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_flParentRadiusScale: usize = 0x328; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 6
            pub mod C_OP_UpdateLightSource {
                pub const m_vColorTint: usize = 0x1C0; // Color
                pub const m_flBrightnessScale: usize = 0x1C4; // float32
                pub const m_flRadiusScale: usize = 0x1C8; // float32
                pub const m_flMinimumLightingRadius: usize = 0x1CC; // float32
                pub const m_flMaximumLightingRadius: usize = 0x1D0; // float32
                pub const m_flPositionDampingConstant: usize = 0x1D4; // float32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 8
            pub mod C_OP_RemapSpeedtoCP {
                pub const m_nInControlPointNumber: usize = 0x1D0; // int32
                pub const m_nOutControlPointNumber: usize = 0x1D4; // int32
                pub const m_nField: usize = 0x1D8; // int32
                pub const m_flInputMin: usize = 0x1DC; // float32
                pub const m_flInputMax: usize = 0x1E0; // float32
                pub const m_flOutputMin: usize = 0x1E4; // float32
                pub const m_flOutputMax: usize = 0x1E8; // float32
                pub const m_bUseDeltaV: usize = 0x1EC; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 11
            pub mod C_OP_RemapAverageHitboxSpeedtoCP {
                pub const m_nInControlPointNumber: usize = 0x1D0; // int32
                pub const m_nOutControlPointNumber: usize = 0x1D4; // int32
                pub const m_nField: usize = 0x1D8; // int32
                pub const m_nHitboxDataType: usize = 0x1DC; // ParticleHitboxDataSelection_t
                pub const m_flInputMin: usize = 0x1E0; // CParticleCollectionFloatInput
                pub const m_flInputMax: usize = 0x338; // CParticleCollectionFloatInput
                pub const m_flOutputMin: usize = 0x490; // CParticleCollectionFloatInput
                pub const m_flOutputMax: usize = 0x5E8; // CParticleCollectionFloatInput
                pub const m_nHeightControlPointNumber: usize = 0x740; // int32
                pub const m_vecComparisonVelocity: usize = 0x748; // CParticleCollectionVecInput
                pub const m_HitboxSetName: usize = 0xDA0; // char[128]
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 8
            pub mod C_OP_RemapDotProductToCP {
                pub const m_nInputCP1: usize = 0x1D0; // int32
                pub const m_nInputCP2: usize = 0x1D4; // int32
                pub const m_nOutputCP: usize = 0x1D8; // int32
                pub const m_nOutVectorField: usize = 0x1DC; // int32
                pub const m_flInputMin: usize = 0x1E0; // CParticleCollectionFloatInput
                pub const m_flInputMax: usize = 0x338; // CParticleCollectionFloatInput
                pub const m_flOutputMin: usize = 0x490; // CParticleCollectionFloatInput
                pub const m_flOutputMax: usize = 0x5E8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_SetControlPointFieldToScalarExpression {
                pub const m_nExpression: usize = 0x1D0; // ScalarExpressionType_t
                pub const m_flInput1: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_flInput2: usize = 0x330; // CParticleCollectionFloatInput
                pub const m_flOutputRemap: usize = 0x488; // CParticleRemapFloatInput
                pub const m_nOutputCP: usize = 0x5E0; // int32
                pub const m_nOutVectorField: usize = 0x5E4; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_SetControlPointFieldFromVectorExpression {
                pub const m_nExpression: usize = 0x1D0; // VectorFloatExpressionType_t
                pub const m_vecInput1: usize = 0x1D8; // CParticleCollectionVecInput
                pub const m_vecInput2: usize = 0x830; // CParticleCollectionVecInput
                pub const m_flOutputRemap: usize = 0xE88; // CParticleRemapFloatInput
                pub const m_nOutputCP: usize = 0xFE0; // int32
                pub const m_nOutVectorField: usize = 0xFE4; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_SetControlPointToVectorExpression {
                pub const m_nExpression: usize = 0x1D0; // VectorExpressionType_t
                pub const m_nOutputCP: usize = 0x1D4; // int32
                pub const m_vInput1: usize = 0x1D8; // CParticleCollectionVecInput
                pub const m_vInput2: usize = 0x830; // CParticleCollectionVecInput
                pub const m_bNormalizedOutput: usize = 0xE88; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 9
            pub mod C_OP_RemapModelVolumetoCP {
                pub const m_nBBoxType: usize = 0x1D0; // BBoxVolumeType_t
                pub const m_nInControlPointNumber: usize = 0x1D4; // int32
                pub const m_nOutControlPointNumber: usize = 0x1D8; // int32
                pub const m_nOutControlPointMaxNumber: usize = 0x1DC; // int32
                pub const m_nField: usize = 0x1E0; // int32
                pub const m_flInputMin: usize = 0x1E4; // float32
                pub const m_flInputMax: usize = 0x1E8; // float32
                pub const m_flOutputMin: usize = 0x1EC; // float32
                pub const m_flOutputMax: usize = 0x1F0; // float32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_RemapBoundingVolumetoCP {
                pub const m_nOutControlPointNumber: usize = 0x1D0; // int32
                pub const m_flInputMin: usize = 0x1D4; // float32
                pub const m_flInputMax: usize = 0x1D8; // float32
                pub const m_flOutputMin: usize = 0x1DC; // float32
                pub const m_flOutputMax: usize = 0x1E0; // float32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 7
            pub mod C_OP_RemapAverageScalarValuetoCP {
                pub const m_nOutControlPointNumber: usize = 0x1D0; // int32
                pub const m_nOutVectorField: usize = 0x1D4; // int32
                pub const m_nField: usize = 0x1D8; // ParticleAttributeIndex_t
                pub const m_flInputMin: usize = 0x1DC; // float32
                pub const m_flInputMax: usize = 0x1E0; // float32
                pub const m_flOutputMin: usize = 0x1E4; // float32
                pub const m_flOutputMax: usize = 0x1E8; // float32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_RampCPLinearRandom {
                pub const m_nOutControlPointNumber: usize = 0x1D0; // int32
                pub const m_vecRateMin: usize = 0x1D4; // 
                pub const m_vecRateMax: usize = 0x1E0; // 
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_SetParentControlPointsToChildCP {
                pub const m_nChildGroupID: usize = 0x1D0; // int32
                pub const m_nChildControlPoint: usize = 0x1D4; // int32
                pub const m_nNumControlPoints: usize = 0x1D8; // int32
                pub const m_nFirstSourcePoint: usize = 0x1DC; // int32
                pub const m_bSetOrientation: usize = 0x1E0; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_SetVariable {
                pub const m_variableReference: usize = 0x1D0; // CParticleVariableRef
                pub const m_transformInput: usize = 0x210; // CParticleTransformInput
                pub const m_positionOffset: usize = 0x278; // 
                pub const m_rotationOffset: usize = 0x284; // QAngle
                pub const m_vecInput: usize = 0x290; // CParticleCollectionVecInput
                pub const m_floatInput: usize = 0x8E8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 12
            pub mod C_OP_SetControlPointPositions {
                pub const m_bUseWorldLocation: usize = 0x1D0; // bool
                pub const m_bOrient: usize = 0x1D1; // bool
                pub const m_bSetOnce: usize = 0x1D2; // bool
                pub const m_nCP1: usize = 0x1D4; // int32
                pub const m_nCP2: usize = 0x1D8; // int32
                pub const m_nCP3: usize = 0x1DC; // int32
                pub const m_nCP4: usize = 0x1E0; // int32
                pub const m_vecCP1Pos: usize = 0x1E4; // 
                pub const m_vecCP2Pos: usize = 0x1F0; // 
                pub const m_vecCP3Pos: usize = 0x1FC; // 
                pub const m_vecCP4Pos: usize = 0x208; // 
                pub const m_nHeadLocation: usize = 0x214; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_SetSingleControlPointPosition {
                pub const m_bSetOnce: usize = 0x1D0; // bool
                pub const m_nCP1: usize = 0x1D4; // int32
                pub const m_vecCP1Pos: usize = 0x1D8; // CParticleCollectionVecInput
                pub const m_transformInput: usize = 0x830; // CParticleTransformInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_SetControlPointPositionToRandomActiveCP {
                pub const m_nCP1: usize = 0x1D0; // int32
                pub const m_nHeadLocationMin: usize = 0x1D4; // int32
                pub const m_nHeadLocationMax: usize = 0x1D8; // int32
                pub const m_flResetRate: usize = 0x1E0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 8
            pub mod C_OP_SetRandomControlPointPosition {
                pub const m_bUseWorldLocation: usize = 0x1D0; // bool
                pub const m_bOrient: usize = 0x1D1; // bool
                pub const m_nCP1: usize = 0x1D4; // int32
                pub const m_nHeadLocation: usize = 0x1D8; // int32
                pub const m_flReRandomRate: usize = 0x1E0; // CParticleCollectionFloatInput
                pub const m_vecCPMinPos: usize = 0x338; // 
                pub const m_vecCPMaxPos: usize = 0x344; // 
                pub const m_flInterpolation: usize = 0x350; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 8
            pub mod C_OP_SetControlPointOrientation {
                pub const m_bUseWorldLocation: usize = 0x1D0; // bool
                pub const m_bRandomize: usize = 0x1D2; // bool
                pub const m_bSetOnce: usize = 0x1D3; // bool
                pub const m_nCP: usize = 0x1D4; // int32
                pub const m_nHeadLocation: usize = 0x1D8; // int32
                pub const m_vecRotation: usize = 0x1DC; // QAngle
                pub const m_vecRotationB: usize = 0x1E8; // QAngle
                pub const m_flInterpolation: usize = 0x1F8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 2
            pub mod C_OP_SetControlPointFromObjectScale {
                pub const m_nCPInput: usize = 0x1D0; // int32
                pub const m_nCPOutput: usize = 0x1D4; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 15
            pub mod C_OP_DistanceBetweenCPsToCP {
                pub const m_nStartCP: usize = 0x1D0; // int32
                pub const m_nEndCP: usize = 0x1D4; // int32
                pub const m_nOutputCP: usize = 0x1D8; // int32
                pub const m_nOutputCPField: usize = 0x1DC; // int32
                pub const m_bSetOnce: usize = 0x1E0; // bool
                pub const m_flInputMin: usize = 0x1E4; // float32
                pub const m_flInputMax: usize = 0x1E8; // float32
                pub const m_flOutputMin: usize = 0x1EC; // float32
                pub const m_flOutputMax: usize = 0x1F0; // float32
                pub const m_flMaxTraceLength: usize = 0x1F4; // float32
                pub const m_flLOSScale: usize = 0x1F8; // float32
                pub const m_bLOS: usize = 0x1FC; // bool
                pub const m_CollisionGroupName: usize = 0x1FD; // char[128]
                pub const m_nTraceSet: usize = 0x280; // ParticleTraceSet_t
                pub const m_nSetParent: usize = 0x284; // ParticleParentSetMode_t
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_SetControlPointToPlayer {
                pub const m_nCP1: usize = 0x1D0; // int32
                pub const m_vecCP1Pos: usize = 0x1D4; // 
                pub const m_bOrientToEyes: usize = 0x1E0; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_SetControlPointToHand {
                pub const m_nCP1: usize = 0x1D0; // int32
                pub const m_nHand: usize = 0x1D4; // int32
                pub const m_vecCP1Pos: usize = 0x1D8; // 
                pub const m_bOrientToHand: usize = 0x1E4; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_SetControlPointToHMD {
                pub const m_nCP1: usize = 0x1D0; // int32
                pub const m_vecCP1Pos: usize = 0x1D4; // 
                pub const m_bOrientToHMD: usize = 0x1E0; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_SetControlPointPositionToTimeOfDayValue {
                pub const m_nControlPointNumber: usize = 0x1D0; // int32
                pub const m_pszTimeOfDayParameter: usize = 0x1D4; // char[128]
                pub const m_vecDefaultValue: usize = 0x254; // 
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_SetControlPointToCenter {
                pub const m_nCP1: usize = 0x1D0; // int32
                pub const m_vecCP1Pos: usize = 0x1D4; // 
                pub const m_nSetParent: usize = 0x1E0; // ParticleParentSetMode_t
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_SetControlPointToCPVelocity {
                pub const m_nCPInput: usize = 0x1D0; // int32
                pub const m_nCPOutputVel: usize = 0x1D4; // int32
                pub const m_bNormalize: usize = 0x1D8; // bool
                pub const m_nCPOutputMag: usize = 0x1DC; // int32
                pub const m_nCPField: usize = 0x1E0; // int32
                pub const m_vecComparisonVelocity: usize = 0x1E8; // CParticleCollectionVecInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 2
            pub mod C_OP_SetControlPointOrientationToCPVelocity {
                pub const m_nCPInput: usize = 0x1D0; // int32
                pub const m_nCPOutput: usize = 0x1D4; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_StopAfterCPDuration {
                pub const m_flDuration: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_bDestroyImmediately: usize = 0x328; // bool
                pub const m_bPlayEndCap: usize = 0x329; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_SetControlPointRotation {
                pub const m_vecRotAxis: usize = 0x1D0; // CParticleCollectionVecInput
                pub const m_flRotRate: usize = 0x828; // CParticleCollectionFloatInput
                pub const m_nCP: usize = 0x980; // int32
                pub const m_nLocalCP: usize = 0x984; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 10
            pub mod C_OP_RemapCPtoCP {
                pub const m_nInputControlPoint: usize = 0x1D0; // int32
                pub const m_nOutputControlPoint: usize = 0x1D4; // int32
                pub const m_nInputField: usize = 0x1D8; // int32
                pub const m_nOutputField: usize = 0x1DC; // int32
                pub const m_flInputMin: usize = 0x1E0; // float32
                pub const m_flInputMax: usize = 0x1E4; // float32
                pub const m_flOutputMin: usize = 0x1E8; // float32
                pub const m_flOutputMax: usize = 0x1EC; // float32
                pub const m_bDerivative: usize = 0x1F0; // bool
                pub const m_flInterpRate: usize = 0x1F4; // float32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_HSVShiftToCP {
                pub const m_nColorCP: usize = 0x1D0; // int32
                pub const m_nColorGemEnableCP: usize = 0x1D4; // int32
                pub const m_nOutputCP: usize = 0x1D8; // int32
                pub const m_DefaultHSVColor: usize = 0x1DC; // Color
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 12
            pub mod C_OP_SetControlPointToImpactPoint {
                pub const m_nCPOut: usize = 0x1D0; // int32
                pub const m_nCPIn: usize = 0x1D4; // int32
                pub const m_flUpdateRate: usize = 0x1D8; // float32
                pub const m_flTraceLength: usize = 0x1E0; // CParticleCollectionFloatInput
                pub const m_flStartOffset: usize = 0x338; // float32
                pub const m_flOffset: usize = 0x33C; // float32
                pub const m_vecTraceDir: usize = 0x340; // 
                pub const m_CollisionGroupName: usize = 0x34C; // char[128]
                pub const m_nTraceSet: usize = 0x3CC; // ParticleTraceSet_t
                pub const m_bSetToEndpoint: usize = 0x3D0; // bool
                pub const m_bTraceToClosestSurface: usize = 0x3D1; // bool
                pub const m_bIncludeWater: usize = 0x3D2; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_SetCPOrientationToPointAtCP {
                pub const m_nInputCP: usize = 0x1D0; // int32
                pub const m_nOutputCP: usize = 0x1D4; // int32
                pub const m_flInterpolation: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_b2DOrientation: usize = 0x330; // bool
                pub const m_bAvoidSingularity: usize = 0x331; // bool
                pub const m_bPointAway: usize = 0x332; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 6
            pub mod C_OP_EnableChildrenFromParentParticleCount {
                pub const m_nChildGroupID: usize = 0x1D0; // int32
                pub const m_nFirstChild: usize = 0x1D4; // int32
                pub const m_nNumChildrenToEnable: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_bDisableChildren: usize = 0x330; // bool
                pub const m_bPlayEndcapOnStop: usize = 0x331; // bool
                pub const m_bDestroyImmediately: usize = 0x332; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_SelectivelyEnableChildren {
                pub const m_nChildGroupID: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_nFirstChild: usize = 0x328; // CParticleCollectionFloatInput
                pub const m_nNumChildrenToEnable: usize = 0x480; // CParticleCollectionFloatInput
                pub const m_bPlayEndcapOnStop: usize = 0x5D8; // bool
                pub const m_bDestroyImmediately: usize = 0x5D9; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 2
            pub mod C_OP_PlayEndCapWhenFinished {
                pub const m_bFireOnEmissionEnd: usize = 0x1D0; // bool
                pub const m_bIncludeChildren: usize = 0x1D1; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 1
            pub mod C_OP_ForceControlPointStub {
                pub const m_ControlPoint: usize = 0x1D0; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 9
            pub mod C_OP_DriveCPFromGlobalSoundFloat {
                pub const m_nOutputControlPoint: usize = 0x1D0; // int32
                pub const m_nOutputField: usize = 0x1D4; // int32
                pub const m_flInputMin: usize = 0x1D8; // float32
                pub const m_flInputMax: usize = 0x1DC; // float32
                pub const m_flOutputMin: usize = 0x1E0; // float32
                pub const m_flOutputMax: usize = 0x1E4; // float32
                pub const m_StackName: usize = 0x1E8; // CUtlString
                pub const m_OperatorName: usize = 0x1F0; // CUtlString
                pub const m_FieldName: usize = 0x1F8; // CUtlString
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 3
            pub mod C_OP_SetControlPointFieldToWater {
                pub const m_nSourceCP: usize = 0x1D0; // int32
                pub const m_nDestCP: usize = 0x1D4; // int32
                pub const m_nCPField: usize = 0x1D8; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 7
            pub mod C_OP_SetControlPointToWaterSurface {
                pub const m_nSourceCP: usize = 0x1D0; // int32
                pub const m_nDestCP: usize = 0x1D4; // int32
                pub const m_nFlowCP: usize = 0x1D8; // int32
                pub const m_nActiveCP: usize = 0x1DC; // int32
                pub const m_nActiveCPField: usize = 0x1E0; // int32
                pub const m_flRetestRate: usize = 0x1E8; // CParticleCollectionFloatInput
                pub const m_bAdaptiveThreshold: usize = 0x340; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_RepeatedTriggerChildGroup {
                pub const m_nChildGroupID: usize = 0x1D0; // int32
                pub const m_flClusterRefireTime: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_flClusterSize: usize = 0x330; // CParticleCollectionFloatInput
                pub const m_flClusterCooldown: usize = 0x488; // CParticleCollectionFloatInput
                pub const m_bLimitChildCount: usize = 0x5E0; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 2
            pub mod C_OP_ChooseRandomChildrenInGroup {
                pub const m_nChildGroupID: usize = 0x1D0; // int32
                pub const m_flNumberOfChildren: usize = 0x1D8; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 1
            pub mod C_OP_SetSimulationRate {
                pub const m_flSimulationScale: usize = 0x1D0; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_ControlPointToRadialScreenSpace {
                pub const m_nCPIn: usize = 0x1D0; // int32
                pub const m_vecCP1Pos: usize = 0x1D4; // 
                pub const m_nCPOut: usize = 0x1E0; // int32
                pub const m_nCPOutField: usize = 0x1E4; // int32
                pub const m_nCPSSPosOut: usize = 0x1E8; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 15
            pub mod C_OP_LightningSnapshotGenerator {
                pub const m_nCPSnapshot: usize = 0x1D0; // int32
                pub const m_nCPStartPnt: usize = 0x1D4; // int32
                pub const m_nCPEndPnt: usize = 0x1D8; // int32
                pub const m_flSegments: usize = 0x1E0; // CParticleCollectionFloatInput
                pub const m_flOffset: usize = 0x338; // CParticleCollectionFloatInput
                pub const m_flOffsetDecay: usize = 0x490; // CParticleCollectionFloatInput
                pub const m_flRecalcRate: usize = 0x5E8; // CParticleCollectionFloatInput
                pub const m_flUVScale: usize = 0x740; // CParticleCollectionFloatInput
                pub const m_flUVOffset: usize = 0x898; // CParticleCollectionFloatInput
                pub const m_flSplitRate: usize = 0x9F0; // CParticleCollectionFloatInput
                pub const m_flBranchTwist: usize = 0xB48; // CParticleCollectionFloatInput
                pub const m_nBranchBehavior: usize = 0xCA0; // ParticleLightnintBranchBehavior_t
                pub const m_flRadiusStart: usize = 0xCA8; // CParticleCollectionFloatInput
                pub const m_flRadiusEnd: usize = 0xE00; // CParticleCollectionFloatInput
                pub const m_flDedicatedPool: usize = 0xF58; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_RemapExternalWindToCP {
                pub const m_nCP: usize = 0x1D0; // int32
                pub const m_nCPOutput: usize = 0x1D4; // int32
                pub const m_vecScale: usize = 0x1D8; // CParticleCollectionVecInput
                pub const m_bSetMagnitude: usize = 0x830; // bool
                pub const m_nOutVectorField: usize = 0x834; // int32
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 5
            pub mod C_OP_SetGravityToCP {
                pub const m_nCPInput: usize = 0x1D0; // int32
                pub const m_nCPOutput: usize = 0x1D4; // int32
                pub const m_flScale: usize = 0x1D8; // CParticleCollectionFloatInput
                pub const m_bSetOrientation: usize = 0x330; // bool
                pub const m_bSetZDown: usize = 0x331; // bool
            }
            // Parent: CParticleFunctionPreEmission
            // Fields count: 4
            pub mod C_OP_QuantizeCPComponent {
                pub const m_flInputValue: usize = 0x1D0; // CParticleCollectionFloatInput
                pub const m_nCPOutput: usize = 0x328; // int32
                pub const m_nOutVectorField: usize = 0x32C; // int32
                pub const m_flQuantizeValue: usize = 0x330; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 1
            pub mod C_OP_RenderPoints {
                pub const m_hMaterial: usize = 0x200; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: CBaseRendererSource2
            // Fields count: 7
            pub mod CBaseTrailRenderer {
                pub const m_nOrientationType: usize = 0x2710; // ParticleOrientationChoiceList_t
                pub const m_nOrientationControlPoint: usize = 0x2714; // int32
                pub const m_flMinSize: usize = 0x2718; // float32
                pub const m_flMaxSize: usize = 0x271C; // float32
                pub const m_flStartFadeSize: usize = 0x2720; // CParticleCollectionRendererFloatInput
                pub const m_flEndFadeSize: usize = 0x2878; // CParticleCollectionRendererFloatInput
                pub const m_bClampV: usize = 0x29D0; // bool
            }
            // Parent: CBaseTrailRenderer
            // Fields count: 20
            pub mod C_OP_RenderTrails {
                pub const m_bEnableFadingAndClamping: usize = 0x29E0; // bool
                pub const m_flStartFadeDot: usize = 0x29E4; // float32
                pub const m_flEndFadeDot: usize = 0x29E8; // float32
                pub const m_nPrevPntSource: usize = 0x29EC; // ParticleAttributeIndex_t
                pub const m_flMaxLength: usize = 0x29F0; // float32
                pub const m_flMinLength: usize = 0x29F4; // float32
                pub const m_bIgnoreDT: usize = 0x29F8; // bool
                pub const m_flConstrainRadiusToLengthRatio: usize = 0x29FC; // float32
                pub const m_flLengthScale: usize = 0x2A00; // float32
                pub const m_flLengthFadeInTime: usize = 0x2A04; // float32
                pub const m_flRadiusHeadTaper: usize = 0x2A08; // CPerParticleFloatInput
                pub const m_vecHeadColorScale: usize = 0x2B60; // CParticleCollectionVecInput
                pub const m_flHeadAlphaScale: usize = 0x31B8; // CPerParticleFloatInput
                pub const m_flRadiusTaper: usize = 0x3310; // CPerParticleFloatInput
                pub const m_vecTailColorScale: usize = 0x3468; // CParticleCollectionVecInput
                pub const m_flTailAlphaScale: usize = 0x3AC0; // CPerParticleFloatInput
                pub const m_nHorizCropField: usize = 0x3C18; // ParticleAttributeIndex_t
                pub const m_nVertCropField: usize = 0x3C1C; // ParticleAttributeIndex_t
                pub const m_flForwardShift: usize = 0x3C20; // float32
                pub const m_bFlipUVBasedOnPitchYaw: usize = 0x3C24; // bool
            }
            // Parent: CBaseRendererSource2
            // Fields count: 30
            pub mod C_OP_RenderRopes {
                pub const m_bEnableFadingAndClamping: usize = 0x2710; // bool
                pub const m_flMinSize: usize = 0x2714; // float32
                pub const m_flMaxSize: usize = 0x2718; // float32
                pub const m_flStartFadeSize: usize = 0x271C; // float32
                pub const m_flEndFadeSize: usize = 0x2720; // float32
                pub const m_flStartFadeDot: usize = 0x2724; // float32
                pub const m_flEndFadeDot: usize = 0x2728; // float32
                pub const m_flRadiusTaper: usize = 0x272C; // float32
                pub const m_nMinTesselation: usize = 0x2730; // int32
                pub const m_nMaxTesselation: usize = 0x2734; // int32
                pub const m_flTessScale: usize = 0x2738; // float32
                pub const m_flTextureVWorldSize: usize = 0x2740; // CParticleCollectionRendererFloatInput
                pub const m_flTextureVScrollRate: usize = 0x2898; // CParticleCollectionRendererFloatInput
                pub const m_flTextureVOffset: usize = 0x29F0; // CParticleCollectionRendererFloatInput
                pub const m_nTextureVParamsCP: usize = 0x2B48; // int32
                pub const m_bClampV: usize = 0x2B4C; // bool
                pub const m_nScaleCP1: usize = 0x2B50; // int32
                pub const m_nScaleCP2: usize = 0x2B54; // int32
                pub const m_flScaleVSizeByControlPointDistance: usize = 0x2B58; // float32
                pub const m_flScaleVScrollByControlPointDistance: usize = 0x2B5C; // float32
                pub const m_flScaleVOffsetByControlPointDistance: usize = 0x2B60; // float32
                pub const m_bUseScalarForTextureCoordinate: usize = 0x2B65; // bool
                pub const m_nScalarFieldForTextureCoordinate: usize = 0x2B68; // ParticleAttributeIndex_t
                pub const m_flScalarAttributeTextureCoordScale: usize = 0x2B6C; // float32
                pub const m_bReverseOrder: usize = 0x2B70; // bool
                pub const m_bClosedLoop: usize = 0x2B71; // bool
                pub const m_nOrientationType: usize = 0x2B74; // ParticleOrientationChoiceList_t
                pub const m_nVectorFieldForOrientation: usize = 0x2B78; // ParticleAttributeIndex_t
                pub const m_bDrawAsOpaque: usize = 0x2B7C; // bool
                pub const m_bGenerateNormals: usize = 0x2B7D; // bool
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 8
            pub mod C_OP_RenderAsModels {
                pub const m_ModelList: usize = 0x200; // CUtlVector<ModelReference_t>
                pub const m_flModelScale: usize = 0x21C; // float32
                pub const m_bFitToModelSize: usize = 0x220; // bool
                pub const m_bNonUniformScaling: usize = 0x221; // bool
                pub const m_nXAxisScalingAttribute: usize = 0x224; // ParticleAttributeIndex_t
                pub const m_nYAxisScalingAttribute: usize = 0x228; // ParticleAttributeIndex_t
                pub const m_nZAxisScalingAttribute: usize = 0x22C; // ParticleAttributeIndex_t
                pub const m_nSizeCullBloat: usize = 0x230; // int32
            }
            // Parent: C_OP_RenderPoints
            // Fields count: 7
            pub mod C_OP_RenderLights {
                pub const m_flAnimationRate: usize = 0x210; // float32
                pub const m_nAnimationType: usize = 0x214; // AnimationType_t
                pub const m_bAnimateInFPS: usize = 0x218; // bool
                pub const m_flMinSize: usize = 0x21C; // float32
                pub const m_flMaxSize: usize = 0x220; // float32
                pub const m_flStartFadeSize: usize = 0x224; // float32
                pub const m_flEndFadeSize: usize = 0x228; // float32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 6
            pub mod C_OP_RenderBlobs {
                pub const m_cubeWidth: usize = 0x200; // CParticleCollectionRendererFloatInput
                pub const m_cutoffRadius: usize = 0x358; // CParticleCollectionRendererFloatInput
                pub const m_renderRadius: usize = 0x4B0; // CParticleCollectionRendererFloatInput
                pub const m_nScaleCP: usize = 0x608; // int32
                pub const m_MaterialVars: usize = 0x610; // CUtlVector<MaterialVariable_t>
                pub const m_hMaterial: usize = 0x640; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 6
            pub mod C_OP_RenderGpuImplicit {
                pub const m_bUsePerParticleRadius: usize = 0x200; // bool
                pub const m_fGridSize: usize = 0x208; // CParticleCollectionRendererFloatInput
                pub const m_fRadiusScale: usize = 0x360; // CParticleCollectionRendererFloatInput
                pub const m_fIsosurfaceThreshold: usize = 0x4B8; // CParticleCollectionRendererFloatInput
                pub const m_nScaleCP: usize = 0x610; // int32
                pub const m_hMaterial: usize = 0x618; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 2
            pub mod C_OP_RenderScreenVelocityRotate {
                pub const m_flRotateRateDegrees: usize = 0x200; // float32
                pub const m_flForwardDegrees: usize = 0x204; // float32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 54
            pub mod C_OP_RenderModels {
                pub const m_bOnlyRenderInEffectsBloomPass: usize = 0x200; // bool
                pub const m_bOnlyRenderInEffectsWaterPass: usize = 0x201; // bool
                pub const m_bUseMixedResolutionRendering: usize = 0x202; // bool
                pub const m_bOnlyRenderInEffecsGameOverlay: usize = 0x203; // bool
                pub const m_ModelList: usize = 0x208; // CUtlVector<ModelReference_t>
                pub const m_nBodyGroupField: usize = 0x224; // ParticleAttributeIndex_t
                pub const m_nSubModelField: usize = 0x228; // ParticleAttributeIndex_t
                pub const m_bIgnoreNormal: usize = 0x22C; // bool
                pub const m_bOrientZ: usize = 0x22D; // bool
                pub const m_bCenterOffset: usize = 0x22E; // bool
                pub const m_vecLocalOffset: usize = 0x230; // CPerParticleVecInput
                pub const m_vecLocalRotation: usize = 0x888; // CPerParticleVecInput
                pub const m_bIgnoreRadius: usize = 0xEE0; // bool
                pub const m_nModelScaleCP: usize = 0xEE4; // int32
                pub const m_vecComponentScale: usize = 0xEE8; // CPerParticleVecInput
                pub const m_bLocalScale: usize = 0x1540; // bool
                pub const m_nSizeCullBloat: usize = 0x1544; // int32
                pub const m_bAnimated: usize = 0x1548; // bool
                pub const m_flAnimationRate: usize = 0x1550; // CPerParticleFloatInput
                pub const m_bScaleAnimationRate: usize = 0x16A8; // bool
                pub const m_bForceLoopingAnimation: usize = 0x16A9; // bool
                pub const m_bResetAnimOnStop: usize = 0x16AA; // bool
                pub const m_bManualAnimFrame: usize = 0x16AB; // bool
                pub const m_nAnimationScaleField: usize = 0x16AC; // ParticleAttributeIndex_t
                pub const m_nAnimationField: usize = 0x16B0; // ParticleAttributeIndex_t
                pub const m_nManualFrameField: usize = 0x16B4; // ParticleAttributeIndex_t
                pub const m_ActivityName: usize = 0x16B8; // char[256]
                pub const m_SequenceName: usize = 0x17B8; // char[256]
                pub const m_bEnableClothSimulation: usize = 0x18B8; // bool
                pub const m_hOverrideMaterial: usize = 0x18C0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_bOverrideTranslucentMaterials: usize = 0x18C8; // bool
                pub const m_nSkin: usize = 0x18D0; // CPerParticleFloatInput
                pub const m_MaterialVars: usize = 0x1A28; // CUtlVector<MaterialVariable_t>
                pub const m_flManualModelSelection: usize = 0x1A40; // CPerParticleFloatInput
                pub const m_modelInput: usize = 0x1B98; // CParticleModelInput
                pub const m_nLOD: usize = 0x1BF8; // int32
                pub const m_EconSlotName: usize = 0x1BFC; // char[256]
                pub const m_bOriginalModel: usize = 0x1CFC; // bool
                pub const m_bSuppressTint: usize = 0x1CFD; // bool
                pub const m_bUseRawMeshGroup: usize = 0x1CFE; // bool
                pub const m_bDisableShadows: usize = 0x1CFF; // bool
                pub const m_bDisableDepthPrepass: usize = 0x1D00; // bool
                pub const m_bAcceptsDecals: usize = 0x1D01; // bool
                pub const m_bForceDrawInterlevedWithSiblings: usize = 0x1D02; // bool
                pub const m_bDoNotDrawInParticlePass: usize = 0x1D03; // bool
                pub const m_bUseFastModelCollectionRenderPath: usize = 0x1D04; // bool
                pub const m_bAllowApproximateTransforms: usize = 0x1D05; // bool
                pub const m_szRenderAttribute: usize = 0x1D06; // char[260]
                pub const m_flRadiusScale: usize = 0x1E10; // CParticleCollectionFloatInput
                pub const m_flAlphaScale: usize = 0x1F68; // CParticleCollectionFloatInput
                pub const m_flRollScale: usize = 0x20C0; // CParticleCollectionFloatInput
                pub const m_nAlpha2Field: usize = 0x2218; // ParticleAttributeIndex_t
                pub const m_vecColorScale: usize = 0x2220; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0x2878; // ParticleColorBlendType_t
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 5
            pub mod C_OP_RenderSimpleModelCollection {
                pub const m_bCenterOffset: usize = 0x200; // bool
                pub const m_modelInput: usize = 0x208; // CParticleModelInput
                pub const m_nLOD: usize = 0x268; // int32
                pub const m_bDisableShadows: usize = 0x26C; // bool
                pub const m_bAcceptsDecals: usize = 0x26D; // bool
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 8
            pub mod C_OP_RenderMaterialProxy {
                pub const m_nMaterialControlPoint: usize = 0x200; // int32
                pub const m_nProxyType: usize = 0x204; // MaterialProxyType_t
                pub const m_MaterialVars: usize = 0x208; // CUtlVector<MaterialVariable_t>
                pub const m_hOverrideMaterial: usize = 0x220; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_flMaterialOverrideEnabled: usize = 0x228; // CParticleCollectionFloatInput
                pub const m_vecColorScale: usize = 0x380; // CParticleCollectionVecInput
                pub const m_flAlpha: usize = 0x9D8; // CPerParticleFloatInput
                pub const m_nColorBlendType: usize = 0xB30; // ParticleColorBlendType_t
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 12
            pub mod C_OP_RenderProjected {
                pub const m_bProjectCharacter: usize = 0x200; // bool
                pub const m_bProjectWorld: usize = 0x201; // bool
                pub const m_bProjectWater: usize = 0x202; // bool
                pub const m_bFlipHorizontal: usize = 0x203; // bool
                pub const m_bEnableProjectedDepthControls: usize = 0x204; // bool
                pub const m_flMinProjectionDepth: usize = 0x208; // float32
                pub const m_flMaxProjectionDepth: usize = 0x20C; // float32
                pub const m_vecProjectedMaterials: usize = 0x210; // CUtlVector<RenderProjectedMaterial_t>
                pub const m_flMaterialSelection: usize = 0x228; // CPerParticleFloatInput
                pub const m_flAnimationTimeScale: usize = 0x380; // float32
                pub const m_bOrientToNormal: usize = 0x384; // bool
                pub const m_MaterialVars: usize = 0x388; // CUtlVector<MaterialVariable_t>
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 16
            pub mod C_OP_RenderDeferredLight {
                pub const m_bUseAlphaTestWindow: usize = 0x200; // bool
                pub const m_bUseTexture: usize = 0x201; // bool
                pub const m_flRadiusScale: usize = 0x204; // float32
                pub const m_flAlphaScale: usize = 0x208; // float32
                pub const m_nAlpha2Field: usize = 0x20C; // ParticleAttributeIndex_t
                pub const m_vecColorScale: usize = 0x210; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0x868; // ParticleColorBlendType_t
                pub const m_flLightDistance: usize = 0x86C; // float32
                pub const m_flStartFalloff: usize = 0x870; // float32
                pub const m_flDistanceFalloff: usize = 0x874; // float32
                pub const m_flSpotFoV: usize = 0x878; // float32
                pub const m_nAlphaTestPointField: usize = 0x87C; // ParticleAttributeIndex_t
                pub const m_nAlphaTestRangeField: usize = 0x880; // ParticleAttributeIndex_t
                pub const m_nAlphaTestSharpnessField: usize = 0x884; // ParticleAttributeIndex_t
                pub const m_hTexture: usize = 0x888; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_nHSVShiftControlPoint: usize = 0x890; // int32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 29
            pub mod C_OP_RenderStandardLight {
                pub const m_nLightType: usize = 0x200; // ParticleLightTypeChoiceList_t
                pub const m_vecColorScale: usize = 0x208; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0x860; // ParticleColorBlendType_t
                pub const m_flIntensity: usize = 0x868; // CParticleCollectionFloatInput
                pub const m_bCastShadows: usize = 0x9C0; // bool
                pub const m_flTheta: usize = 0x9C8; // CParticleCollectionFloatInput
                pub const m_flPhi: usize = 0xB20; // CParticleCollectionFloatInput
                pub const m_flRadiusMultiplier: usize = 0xC78; // CParticleCollectionFloatInput
                pub const m_nAttenuationStyle: usize = 0xDD0; // StandardLightingAttenuationStyle_t
                pub const m_flFalloffLinearity: usize = 0xDD8; // CParticleCollectionFloatInput
                pub const m_flFiftyPercentFalloff: usize = 0xF30; // CParticleCollectionFloatInput
                pub const m_flZeroPercentFalloff: usize = 0x1088; // CParticleCollectionFloatInput
                pub const m_bRenderDiffuse: usize = 0x11E0; // bool
                pub const m_bRenderSpecular: usize = 0x11E1; // bool
                pub const m_lightCookie: usize = 0x11E8; // CUtlString
                pub const m_nPriority: usize = 0x11F0; // int32
                pub const m_nFogLightingMode: usize = 0x11F4; // ParticleLightFogLightingMode_t
                pub const m_flFogContribution: usize = 0x11F8; // CParticleCollectionRendererFloatInput
                pub const m_nCapsuleLightBehavior: usize = 0x1350; // ParticleLightBehaviorChoiceList_t
                pub const m_flCapsuleLength: usize = 0x1354; // float32
                pub const m_bReverseOrder: usize = 0x1358; // bool
                pub const m_bClosedLoop: usize = 0x1359; // bool
                pub const m_nPrevPntSource: usize = 0x135C; // ParticleAttributeIndex_t
                pub const m_flMaxLength: usize = 0x1360; // float32
                pub const m_flMinLength: usize = 0x1364; // float32
                pub const m_bIgnoreDT: usize = 0x1368; // bool
                pub const m_flConstrainRadiusToLengthRatio: usize = 0x136C; // float32
                pub const m_flLengthScale: usize = 0x1370; // float32
                pub const m_flLengthFadeInTime: usize = 0x1374; // float32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 14
            pub mod C_OP_RenderOmni2Light {
                pub const m_nLightType: usize = 0x200; // ParticleOmni2LightTypeChoiceList_t
                pub const m_vColorBlend: usize = 0x208; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0x860; // ParticleColorBlendType_t
                pub const m_nBrightnessUnit: usize = 0x864; // ParticleLightUnitChoiceList_t
                pub const m_flBrightnessLumens: usize = 0x868; // CPerParticleFloatInput
                pub const m_flBrightnessCandelas: usize = 0x9C0; // CPerParticleFloatInput
                pub const m_bCastShadows: usize = 0xB18; // bool
                pub const m_flLuminaireRadius: usize = 0xB20; // CPerParticleFloatInput
                pub const m_flSkirt: usize = 0xC78; // CPerParticleFloatInput
                pub const m_flRange: usize = 0xDD0; // CPerParticleFloatInput
                pub const m_flInnerConeAngle: usize = 0xF28; // CPerParticleFloatInput
                pub const m_flOuterConeAngle: usize = 0x1080; // CPerParticleFloatInput
                pub const m_hLightCookie: usize = 0x11D8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bSphericalCookie: usize = 0x11E0; // bool
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 7
            pub mod C_OP_RenderLightBeam {
                pub const m_vColorBlend: usize = 0x200; // CParticleCollectionVecInput
                pub const m_nColorBlendType: usize = 0x858; // ParticleColorBlendType_t
                pub const m_flBrightnessLumensPerMeter: usize = 0x860; // CParticleCollectionFloatInput
                pub const m_bCastShadows: usize = 0x9B8; // bool
                pub const m_flSkirt: usize = 0x9C0; // CParticleCollectionFloatInput
                pub const m_flRange: usize = 0xB18; // CParticleCollectionFloatInput
                pub const m_flThickness: usize = 0xC70; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 0
            pub mod C_OP_RenderClothForce {
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 0
            pub mod C_OP_Callback {
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 9
            pub mod C_OP_RenderScreenShake {
                pub const m_flDurationScale: usize = 0x200; // float32
                pub const m_flRadiusScale: usize = 0x204; // float32
                pub const m_flFrequencyScale: usize = 0x208; // float32
                pub const m_flAmplitudeScale: usize = 0x20C; // float32
                pub const m_nRadiusField: usize = 0x210; // ParticleAttributeIndex_t
                pub const m_nDurationField: usize = 0x214; // ParticleAttributeIndex_t
                pub const m_nFrequencyField: usize = 0x218; // ParticleAttributeIndex_t
                pub const m_nAmplitudeField: usize = 0x21C; // ParticleAttributeIndex_t
                pub const m_nFilterCP: usize = 0x220; // int32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 4
            pub mod C_OP_RenderTonemapController {
                pub const m_flTonemapLevel: usize = 0x200; // float32
                pub const m_flTonemapWeight: usize = 0x204; // float32
                pub const m_nTonemapLevelField: usize = 0x208; // ParticleAttributeIndex_t
                pub const m_nTonemapWeightField: usize = 0x20C; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 3
            pub mod C_OP_RenderPostProcessing {
                pub const m_flPostProcessStrength: usize = 0x200; // CPerParticleFloatInput
                pub const m_hPostTexture: usize = 0x358; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
                pub const m_nPriority: usize = 0x360; // ParticlePostProcessPriorityGroup_t
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 12
            pub mod C_OP_RenderSound {
                pub const m_flDurationScale: usize = 0x200; // float32
                pub const m_flSndLvlScale: usize = 0x204; // float32
                pub const m_flPitchScale: usize = 0x208; // float32
                pub const m_flVolumeScale: usize = 0x20C; // float32
                pub const m_nSndLvlField: usize = 0x210; // ParticleAttributeIndex_t
                pub const m_nDurationField: usize = 0x214; // ParticleAttributeIndex_t
                pub const m_nPitchField: usize = 0x218; // ParticleAttributeIndex_t
                pub const m_nVolumeField: usize = 0x21C; // ParticleAttributeIndex_t
                pub const m_nChannel: usize = 0x220; // int32
                pub const m_nCPReference: usize = 0x224; // int32
                pub const m_pszSoundName: usize = 0x228; // char[256]
                pub const m_bSuppressStopSoundEvent: usize = 0x328; // bool
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 7
            pub mod C_OP_RenderStatusEffect {
                pub const m_pTextureColorWarp: usize = 0x200; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureDetail2: usize = 0x208; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureDiffuseWarp: usize = 0x210; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureFresnelColorWarp: usize = 0x218; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureFresnelWarp: usize = 0x220; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureSpecularWarp: usize = 0x228; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureEnvMap: usize = 0x230; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 6
            pub mod C_OP_RenderStatusEffectCitadel {
                pub const m_pTextureColorWarp: usize = 0x200; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureNormal: usize = 0x208; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureMetalness: usize = 0x210; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureRoughness: usize = 0x218; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureSelfIllum: usize = 0x220; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_pTextureDetail: usize = 0x228; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 3
            pub mod C_OP_RenderFlattenGrass {
                pub const m_flFlattenStrength: usize = 0x200; // float32
                pub const m_nStrengthFieldOverride: usize = 0x204; // ParticleAttributeIndex_t
                pub const m_flRadiusScale: usize = 0x208; // float32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 10
            pub mod C_OP_RenderTreeShake {
                pub const m_flPeakStrength: usize = 0x200; // float32
                pub const m_nPeakStrengthFieldOverride: usize = 0x204; // ParticleAttributeIndex_t
                pub const m_flRadius: usize = 0x208; // float32
                pub const m_nRadiusFieldOverride: usize = 0x20C; // ParticleAttributeIndex_t
                pub const m_flShakeDuration: usize = 0x210; // float32
                pub const m_flTransitionTime: usize = 0x214; // float32
                pub const m_flTwistAmount: usize = 0x218; // float32
                pub const m_flRadialAmount: usize = 0x21C; // float32
                pub const m_flControlPointOrientationAmount: usize = 0x220; // float32
                pub const m_nControlPointForLinearDirection: usize = 0x224; // int32
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 2
            pub mod C_OP_RenderText {
                pub const m_OutlineColor: usize = 0x200; // Color
                pub const m_DefaultText: usize = 0x208; // CUtlString
            }
            // Parent: CParticleFunctionRenderer
            // Fields count: 4
            pub mod C_OP_RenderVRHapticEvent {
                pub const m_nHand: usize = 0x200; // ParticleVRHandChoiceList_t
                pub const m_nOutputHandCP: usize = 0x204; // int32
                pub const m_nOutputField: usize = 0x208; // int32
                pub const m_flAmplitude: usize = 0x210; // CPerParticleFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapSDFDistanceToScalarAttribute {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nVectorFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flMinDistance: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_flMaxDistance: usize = 0x320; // CParticleCollectionFloatInput
                pub const m_flValueBelowMin: usize = 0x478; // CParticleCollectionFloatInput
                pub const m_flValueAtMin: usize = 0x5D0; // CParticleCollectionFloatInput
                pub const m_flValueAtMax: usize = 0x728; // CParticleCollectionFloatInput
                pub const m_flValueAboveMax: usize = 0x880; // CParticleCollectionFloatInput
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 8
            pub mod C_OP_RemapSDFDistanceToVectorAttribute {
                pub const m_nVectorFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
                pub const m_nVectorFieldInput: usize = 0x1C4; // ParticleAttributeIndex_t
                pub const m_flMinDistance: usize = 0x1C8; // CParticleCollectionFloatInput
                pub const m_flMaxDistance: usize = 0x320; // CParticleCollectionFloatInput
                pub const m_vValueBelowMin: usize = 0x478; // 
                pub const m_vValueAtMin: usize = 0x484; // 
                pub const m_vValueAtMax: usize = 0x490; // 
                pub const m_vValueAboveMax: usize = 0x49C; // 
            }
            // Parent: CParticleFunctionForce
            // Fields count: 1
            pub mod C_OP_SDFForce {
                pub const m_flForceScale: usize = 0x1D0; // float32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 1
            pub mod C_OP_RemapSDFGradientToVectorAttribute {
                pub const m_nFieldOutput: usize = 0x1C0; // ParticleAttributeIndex_t
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_SDFLighting {
                pub const m_vLightingDir: usize = 0x1C0; // 
                pub const m_vTint_0: usize = 0x1CC; // 
                pub const m_vTint_1: usize = 0x1D8; // 
            }
            // Parent: CParticleFunctionConstraint
            // Fields count: 3
            pub mod C_OP_SDFConstraint {
                pub const m_flMinDist: usize = 0x1C0; // CParticleCollectionFloatInput
                pub const m_flMaxDist: usize = 0x318; // CParticleCollectionFloatInput
                pub const m_nMaxIterations: usize = 0x470; // int32
            }
            // Parent: CParticleFunctionOperator
            // Fields count: 3
            pub mod C_OP_ParticlePhysics {
                pub const m_Gravity: usize = 0x1C0; // CParticleCollectionVecInput
                pub const m_fDrag: usize = 0x818; // CParticleCollectionFloatInput
                pub const m_nMaxConstraintPasses: usize = 0x970; // int32
            }
        }
        // Module: pulse_system.dll
        // Classes count: 85
        // Enums count: 7
        pub mod pulse_system {
            // Alignment: 2
            // Members count: 61
            #[repr(u16)]
            pub enum PulseInstructionCode_t {
                INVALID = 0x0,
                IMMEDIATE_HALT = 0x1,
                RETURN_VOID = 0x2,
                RETURN_VALUE = 0x3,
                NOP = 0x4,
                JUMP = 0x5,
                JUMP_COND = 0x6,
                CHUNK_LEAP = 0x7,
                CHUNK_LEAP_COND = 0x8,
                PULSE_CALL_SYNC = 0x9,
                PULSE_CALL_ASYNC_FIRE = 0xA,
                CELL_INVOKE = 0xB,
                LIBRARY_INVOKE = 0xC,
                SET_VAR = 0xD,
                GET_VAR = 0xE,
                GET_CONST = 0xF,
                SET_REGISTER_DOMAIN_VALUE = 0x10,
                COPY = 0x11,
                NOT = 0x12,
                NEGATE = 0x13,
                ADD = 0x14,
                SUB = 0x15,
                MUL = 0x16,
                DIV = 0x17,
                MOD = 0x18,
                LT = 0x19,
                LTE = 0x1A,
                EQ = 0x1B,
                NE = 0x1C,
                AND = 0x1D,
                OR = 0x1E,
                CONVERT_VALUE = 0x1F,
                LAST_SERIALIZED_CODE = 0x20,
                NEGATE_INT = 0x21,
                NEGATE_FLOAT = 0x22,
                ADD_INT = 0x23,
                ADD_FLOAT = 0x24,
                ADD_STRING = 0x25,
                SUB_INT = 0x26,
                SUB_FLOAT = 0x27,
                MUL_INT = 0x28,
                MUL_FLOAT = 0x29,
                DIV_INT = 0x2A,
                DIV_FLOAT = 0x2B,
                MOD_INT = 0x2C,
                MOD_FLOAT = 0x2D,
                LT_INT = 0x2E,
                LT_FLOAT = 0x2F,
                LTE_INT = 0x30,
                LTE_FLOAT = 0x31,
                EQ_BOOL = 0x32,
                EQ_INT = 0x33,
                EQ_FLOAT = 0x34,
                EQ_STRING = 0x35,
                EQ_ENTITY_NAME = 0x36,
                NE_BOOL = 0x37,
                NE_INT = 0x38,
                NE_FLOAT = 0x39,
                NE_STRING = 0x3A,
                NE_ENTITY_NAME = 0x3B,
                GET_CONST_INLINE_STORAGE = 0x3C
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum PulseMethodCallMode_t {
                SYNC_WAIT_FOR_COMPLETION = 0x0,
                ASYNC_FIRE_AND_FORGET = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PulseCursorExecResult_t {
                Succeeded = 0x0,
                Canceled = 0x1,
                Failed = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum PulseCursorCancelPriority_t {
                None = 0x0,
                CancelOnSucceeded = 0x1,
                SoftCancel = 0x2,
                HardCancel = 0x3
            }
            // Alignment: 4
            // Members count: 19
            #[repr(u32)]
            pub enum PulseValueType_t {
                PVAL_INVALID = 0xFFFFFFFFFFFFFFFF,
                PVAL_BOOL = 0x0,
                PVAL_INT = 0x1,
                PVAL_FLOAT = 0x2,
                PVAL_STRING = 0x3,
                PVAL_VEC3 = 0x4,
                PVAL_TRANSFORM = 0x5,
                PVAL_COLOR_RGB = 0x6,
                PVAL_EHANDLE = 0x7,
                PVAL_RESOURCE = 0x8,
                PVAL_SNDEVT_GUID = 0x9,
                PVAL_ENTITY_NAME = 0xA,
                PVAL_SCHEMA_PTR = 0xB,
                PVAL_TYPESAFE_INT = 0xC,
                PVAL_CURSOR_FLOW = 0xD,
                PVAL_ANY = 0xE,
                PVAL_SCHEMA_ENUM = 0xF,
                PVAL_PANORAMA_PANEL_HANDLE = 0x10,
                PVAL_COUNT = 0x11
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum PulseTestEnumColor_t {
                BLACK = 0x0,
                WHITE = 0x1,
                RED = 0x2,
                GREEN = 0x3,
                BLUE = 0x4
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PulseTestEnumShape_t {
                CIRCLE = 0x64,
                SQUARE = 0xC8,
                TRIANGLE = 0x12C
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseCursorFuncs {
            }
            // Parent: None
            // Fields count: 1
            pub mod CPulseCell_WaitForCursorsWithTagBase__CursorState_t {
                pub const m_TagName: usize = 0x0; // CUtlSymbolLarge
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseTestFuncs_LibraryA {
            }
            // Parent: None
            // Fields count: 0
            pub mod FakeEntity_tAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseExecCursor {
            }
            // Parent: None
            // Fields count: 5
            pub mod CPulse_RegisterInfo {
                pub const m_nReg: usize = 0x0; // PulseRuntimeRegisterIndex_t
                pub const m_Type: usize = 0x8; // CPulseValueFullType
                pub const m_OriginName: usize = 0x18; // CKV3MemberNameWithStorage
                pub const m_nWrittenByInstruction: usize = 0x50; // int32
                pub const m_nLastReadByInstruction: usize = 0x54; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod CPulse_Chunk {
                pub const m_Instructions: usize = 0x0; // CUtlLeanVector<PGDInstruction_t>
                pub const m_Registers: usize = 0x10; // CUtlLeanVector<CPulse_RegisterInfo>
                pub const m_InstructionEditorIDs: usize = 0x20; // CUtlLeanVector<PulseDocNodeID_t>
            }
            // Parent: None
            // Fields count: 5
            pub mod CPulse_Variable {
                pub const m_Name: usize = 0x0; // CUtlSymbolLarge
                pub const m_Description: usize = 0x8; // CUtlString
                pub const m_Type: usize = 0x10; // CPulseValueFullType
                pub const m_DefaultValue: usize = 0x20; // KeyValues3
                pub const m_bIsPublic: usize = 0x32; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CPulse_Constant {
                pub const m_Type: usize = 0x0; // CPulseValueFullType
                pub const m_Value: usize = 0x10; // KeyValues3
            }
            // Parent: None
            // Fields count: 3
            pub mod CPulse_PublicOutput {
                pub const m_Name: usize = 0x0; // CUtlSymbolLarge
                pub const m_Description: usize = 0x8; // CUtlString
                pub const m_ParamType: usize = 0x10; // CPulseValueFullType
            }
            // Parent: None
            // Fields count: 4
            pub mod CPulse_OutputConnection {
                pub const m_SourceOutput: usize = 0x0; // CUtlSymbolLarge
                pub const m_TargetEntity: usize = 0x8; // CUtlSymbolLarge
                pub const m_TargetInput: usize = 0x10; // CUtlSymbolLarge
                pub const m_Param: usize = 0x18; // CUtlSymbolLarge
            }
            // Parent: None
            // Fields count: 5
            pub mod CPulse_InvokeBinding {
                pub const m_RegisterMap: usize = 0x0; // PulseRegisterMap_t
                pub const m_FuncName: usize = 0x20; // CUtlSymbolLarge
                pub const m_nCellIndex: usize = 0x28; // PulseRuntimeCellIndex_t
                pub const m_nSrcChunk: usize = 0x2C; // PulseRuntimeChunkIndex_t
                pub const m_nSrcInstruction: usize = 0x30; // int32
            }
            // Parent: None
            // Fields count: 6
            pub mod CPulse_CallInfo {
                pub const m_PortName: usize = 0x0; // CUtlSymbolLarge
                pub const m_nEditorNodeID: usize = 0x8; // PulseDocNodeID_t
                pub const m_RegisterMap: usize = 0x10; // PulseRegisterMap_t
                pub const m_CallMethodID: usize = 0x30; // PulseDocNodeID_t
                pub const m_nSrcChunk: usize = 0x34; // PulseRuntimeChunkIndex_t
                pub const m_nSrcInstruction: usize = 0x38; // int32
            }
            // Parent: None
            // Fields count: 10
            pub mod CPulseGraphDef {
                pub const m_DomainIdentifier: usize = 0x8; // CUtlSymbolLarge
                pub const m_ParentMapName: usize = 0x10; // CUtlSymbolLarge
                pub const m_Chunks: usize = 0x18; // CUtlVector<CPulse_Chunk*>
                pub const m_Cells: usize = 0x30; // CUtlVector<CPulseCell_Base*>
                pub const m_Vars: usize = 0x48; // CUtlVector<CPulse_Variable>
                pub const m_PublicOutputs: usize = 0x60; // CUtlVector<CPulse_PublicOutput>
                pub const m_InvokeBindings: usize = 0x78; // CUtlVector<CPulse_InvokeBinding*>
                pub const m_CallInfos: usize = 0x90; // CUtlVector<CPulse_CallInfo*>
                pub const m_Constants: usize = 0xA8; // CUtlVector<CPulse_Constant>
                pub const m_OutputConnections: usize = 0xC0; // CUtlVector<CPulse_OutputConnection*>
            }
            // Parent: None
            // Fields count: 0
            pub mod CBasePulseGraphInstance {
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseMathlib {
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseTestScriptLib {
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeChunkIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeCallInfoIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeVarIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeOutputIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeStateOffset_t {
                pub const m_Value: usize = 0x0; // uint16
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeRegisterIndex_t {
                pub const m_Value: usize = 0x0; // int16
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeConstantIndex_t {
                pub const m_Value: usize = 0x0; // int16
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeCellIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeInvokeIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseDocNodeID_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseRuntimeEntrypointIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseGraphInstanceID_t {
                pub const m_Value: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseCursorID_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseCursorYieldToken_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod PulseRegisterMap_t {
                pub const m_Inparams: usize = 0x0; // KeyValues3
                pub const m_Outparams: usize = 0x10; // KeyValues3
            }
            // Parent: None
            // Fields count: 11
            pub mod PGDInstruction_t {
                pub const m_nCode: usize = 0x0; // PulseInstructionCode_t
                pub const m_nVar: usize = 0x4; // PulseRuntimeVarIndex_t
                pub const m_nReg0: usize = 0x8; // PulseRuntimeRegisterIndex_t
                pub const m_nReg1: usize = 0xA; // PulseRuntimeRegisterIndex_t
                pub const m_nReg2: usize = 0xC; // PulseRuntimeRegisterIndex_t
                pub const m_nInvokeBindingIndex: usize = 0x10; // PulseRuntimeInvokeIndex_t
                pub const m_nChunk: usize = 0x14; // PulseRuntimeChunkIndex_t
                pub const m_nDestInstruction: usize = 0x18; // int32
                pub const m_nCallInfoIndex: usize = 0x1C; // PulseRuntimeCallInfoIndex_t
                pub const m_nConstIdx: usize = 0x20; // PulseRuntimeConstantIndex_t
                pub const m_DomainValue: usize = 0x28; // CBufferString
            }
            // Parent: None
            // Fields count: 3
            pub mod CPulse_OutflowConnection {
                pub const m_SourceOutflowName: usize = 0x0; // CUtlSymbolLarge
                pub const m_nDestChunk: usize = 0x8; // PulseRuntimeChunkIndex_t
                pub const m_nInstruction: usize = 0xC; // int32
            }
            // Parent: CPulse_OutflowConnection
            // Fields count: 0
            pub mod CPulse_ResumePoint {
            }
            // Parent: None
            // Fields count: 1
            pub mod CPulseCell_Base {
                pub const m_nEditorNodeID: usize = 0x8; // PulseDocNodeID_t
            }
            // Parent: CPulseCell_Base
            // Fields count: 0
            pub mod CPulseCell_BaseFlow {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Inflow_BaseEntrypoint {
                pub const m_EntryChunk: usize = 0x48; // PulseRuntimeChunkIndex_t
                pub const m_RegisterMap: usize = 0x50; // PulseRegisterMap_t
            }
            // Parent: None
            // Fields count: 3
            pub mod CPulseRuntimeMethodArg {
                pub const m_Name: usize = 0x0; // CKV3MemberNameWithStorage
                pub const m_Description: usize = 0x38; // CUtlString
                pub const m_Type: usize = 0x40; // CPulseValueFullType
            }
            // Parent: CPulseCell_Inflow_BaseEntrypoint
            // Fields count: 5
            pub mod CPulseCell_Inflow_Method {
                pub const m_MethodName: usize = 0x70; // CUtlSymbolLarge
                pub const m_Description: usize = 0x78; // CUtlString
                pub const m_bIsPublic: usize = 0x80; // bool
                pub const m_ReturnType: usize = 0x88; // CPulseValueFullType
                pub const m_Args: usize = 0x98; // CUtlVector<CPulseRuntimeMethodArg>
            }
            // Parent: CPulseCell_Inflow_BaseEntrypoint
            // Fields count: 1
            pub mod CPulseCell_Inflow_EventHandler {
                pub const m_EventName: usize = 0x70; // CUtlSymbolLarge
            }
            // Parent: CPulseCell_Inflow_BaseEntrypoint
            // Fields count: 1
            pub mod CPulseCell_Inflow_GraphHook {
                pub const m_HookName: usize = 0x70; // CUtlSymbolLarge
            }
            // Parent: CPulseCell_Inflow_BaseEntrypoint
            // Fields count: 4
            pub mod CPulseCell_Inflow_EntOutputHandler {
                pub const m_SourceEntity: usize = 0x70; // CUtlSymbolLarge
                pub const m_SourceOutput: usize = 0x78; // CUtlSymbolLarge
                pub const m_TargetInput: usize = 0x80; // CUtlSymbolLarge
                pub const m_ExpectedParamType: usize = 0x88; // CPulseValueFullType
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_BaseYieldingInflow {
            }
            // Parent: CPulseCell_Base
            // Fields count: 0
            pub mod CPulseCell_BaseValue {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Step_PublicOutput {
                pub const m_OutputIndex: usize = 0x48; // PulseRuntimeOutputIndex_t
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 1
            pub mod CPulseCell_Inflow_Yield {
                pub const m_UnyieldResume: usize = 0x48; // CPulse_ResumePoint
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 1
            pub mod CPulseCell_Inflow_Wait {
                pub const m_WakeResume: usize = 0x48; // CPulse_ResumePoint
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Outflow_StringSwitch {
                pub const m_DefaultCaseOutflow: usize = 0x48; // CPulse_OutflowConnection
                pub const m_CaseOutflows: usize = 0x58; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Outflow_IntSwitch {
                pub const m_DefaultCaseOutflow: usize = 0x48; // CPulse_OutflowConnection
                pub const m_CaseOutflows: usize = 0x58; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Outflow_CycleOrdered {
                pub const m_Outputs: usize = 0x48; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: None
            // Fields count: 1
            pub mod CPulseCell_Outflow_CycleOrdered__InstanceState_t {
                pub const m_nNextIndex: usize = 0x0; // int32
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Outflow_CycleRandom {
                pub const m_Outputs: usize = 0x48; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Outflow_CycleShuffled {
                pub const m_Outputs: usize = 0x48; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: None
            // Fields count: 2
            pub mod CPulseCell_Outflow_CycleShuffled__InstanceState_t {
                pub const m_Shuffle: usize = 0x0; // CUtlVectorFixedGrowable<uint8>
                pub const m_nNextShuffle: usize = 0x20; // int32
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Outflow_TestRandomYesNo {
                pub const m_Yes: usize = 0x48; // CPulse_OutflowConnection
                pub const m_No: usize = 0x58; // CPulse_OutflowConnection
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Outflow_TestExplicitYesNo {
                pub const m_Yes: usize = 0x48; // CPulse_OutflowConnection
                pub const m_No: usize = 0x58; // CPulse_OutflowConnection
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 0
            pub mod CPulseCell_Value_TestValue50 {
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 0
            pub mod CPulseCell_Value_RandomInt {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Step_DebugLog {
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 4
            pub mod CPulseCell_Step_CallExternalMethod {
                pub const m_MethodName: usize = 0x48; // CUtlSymbolLarge
                pub const m_ExpectedArgs: usize = 0x50; // CUtlVector<CPulseRuntimeMethodArg>
                pub const m_nAsyncCallMode: usize = 0x68; // PulseMethodCallMode_t
                pub const m_OnFinished: usize = 0x70; // CPulse_ResumePoint
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 4
            pub mod CPulseCell_Timeline {
                pub const m_TimelineEvents: usize = 0x48; // CUtlVector<CPulseCell_Timeline::TimelineEvent_t>
                pub const m_bWaitForChildOutflows: usize = 0x60; // bool
                pub const m_OnFinished: usize = 0x68; // CPulse_ResumePoint
                pub const m_OnCanceled: usize = 0x78; // CPulse_ResumePoint
            }
            // Parent: None
            // Fields count: 4
            pub mod CPulseCell_Timeline__TimelineEvent_t {
                pub const m_flTimeFromPrevious: usize = 0x0; // float32
                pub const m_bPauseForPreviousEvents: usize = 0x4; // bool
                pub const m_bCallModeSync: usize = 0x5; // bool
                pub const m_EventOutflow: usize = 0x8; // CPulse_OutflowConnection
            }
            // Parent: None
            // Fields count: 1
            pub mod PulseTestEHandle_t {
                pub const m_Value: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 7
            pub mod FakeEntity_t {
                pub const m_nHandle: usize = 0x0; // PulseTestEHandle_t
                pub const m_Name: usize = 0x8; // CUtlString
                pub const m_Class: usize = 0x10; // CUtlString
                pub const m_bDestroyed: usize = 0x18; // bool
                pub const m_pAssociatedGraphInstance: usize = 0x20; // CPulseGraphInstance_TestDomain*
                pub const m_bFuncWasCalled: usize = 0x28; // bool
                pub const m_fValue: usize = 0x2C; // float32
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 6
            pub mod CPulseGraphInstance_TestDomain {
                pub const m_bIsRunningUnitTests: usize = 0xD8; // bool
                pub const m_bExplicitTimeStepping: usize = 0xD9; // bool
                pub const m_bExpectingToDestroyWithYieldedCursors: usize = 0xDA; // bool
                pub const m_nNextValidateIndex: usize = 0xDC; // int32
                pub const m_Tracepoints: usize = 0xE0; // CUtlVector<CUtlString>
                pub const m_bTestYesOrNoPath: usize = 0xF8; // bool
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Step_TestDomainTracepoint {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Step_TestDomainCreateFakeEntity {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Step_TestDomainDestroyFakeEntity {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Step_TestDomainEntFire {
                pub const m_Input: usize = 0x48; // CUtlString
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 0
            pub mod CPulseCell_Val_TestDomainGetEntityName {
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 0
            pub mod CPulseCell_Val_TestDomainFindEntityByName {
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 3
            pub mod CPulseCell_TestWaitWithCursorState {
                pub const m_WakeResume: usize = 0x48; // CPulse_ResumePoint
                pub const m_WakeCancel: usize = 0x58; // CPulse_ResumePoint
                pub const m_WakeFail: usize = 0x68; // CPulse_ResumePoint
            }
            // Parent: None
            // Fields count: 2
            pub mod CPulseCell_TestWaitWithCursorState__CursorState_t {
                pub const flWaitValue: usize = 0x0; // float32
                pub const bFailOnCancel: usize = 0x4; // bool
            }
            // Parent: CPulseExecCursor
            // Fields count: 2
            pub mod CTestDomainDerived_Cursor {
                pub const m_nCursorValueA: usize = 0x168; // int32
                pub const m_nCursorValueB: usize = 0x16C; // int32
            }
            // Parent: CPulseGraphInstance_TestDomain
            // Fields count: 1
            pub mod CPulseGraphInstance_TestDomain_Derived {
                pub const m_nInstanceValueX: usize = 0x100; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseTestFuncs_DerivedDomain {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Test_NoInflow {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Test_MultiInflow_WithDefault {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 0
            pub mod CPulseCell_Test_MultiInflow_NoDefault {
            }
            // Parent: CPulseExecCursor
            // Fields count: 4
            pub mod CPulseTurtleGraphicsCursor {
                pub const m_Color: usize = 0x168; // Color
                pub const m_vPos: usize = 0x16C; // Vector2D
                pub const m_flHeadingDeg: usize = 0x174; // float32
                pub const m_bPenUp: usize = 0x178; // bool
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 0
            pub mod CPulseGraphInstance_TurtleGraphics {
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 2
            pub mod CPulseCell_WaitForCursorsWithTagBase {
                pub const m_nCursorsAllowedToWait: usize = 0x48; // int32
                pub const m_WaitComplete: usize = 0x50; // CPulse_ResumePoint
            }
            // Parent: CPulseCell_WaitForCursorsWithTagBase
            // Fields count: 2
            pub mod CPulseCell_WaitForCursorsWithTag {
                pub const m_bTagSelfWhenComplete: usize = 0x60; // bool
                pub const m_nDesiredKillPriority: usize = 0x64; // PulseCursorCancelPriority_t
            }
            // Parent: CPulseCell_WaitForCursorsWithTagBase
            // Fields count: 1
            pub mod CPulseCell_CursorQueue {
                pub const m_nCursorsAllowedToRunParallel: usize = 0x60; // int32
            }
        }
        // Module: rendersystemdx11.dll
        // Classes count: 3
        // Enums count: 5
        pub mod rendersystemdx11 {
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum RenderSlotType_t {
                RENDER_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
                RENDER_SLOT_PER_VERTEX = 0x0,
                RENDER_SLOT_PER_INSTANCE = 0x1
            }
            // Alignment: 4
            // Members count: 12
            #[repr(u32)]
            pub enum RenderBufferFlags_t {
                RENDER_BUFFER_USAGE_VERTEX_BUFFER = 0x1,
                RENDER_BUFFER_USAGE_INDEX_BUFFER = 0x2,
                RENDER_BUFFER_USAGE_SHADER_RESOURCE = 0x4,
                RENDER_BUFFER_USAGE_UNORDERED_ACCESS = 0x8,
                RENDER_BUFFER_BYTEADDRESS_BUFFER = 0x10,
                RENDER_BUFFER_STRUCTURED_BUFFER = 0x20,
                RENDER_BUFFER_APPEND_CONSUME_BUFFER = 0x40,
                RENDER_BUFFER_UAV_COUNTER = 0x80,
                RENDER_BUFFER_UAV_DRAW_INDIRECT_ARGS = 0x100,
                RENDER_BUFFER_ACCELERATION_STRUCTURE = 0x200,
                RENDER_BUFFER_SHADER_BINDING_TABLE = 0x400,
                RENDER_BUFFER_PER_FRAME_WRITE_ONCE = 0x800
            }
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum RenderPrimitiveType_t {
                RENDER_PRIM_POINTS = 0x0,
                RENDER_PRIM_LINES = 0x1,
                RENDER_PRIM_LINES_WITH_ADJACENCY = 0x2,
                RENDER_PRIM_LINE_STRIP = 0x3,
                RENDER_PRIM_LINE_STRIP_WITH_ADJACENCY = 0x4,
                RENDER_PRIM_TRIANGLES = 0x5,
                RENDER_PRIM_TRIANGLES_WITH_ADJACENCY = 0x6,
                RENDER_PRIM_TRIANGLE_STRIP = 0x7,
                RENDER_PRIM_TRIANGLE_STRIP_WITH_ADJACENCY = 0x8,
                RENDER_PRIM_INSTANCED_QUADS = 0x9,
                RENDER_PRIM_HETEROGENOUS = 0xA,
                RENDER_PRIM_COMPUTE_SHADER = 0xB,
                RENDER_PRIM_TYPE_COUNT = 0xC
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum InputLayoutVariation_t {
                INPUT_LAYOUT_VARIATION_DEFAULT = 0x0,
                INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID = 0x1,
                INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID_MORPH_VERT_ID = 0x2,
                INPUT_LAYOUT_VARIATION_MAX = 0x3
            }
            // Alignment: 1
            // Members count: 8
            #[repr(u8)]
            pub enum RenderMultisampleType_t {
                RENDER_MULTISAMPLE_INVALID = 0xFFFFFFFFFFFFFFFF,
                RENDER_MULTISAMPLE_NONE = 0x0,
                RENDER_MULTISAMPLE_2X = 0x1,
                RENDER_MULTISAMPLE_4X = 0x2,
                RENDER_MULTISAMPLE_6X = 0x3,
                RENDER_MULTISAMPLE_8X = 0x4,
                RENDER_MULTISAMPLE_16X = 0x5,
                RENDER_MULTISAMPLE_TYPE_COUNT = 0x6
            }
            // Parent: None
            // Fields count: 7
            pub mod RenderInputLayoutField_t {
                pub const m_pSemanticName: usize = 0x0; // uint8[32]
                pub const m_nSemanticIndex: usize = 0x20; // int32
                pub const m_Format: usize = 0x24; // uint32
                pub const m_nOffset: usize = 0x28; // int32
                pub const m_nSlot: usize = 0x2C; // int32
                pub const m_nSlotType: usize = 0x30; // RenderSlotType_t
                pub const m_nInstanceStepRate: usize = 0x34; // int32
            }
            // Parent: None
            // Fields count: 4
            pub mod VsInputSignatureElement_t {
                pub const m_pName: usize = 0x0; // char[64]
                pub const m_pSemantic: usize = 0x40; // char[64]
                pub const m_pD3DSemanticName: usize = 0x80; // char[64]
                pub const m_nD3DSemanticIndex: usize = 0xC0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod VsInputSignature_t {
                pub const m_elems: usize = 0x0; // CUtlVector<VsInputSignatureElement_t>
            }
        }
        // Module: resourcesystem.dll
        // Classes count: 59
        // Enums count: 2
        pub mod resourcesystem {
            // Alignment: 1
            // Members count: 2
            #[repr(u8)]
            pub enum FuseVariableAccess_t {
                WRITABLE = 0x0,
                READ_ONLY = 0x1
            }
            // Alignment: 1
            // Members count: 9
            #[repr(u8)]
            pub enum FuseVariableType_t {
                INVALID = 0x0,
                BOOL = 0x1,
                INT8 = 0x2,
                INT16 = 0x3,
                INT32 = 0x4,
                UINT8 = 0x5,
                UINT16 = 0x6,
                UINT32 = 0x7,
                FLOAT32 = 0x8
            }
            // Parent: None
            // Fields count: 1
            pub mod TestResource_t {
                pub const m_name: usize = 0x0; // CUtlString
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeTestResource_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeProceduralTestResource_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeManifestTestResource_t {
            }
            // Parent: None
            // Fields count: 2
            pub mod ManifestTestResource_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_child: usize = 0x8; // CStrongHandle<InfoForResourceTypeManifestTestResource_t>
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVDataResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIPulseGraphDef {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCTypeScriptResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCJavaScriptResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIParticleSystemDefinition {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIParticleSnapshot {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCAnimData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCAnimationGroup {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCSequenceGroupData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIMaterial2 {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCMorphSetData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCRenderMesh {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCModel {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCTextureBase {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIVectorGraphic {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVSoundEventScriptList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVSoundStackScriptList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVoiceContainerBase {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVMixListResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCPhysAggregateData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVPhysXSurfacePropertiesList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCEntityLump {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCWorldNode {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeWorld_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCVoxelVisibility {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCPostProcessingResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCPanoramaStyle {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCPanoramaLayout {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCPanoramaDynamicImages {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCDotaItemDefinitionResource {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCDOTAPatchNotesList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCDOTANovelsList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeIAnimGraphModelBinding {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCChoreoSceneFileData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCDACGameDefsData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCCompositeMaterialKit {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCGcExportableExternalData {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCSmartProp {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCCSGOEconItem {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCResponseRulesList {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCNmSkeleton {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCNmClip {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCNmGraph {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCNmGraphDataSet {
            }
            // Parent: None
            // Fields count: 1
            pub mod FuseVariableIndex_t {
                pub const m_Value: usize = 0x0; // uint16
            }
            // Parent: None
            // Fields count: 1
            pub mod FuseFunctionIndex_t {
                pub const m_Value: usize = 0x0; // uint16
            }
            // Parent: None
            // Fields count: 3
            pub mod ConstantInfo_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_nameToken: usize = 0x8; // CUtlStringToken
                pub const m_flValue: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 6
            pub mod VariableInfo_t {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_nameToken: usize = 0x8; // CUtlStringToken
                pub const m_nIndex: usize = 0xC; // FuseVariableIndex_t
                pub const m_nNumComponents: usize = 0xE; // uint8
                pub const m_eVarType: usize = 0xF; // FuseVariableType_t
                pub const m_eAccess: usize = 0x10; // FuseVariableAccess_t
            }
            // Parent: None
            // Fields count: 5
            pub mod FunctionInfo_t {
                pub const m_name: usize = 0x8; // CUtlString
                pub const m_nameToken: usize = 0x10; // CUtlStringToken
                pub const m_nParamCount: usize = 0x14; // int32
                pub const m_nIndex: usize = 0x18; // FuseFunctionIndex_t
                pub const m_bIsPure: usize = 0x1A; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod CFuseProgram {
                pub const m_programBuffer: usize = 0x0; // CUtlVector<uint8>
                pub const m_variablesRead: usize = 0x18; // CUtlVector<FuseVariableIndex_t>
                pub const m_variablesWritten: usize = 0x30; // CUtlVector<FuseVariableIndex_t>
                pub const m_nMaxTempVarsUsed: usize = 0x48; // int32
            }
            // Parent: None
            // Fields count: 6
            pub mod CFuseSymbolTable {
                pub const m_constants: usize = 0x0; // CUtlVector<ConstantInfo_t>
                pub const m_variables: usize = 0x18; // CUtlVector<VariableInfo_t>
                pub const m_functions: usize = 0x30; // CUtlVector<FunctionInfo_t>
                pub const m_constantMap: usize = 0x48; // CUtlHashtable<CUtlStringToken,int32>
                pub const m_variableMap: usize = 0x68; // CUtlHashtable<CUtlStringToken,int32>
                pub const m_functionMap: usize = 0x88; // CUtlHashtable<CUtlStringToken,int32>
            }
            // Parent: None
            // Fields count: 2
            pub mod AABB_t {
                pub const m_vMinBounds: usize = 0x0; // 
                pub const m_vMaxBounds: usize = 0xC; // 
            }
            // Parent: None
            // Fields count: 2
            pub mod PackedAABB_t {
                pub const m_nPackedMin: usize = 0x0; // uint32
                pub const m_nPackedMax: usize = 0x4; // uint32
            }
            // Parent: None
            // Fields count: 4
            pub mod FourQuaternions {
                pub const x: usize = 0x0; // fltx4
                pub const y: usize = 0x10; // fltx4
                pub const z: usize = 0x20; // fltx4
                pub const w: usize = 0x30; // fltx4
            }
        }
        // Module: scenefilecache.dll
        // Classes count: 0
        // Enums count: 0
        pub mod scenefilecache {
        }
        // Module: scenesystem.dll
        // Classes count: 9
        // Enums count: 1
        pub mod scenesystem {
            // Alignment: 1
            // Members count: 4
            #[repr(u8)]
            pub enum DisableShadows_t {
                kDisableShadows_None = 0x0,
                kDisableShadows_All = 0x1,
                kDisableShadows_Baked = 0x2,
                kDisableShadows_Realtime = 0x3
            }
            // Parent: None
            // Fields count: 2
            pub mod CSSDSEndFrameViewInfo {
                pub const m_nViewId: usize = 0x0; // uint64
                pub const m_ViewName: usize = 0x8; // CUtlString
            }
            // Parent: None
            // Fields count: 1
            pub mod CSSDSMsg_EndFrame {
                pub const m_Views: usize = 0x0; // CUtlVector<CSSDSEndFrameViewInfo>
            }
            // Parent: None
            // Fields count: 2
            pub mod SceneViewId_t {
                pub const m_nViewId: usize = 0x0; // uint64
                pub const m_nFrameCount: usize = 0x8; // uint64
            }
            // Parent: None
            // Fields count: 2
            pub mod CSSDSMsg_ViewRender {
                pub const m_viewId: usize = 0x0; // SceneViewId_t
                pub const m_ViewName: usize = 0x10; // CUtlString
            }
            // Parent: None
            // Fields count: 6
            pub mod CSSDSMsg_LayerBase {
                pub const m_viewId: usize = 0x0; // SceneViewId_t
                pub const m_ViewName: usize = 0x10; // CUtlString
                pub const m_nLayerIndex: usize = 0x18; // int32
                pub const m_nLayerId: usize = 0x20; // uint64
                pub const m_LayerName: usize = 0x28; // CUtlString
                pub const m_displayText: usize = 0x30; // CUtlString
            }
            // Parent: None
            // Fields count: 10
            pub mod CSSDSMsg_ViewTarget {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_TextureId: usize = 0x8; // uint64
                pub const m_nWidth: usize = 0x10; // int32
                pub const m_nHeight: usize = 0x14; // int32
                pub const m_nRequestedWidth: usize = 0x18; // int32
                pub const m_nRequestedHeight: usize = 0x1C; // int32
                pub const m_nNumMipLevels: usize = 0x20; // int32
                pub const m_nDepth: usize = 0x24; // int32
                pub const m_nMultisampleNumSamples: usize = 0x28; // int32
                pub const m_nFormat: usize = 0x2C; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod CSSDSMsg_ViewTargetList {
                pub const m_viewId: usize = 0x0; // SceneViewId_t
                pub const m_ViewName: usize = 0x10; // CUtlString
                pub const m_Targets: usize = 0x18; // CUtlVector<CSSDSMsg_ViewTarget>
            }
            // Parent: CSSDSMsg_LayerBase
            // Fields count: 0
            pub mod CSSDSMsg_PreLayer {
            }
            // Parent: CSSDSMsg_LayerBase
            // Fields count: 0
            pub mod CSSDSMsg_PostLayer {
            }
        }
        // Module: schemasystem.dll
        // Classes count: 7
        // Enums count: 2
        pub mod schemasystem {
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ThreeState_t {
                TRS_FALSE = 0x0,
                TRS_TRUE = 0x1,
                TRS_NONE = 0x2
            }
            // Alignment: 1
            // Members count: 81
            #[repr(u8)]
            pub enum fieldtype_t {
                FIELD_VOID = 0x0,
                FIELD_FLOAT32 = 0x1,
                FIELD_STRING = 0x2,
                FIELD_VECTOR = 0x3,
                FIELD_QUATERNION = 0x4,
                FIELD_INT32 = 0x5,
                FIELD_BOOLEAN = 0x6,
                FIELD_INT16 = 0x7,
                FIELD_CHARACTER = 0x8,
                FIELD_COLOR32 = 0x9,
                FIELD_EMBEDDED = 0xA,
                FIELD_CUSTOM = 0xB,
                FIELD_CLASSPTR = 0xC,
                FIELD_EHANDLE = 0xD,
                FIELD_POSITION_VECTOR = 0xE,
                FIELD_TIME = 0xF,
                FIELD_TICK = 0x10,
                FIELD_SOUNDNAME = 0x11,
                FIELD_INPUT = 0x12,
                FIELD_FUNCTION = 0x13,
                FIELD_VMATRIX = 0x14,
                FIELD_VMATRIX_WORLDSPACE = 0x15,
                FIELD_MATRIX3X4_WORLDSPACE = 0x16,
                FIELD_INTERVAL = 0x17,
                FIELD_UNUSED = 0x18,
                FIELD_VECTOR2D = 0x19,
                FIELD_INT64 = 0x1A,
                FIELD_VECTOR4D = 0x1B,
                FIELD_RESOURCE = 0x1C,
                FIELD_TYPEUNKNOWN = 0x1D,
                FIELD_CSTRING = 0x1E,
                FIELD_HSCRIPT = 0x1F,
                FIELD_VARIANT = 0x20,
                FIELD_UINT64 = 0x21,
                FIELD_FLOAT64 = 0x22,
                FIELD_POSITIVEINTEGER_OR_NULL = 0x23,
                FIELD_HSCRIPT_NEW_INSTANCE = 0x24,
                FIELD_UINT32 = 0x25,
                FIELD_UTLSTRINGTOKEN = 0x26,
                FIELD_QANGLE = 0x27,
                FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_VECTOR = 0x28,
                FIELD_HMATERIAL = 0x29,
                FIELD_HMODEL = 0x2A,
                FIELD_NETWORK_QUANTIZED_VECTOR = 0x2B,
                FIELD_NETWORK_QUANTIZED_FLOAT = 0x2C,
                FIELD_DIRECTION_VECTOR_WORLDSPACE = 0x2D,
                FIELD_QANGLE_WORLDSPACE = 0x2E,
                FIELD_QUATERNION_WORLDSPACE = 0x2F,
                FIELD_HSCRIPT_LIGHTBINDING = 0x30,
                FIELD_V8_VALUE = 0x31,
                FIELD_V8_OBJECT = 0x32,
                FIELD_V8_ARRAY = 0x33,
                FIELD_V8_CALLBACK_INFO = 0x34,
                FIELD_UTLSTRING = 0x35,
                FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_POSITION_VECTOR = 0x36,
                FIELD_HRENDERTEXTURE = 0x37,
                FIELD_HPARTICLESYSTEMDEFINITION = 0x38,
                FIELD_UINT8 = 0x39,
                FIELD_UINT16 = 0x3A,
                FIELD_CTRANSFORM = 0x3B,
                FIELD_CTRANSFORM_WORLDSPACE = 0x3C,
                FIELD_HPOSTPROCESSING = 0x3D,
                FIELD_MATRIX3X4 = 0x3E,
                FIELD_SHIM = 0x3F,
                FIELD_CMOTIONTRANSFORM = 0x40,
                FIELD_CMOTIONTRANSFORM_WORLDSPACE = 0x41,
                FIELD_ATTACHMENT_HANDLE = 0x42,
                FIELD_AMMO_INDEX = 0x43,
                FIELD_CONDITION_ID = 0x44,
                FIELD_AI_SCHEDULE_BITS = 0x45,
                FIELD_MODIFIER_HANDLE = 0x46,
                FIELD_ROTATION_VECTOR = 0x47,
                FIELD_ROTATION_VECTOR_WORLDSPACE = 0x48,
                FIELD_HVDATA = 0x49,
                FIELD_SCALE32 = 0x4A,
                FIELD_STRING_AND_TOKEN = 0x4B,
                FIELD_ENGINE_TIME = 0x4C,
                FIELD_ENGINE_TICK = 0x4D,
                FIELD_WORLD_GROUP_ID = 0x4E,
                FIELD_GLOBALSYMBOL = 0x4F,
                FIELD_TYPECOUNT = 0x50
            }
            // Parent: None
            // Fields count: 22
            pub mod CSchemaSystemInternalRegistration {
                pub const m_Vector2D: usize = 0x0; // Vector2D
                pub const m_Vector: usize = 0x8; // 
                pub const m_VectorAligned: usize = 0x20; // VectorAligned
                pub const m_Quaternion: usize = 0x30; // Quaternion
                pub const m_QAngle: usize = 0x40; // QAngle
                pub const m_RotationVector: usize = 0x4C; // RotationVector
                pub const m_RadianEuler: usize = 0x58; // RadianEuler
                pub const m_DegreeEuler: usize = 0x64; // DegreeEuler
                pub const m_QuaternionStorage: usize = 0x70; // QuaternionStorage
                pub const m_matrix3x4_t: usize = 0x80; // matrix3x4_t
                pub const m_matrix3x4a_t: usize = 0xB0; // matrix3x4a_t
                pub const m_Color: usize = 0xE0; // Color
                pub const m_Vector4D: usize = 0xE4; // Vector4D
                pub const m_CTransform: usize = 0x100; // CTransform
                pub const m_pKeyValues: usize = 0x120; // KeyValues*
                pub const m_CUtlBinaryBlock: usize = 0x128; // CUtlBinaryBlock
                pub const m_CUtlString: usize = 0x140; // CUtlString
                pub const m_CUtlSymbol: usize = 0x148; // CUtlSymbol
                pub const m_stringToken: usize = 0x14C; // CUtlStringToken
                pub const m_stringTokenWithStorage: usize = 0x150; // CUtlStringTokenWithStorage
                pub const m_ResourceTypes: usize = 0x168; // CResourceArray<CResourcePointer<CResourceString>>
                pub const m_KV3: usize = 0x170; // KeyValues3
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeCResourceManifestInternal {
            }
            // Parent: None
            // Fields count: 1
            pub mod ResourceId_t {
                pub const m_Value: usize = 0x0; // uint64
            }
            // Parent: None
            // Fields count: 2
            pub mod CExampleSchemaVData_Monomorphic {
                pub const m_nExample1: usize = 0x0; // int32
                pub const m_nExample2: usize = 0x4; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod CExampleSchemaVData_PolymorphicBase {
                pub const m_nBase: usize = 0x8; // int32
            }
            // Parent: CExampleSchemaVData_PolymorphicBase
            // Fields count: 1
            pub mod CExampleSchemaVData_PolymorphicDerivedA {
                pub const m_nDerivedA: usize = 0x10; // int32
            }
            // Parent: CExampleSchemaVData_PolymorphicBase
            // Fields count: 1
            pub mod CExampleSchemaVData_PolymorphicDerivedB {
                pub const m_nDerivedB: usize = 0x10; // int32
            }
        }
        // Module: server.dll
        // Classes count: 785
        // Enums count: 128
        pub mod server {
            // Alignment: 4
            // Members count: 19
            #[repr(u32)]
            pub enum NavAttributeEnum {
                NAV_MESH_AVOID = 0x80,
                NAV_MESH_STAIRS = 0x1000,
                NAV_MESH_NON_ZUP = 0x8000,
                NAV_MESH_SHORT_HEIGHT = 0x10000,
                NAV_MESH_CROUCH = 0x10000,
                NAV_MESH_JUMP = 0x2,
                NAV_MESH_PRECISE = 0x4,
                NAV_MESH_NO_JUMP = 0x8,
                NAV_MESH_STOP = 0x10,
                NAV_MESH_RUN = 0x20,
                NAV_MESH_WALK = 0x40,
                NAV_MESH_TRANSIENT = 0x100,
                NAV_MESH_DONT_HIDE = 0x200,
                NAV_MESH_STAND = 0x400,
                NAV_MESH_NO_HOSTAGES = 0x800,
                NAV_MESH_NO_MERGE = 0x2000,
                NAV_MESH_OBSTACLE_TOP = 0x4000,
                NAV_ATTR_FIRST_GAME_INDEX = 0x13,
                NAV_ATTR_LAST_INDEX = 0x1F
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum NavDirType {
                NORTH = 0x0,
                EAST = 0x1,
                SOUTH = 0x2,
                WEST = 0x3,
                NUM_NAV_DIR_TYPE_DIRECTIONS = 0x4
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum SequenceFinishNotifyState_t {
                eDoNotNotify = 0x0,
                eNotifyWhenFinished = 0x1,
                eNotifyTriggered = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PointTemplateOwnerSpawnGroupType_t {
                INSERT_INTO_POINT_TEMPLATE_SPAWN_GROUP = 0x0,
                INSERT_INTO_CURRENTLY_ACTIVE_SPAWN_GROUP = 0x1,
                INSERT_INTO_NEWLY_CREATED_SPAWN_GROUP = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum PointTemplateClientOnlyEntityBehavior_t {
                CREATE_FOR_CURRENTLY_CONNECTED_CLIENTS_ONLY = 0x0,
                CREATE_FOR_CLIENTS_WHO_CONNECT_LATER = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum PerformanceMode_t {
                PM_NORMAL = 0x0,
                PM_NO_GIBS = 0x1,
                PM_FULL_GIBS = 0x2,
                PM_REDUCED_GIBS = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum AmmoPosition_t {
                AMMO_POSITION_INVALID = 0xFFFFFFFFFFFFFFFF,
                AMMO_POSITION_PRIMARY = 0x0,
                AMMO_POSITION_SECONDARY = 0x1,
                AMMO_POSITION_COUNT = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ChatIgnoreType_t {
                CHAT_IGNORE_NONE = 0x0,
                CHAT_IGNORE_ALL = 0x1,
                CHAT_IGNORE_TEAM = 0x2
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum FixAngleSet_t {
                None = 0x0,
                Absolute = 0x1,
                Relative = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum CommandExecMode_t {
                EXEC_MANUAL = 0x0,
                EXEC_LEVELSTART = 0x1,
                EXEC_PERIODIC = 0x2,
                EXEC_MODES_COUNT = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum CommandEntitySpecType_t {
                SPEC_SEARCH = 0x0,
                SPEC_TYPES_COUNT = 0x1
            }
            // Alignment: 4
            // Members count: 43
            #[repr(u32)]
            pub enum GameAnimEventIndex_t {
                AE_EMPTY = 0x0,
                AE_CL_PLAYSOUND = 0x1,
                AE_CL_PLAYSOUND_ATTACHMENT = 0x2,
                AE_CL_PLAYSOUND_POSITION = 0x3,
                AE_SV_PLAYSOUND = 0x4,
                AE_CL_STOPSOUND = 0x5,
                AE_CL_PLAYSOUND_LOOPING = 0x6,
                AE_CL_CREATE_PARTICLE_EFFECT = 0x7,
                AE_CL_STOP_PARTICLE_EFFECT = 0x8,
                AE_CL_CREATE_PARTICLE_EFFECT_CFG = 0x9,
                AE_SV_CREATE_PARTICLE_EFFECT_CFG = 0xA,
                AE_SV_STOP_PARTICLE_EFFECT = 0xB,
                AE_FOOTSTEP = 0xC,
                AE_RAGDOLL = 0xD,
                AE_CL_STOP_RAGDOLL_CONTROL = 0xE,
                AE_CL_ENABLE_BODYGROUP = 0xF,
                AE_CL_DISABLE_BODYGROUP = 0x10,
                AE_BODYGROUP_SET_VALUE = 0x11,
                AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN = 0x12,
                AE_WEAPON_PERFORM_ATTACK = 0x13,
                AE_FIRE_INPUT = 0x14,
                AE_CL_CLOTH_ATTR = 0x15,
                AE_CL_CLOTH_GROUND_OFFSET = 0x16,
                AE_CL_CLOTH_STIFFEN = 0x17,
                AE_CL_CLOTH_EFFECT = 0x18,
                AE_CL_CREATE_ANIM_SCOPE_PROP = 0x19,
                AE_PULSE_GRAPH = 0x1A,
                AE_PULSE_GRAPH_LOOKAT = 0x1B,
                AE_PULSE_GRAPH_AIMAT = 0x1C,
                AE_PULSE_GRAPH_IKLOCKLEFTARM = 0x1D,
                AE_PULSE_GRAPH_IKLOCKRIGHTARM = 0x1E,
                AE_CL_WEAPON_TRANSITION_INTO_HAND = 0x1F,
                AE_CL_BODYGROUP_SET_TO_CLIP = 0x20,
                AE_CL_BODYGROUP_SET_TO_NEXTCLIP = 0x21,
                AE_SV_SHOW_SILENCER = 0x22,
                AE_SV_ATTACH_SILENCER_COMPLETE = 0x23,
                AE_SV_HIDE_SILENCER = 0x24,
                AE_SV_DETACH_SILENCER_COMPLETE = 0x25,
                AE_CL_EJECT_MAG = 0x26,
                AE_WPN_COMPLETE_RELOAD = 0x27,
                AE_WPN_HEALTHSHOT_INJECT = 0x28,
                AE_CL_C4_SCREEN_TEXT = 0x29,
                AE_GRENADE_THROW_COMPLETE = 0x2A
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum ObserverMode_t {
                OBS_MODE_NONE = 0x0,
                OBS_MODE_FIXED = 0x1,
                OBS_MODE_IN_EYE = 0x2,
                OBS_MODE_CHASE = 0x3,
                OBS_MODE_ROAMING = 0x4,
                OBS_MODE_DIRECTED = 0x5,
                NUM_OBSERVER_MODES = 0x6
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ObserverInterpState_t {
                OBSERVER_INTERP_NONE = 0x0,
                OBSERVER_INTERP_TRAVELING = 0x1,
                OBSERVER_INTERP_SETTLING = 0x2
            }
            // Alignment: 4
            // Members count: 27
            #[repr(u32)]
            pub enum RumbleEffect_t {
                RUMBLE_INVALID = 0xFFFFFFFFFFFFFFFF,
                RUMBLE_STOP_ALL = 0x0,
                RUMBLE_PISTOL = 0x1,
                RUMBLE_357 = 0x2,
                RUMBLE_SMG1 = 0x3,
                RUMBLE_AR2 = 0x4,
                RUMBLE_SHOTGUN_SINGLE = 0x5,
                RUMBLE_SHOTGUN_DOUBLE = 0x6,
                RUMBLE_AR2_ALT_FIRE = 0x7,
                RUMBLE_RPG_MISSILE = 0x8,
                RUMBLE_CROWBAR_SWING = 0x9,
                RUMBLE_AIRBOAT_GUN = 0xA,
                RUMBLE_JEEP_ENGINE_LOOP = 0xB,
                RUMBLE_FLAT_LEFT = 0xC,
                RUMBLE_FLAT_RIGHT = 0xD,
                RUMBLE_FLAT_BOTH = 0xE,
                RUMBLE_DMG_LOW = 0xF,
                RUMBLE_DMG_MED = 0x10,
                RUMBLE_DMG_HIGH = 0x11,
                RUMBLE_FALL_LONG = 0x12,
                RUMBLE_FALL_SHORT = 0x13,
                RUMBLE_PHYSCANNON_OPEN = 0x14,
                RUMBLE_PHYSCANNON_PUNT = 0x15,
                RUMBLE_PHYSCANNON_LOW = 0x16,
                RUMBLE_PHYSCANNON_MEDIUM = 0x17,
                RUMBLE_PHYSCANNON_HIGH = 0x18,
                NUM_RUMBLE_EFFECTS = 0x19
            }
            // Alignment: 4
            // Members count: 25
            #[repr(u32)]
            pub enum WeaponSound_t {
                WEAPON_SOUND_EMPTY = 0x0,
                WEAPON_SOUND_SECONDARY_EMPTY = 0x1,
                WEAPON_SOUND_SINGLE = 0x2,
                WEAPON_SOUND_SECONDARY_ATTACK = 0x3,
                WEAPON_SOUND_MELEE_MISS = 0x4,
                WEAPON_SOUND_MELEE_HIT = 0x5,
                WEAPON_SOUND_MELEE_HIT_WORLD = 0x6,
                WEAPON_SOUND_MELEE_HIT_PLAYER = 0x7,
                WEAPON_SOUND_MELEE_HIT_NPC = 0x8,
                WEAPON_SOUND_SPECIAL1 = 0x9,
                WEAPON_SOUND_SPECIAL2 = 0xA,
                WEAPON_SOUND_SPECIAL3 = 0xB,
                WEAPON_SOUND_NEARLYEMPTY = 0xC,
                WEAPON_SOUND_IMPACT = 0xD,
                WEAPON_SOUND_REFLECT = 0xE,
                WEAPON_SOUND_SECONDARY_IMPACT = 0xF,
                WEAPON_SOUND_SECONDARY_REFLECT = 0x10,
                WEAPON_SOUND_RELOAD = 0x11,
                WEAPON_SOUND_SINGLE_ACCURATE = 0x12,
                WEAPON_SOUND_ZOOM_IN = 0x13,
                WEAPON_SOUND_ZOOM_OUT = 0x14,
                WEAPON_SOUND_MOUSE_PRESSED = 0x15,
                WEAPON_SOUND_DROP = 0x16,
                WEAPON_SOUND_RADIO_USE = 0x17,
                WEAPON_SOUND_NUM_TYPES = 0x18
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum AmmoFlags_t {
                AMMO_FORCE_DROP_IF_CARRIED = 0x1,
                AMMO_RESERVE_STAYS_WITH_WEAPON = 0x2,
                AMMO_FLAG_MAX = 0x2
            }
            // Alignment: 4
            // Members count: 15
            #[repr(u32)]
            pub enum TakeDamageFlags_t {
                DFLAG_NONE = 0x0,
                DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
                DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
                DFLAG_SUPPRESS_EFFECTS = 0x4,
                DFLAG_PREVENT_DEATH = 0x8,
                DFLAG_FORCE_DEATH = 0x10,
                DFLAG_ALWAYS_GIB = 0x20,
                DFLAG_NEVER_GIB = 0x40,
                DFLAG_REMOVE_NO_RAGDOLL = 0x80,
                DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
                DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
                DFLAG_RADIUS_DMG = 0x400,
                DMG_LASTDFLAG = 0x400,
                DFLAG_IGNORE_ARMOR = 0x800,
                DFLAG_SUPPRESS_UTILREMOVE = 0x1000
            }
            // Alignment: 4
            // Members count: 24
            #[repr(u32)]
            pub enum DamageTypes_t {
                DMG_GENERIC = 0x0,
                DMG_CRUSH = 0x1,
                DMG_BULLET = 0x2,
                DMG_SLASH = 0x4,
                DMG_BURN = 0x8,
                DMG_VEHICLE = 0x10,
                DMG_FALL = 0x20,
                DMG_BLAST = 0x40,
                DMG_CLUB = 0x80,
                DMG_SHOCK = 0x100,
                DMG_SONIC = 0x200,
                DMG_ENERGYBEAM = 0x400,
                DMG_DROWN = 0x4000,
                DMG_POISON = 0x8000,
                DMG_RADIATION = 0x10000,
                DMG_DROWNRECOVER = 0x20000,
                DMG_ACID = 0x40000,
                DMG_PHYSGUN = 0x100000,
                DMG_DISSOLVE = 0x200000,
                DMG_BLAST_SURFACE = 0x400000,
                DMG_BUCKSHOT = 0x1000000,
                DMG_LASTGENERICFLAG = 0x1000000,
                DMG_HEADSHOT = 0x2000000,
                DMG_DANGERZONE = 0x4000000
            }
            // Alignment: 4
            // Members count: 17
            #[repr(u32)]
            pub enum BaseExplosionTypes_t {
                EXPLOSION_TYPE_DEFAULT = 0x0,
                EXPLOSION_TYPE_GRENADE = 0x1,
                EXPLOSION_TYPE_MOLOTOV = 0x2,
                EXPLOSION_TYPE_FIREWORKS = 0x3,
                EXPLOSION_TYPE_GASCAN = 0x4,
                EXPLOSION_TYPE_GASCYLINDER = 0x5,
                EXPLOSION_TYPE_EXPLOSIVEBARREL = 0x6,
                EXPLOSION_TYPE_ELECTRICAL = 0x7,
                EXPLOSION_TYPE_EMP = 0x8,
                EXPLOSION_TYPE_SHRAPNEL = 0x9,
                EXPLOSION_TYPE_SMOKEGRENADE = 0xA,
                EXPLOSION_TYPE_FLASHBANG = 0xB,
                EXPLOSION_TYPE_TRIPMINE = 0xC,
                EXPLOSION_TYPE_ICE = 0xD,
                EXPLOSION_TYPE_NONE = 0xE,
                EXPLOSION_TYPE_CUSTOM = 0xF,
                EXPLOSION_TYPE_COUNT = 0x10
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum HierarchyType_t {
                HIERARCHY_NONE = 0x0,
                HIERARCHY_BONE_MERGE = 0x1,
                HIERARCHY_ATTACHMENT = 0x2,
                HIERARCHY_ABSORIGIN = 0x3,
                HIERARCHY_BONE = 0x4,
                HIERARCHY_TYPE_COUNT = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum CanPlaySequence_t {
                CANNOT_PLAY = 0x0,
                CAN_PLAY_NOW = 0x1,
                CAN_PLAY_ENQUEUED = 0x2
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ScriptedMoveTo_t {
                CINE_MOVETO_WAIT = 0x0,
                CINE_MOVETO_WALK = 0x1,
                CINE_MOVETO_RUN = 0x2,
                CINE_MOVETO_CUSTOM = 0x3,
                CINE_MOVETO_TELEPORT = 0x4,
                CINE_MOVETO_WAIT_FACING = 0x5
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ScriptedOnDeath_t {
                SS_ONDEATH_NOT_APPLICABLE = 0xFFFFFFFFFFFFFFFF,
                SS_ONDEATH_UNDEFINED = 0x0,
                SS_ONDEATH_RAGDOLL = 0x1,
                SS_ONDEATH_ANIMATED_DEATH = 0x2
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum IChoreoServices__ScriptState_t {
                SCRIPT_PLAYING = 0x0,
                SCRIPT_WAIT = 0x1,
                SCRIPT_POST_IDLE = 0x2,
                SCRIPT_CLEANUP = 0x3,
                SCRIPT_WALK_TO_MARK = 0x4,
                SCRIPT_RUN_TO_MARK = 0x5,
                SCRIPT_CUSTOM_MOVE_TO_MARK = 0x6
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum IChoreoServices__ChoreoState_t {
                STATE_PRE_SCRIPT = 0x0,
                STATE_WAIT_FOR_SCRIPT = 0x1,
                STATE_WALK_TO_MARK = 0x2,
                STATE_SYNCHRONIZE_SCRIPT = 0x3,
                STATE_PLAY_SCRIPT = 0x4,
                STATE_PLAY_SCRIPT_POST_IDLE = 0x5,
                STATE_PLAY_SCRIPT_POST_IDLE_DONE = 0x6
            }
            // Alignment: 8
            // Members count: 21
            #[repr(u64)]
            pub enum InputBitMask_t {
                IN_NONE = 0x0,
                IN_ALL = 0xFFFFFFFFFFFFFFFF,
                IN_ATTACK = 0x1,
                IN_JUMP = 0x2,
                IN_DUCK = 0x4,
                IN_FORWARD = 0x8,
                IN_BACK = 0x10,
                IN_USE = 0x20,
                IN_TURNLEFT = 0x80,
                IN_TURNRIGHT = 0x100,
                IN_MOVELEFT = 0x200,
                IN_MOVERIGHT = 0x400,
                IN_ATTACK2 = 0x800,
                IN_RELOAD = 0x2000,
                IN_SPEED = 0x10000,
                IN_JOYAUTOSPRINT = 0x20000,
                IN_FIRST_MOD_SPECIFIC_BIT = 0x100000000,
                IN_USEORRELOAD = 0x100000000,
                IN_SCORE = 0x200000000,
                IN_ZOOM = 0x400000000,
                IN_LOOK_AT_WEAPON = 0x800000000
            }
            // Alignment: 4
            // Members count: 9
            #[repr(u32)]
            pub enum EInButtonState {
                IN_BUTTON_UP = 0x0,
                IN_BUTTON_DOWN = 0x1,
                IN_BUTTON_DOWN_UP = 0x2,
                IN_BUTTON_UP_DOWN = 0x3,
                IN_BUTTON_UP_DOWN_UP = 0x4,
                IN_BUTTON_DOWN_UP_DOWN = 0x5,
                IN_BUTTON_DOWN_UP_DOWN_UP = 0x6,
                IN_BUTTON_UP_DOWN_UP_DOWN = 0x7,
                IN_BUTTON_STATE_COUNT = 0x8
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ShakeCommand_t {
                SHAKE_START = 0x0,
                SHAKE_STOP = 0x1,
                SHAKE_AMPLITUDE = 0x2,
                SHAKE_FREQUENCY = 0x3,
                SHAKE_START_RUMBLEONLY = 0x4,
                SHAKE_START_NORUMBLE = 0x5
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum TimelineCompression_t {
                TIMELINE_COMPRESSION_SUM = 0x0,
                TIMELINE_COMPRESSION_COUNT_PER_INTERVAL = 0x1,
                TIMELINE_COMPRESSION_AVERAGE = 0x2,
                TIMELINE_COMPRESSION_AVERAGE_BLEND = 0x3,
                TIMELINE_COMPRESSION_TOTAL = 0x4
            }
            // Alignment: 8
            // Members count: 39
            #[repr(u64)]
            pub enum DebugOverlayBits_t {
                OVERLAY_TEXT_BIT = 0x1,
                OVERLAY_NAME_BIT = 0x2,
                OVERLAY_BBOX_BIT = 0x4,
                OVERLAY_PIVOT_BIT = 0x8,
                OVERLAY_MESSAGE_BIT = 0x10,
                OVERLAY_ABSBOX_BIT = 0x20,
                OVERLAY_RBOX_BIT = 0x40,
                OVERLAY_SHOW_BLOCKSLOS = 0x80,
                OVERLAY_ATTACHMENTS_BIT = 0x100,
                OVERLAY_INTERPOLATED_ATTACHMENTS_BIT = 0x200,
                OVERLAY_INTERPOLATED_PIVOT_BIT = 0x400,
                OVERLAY_SKELETON_BIT = 0x800,
                OVERLAY_INTERPOLATED_SKELETON_BIT = 0x1000,
                OVERLAY_TRIGGER_BOUNDS_BIT = 0x2000,
                OVERLAY_HITBOX_BIT = 0x4000,
                OVERLAY_INTERPOLATED_HITBOX_BIT = 0x8000,
                OVERLAY_AUTOAIM_BIT = 0x10000,
                OVERLAY_NPC_SELECTED_BIT = 0x20000,
                OVERLAY_JOINT_INFO_BIT = 0x40000,
                OVERLAY_NPC_ROUTE_BIT = 0x80000,
                OVERLAY_VISIBILITY_TRACES_BIT = 0x100000,
                OVERLAY_NPC_ENEMIES_BIT = 0x400000,
                OVERLAY_NPC_CONDITIONS_BIT = 0x800000,
                OVERLAY_NPC_COMBAT_BIT = 0x1000000,
                OVERLAY_NPC_TASK_BIT = 0x2000000,
                OVERLAY_NPC_BODYLOCATIONS = 0x4000000,
                OVERLAY_NPC_VIEWCONE_BIT = 0x8000000,
                OVERLAY_NPC_KILL_BIT = 0x10000000,
                OVERLAY_WC_CHANGE_ENTITY = 0x20000000,
                OVERLAY_BUDDHA_MODE = 0x40000000,
                OVERLAY_NPC_STEERING_REGULATIONS = 0x80000000,
                OVERLAY_NPC_TASK_TEXT_BIT = 0x100000000,
                OVERLAY_PROP_DEBUG = 0x200000000,
                OVERLAY_NPC_RELATION_BIT = 0x400000000,
                OVERLAY_VIEWOFFSET = 0x800000000,
                OVERLAY_VCOLLIDE_WIREFRAME_BIT = 0x1000000000,
                OVERLAY_ACTORNAME_BIT = 0x4000000000,
                OVERLAY_NPC_CONDITIONS_TEXT_BIT = 0x8000000000,
                OVERLAY_NPC_ABILITY_RANGE_DEBUG_BIT = 0x10000000000
            }
            // Alignment: 1
            // Members count: 14
            #[repr(u8)]
            pub enum MoveType_t {
                MOVETYPE_NONE = 0x0,
                MOVETYPE_OBSOLETE = 0x1,
                MOVETYPE_WALK = 0x2,
                MOVETYPE_FLY = 0x3,
                MOVETYPE_FLYGRAVITY = 0x4,
                MOVETYPE_VPHYSICS = 0x5,
                MOVETYPE_PUSH = 0x6,
                MOVETYPE_NOCLIP = 0x7,
                MOVETYPE_OBSERVER = 0x8,
                MOVETYPE_LADDER = 0x9,
                MOVETYPE_CUSTOM = 0xA,
                MOVETYPE_LAST = 0xB,
                MOVETYPE_INVALID = 0xB,
                MOVETYPE_MAX_BITS = 0x5
            }
            // Alignment: 1
            // Members count: 6
            #[repr(u8)]
            pub enum MoveCollide_t {
                MOVECOLLIDE_DEFAULT = 0x0,
                MOVECOLLIDE_FLY_BOUNCE = 0x1,
                MOVECOLLIDE_FLY_CUSTOM = 0x2,
                MOVECOLLIDE_FLY_SLIDE = 0x3,
                MOVECOLLIDE_COUNT = 0x4,
                MOVECOLLIDE_MAX_BITS = 0x3
            }
            // Alignment: 1
            // Members count: 9
            #[repr(u8)]
            pub enum SolidType_t {
                SOLID_NONE = 0x0,
                SOLID_BSP = 0x1,
                SOLID_BBOX = 0x2,
                SOLID_OBB = 0x3,
                SOLID_SPHERE = 0x4,
                SOLID_POINT = 0x5,
                SOLID_VPHYSICS = 0x6,
                SOLID_CAPSULE = 0x7,
                SOLID_LAST = 0x8
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum BrushSolidities_e {
                BRUSHSOLID_TOGGLE = 0x0,
                BRUSHSOLID_NEVER = 0x1,
                BRUSHSOLID_ALWAYS = 0x2
            }
            // Alignment: 1
            // Members count: 13
            #[repr(u8)]
            pub enum RenderMode_t {
                kRenderNormal = 0x0,
                kRenderTransColor = 0x1,
                kRenderTransTexture = 0x2,
                kRenderGlow = 0x3,
                kRenderTransAlpha = 0x4,
                kRenderTransAdd = 0x5,
                kRenderEnvironmental = 0x6,
                kRenderTransAddFrameBlend = 0x7,
                kRenderTransAlphaAdd = 0x8,
                kRenderWorldGlow = 0x9,
                kRenderNone = 0xA,
                kRenderDevVisualizer = 0xB,
                kRenderModeCount = 0xC
            }
            // Alignment: 1
            // Members count: 20
            #[repr(u8)]
            pub enum RenderFx_t {
                kRenderFxNone = 0x0,
                kRenderFxPulseSlow = 0x1,
                kRenderFxPulseFast = 0x2,
                kRenderFxPulseSlowWide = 0x3,
                kRenderFxPulseFastWide = 0x4,
                kRenderFxFadeSlow = 0x5,
                kRenderFxFadeFast = 0x6,
                kRenderFxSolidSlow = 0x7,
                kRenderFxSolidFast = 0x8,
                kRenderFxStrobeSlow = 0x9,
                kRenderFxStrobeFast = 0xA,
                kRenderFxStrobeFaster = 0xB,
                kRenderFxFlickerSlow = 0xC,
                kRenderFxFlickerFast = 0xD,
                kRenderFxNoDissipation = 0xE,
                kRenderFxFadeOut = 0xF,
                kRenderFxFadeIn = 0x10,
                kRenderFxPulseFastWider = 0x11,
                kRenderFxGlowShell = 0x12,
                kRenderFxMax = 0x13
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum CRR_Response__ResponseEnum_t {
                MAX_RESPONSE_NAME = 0xC0,
                MAX_RULE_NAME = 0x80
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum LessonPanelLayoutFileTypes_t {
                LAYOUT_HAND_DEFAULT = 0x0,
                LAYOUT_WORLD_DEFAULT = 0x1,
                LAYOUT_CUSTOM = 0x2
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum Touch_t {
                touch_none = 0x0,
                touch_player_only = 0x1,
                touch_npc_only = 0x2,
                touch_player_or_npc = 0x3,
                touch_player_or_npc_or_physicsprop = 0x4
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ScriptedMoveType_t {
                SCRIPTED_MOVETYPE_NONE = 0x0,
                SCRIPTED_MOVETYPE_TO_WITH_DURATION = 0x1,
                SCRIPTED_MOVETYPE_TO_WITH_MOVESPEED = 0x2,
                SCRIPTED_MOVETYPE_SWEEP_TO_AT_MOVEMENT_SPEED = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum ForcedCrouchState_t {
                FORCEDCROUCH_NONE = 0x0,
                FORCEDCROUCH_CROUCHED = 0x1,
                FORCEDCROUCH_UNCROUCHED = 0x2
            }
            // Alignment: 4
            // Members count: 12
            #[repr(u32)]
            pub enum Hull_t {
                HULL_HUMAN = 0x0,
                HULL_SMALL_CENTERED = 0x1,
                HULL_WIDE_HUMAN = 0x2,
                HULL_TINY = 0x3,
                HULL_MEDIUM = 0x4,
                HULL_TINY_CENTERED = 0x5,
                HULL_LARGE = 0x6,
                HULL_LARGE_CENTERED = 0x7,
                HULL_MEDIUM_TALL = 0x8,
                HULL_SMALL = 0x9,
                NUM_HULLS = 0xA,
                HULL_NONE = 0xB
            }
            // Alignment: 4
            // Members count: 1
            #[repr(u32)]
            pub enum navproperties_t {
                NAV_IGNORE = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum CLogicBranchList__LogicBranchListenerLastState_t {
                LOGIC_BRANCH_LISTENER_NOT_INIT = 0x0,
                LOGIC_BRANCH_LISTENER_ALL_TRUE = 0x1,
                LOGIC_BRANCH_LISTENER_ALL_FALSE = 0x2,
                LOGIC_BRANCH_LISTENER_MIXED = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum EntFinderMethod_t {
                ENT_FIND_METHOD_NEAREST = 0x0,
                ENT_FIND_METHOD_FARTHEST = 0x1,
                ENT_FIND_METHOD_RANDOM = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ValueRemapperInputType_t {
                InputType_PlayerShootPosition = 0x0,
                InputType_PlayerShootPositionAroundAxis = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ValueRemapperOutputType_t {
                OutputType_AnimationCycle = 0x0,
                OutputType_RotationX = 0x1,
                OutputType_RotationY = 0x2,
                OutputType_RotationZ = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ValueRemapperHapticsType_t {
                HaticsType_Default = 0x0,
                HaticsType_None = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum ValueRemapperMomentumType_t {
                MomentumType_None = 0x0,
                MomentumType_Friction = 0x1,
                MomentumType_SpringTowardSnapValue = 0x2,
                MomentumType_SpringAwayFromSnapValue = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ValueRemapperRatchetType_t {
                RatchetType_Absolute = 0x0,
                RatchetType_EachEngage = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PointWorldTextJustifyHorizontal_t {
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
                POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PointWorldTextJustifyVertical_t {
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
                POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum PointWorldTextReorientMode_t {
                POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
                POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum doorCheck_e {
                DOOR_CHECK_FORWARD = 0x0,
                DOOR_CHECK_BACKWARD = 0x1,
                DOOR_CHECK_FULL = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum PropDoorRotatingSpawnPos_t {
                DOOR_SPAWN_CLOSED = 0x0,
                DOOR_SPAWN_OPEN_FORWARD = 0x1,
                DOOR_SPAWN_OPEN_BACK = 0x2,
                DOOR_SPAWN_AJAR = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum PropDoorRotatingOpenDirection_e {
                DOOR_ROTATING_OPEN_BOTH_WAYS = 0x0,
                DOOR_ROTATING_OPEN_FORWARD = 0x1,
                DOOR_ROTATING_OPEN_BACKWARD = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum SceneOnPlayerDeath_t {
                SCENE_ONPLAYERDEATH_DO_NOTHING = 0x0,
                SCENE_ONPLAYERDEATH_CANCEL = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ScriptedConflictResponse_t {
                SS_CONFLICT_ENQUEUE = 0x0,
                SS_CONFLICT_INTERRUPT = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum TRAIN_CODE {
                TRAIN_SAFE = 0x0,
                TRAIN_BLOCKING = 0x1,
                TRAIN_FOLLOWING = 0x2
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum NPCFollowFormation_t {
                Default = 0xFFFFFFFFFFFFFFFF,
                CloseCircle = 0x0,
                WideCircle = 0x1,
                MediumCircle = 0x5,
                Sidekick = 0x6
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum NPCLookType_t {
                Chest = 0x0,
                Head = 0x1,
                Eyes = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SoundEventStartType_t {
                SOUNDEVENT_START_PLAYER = 0x0,
                SOUNDEVENT_START_WORLD = 0x1,
                SOUNDEVENT_START_ENTITY = 0x2
            }
            // Alignment: 4
            // Members count: 8
            #[repr(u32)]
            pub enum TOGGLE_STATE {
                TS_AT_TOP = 0x0,
                TS_AT_BOTTOM = 0x1,
                TS_GOING_UP = 0x2,
                TS_GOING_DOWN = 0x3,
                DOOR_OPEN = 0x0,
                DOOR_CLOSED = 0x1,
                DOOR_OPENING = 0x2,
                DOOR_CLOSING = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum FuncDoorSpawnPos_t {
                FUNC_DOOR_SPAWN_CLOSED = 0x0,
                FUNC_DOOR_SPAWN_OPEN = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum filter_t {
                FILTER_AND = 0x0,
                FILTER_OR = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum Explosions {
                expRandom = 0x0,
                expDirected = 0x1,
                expUsePrecise = 0x2
            }
            // Alignment: 4
            // Members count: 12
            #[repr(u32)]
            pub enum Materials {
                matGlass = 0x0,
                matWood = 0x1,
                matMetal = 0x2,
                matFlesh = 0x3,
                matCinderBlock = 0x4,
                matCeilingTile = 0x5,
                matComputer = 0x6,
                matUnbreakableGlass = 0x7,
                matRocks = 0x8,
                matWeb = 0x9,
                matNone = 0xA,
                matLastMaterial = 0xB
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum EOverrideBlockLOS_t {
                BLOCK_LOS_DEFAULT = 0x0,
                BLOCK_LOS_FORCE_FALSE = 0x1,
                BLOCK_LOS_FORCE_TRUE = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum MoveLinearAuthoredPos_t {
                MOVELINEAR_AUTHORED_AT_START_POSITION = 0x0,
                MOVELINEAR_AUTHORED_AT_OPEN_POSITION = 0x1,
                MOVELINEAR_AUTHORED_AT_CLOSED_POSITION = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum TrackOrientationType_t {
                TrackOrientation_Fixed = 0x0,
                TrackOrientation_FacePath = 0x1,
                TrackOrientation_FacePathAngles = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SimpleConstraintSoundProfile__SimpleConstraintsSoundProfileKeypoints_t {
                kMIN_THRESHOLD = 0x0,
                kMIN_FULL = 0x1,
                kHIGHWATER = 0x2
            }
            // Alignment: 4
            // Members count: 23
            #[repr(u32)]
            pub enum SoundFlags_t {
                SOUND_NONE = 0x0,
                SOUND_COMBAT = 0x1,
                SOUND_WORLD = 0x2,
                SOUND_PLAYER = 0x4,
                SOUND_DANGER = 0x8,
                SOUND_BULLET_IMPACT = 0x10,
                SOUND_THUMPER = 0x20,
                SOUND_PHYSICS_DANGER = 0x40,
                SOUND_MOVE_AWAY = 0x80,
                SOUND_PLAYER_VEHICLE = 0x100,
                SOUND_GLASS_BREAK = 0x200,
                SOUND_PHYSICS_OBJECT = 0x400,
                SOUND_CONTEXT_GUNFIRE = 0x100000,
                SOUND_CONTEXT_COMBINE_ONLY = 0x200000,
                SOUND_CONTEXT_REACT_TO_SOURCE = 0x400000,
                SOUND_CONTEXT_EXPLOSION = 0x800000,
                SOUND_CONTEXT_EXCLUDE_COMBINE = 0x1000000,
                SOUND_CONTEXT_DANGER_APPROACH = 0x2000000,
                SOUND_CONTEXT_ALLIES_ONLY = 0x4000000,
                SOUND_CONTEXT_PANIC_NPCS = 0x8000000,
                ALL_CONTEXTS = 0xFFFFFFFFFFF00000,
                ALL_SCENTS = 0x0,
                ALL_SOUNDS = 0xFFFFF
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum TrainVelocityType_t {
                TrainVelocity_Instantaneous = 0x0,
                TrainVelocity_LinearBlend = 0x1,
                TrainVelocity_EaseInEaseOut = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum TrainOrientationType_t {
                TrainOrientation_Fixed = 0x0,
                TrainOrientation_AtPathTracks = 0x1,
                TrainOrientation_LinearBlend = 0x2,
                TrainOrientation_EaseInEaseOut = 0x3
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum BeamType_t {
                BEAM_INVALID = 0x0,
                BEAM_POINTS = 0x1,
                BEAM_ENTPOINT = 0x2,
                BEAM_ENTS = 0x3,
                BEAM_HOSE = 0x4,
                BEAM_SPLINE = 0x5,
                BEAM_LASER = 0x6
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum BeamClipStyle_t {
                kNOCLIP = 0x0,
                kGEOCLIP = 0x1,
                kMODELCLIP = 0x2,
                kBEAMCLIPSTYLE_NUMBITS = 0x2
            }
            // Alignment: 1
            // Members count: 10
            #[repr(u8)]
            pub enum SurroundingBoundsType_t {
                USE_OBB_COLLISION_BOUNDS = 0x0,
                USE_BEST_COLLISION_BOUNDS = 0x1,
                USE_HITBOXES = 0x2,
                USE_SPECIFIED_BOUNDS = 0x3,
                USE_GAME_CODE = 0x4,
                USE_ROTATION_EXPANDED_BOUNDS = 0x5,
                USE_ROTATION_EXPANDED_ORIENTED_BOUNDS = 0x6,
                USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x7,
                USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x8,
                SURROUNDING_TYPE_BIT_COUNT = 0x3
            }
            // Alignment: 1
            // Members count: 2
            #[repr(u8)]
            pub enum ShatterPanelMode {
                SHATTER_GLASS = 0x0,
                SHATTER_DRYWALL = 0x1
            }
            // Alignment: 1
            // Members count: 5
            #[repr(u8)]
            pub enum ShatterDamageCause {
                SHATTERDAMAGE_BULLET = 0x0,
                SHATTERDAMAGE_MELEE = 0x1,
                SHATTERDAMAGE_THROWN = 0x2,
                SHATTERDAMAGE_SCRIPT = 0x3,
                SHATTERDAMAGE_EXPLOSIVE = 0x4
            }
            // Alignment: 1
            // Members count: 5
            #[repr(u8)]
            pub enum ShatterGlassStressType {
                SHATTERGLASS_BLUNT = 0x0,
                SHATTERGLASS_BALLISTIC = 0x1,
                SHATTERGLASS_PULSE = 0x2,
                SHATTERDRYWALL_CHUNKS = 0x3,
                SHATTERGLASS_EXPLOSIVE = 0x4
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum OnFrame {
                ONFRAME_UNKNOWN = 0x0,
                ONFRAME_TRUE = 0x1,
                ONFRAME_FALSE = 0x2
            }
            // Alignment: 1
            // Members count: 2
            #[repr(u8)]
            pub enum ShardSolid_t {
                SHARD_SOLID = 0x0,
                SHARD_DEBRIS = 0x1
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum AnimLoopMode_t {
                ANIM_LOOP_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
                ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
                ANIM_LOOP_MODE_LOOPING = 0x1,
                ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
                ANIM_LOOP_MODE_COUNT = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum EntitySubclassScope_t {
                SUBCLASS_SCOPE_NONE = 0xFFFFFFFFFFFFFFFF,
                SUBCLASS_SCOPE_PRECIPITATION = 0x0,
                SUBCLASS_SCOPE_PLAYER_WEAPONS = 0x1,
                SUBCLASS_SCOPE_COUNT = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SubclassVDataChangeType_t {
                SUBCLASS_VDATA_CREATED = 0x0,
                SUBCLASS_VDATA_SUBCLASS_CHANGED = 0x1,
                SUBCLASS_VDATA_RELOADED = 0x2
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum PlayerConnectedState {
                PlayerNeverConnected = 0xFFFFFFFFFFFFFFFF,
                PlayerConnected = 0x0,
                PlayerConnecting = 0x1,
                PlayerReconnecting = 0x2,
                PlayerDisconnecting = 0x3,
                PlayerDisconnected = 0x4,
                PlayerReserved = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum WeaponSwitchReason_t {
                eDrawn = 0x0,
                eEquipped = 0x1,
                eUserInitiatedSwitchToLast = 0x2
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum WeaponAttackType_t {
                eInvalid = 0xFFFFFFFFFFFFFFFF,
                ePrimary = 0x0,
                eSecondary = 0x1,
                eCount = 0x2
            }
            // Alignment: 4
            // Members count: 35
            #[repr(u32)]
            pub enum vote_create_failed_t {
                VOTE_FAILED_GENERIC = 0x0,
                VOTE_FAILED_TRANSITIONING_PLAYERS = 0x1,
                VOTE_FAILED_RATE_EXCEEDED = 0x2,
                VOTE_FAILED_YES_MUST_EXCEED_NO = 0x3,
                VOTE_FAILED_QUORUM_FAILURE = 0x4,
                VOTE_FAILED_ISSUE_DISABLED = 0x5,
                VOTE_FAILED_MAP_NOT_FOUND = 0x6,
                VOTE_FAILED_MAP_NAME_REQUIRED = 0x7,
                VOTE_FAILED_FAILED_RECENTLY = 0x8,
                VOTE_FAILED_TEAM_CANT_CALL = 0x9,
                VOTE_FAILED_WAITINGFORPLAYERS = 0xA,
                VOTE_FAILED_PLAYERNOTFOUND = 0xB,
                VOTE_FAILED_CANNOT_KICK_ADMIN = 0xC,
                VOTE_FAILED_SCRAMBLE_IN_PROGRESS = 0xD,
                VOTE_FAILED_SPECTATOR = 0xE,
                VOTE_FAILED_FAILED_RECENT_KICK = 0xF,
                VOTE_FAILED_FAILED_RECENT_CHANGEMAP = 0x10,
                VOTE_FAILED_FAILED_RECENT_SWAPTEAMS = 0x11,
                VOTE_FAILED_FAILED_RECENT_SCRAMBLETEAMS = 0x12,
                VOTE_FAILED_FAILED_RECENT_RESTART = 0x13,
                VOTE_FAILED_SWAP_IN_PROGRESS = 0x14,
                VOTE_FAILED_DISABLED = 0x15,
                VOTE_FAILED_NEXTLEVEL_SET = 0x16,
                VOTE_FAILED_TOO_EARLY_SURRENDER = 0x17,
                VOTE_FAILED_MATCH_PAUSED = 0x18,
                VOTE_FAILED_MATCH_NOT_PAUSED = 0x19,
                VOTE_FAILED_NOT_IN_WARMUP = 0x1A,
                VOTE_FAILED_NOT_10_PLAYERS = 0x1B,
                VOTE_FAILED_TIMEOUT_ACTIVE = 0x1C,
                VOTE_FAILED_TIMEOUT_INACTIVE = 0x1D,
                VOTE_FAILED_TIMEOUT_EXHAUSTED = 0x1E,
                VOTE_FAILED_CANT_ROUND_END = 0x1F,
                VOTE_FAILED_REMATCH = 0x20,
                VOTE_FAILED_CONTINUE = 0x21,
                VOTE_FAILED_MAX = 0x22
            }
            // Alignment: 1
            // Members count: 9
            #[repr(u8)]
            pub enum ItemFlagTypes_t {
                ITEM_FLAG_NONE = 0x0,
                ITEM_FLAG_CAN_SELECT_WITHOUT_AMMO = 0x1,
                ITEM_FLAG_NOAUTORELOAD = 0x2,
                ITEM_FLAG_NOAUTOSWITCHEMPTY = 0x4,
                ITEM_FLAG_LIMITINWORLD = 0x8,
                ITEM_FLAG_EXHAUSTIBLE = 0x10,
                ITEM_FLAG_DOHITLOCATIONDMG = 0x20,
                ITEM_FLAG_NOAMMOPICKUPS = 0x40,
                ITEM_FLAG_NOITEMPICKUP = 0x80
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum EntityDisolveType_t {
                ENTITY_DISSOLVE_INVALID = 0xFFFFFFFFFFFFFFFF,
                ENTITY_DISSOLVE_NORMAL = 0x0,
                ENTITY_DISSOLVE_ELECTRICAL = 0x1,
                ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
                ENTITY_DISSOLVE_CORE = 0x3
            }
            // Alignment: 4
            // Members count: 14
            #[repr(u32)]
            pub enum HitGroup_t {
                HITGROUP_INVALID = 0xFFFFFFFFFFFFFFFF,
                HITGROUP_GENERIC = 0x0,
                HITGROUP_HEAD = 0x1,
                HITGROUP_CHEST = 0x2,
                HITGROUP_STOMACH = 0x3,
                HITGROUP_LEFTARM = 0x4,
                HITGROUP_RIGHTARM = 0x5,
                HITGROUP_LEFTLEG = 0x6,
                HITGROUP_RIGHTLEG = 0x7,
                HITGROUP_NECK = 0x8,
                HITGROUP_UNUSED = 0x9,
                HITGROUP_GEAR = 0xA,
                HITGROUP_SPECIAL = 0xB,
                HITGROUP_COUNT = 0xC
            }
            // Alignment: 1
            // Members count: 7
            #[repr(u8)]
            pub enum WaterLevel_t {
                WL_NotInWater = 0x0,
                WL_Feet = 0x1,
                WL_Knees = 0x2,
                WL_Waist = 0x3,
                WL_Chest = 0x4,
                WL_FullyUnderwater = 0x5,
                WL_Count = 0x6
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum DoorState_t {
                DOOR_STATE_CLOSED = 0x0,
                DOOR_STATE_OPENING = 0x1,
                DOOR_STATE_OPEN = 0x2,
                DOOR_STATE_CLOSING = 0x3,
                DOOR_STATE_AJAR = 0x4
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ShadowType_t {
                SHADOWS_NONE = 0x0,
                SHADOWS_SIMPLE = 0x1
            }
            // Alignment: 4
            // Members count: 10
            #[repr(u32)]
            pub enum Class_T {
                CLASS_NONE = 0x0,
                CLASS_PLAYER = 0x1,
                CLASS_PLAYER_ALLY = 0x2,
                CLASS_BOMB = 0x3,
                CLASS_FOOT_CONTACT_SHADOW = 0x4,
                CLASS_WEAPON = 0x5,
                CLASS_WATER_SPLASHER = 0x6,
                CLASS_WEAPON_VIEWMODEL = 0x7,
                CLASS_DOOR = 0x8,
                NUM_CLASSIFY_CLASSES = 0x9
            }
            // Alignment: 4
            // Members count: 10
            #[repr(u32)]
            pub enum Disposition_t {
                D_ER = 0x0,
                D_HT = 0x1,
                D_FR = 0x2,
                D_LI = 0x3,
                D_NU = 0x4,
                D_ERROR = 0x0,
                D_HATE = 0x1,
                D_FEAR = 0x2,
                D_LIKE = 0x3,
                D_NEUTRAL = 0x4
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum LatchDirtyPermission_t {
                LATCH_DIRTY_DISALLOW = 0x0,
                LATCH_DIRTY_SERVER_CONTROLLED = 0x1,
                LATCH_DIRTY_CLIENT_SIMULATED = 0x2,
                LATCH_DIRTY_PREDICTION = 0x3,
                LATCH_DIRTY_FRAMESIMULATE = 0x4,
                LATCH_DIRTY_PARTICLE_SIMULATE = 0x5
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum LifeState_t {
                LIFE_ALIVE = 0x0,
                LIFE_DYING = 0x1,
                LIFE_DEAD = 0x2,
                LIFE_RESPAWNABLE = 0x3,
                LIFE_RESPAWNING = 0x4
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum StanceType_t {
                STANCE_CURRENT = 0xFFFFFFFFFFFFFFFF,
                STANCE_DEFAULT = 0x0,
                STANCE_CROUCHING = 0x1,
                STANCE_PRONE = 0x2,
                NUM_STANCES = 0x3
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum ModifyDamageReturn_t {
                CONTINUE_TO_APPLY_DAMAGE = 0x0,
                ABORT_DO_NOT_APPLY_DAMAGE = 0x1
            }
            // Alignment: 1
            // Members count: 3
            #[repr(u8)]
            pub enum BeginDeathLifeStateTransition_t {
                NO_CHANGE_IN_LIFESTATE = 0x0,
                TRANSITION_TO_LIFESTATE_DYING = 0x1,
                TRANSITION_TO_LIFESTATE_DEAD = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum WorldTextPanelHorizontalAlign_t {
                WORLDTEXT_HORIZONTAL_ALIGN_LEFT = 0x0,
                WORLDTEXT_HORIZONTAL_ALIGN_CENTER = 0x1,
                WORLDTEXT_HORIZONTAL_ALIGN_RIGHT = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum WorldTextPanelVerticalAlign_t {
                WORLDTEXT_VERTICAL_ALIGN_TOP = 0x0,
                WORLDTEXT_VERTICAL_ALIGN_CENTER = 0x1,
                WORLDTEXT_VERTICAL_ALIGN_BOTTOM = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum WorldTextPanelOrientation_t {
                WORLDTEXT_ORIENTATION_DEFAULT = 0x0,
                WORLDTEXT_ORIENTATION_FACEUSER = 0x1,
                WORLDTEXT_ORIENTATION_FACEUSER_UPRIGHT = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum attributeprovidertypes_t {
                PROVIDER_GENERIC = 0x0,
                PROVIDER_WEAPON = 0x1
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum SpawnPointCoopEnemy__BotDefaultBehavior_t {
                DEFEND_AREA = 0x0,
                HUNT = 0x1,
                CHARGE_ENEMY = 0x2,
                DEFEND_INVESTIGATE = 0x3
            }
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum MoveMountingAmount_t {
                MOVE_MOUNT_NONE = 0x0,
                MOVE_MOUNT_LOW = 0x1,
                MOVE_MOUNT_HIGH = 0x2,
                MOVE_MOUNT_MAXCOUNT = 0x3
            }
            // Alignment: 4
            // Members count: 10
            #[repr(u32)]
            pub enum CSPlayerState {
                STATE_ACTIVE = 0x0,
                STATE_WELCOME = 0x1,
                STATE_PICKINGTEAM = 0x2,
                STATE_PICKINGCLASS = 0x3,
                STATE_DEATH_ANIM = 0x4,
                STATE_DEATH_WAIT_FOR_KEY = 0x5,
                STATE_OBSERVER_MODE = 0x6,
                STATE_GUNGAME_RESPAWN = 0x7,
                STATE_DORMANT = 0x8,
                NUM_PLAYER_STATES = 0x9
            }
            // Alignment: 4
            // Members count: 18
            #[repr(u32)]
            pub enum CSPlayerBlockingUseAction_t {
                k_CSPlayerBlockingUseAction_None = 0x0,
                k_CSPlayerBlockingUseAction_DefusingDefault = 0x1,
                k_CSPlayerBlockingUseAction_DefusingWithKit = 0x2,
                k_CSPlayerBlockingUseAction_HostageGrabbing = 0x3,
                k_CSPlayerBlockingUseAction_HostageDropping = 0x4,
                k_CSPlayerBlockingUseAction_OpeningSafe = 0x5,
                k_CSPlayerBlockingUseAction_EquippingParachute = 0x6,
                k_CSPlayerBlockingUseAction_EquippingHeavyArmor = 0x7,
                k_CSPlayerBlockingUseAction_EquippingContract = 0x8,
                k_CSPlayerBlockingUseAction_EquippingTabletUpgrade = 0x9,
                k_CSPlayerBlockingUseAction_TakingOffHeavyArmor = 0xA,
                k_CSPlayerBlockingUseAction_PayingToOpenDoor = 0xB,
                k_CSPlayerBlockingUseAction_CancelingSpawnRappelling = 0xC,
                k_CSPlayerBlockingUseAction_EquippingExoJump = 0xD,
                k_CSPlayerBlockingUseAction_PickingUpBumpMine = 0xE,
                k_CSPlayerBlockingUseAction_MapLongUseEntity_Pickup = 0xF,
                k_CSPlayerBlockingUseAction_MapLongUseEntity_Place = 0x10,
                k_CSPlayerBlockingUseAction_MaxCount = 0x11
            }
            // Alignment: 4
            // Members count: 8
            #[repr(u32)]
            pub enum GrenadeType_t {
                GRENADE_TYPE_EXPLOSIVE = 0x0,
                GRENADE_TYPE_FLASH = 0x1,
                GRENADE_TYPE_FIRE = 0x2,
                GRENADE_TYPE_DECOY = 0x3,
                GRENADE_TYPE_SMOKE = 0x4,
                GRENADE_TYPE_SENSOR = 0x5,
                GRENADE_TYPE_SNOWBALL = 0x6,
                GRENADE_TYPE_TOTAL = 0x7
            }
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum QuestProgress__Reason {
                QUEST_NONINITIALIZED = 0x0,
                QUEST_OK = 0x1,
                QUEST_NOT_ENOUGH_PLAYERS = 0x2,
                QUEST_WARMUP = 0x3,
                QUEST_NOT_CONNECTED_TO_STEAM = 0x4,
                QUEST_NONOFFICIAL_SERVER = 0x5,
                QUEST_NO_ENTITLEMENT = 0x6,
                QUEST_NO_QUEST = 0x7,
                QUEST_PLAYER_IS_BOT = 0x8,
                QUEST_WRONG_MAP = 0x9,
                QUEST_WRONG_MODE = 0xA,
                QUEST_NOT_SYNCED_WITH_SERVER = 0xB,
                QUEST_REASON_MAX = 0xC
            }
            // Alignment: 4
            // Members count: 74
            #[repr(u32)]
            pub enum loadout_slot_t {
                LOADOUT_SLOT_PROMOTED = 0xFFFFFFFFFFFFFFFE,
                LOADOUT_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
                LOADOUT_SLOT_MELEE = 0x0,
                LOADOUT_SLOT_C4 = 0x1,
                LOADOUT_SLOT_FIRST_AUTO_BUY_WEAPON = 0x0,
                LOADOUT_SLOT_LAST_AUTO_BUY_WEAPON = 0x1,
                LOADOUT_SLOT_SECONDARY0 = 0x2,
                LOADOUT_SLOT_SECONDARY1 = 0x3,
                LOADOUT_SLOT_SECONDARY2 = 0x4,
                LOADOUT_SLOT_SECONDARY3 = 0x5,
                LOADOUT_SLOT_SECONDARY4 = 0x6,
                LOADOUT_SLOT_SECONDARY5 = 0x7,
                LOADOUT_SLOT_SMG0 = 0x8,
                LOADOUT_SLOT_SMG1 = 0x9,
                LOADOUT_SLOT_SMG2 = 0xA,
                LOADOUT_SLOT_SMG3 = 0xB,
                LOADOUT_SLOT_SMG4 = 0xC,
                LOADOUT_SLOT_SMG5 = 0xD,
                LOADOUT_SLOT_RIFLE0 = 0xE,
                LOADOUT_SLOT_RIFLE1 = 0xF,
                LOADOUT_SLOT_RIFLE2 = 0x10,
                LOADOUT_SLOT_RIFLE3 = 0x11,
                LOADOUT_SLOT_RIFLE4 = 0x12,
                LOADOUT_SLOT_RIFLE5 = 0x13,
                LOADOUT_SLOT_HEAVY0 = 0x14,
                LOADOUT_SLOT_HEAVY1 = 0x15,
                LOADOUT_SLOT_HEAVY2 = 0x16,
                LOADOUT_SLOT_HEAVY3 = 0x17,
                LOADOUT_SLOT_HEAVY4 = 0x18,
                LOADOUT_SLOT_HEAVY5 = 0x19,
                LOADOUT_SLOT_FIRST_WHEEL_WEAPON = 0x2,
                LOADOUT_SLOT_LAST_WHEEL_WEAPON = 0x19,
                LOADOUT_SLOT_FIRST_PRIMARY_WEAPON = 0x8,
                LOADOUT_SLOT_LAST_PRIMARY_WEAPON = 0x19,
                LOADOUT_SLOT_FIRST_WHEEL_GRENADE = 0x1A,
                LOADOUT_SLOT_GRENADE0 = 0x1A,
                LOADOUT_SLOT_GRENADE1 = 0x1B,
                LOADOUT_SLOT_GRENADE2 = 0x1C,
                LOADOUT_SLOT_GRENADE3 = 0x1D,
                LOADOUT_SLOT_GRENADE4 = 0x1E,
                LOADOUT_SLOT_GRENADE5 = 0x1F,
                LOADOUT_SLOT_LAST_WHEEL_GRENADE = 0x1F,
                LOADOUT_SLOT_EQUIPMENT0 = 0x20,
                LOADOUT_SLOT_EQUIPMENT1 = 0x21,
                LOADOUT_SLOT_EQUIPMENT2 = 0x22,
                LOADOUT_SLOT_EQUIPMENT3 = 0x23,
                LOADOUT_SLOT_EQUIPMENT4 = 0x24,
                LOADOUT_SLOT_EQUIPMENT5 = 0x25,
                LOADOUT_SLOT_FIRST_WHEEL_EQUIPMENT = 0x20,
                LOADOUT_SLOT_LAST_WHEEL_EQUIPMENT = 0x25,
                LOADOUT_SLOT_CLOTHING_CUSTOMPLAYER = 0x26,
                LOADOUT_SLOT_PET = 0x27,
                LOADOUT_SLOT_CLOTHING_FACEMASK = 0x28,
                LOADOUT_SLOT_CLOTHING_HANDS = 0x29,
                LOADOUT_SLOT_FIRST_COSMETIC = 0x29,
                LOADOUT_SLOT_LAST_COSMETIC = 0x29,
                LOADOUT_SLOT_CLOTHING_EYEWEAR = 0x2A,
                LOADOUT_SLOT_CLOTHING_HAT = 0x2B,
                LOADOUT_SLOT_CLOTHING_LOWERBODY = 0x2C,
                LOADOUT_SLOT_CLOTHING_TORSO = 0x2D,
                LOADOUT_SLOT_CLOTHING_APPEARANCE = 0x2E,
                LOADOUT_SLOT_MISC0 = 0x2F,
                LOADOUT_SLOT_MISC1 = 0x30,
                LOADOUT_SLOT_MISC2 = 0x31,
                LOADOUT_SLOT_MISC3 = 0x32,
                LOADOUT_SLOT_MISC4 = 0x33,
                LOADOUT_SLOT_MISC5 = 0x34,
                LOADOUT_SLOT_MISC6 = 0x35,
                LOADOUT_SLOT_MUSICKIT = 0x36,
                LOADOUT_SLOT_FLAIR0 = 0x37,
                LOADOUT_SLOT_SPRAY0 = 0x38,
                LOADOUT_SLOT_FIRST_ALL_CHARACTER = 0x36,
                LOADOUT_SLOT_LAST_ALL_CHARACTER = 0x38,
                LOADOUT_SLOT_COUNT = 0x39
            }
            // Alignment: 1
            // Members count: 8
            #[repr(u8)]
            pub enum EKillTypes_t {
                KILL_NONE = 0x0,
                KILL_DEFAULT = 0x1,
                KILL_HEADSHOT = 0x2,
                KILL_BLAST = 0x3,
                KILL_BURN = 0x4,
                KILL_SLASH = 0x5,
                KILL_SHOCK = 0x6,
                KILLTYPE_COUNT = 0x7
            }
            // Alignment: 4
            // Members count: 9
            #[repr(u32)]
            pub enum PreviewCharacterMode {
                DIORAMA = 0x0,
                MAIN_MENU = 0x1,
                BUY_MENU = 0x2,
                TEAM_SELECT = 0x3,
                END_OF_MATCH = 0x4,
                INVENTORY_INSPECT = 0x5,
                WALKING = 0x6,
                TEAM_INTRO = 0x7,
                WINGMAN_INTRO = 0x8
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum PreviewWeaponState {
                DROPPED = 0x0,
                HOLSTERED = 0x1,
                DEPLOYED = 0x2,
                PLANTED = 0x3,
                INSPECT = 0x4,
                ICON = 0x5
            }
            // Alignment: 4
            // Members count: 23
            #[repr(u32)]
            pub enum PreviewEOMCelebration {
                WALKUP = 0x0,
                PUNCHING = 0x1,
                SWAGGER = 0x2,
                DROPDOWN = 0x3,
                STRETCH = 0x4,
                SWAT_FEMALE = 0x5,
                MASK_F = 0x6,
                GUERILLA = 0x7,
                GUERILLA02 = 0x8,
                GENDARMERIE = 0x9,
                SCUBA_FEMALE = 0xA,
                SCUBA_MALE = 0xB,
                AVA_DEFEAT = 0xC,
                GENDARMERIE_DEFEAT = 0xD,
                MAE_DEFEAT = 0xE,
                RICKSAW_DEFEAT = 0xF,
                SCUBA_FEMALE_DEFEAT = 0x10,
                SCUBA_MALE_DEFEAT = 0x11,
                CRASSWATER_DEFEAT = 0x12,
                DARRYL_DEFEAT = 0x13,
                DOCTOR_DEFEAT = 0x14,
                MUHLIK_DEFEAT = 0x15,
                VYPA_DEFEAT = 0x16
            }
            // Alignment: 4
            // Members count: 20
            #[repr(u32)]
            pub enum CSWeaponType {
                WEAPONTYPE_KNIFE = 0x0,
                WEAPONTYPE_PISTOL = 0x1,
                WEAPONTYPE_SUBMACHINEGUN = 0x2,
                WEAPONTYPE_RIFLE = 0x3,
                WEAPONTYPE_SHOTGUN = 0x4,
                WEAPONTYPE_SNIPER_RIFLE = 0x5,
                WEAPONTYPE_MACHINEGUN = 0x6,
                WEAPONTYPE_C4 = 0x7,
                WEAPONTYPE_TASER = 0x8,
                WEAPONTYPE_GRENADE = 0x9,
                WEAPONTYPE_EQUIPMENT = 0xA,
                WEAPONTYPE_STACKABLEITEM = 0xB,
                WEAPONTYPE_FISTS = 0xC,
                WEAPONTYPE_BREACHCHARGE = 0xD,
                WEAPONTYPE_BUMPMINE = 0xE,
                WEAPONTYPE_TABLET = 0xF,
                WEAPONTYPE_MELEE = 0x10,
                WEAPONTYPE_SHIELD = 0x11,
                WEAPONTYPE_ZONE_REPULSOR = 0x12,
                WEAPONTYPE_UNKNOWN = 0x13
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum CSWeaponCategory {
                WEAPONCATEGORY_OTHER = 0x0,
                WEAPONCATEGORY_MELEE = 0x1,
                WEAPONCATEGORY_SECONDARY = 0x2,
                WEAPONCATEGORY_SMG = 0x3,
                WEAPONCATEGORY_RIFLE = 0x4,
                WEAPONCATEGORY_HEAVY = 0x5,
                WEAPONCATEGORY_COUNT = 0x6
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum CSWeaponSilencerType {
                WEAPONSILENCER_NONE = 0x0,
                WEAPONSILENCER_DETACHABLE = 0x1,
                WEAPONSILENCER_INTEGRATED = 0x2
            }
            // Alignment: 4
            // Members count: 24
            #[repr(u32)]
            pub enum PlayerAnimEvent_t {
                PLAYERANIMEVENT_FIRE_GUN_PRIMARY = 0x0,
                PLAYERANIMEVENT_FIRE_GUN_SECONDARY = 0x1,
                PLAYERANIMEVENT_GRENADE_PULL_PIN = 0x2,
                PLAYERANIMEVENT_THROW_GRENADE = 0x3,
                PLAYERANIMEVENT_JUMP = 0x4,
                PLAYERANIMEVENT_RELOAD = 0x5,
                PLAYERANIMEVENT_CLEAR_FIRING = 0x6,
                PLAYERANIMEVENT_DEPLOY = 0x7,
                PLAYERANIMEVENT_SILENCER_STATE = 0x8,
                PLAYERANIMEVENT_SILENCER_TOGGLE = 0x9,
                PLAYERANIMEVENT_THROW_GRENADE_UNDERHAND = 0xA,
                PLAYERANIMEVENT_CATCH_WEAPON = 0xB,
                PLAYERANIMEVENT_LOOKATWEAPON_REQUEST = 0xC,
                PLAYERANIMEVENT_RELOAD_CANCEL_LOOKATWEAPON = 0xD,
                PLAYERANIMEVENT_HAULBACK = 0xE,
                PLAYERANIMEVENT_IDLE = 0xF,
                PLAYERANIMEVENT_STRIKE_HIT = 0x10,
                PLAYERANIMEVENT_STRIKE_MISS = 0x11,
                PLAYERANIMEVENT_BACKSTAB = 0x12,
                PLAYERANIMEVENT_DRYFIRE = 0x13,
                PLAYERANIMEVENT_FIDGET = 0x14,
                PLAYERANIMEVENT_RELEASE = 0x15,
                PLAYERANIMEVENT_TAUNT = 0x16,
                PLAYERANIMEVENT_COUNT = 0x17
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum MedalRank_t {
                MEDAL_RANK_NONE = 0x0,
                MEDAL_RANK_BRONZE = 0x1,
                MEDAL_RANK_SILVER = 0x2,
                MEDAL_RANK_GOLD = 0x3,
                MEDAL_RANK_COUNT = 0x4
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum CSWeaponState_t {
                WEAPON_NOT_CARRIED = 0x0,
                WEAPON_IS_CARRIED_BY_PLAYER = 0x1,
                WEAPON_IS_ACTIVE = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum CSWeaponMode {
                Primary_Mode = 0x0,
                Secondary_Mode = 0x1,
                WeaponMode_MAX = 0x2
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum C4LightEffect_t {
                eLightEffectNone = 0x0,
                eLightEffectDropped = 0x1,
                eLightEffectThirdPersonHeld = 0x2
            }
            // Alignment: 4
            // Members count: 17
            #[repr(u32)]
            pub enum gear_slot_t {
                GEAR_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
                GEAR_SLOT_RIFLE = 0x0,
                GEAR_SLOT_PISTOL = 0x1,
                GEAR_SLOT_KNIFE = 0x2,
                GEAR_SLOT_GRENADES = 0x3,
                GEAR_SLOT_C4 = 0x4,
                GEAR_SLOT_RESERVED_SLOT6 = 0x5,
                GEAR_SLOT_RESERVED_SLOT7 = 0x6,
                GEAR_SLOT_RESERVED_SLOT8 = 0x7,
                GEAR_SLOT_RESERVED_SLOT9 = 0x8,
                GEAR_SLOT_RESERVED_SLOT10 = 0x9,
                GEAR_SLOT_RESERVED_SLOT11 = 0xA,
                GEAR_SLOT_BOOSTS = 0xB,
                GEAR_SLOT_UTILITY = 0xC,
                GEAR_SLOT_COUNT = 0xD,
                GEAR_SLOT_FIRST = 0x0,
                GEAR_SLOT_LAST = 0xC
            }
            // Alignment: 4
            // Members count: 7
            #[repr(u32)]
            pub enum ChickenActivity {
                IDLE = 0x0,
                WALK = 0x1,
                RUN = 0x2,
                HOP = 0x3,
                JUMP = 0x4,
                GLIDE = 0x5,
                LAND = 0x6
            }
            // Parent: None
            // Fields count: 1
            pub mod CRangeFloat {
                pub const m_pValue: usize = 0x0; // float32[2]
            }
            // Parent: None
            // Fields count: 1
            pub mod CRangeInt {
                pub const m_pValue: usize = 0x0; // int32[2]
            }
            // Parent: None
            // Fields count: 2
            pub mod Extent {
                pub const lo: usize = 0x0; // 
                pub const hi: usize = 0xC; // 
            }
            // Parent: None
            // Fields count: 2
            pub mod NavGravity_t {
                pub const m_vGravity: usize = 0x0; // 
                pub const m_bDefault: usize = 0xC; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CNavVolume {
            }
            // Parent: CNavVolume
            // Fields count: 1
            pub mod CNavVolumeVector {
                pub const m_bHasBeenPreFiltered: usize = 0x78; // bool
            }
            // Parent: CNavVolumeVector
            // Fields count: 0
            pub mod CNavVolumeAll {
            }
            // Parent: CNavVolume
            // Fields count: 2
            pub mod CNavVolumeSphere {
                pub const m_vCenter: usize = 0x70; // 
                pub const m_flRadius: usize = 0x7C; // float32
            }
            // Parent: CNavVolumeSphere
            // Fields count: 1
            pub mod CNavVolumeSphericalShell {
                pub const m_flRadiusInner: usize = 0x80; // float32
            }
            // Parent: None
            // Fields count: 11
            pub mod CNavHullVData {
                pub const m_bAgentEnabled: usize = 0x0; // bool
                pub const m_agentRadius: usize = 0x4; // float32
                pub const m_agentHeight: usize = 0x8; // float32
                pub const m_agentShortHeightEnabled: usize = 0xC; // bool
                pub const m_agentShortHeight: usize = 0x10; // float32
                pub const m_agentMaxClimb: usize = 0x14; // float32
                pub const m_agentMaxSlope: usize = 0x18; // int32
                pub const m_agentMaxJumpDownDist: usize = 0x1C; // float32
                pub const m_agentMaxJumpHorizDistBase: usize = 0x20; // float32
                pub const m_agentMaxJumpUpDist: usize = 0x24; // float32
                pub const m_agentBorderErosion: usize = 0x28; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod CNavHullPresetVData {
                pub const m_vecNavHulls: usize = 0x0; // CUtlVector<CUtlString>
            }
            // Parent: None
            // Fields count: 0
            pub mod CEntityComponent {
            }
            // Parent: None
            // Fields count: 11
            pub mod CEntityIdentity {
                pub const m_nameStringableIndex: usize = 0x14; // int32
                pub const m_name: usize = 0x18; // CUtlSymbolLarge
                pub const m_designerName: usize = 0x20; // CUtlSymbolLarge
                pub const m_flags: usize = 0x30; // uint32
                pub const m_worldGroupId: usize = 0x38; // WorldGroupId_t
                pub const m_fDataObjectTypes: usize = 0x3C; // uint32
                pub const m_PathIndex: usize = 0x40; // ChangeAccessorFieldPathIndex_t
                pub const m_pPrev: usize = 0x58; // CEntityIdentity*
                pub const m_pNext: usize = 0x60; // CEntityIdentity*
                pub const m_pPrevByClass: usize = 0x68; // CEntityIdentity*
                pub const m_pNextByClass: usize = 0x70; // CEntityIdentity*
            }
            // Parent: None
            // Fields count: 4
            pub mod CEntityInstance {
                pub const m_iszPrivateVScripts: usize = 0x8; // CUtlSymbolLarge
                pub const m_pEntity: usize = 0x10; // CEntityIdentity*
                pub const m_CScriptComponent: usize = 0x28; // CScriptComponent*
                pub const m_bVisibleinPVS: usize = 0x30; // bool
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CScriptComponent {
                pub const m_scriptClassName: usize = 0x30; // CUtlSymbolLarge
            }
            // Parent: CEntityComponent
            // Fields count: 2
            pub mod CBodyComponent {
                pub const m_pSceneNode: usize = 0x8; // CGameSceneNode*
                pub const __m_pChainEntity: usize = 0x20; // CNetworkVarChainer
            }
            // Parent: CBodyComponent
            // Fields count: 2
            pub mod CBodyComponentPoint {
                pub const m_sceneNode: usize = 0x50; // CGameSceneNode
                pub const __m_pChainEntity: usize = 0x1A0; // CNetworkVarChainer
            }
            // Parent: CBodyComponent
            // Fields count: 2
            pub mod CBodyComponentSkeletonInstance {
                pub const m_skeletonInstance: usize = 0x50; // CSkeletonInstance
                pub const __m_pChainEntity: usize = 0x430; // CNetworkVarChainer
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CHitboxComponent {
                pub const m_bvDisabledHitGroups: usize = 0x24; // uint32[1]
            }
            // Parent: CEntityComponent
            // Fields count: 67
            pub mod CLightComponent {
                pub const __m_pChainEntity: usize = 0x48; // CNetworkVarChainer
                pub const m_Color: usize = 0x85; // Color
                pub const m_SecondaryColor: usize = 0x89; // Color
                pub const m_flBrightness: usize = 0x90; // float32
                pub const m_flBrightnessScale: usize = 0x94; // float32
                pub const m_flBrightnessMult: usize = 0x98; // float32
                pub const m_flRange: usize = 0x9C; // float32
                pub const m_flFalloff: usize = 0xA0; // float32
                pub const m_flAttenuation0: usize = 0xA4; // float32
                pub const m_flAttenuation1: usize = 0xA8; // float32
                pub const m_flAttenuation2: usize = 0xAC; // float32
                pub const m_flTheta: usize = 0xB0; // float32
                pub const m_flPhi: usize = 0xB4; // float32
                pub const m_hLightCookie: usize = 0xB8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_nCascades: usize = 0xC0; // int32
                pub const m_nCastShadows: usize = 0xC4; // int32
                pub const m_nShadowWidth: usize = 0xC8; // int32
                pub const m_nShadowHeight: usize = 0xCC; // int32
                pub const m_bRenderDiffuse: usize = 0xD0; // bool
                pub const m_nRenderSpecular: usize = 0xD4; // int32
                pub const m_bRenderTransmissive: usize = 0xD8; // bool
                pub const m_flOrthoLightWidth: usize = 0xDC; // float32
                pub const m_flOrthoLightHeight: usize = 0xE0; // float32
                pub const m_nStyle: usize = 0xE4; // int32
                pub const m_Pattern: usize = 0xE8; // CUtlString
                pub const m_nCascadeRenderStaticObjects: usize = 0xF0; // int32
                pub const m_flShadowCascadeCrossFade: usize = 0xF4; // float32
                pub const m_flShadowCascadeDistanceFade: usize = 0xF8; // float32
                pub const m_flShadowCascadeDistance0: usize = 0xFC; // float32
                pub const m_flShadowCascadeDistance1: usize = 0x100; // float32
                pub const m_flShadowCascadeDistance2: usize = 0x104; // float32
                pub const m_flShadowCascadeDistance3: usize = 0x108; // float32
                pub const m_nShadowCascadeResolution0: usize = 0x10C; // int32
                pub const m_nShadowCascadeResolution1: usize = 0x110; // int32
                pub const m_nShadowCascadeResolution2: usize = 0x114; // int32
                pub const m_nShadowCascadeResolution3: usize = 0x118; // int32
                pub const m_bUsesBakedShadowing: usize = 0x11C; // bool
                pub const m_nShadowPriority: usize = 0x120; // int32
                pub const m_nBakedShadowIndex: usize = 0x124; // int32
                pub const m_bRenderToCubemaps: usize = 0x128; // bool
                pub const m_nDirectLight: usize = 0x12C; // int32
                pub const m_nIndirectLight: usize = 0x130; // int32
                pub const m_flFadeMinDist: usize = 0x134; // float32
                pub const m_flFadeMaxDist: usize = 0x138; // float32
                pub const m_flShadowFadeMinDist: usize = 0x13C; // float32
                pub const m_flShadowFadeMaxDist: usize = 0x140; // float32
                pub const m_bEnabled: usize = 0x144; // bool
                pub const m_bFlicker: usize = 0x145; // bool
                pub const m_bPrecomputedFieldsValid: usize = 0x146; // bool
                pub const m_vPrecomputedBoundsMins: usize = 0x148; // 
                pub const m_vPrecomputedBoundsMaxs: usize = 0x154; // 
                pub const m_vPrecomputedOBBOrigin: usize = 0x160; // 
                pub const m_vPrecomputedOBBAngles: usize = 0x16C; // QAngle
                pub const m_vPrecomputedOBBExtent: usize = 0x178; // 
                pub const m_flPrecomputedMaxRange: usize = 0x184; // float32
                pub const m_nFogLightingMode: usize = 0x188; // int32
                pub const m_flFogContributionStength: usize = 0x18C; // float32
                pub const m_flNearClipPlane: usize = 0x190; // float32
                pub const m_SkyColor: usize = 0x194; // Color
                pub const m_flSkyIntensity: usize = 0x198; // float32
                pub const m_SkyAmbientBounce: usize = 0x19C; // Color
                pub const m_bUseSecondaryColor: usize = 0x1A0; // bool
                pub const m_bMixedShadows: usize = 0x1A1; // bool
                pub const m_flLightStyleStartTime: usize = 0x1A4; // GameTime_t
                pub const m_flCapsuleLength: usize = 0x1A8; // float32
                pub const m_flMinRoughness: usize = 0x1AC; // float32
                pub const m_bPvsModifyEntity: usize = 0x1C0; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod CNetworkTransmitComponent {
                pub const m_nTransmitStateOwnedCounter: usize = 0x16C; // uint8
            }
            // Parent: CEntityComponent
            // Fields count: 5
            pub mod CRenderComponent {
                pub const __m_pChainEntity: usize = 0x10; // CNetworkVarChainer
                pub const m_bIsRenderingWithViewModels: usize = 0x50; // bool
                pub const m_nSplitscreenFlags: usize = 0x54; // uint32
                pub const m_bEnableRendering: usize = 0x60; // bool
                pub const m_bInterpolationReadyToDraw: usize = 0xB0; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CAnimEventListenerBase {
            }
            // Parent: CAnimEventListenerBase
            // Fields count: 0
            pub mod CAnimEventListener {
            }
            // Parent: CAnimEventListenerBase
            // Fields count: 0
            pub mod CAnimEventQueueListener {
            }
            // Parent: None
            // Fields count: 1
            pub mod CBuoyancyHelper {
                pub const m_flFluidDensity: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CSkillFloat {
                pub const m_pValue: usize = 0x0; // float32[4]
            }
            // Parent: None
            // Fields count: 1
            pub mod CSkillInt {
                pub const m_pValue: usize = 0x0; // int32[4]
            }
            // Parent: None
            // Fields count: 2
            pub mod CSkillDamage {
                pub const m_flDamage: usize = 0x0; // CSkillFloat
                pub const m_flPhysicsForceDamage: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod CRemapFloat {
                pub const m_pValue: usize = 0x0; // float32[4]
            }
            // Parent: None
            // Fields count: 2
            pub mod CScriptUniformRandomStream {
                pub const m_hScriptScope: usize = 0x8; // HSCRIPT
                pub const m_nInitialSeed: usize = 0x9C; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod CBasePlayerControllerAPI {
            }
            // Parent: None
            // Fields count: 3
            pub mod ViewAngleServerChange_t {
                pub const nType: usize = 0x30; // FixAngleSet_t
                pub const qAngle: usize = 0x34; // QAngle
                pub const nIndex: usize = 0x40; // uint32
            }
            // Parent: None
            // Fields count: 2
            pub mod CBreakableStageHelper {
                pub const m_nCurrentStage: usize = 0x8; // int32
                pub const m_nStageCount: usize = 0xC; // int32
            }
            // Parent: None
            // Fields count: 12
            pub mod CommandToolCommand_t {
                pub const m_bEnabled: usize = 0x0; // bool
                pub const m_bOpened: usize = 0x1; // bool
                pub const m_InternalId: usize = 0x4; // uint32
                pub const m_ShortName: usize = 0x8; // CUtlString
                pub const m_ExecMode: usize = 0x10; // CommandExecMode_t
                pub const m_SpawnGroup: usize = 0x18; // CUtlString
                pub const m_PeriodicExecDelay: usize = 0x20; // float32
                pub const m_SpecType: usize = 0x24; // CommandEntitySpecType_t
                pub const m_EntitySpec: usize = 0x28; // CUtlString
                pub const m_Commands: usize = 0x30; // CUtlString
                pub const m_SetDebugBits: usize = 0x38; // DebugOverlayBits_t
                pub const m_ClearDebugBits: usize = 0x40; // DebugOverlayBits_t
            }
            // Parent: None
            // Fields count: 0
            pub mod CDynamicPropAPI {
            }
            // Parent: None
            // Fields count: 1
            pub mod CPlayerPawnComponent {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
            }
            // Parent: None
            // Fields count: 1
            pub mod CPlayerControllerComponent {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_AutoaimServices {
            }
            // Parent: None
            // Fields count: 5
            pub mod audioparams_t {
                pub const localSound: usize = 0x8; // Vector[8]
                pub const soundscapeIndex: usize = 0x68; // int32
                pub const localBits: usize = 0x6C; // uint8
                pub const soundscapeEntityListIndex: usize = 0x70; // int32
                pub const soundEventHash: usize = 0x74; // uint32
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 12
            pub mod CPlayer_CameraServices {
                pub const m_vecCsViewPunchAngle: usize = 0x40; // QAngle
                pub const m_nCsViewPunchAngleTick: usize = 0x4C; // GameTick_t
                pub const m_flCsViewPunchAngleTickRatio: usize = 0x50; // float32
                pub const m_PlayerFog: usize = 0x58; // fogplayerparams_t
                pub const m_hColorCorrectionCtrl: usize = 0x98; // CHandle<CColorCorrection>
                pub const m_hViewEntity: usize = 0x9C; // CHandle<CBaseEntity>
                pub const m_hTonemapController: usize = 0xA0; // CHandle<CTonemapController2>
                pub const m_audio: usize = 0xA8; // audioparams_t
                pub const m_PostProcessingVolumes: usize = 0x120; // CNetworkUtlVectorBase<CHandle<CPostProcessingVolume>>
                pub const m_flOldPlayerZ: usize = 0x138; // float32
                pub const m_flOldPlayerViewOffsetZ: usize = 0x13C; // float32
                pub const m_hTriggerSoundscapeList: usize = 0x158; // CUtlVector<CHandle<CEnvSoundscapeTriggerable>>
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_FlashlightServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_ItemServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 15
            pub mod CPlayer_MovementServices {
                pub const m_nImpulse: usize = 0x40; // int32
                pub const m_nButtons: usize = 0x48; // CInButtonState
                pub const m_nQueuedButtonDownMask: usize = 0x68; // uint64
                pub const m_nQueuedButtonChangeMask: usize = 0x70; // uint64
                pub const m_nButtonDoublePressed: usize = 0x78; // uint64
                pub const m_pButtonPressedCmdNumber: usize = 0x80; // uint32[64]
                pub const m_nLastCommandNumberProcessed: usize = 0x180; // uint32
                pub const m_nToggleButtonDownMask: usize = 0x188; // uint64
                pub const m_flMaxspeed: usize = 0x198; // float32
                pub const m_arrForceSubtickMoveWhen: usize = 0x19C; // float32[4]
                pub const m_flForwardMove: usize = 0x1AC; // float32
                pub const m_flLeftMove: usize = 0x1B0; // float32
                pub const m_flUpMove: usize = 0x1B4; // float32
                pub const m_vecLastMovementImpulses: usize = 0x1B8; // 
                pub const m_vecOldViewAngles: usize = 0x1C4; // QAngle
            }
            // Parent: CPlayer_MovementServices
            // Fields count: 14
            pub mod CPlayer_MovementServices_Humanoid {
                pub const m_flStepSoundTime: usize = 0x1D8; // float32
                pub const m_flFallVelocity: usize = 0x1DC; // float32
                pub const m_bInCrouch: usize = 0x1E0; // bool
                pub const m_nCrouchState: usize = 0x1E4; // uint32
                pub const m_flCrouchTransitionStartTime: usize = 0x1E8; // GameTime_t
                pub const m_bDucked: usize = 0x1EC; // bool
                pub const m_bDucking: usize = 0x1ED; // bool
                pub const m_bInDuckJump: usize = 0x1EE; // bool
                pub const m_groundNormal: usize = 0x1F0; // 
                pub const m_flSurfaceFriction: usize = 0x1FC; // float32
                pub const m_surfaceProps: usize = 0x200; // CUtlStringToken
                pub const m_nStepside: usize = 0x210; // int32
                pub const m_iTargetVolume: usize = 0x214; // int32
                pub const m_vecSmoothedVelocity: usize = 0x218; // 
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 4
            pub mod CPlayer_ObserverServices {
                pub const m_iObserverMode: usize = 0x40; // uint8
                pub const m_hObserverTarget: usize = 0x44; // CHandle<CBaseEntity>
                pub const m_iObserverLastMode: usize = 0x48; // ObserverMode_t
                pub const m_bForcedObserverMode: usize = 0x4C; // bool
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_UseServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_WaterServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 5
            pub mod CPlayer_WeaponServices {
                pub const m_hMyWeapons: usize = 0x40; // CNetworkUtlVectorBase<CHandle<CBasePlayerWeapon>>
                pub const m_hActiveWeapon: usize = 0x58; // CHandle<CBasePlayerWeapon>
                pub const m_hLastWeapon: usize = 0x5C; // CHandle<CBasePlayerWeapon>
                pub const m_iAmmo: usize = 0x60; // uint16[32]
                pub const m_bPreventWeaponPickup: usize = 0xA0; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod AmmoTypeInfo_t {
                pub const m_nMaxCarry: usize = 0x10; // int32
                pub const m_nSplashSize: usize = 0x1C; // CRangeInt
                pub const m_nFlags: usize = 0x24; // AmmoFlags_t
                pub const m_flMass: usize = 0x28; // float32
                pub const m_flSpeed: usize = 0x2C; // CRangeFloat
            }
            // Parent: None
            // Fields count: 0
            pub mod CAnimGraphControllerBase {
            }
            // Parent: CBodyComponentSkeletonInstance
            // Fields count: 2
            pub mod CBodyComponentBaseAnimGraph {
                pub const m_animationController: usize = 0x460; // CBaseAnimGraphController
                pub const __m_pChainEntity: usize = 0x950; // CNetworkVarChainer
            }
            // Parent: None
            // Fields count: 2
            pub mod EntityRenderAttribute_t {
                pub const m_ID: usize = 0x30; // CUtlStringToken
                pub const m_Values: usize = 0x34; // Vector4D
            }
            // Parent: None
            // Fields count: 1
            pub mod ModelConfigHandle_t {
                pub const m_Value: usize = 0x0; // uint32
            }
            // Parent: None
            // Fields count: 4
            pub mod ActiveModelConfig_t {
                pub const m_Handle: usize = 0x28; // ModelConfigHandle_t
                pub const m_Name: usize = 0x30; // CUtlSymbolLarge
                pub const m_AssociatedEntities: usize = 0x38; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                pub const m_AssociatedEntityNames: usize = 0x50; // CNetworkUtlVectorBase<CUtlSymbolLarge>
            }
            // Parent: CBodyComponentSkeletonInstance
            // Fields count: 1
            pub mod CBodyComponentBaseModelEntity {
                pub const __m_pChainEntity: usize = 0x460; // CNetworkVarChainer
            }
            // Parent: None
            // Fields count: 7
            pub mod CNetworkOriginCellCoordQuantizedVector {
                pub const m_cellX: usize = 0x10; // uint16
                pub const m_cellY: usize = 0x12; // uint16
                pub const m_cellZ: usize = 0x14; // uint16
                pub const m_nOutsideWorld: usize = 0x16; // uint16
                pub const m_vecX: usize = 0x18; // CNetworkedQuantizedFloat
                pub const m_vecY: usize = 0x20; // CNetworkedQuantizedFloat
                pub const m_vecZ: usize = 0x28; // CNetworkedQuantizedFloat
            }
            // Parent: None
            // Fields count: 3
            pub mod CNetworkOriginQuantizedVector {
                pub const m_vecX: usize = 0x10; // CNetworkedQuantizedFloat
                pub const m_vecY: usize = 0x18; // CNetworkedQuantizedFloat
                pub const m_vecZ: usize = 0x20; // CNetworkedQuantizedFloat
            }
            // Parent: None
            // Fields count: 3
            pub mod CNetworkVelocityVector {
                pub const m_vecX: usize = 0x10; // CNetworkedQuantizedFloat
                pub const m_vecY: usize = 0x18; // CNetworkedQuantizedFloat
                pub const m_vecZ: usize = 0x20; // CNetworkedQuantizedFloat
            }
            // Parent: None
            // Fields count: 3
            pub mod CNetworkViewOffsetVector {
                pub const m_vecX: usize = 0x10; // CNetworkedQuantizedFloat
                pub const m_vecY: usize = 0x18; // CNetworkedQuantizedFloat
                pub const m_vecZ: usize = 0x20; // CNetworkedQuantizedFloat
            }
            // Parent: None
            // Fields count: 1
            pub mod GameTime_t {
                pub const m_Value: usize = 0x0; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod GameTick_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod CRopeOverlapHit {
                pub const m_hEntity: usize = 0x0; // CHandle<CBaseEntity>
                pub const m_vecOverlappingLinks: usize = 0x8; // CUtlVector<int32>
            }
            // Parent: None
            // Fields count: 2
            pub mod CGameSceneNodeHandle {
                pub const m_hOwner: usize = 0x8; // CEntityHandle
                pub const m_name: usize = 0xC; // CUtlStringToken
            }
            // Parent: None
            // Fields count: 32
            pub mod CGameSceneNode {
                pub const m_nodeToWorld: usize = 0x10; // CTransform
                pub const m_pOwner: usize = 0x30; // CEntityInstance*
                pub const m_pParent: usize = 0x38; // CGameSceneNode*
                pub const m_pChild: usize = 0x40; // CGameSceneNode*
                pub const m_pNextSibling: usize = 0x48; // CGameSceneNode*
                pub const m_hParent: usize = 0x70; // CGameSceneNodeHandle
                pub const m_vecOrigin: usize = 0x80; // CNetworkOriginCellCoordQuantizedVector
                pub const m_angRotation: usize = 0xB8; // QAngle
                pub const m_flScale: usize = 0xC4; // float32
                pub const m_vecAbsOrigin: usize = 0xC8; // 
                pub const m_angAbsRotation: usize = 0xD4; // QAngle
                pub const m_flAbsScale: usize = 0xE0; // float32
                pub const m_nParentAttachmentOrBone: usize = 0xE4; // int16
                pub const m_bDebugAbsOriginChanges: usize = 0xE6; // bool
                pub const m_bDormant: usize = 0xE7; // bool
                pub const m_bForceParentToBeNetworked: usize = 0xE8; // bool
                pub const m_bDirtyHierarchy: usize = 0x0; // bitfield:1
                pub const m_bDirtyBoneMergeInfo: usize = 0x0; // bitfield:1
                pub const m_bNetworkedPositionChanged: usize = 0x0; // bitfield:1
                pub const m_bNetworkedAnglesChanged: usize = 0x0; // bitfield:1
                pub const m_bNetworkedScaleChanged: usize = 0x0; // bitfield:1
                pub const m_bWillBeCallingPostDataUpdate: usize = 0x0; // bitfield:1
                pub const m_bBoneMergeFlex: usize = 0x0; // bitfield:1
                pub const m_nLatchAbsOrigin: usize = 0x0; // bitfield:2
                pub const m_bDirtyBoneMergeBoneToRoot: usize = 0x0; // bitfield:1
                pub const m_nHierarchicalDepth: usize = 0xEB; // uint8
                pub const m_nHierarchyType: usize = 0xEC; // uint8
                pub const m_nDoNotSetAnimTimeInInvalidatePhysicsCount: usize = 0xED; // uint8
                pub const m_name: usize = 0xF0; // CUtlStringToken
                pub const m_hierarchyAttachName: usize = 0x130; // CUtlStringToken
                pub const m_flZOffset: usize = 0x134; // float32
                pub const m_vRenderOrigin: usize = 0x138; // 
            }
            // Parent: None
            // Fields count: 0
            pub mod IChoreoServices {
            }
            // Parent: None
            // Fields count: 1
            pub mod CInButtonState {
                pub const m_pButtonStates: usize = 0x8; // uint64[3]
            }
            // Parent: None
            // Fields count: 6
            pub mod SequenceHistory_t {
                pub const m_hSequence: usize = 0x0; // HSequence
                pub const m_flSeqStartTime: usize = 0x4; // GameTime_t
                pub const m_flSeqFixedCycle: usize = 0x8; // float32
                pub const m_nSeqLoopMode: usize = 0xC; // AnimLoopMode_t
                pub const m_flPlaybackRate: usize = 0x10; // float32
                pub const m_flCyclesPerSecond: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 0
            pub mod ISkeletonAnimationController {
            }
            // Parent: ISkeletonAnimationController
            // Fields count: 1
            pub mod CSkeletonAnimationController {
                pub const m_pSkeletonInstance: usize = 0x8; // CSkeletonInstance*
            }
            // Parent: None
            // Fields count: 8
            pub mod CNetworkedSequenceOperation {
                pub const m_hSequence: usize = 0x8; // HSequence
                pub const m_flPrevCycle: usize = 0xC; // float32
                pub const m_flCycle: usize = 0x10; // float32
                pub const m_flWeight: usize = 0x14; // CNetworkedQuantizedFloat
                pub const m_bSequenceChangeNetworked: usize = 0x1C; // bool
                pub const m_bDiscontinuity: usize = 0x1D; // bool
                pub const m_flPrevCycleFromDiscontinuity: usize = 0x20; // float32
                pub const m_flPrevCycleForAnimEventDetection: usize = 0x24; // float32
            }
            // Parent: None
            // Fields count: 7
            pub mod CModelState {
                pub const m_hModel: usize = 0xA0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_ModelName: usize = 0xA8; // CUtlSymbolLarge
                pub const m_bClientClothCreationSuppressed: usize = 0xE8; // bool
                pub const m_MeshGroupMask: usize = 0x180; // uint64
                pub const m_nIdealMotionType: usize = 0x202; // int8
                pub const m_nForceLOD: usize = 0x203; // int8
                pub const m_nClothUpdateFlags: usize = 0x204; // int8
            }
            // Parent: CGameSceneNode
            // Fields count: 8
            pub mod CSkeletonInstance {
                pub const m_modelState: usize = 0x160; // CModelState
                pub const m_bIsAnimationEnabled: usize = 0x370; // bool
                pub const m_bUseParentRenderBounds: usize = 0x371; // bool
                pub const m_bDisableSolidCollisionsForHierarchy: usize = 0x372; // bool
                pub const m_bDirtyMotionType: usize = 0x0; // bitfield:1
                pub const m_bIsGeneratingLatchedParentSpaceState: usize = 0x0; // bitfield:1
                pub const m_materialGroup: usize = 0x374; // CUtlStringToken
                pub const m_nHitboxSet: usize = 0x378; // uint8
            }
            // Parent: None
            // Fields count: 2
            pub mod IntervalTimer {
                pub const m_timestamp: usize = 0x8; // GameTime_t
                pub const m_nWorldGroupId: usize = 0xC; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 4
            pub mod CountdownTimer {
                pub const m_duration: usize = 0x8; // float32
                pub const m_timestamp: usize = 0xC; // GameTime_t
                pub const m_timescale: usize = 0x10; // float32
                pub const m_nWorldGroupId: usize = 0x14; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 3
            pub mod EngineCountdownTimer {
                pub const m_duration: usize = 0x8; // float32
                pub const m_timestamp: usize = 0xC; // float32
                pub const m_timescale: usize = 0x10; // float32
            }
            // Parent: IntervalTimer
            // Fields count: 7
            pub mod CTimeline {
                pub const m_flValues: usize = 0x10; // float32[64]
                pub const m_nValueCounts: usize = 0x110; // int32[64]
                pub const m_nBucketCount: usize = 0x210; // int32
                pub const m_flInterval: usize = 0x214; // float32
                pub const m_flFinalValue: usize = 0x218; // float32
                pub const m_nCompressionType: usize = 0x21C; // TimelineCompression_t
                pub const m_bStopped: usize = 0x220; // bool
            }
            // Parent: None
            // Fields count: 24
            pub mod CAnimGraphNetworkedVariables {
                pub const m_PredNetBoolVariables: usize = 0x8; // CNetworkUtlVectorBase<uint32>
                pub const m_PredNetByteVariables: usize = 0x20; // CNetworkUtlVectorBase<uint8>
                pub const m_PredNetUInt16Variables: usize = 0x38; // CNetworkUtlVectorBase<uint16>
                pub const m_PredNetIntVariables: usize = 0x50; // CNetworkUtlVectorBase<int32>
                pub const m_PredNetUInt32Variables: usize = 0x68; // CNetworkUtlVectorBase<uint32>
                pub const m_PredNetUInt64Variables: usize = 0x80; // CNetworkUtlVectorBase<uint64>
                pub const m_PredNetFloatVariables: usize = 0x98; // CNetworkUtlVectorBase<float32>
                pub const m_PredNetVectorVariables: usize = 0xB0; // CNetworkUtlVectorBase<Vector>
                pub const m_PredNetQuaternionVariables: usize = 0xC8; // CNetworkUtlVectorBase<Quaternion>
                pub const m_PredNetGlobalSymbolVariables: usize = 0xE0; // CNetworkUtlVectorBase<CGlobalSymbol>
                pub const m_OwnerOnlyPredNetBoolVariables: usize = 0xF8; // CNetworkUtlVectorBase<uint32>
                pub const m_OwnerOnlyPredNetByteVariables: usize = 0x110; // CNetworkUtlVectorBase<uint8>
                pub const m_OwnerOnlyPredNetUInt16Variables: usize = 0x128; // CNetworkUtlVectorBase<uint16>
                pub const m_OwnerOnlyPredNetIntVariables: usize = 0x140; // CNetworkUtlVectorBase<int32>
                pub const m_OwnerOnlyPredNetUInt32Variables: usize = 0x158; // CNetworkUtlVectorBase<uint32>
                pub const m_OwnerOnlyPredNetUInt64Variables: usize = 0x170; // CNetworkUtlVectorBase<uint64>
                pub const m_OwnerOnlyPredNetFloatVariables: usize = 0x188; // CNetworkUtlVectorBase<float32>
                pub const m_OwnerOnlyPredNetVectorVariables: usize = 0x1A0; // CNetworkUtlVectorBase<Vector>
                pub const m_OwnerOnlyPredNetQuaternionVariables: usize = 0x1B8; // CNetworkUtlVectorBase<Quaternion>
                pub const m_OwnerOnlyPredNetGlobalSymbolVariables: usize = 0x1D0; // CNetworkUtlVectorBase<CGlobalSymbol>
                pub const m_nBoolVariablesCount: usize = 0x1E8; // int32
                pub const m_nOwnerOnlyBoolVariablesCount: usize = 0x1EC; // int32
                pub const m_nRandomSeedOffset: usize = 0x1F0; // int32
                pub const m_flLastTeleportTime: usize = 0x1F4; // float32
            }
            // Parent: None
            // Fields count: 0
            pub mod CFootstepTableHandle {
            }
            // Parent: None
            // Fields count: 8
            pub mod ResponseFollowup {
                pub const followup_concept: usize = 0x0; // char*
                pub const followup_contexts: usize = 0x8; // char*
                pub const followup_delay: usize = 0x10; // float32
                pub const followup_target: usize = 0x14; // char*
                pub const followup_entityiotarget: usize = 0x1C; // char*
                pub const followup_entityioinput: usize = 0x24; // char*
                pub const followup_entityiodelay: usize = 0x2C; // float32
                pub const bFired: usize = 0x30; // bool
            }
            // Parent: None
            // Fields count: 3
            pub mod ResponseParams {
                pub const odds: usize = 0x10; // int16
                pub const flags: usize = 0x12; // int16
                pub const m_pFollowup: usize = 0x18; // ResponseFollowup*
            }
            // Parent: None
            // Fields count: 2
            pub mod CResponseCriteriaSet {
                pub const m_nNumPrefixedContexts: usize = 0x28; // int32
                pub const m_bOverrideOnAppend: usize = 0x2C; // bool
            }
            // Parent: None
            // Fields count: 10
            pub mod CRR_Response {
                pub const m_Type: usize = 0x0; // uint8
                pub const m_szResponseName: usize = 0x1; // char[192]
                pub const m_szMatchingRule: usize = 0xC1; // char[128]
                pub const m_Params: usize = 0x148; // ResponseParams
                pub const m_fMatchScore: usize = 0x168; // float32
                pub const m_szSpeakerContext: usize = 0x170; // char*
                pub const m_szWorldContext: usize = 0x178; // char*
                pub const m_Followup: usize = 0x180; // ResponseFollowup
                pub const m_pchCriteriaNames: usize = 0x1B8; // CUtlVector<CUtlSymbol>
                pub const m_pchCriteriaValues: usize = 0x1D0; // CUtlVector<char*>
            }
            // Parent: None
            // Fields count: 2
            pub mod ConceptHistory_t {
                pub const timeSpoken: usize = 0x0; // float32
                pub const m_response: usize = 0x8; // CRR_Response
            }
            // Parent: None
            // Fields count: 9
            pub mod CAI_Expresser {
                pub const m_flStopTalkTime: usize = 0x38; // GameTime_t
                pub const m_flStopTalkTimeWithoutDelay: usize = 0x3C; // GameTime_t
                pub const m_flBlockedTalkTime: usize = 0x40; // GameTime_t
                pub const m_voicePitch: usize = 0x44; // int32
                pub const m_flLastTimeAcceptedSpeak: usize = 0x48; // GameTime_t
                pub const m_bAllowSpeakingInterrupts: usize = 0x4C; // bool
                pub const m_bConsiderSceneInvolvementAsSpeech: usize = 0x4D; // bool
                pub const m_nLastSpokenPriority: usize = 0x50; // int32
                pub const m_pOuter: usize = 0x58; // CBaseFlex*
            }
            // Parent: None
            // Fields count: 1
            pub mod CResponseQueue {
                pub const m_ExpresserTargets: usize = 0x48; // CUtlVector<CAI_Expresser*>
            }
            // Parent: None
            // Fields count: 5
            pub mod CResponseQueue__CDeferredResponse {
                pub const m_contexts: usize = 0x8; // CResponseCriteriaSet
                pub const m_fDispatchTime: usize = 0x38; // float32
                pub const m_hIssuer: usize = 0x3C; // CHandle<CBaseEntity>
                pub const m_response: usize = 0x48; // CRR_Response
                pub const m_bResponseValid: usize = 0x230; // bool
            }
            // Parent: CAI_Expresser
            // Fields count: 1
            pub mod CAI_ExpresserWithFollowup {
                pub const m_pPostponedFollowup: usize = 0x60; // ResponseFollowup*
            }
            // Parent: CAI_ExpresserWithFollowup
            // Fields count: 1
            pub mod CMultiplayer_Expresser {
                pub const m_bAllowMultipleScenes: usize = 0x70; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CBaseEntityAPI {
            }
            // Parent: None
            // Fields count: 10
            pub mod CCommentarySystem {
                pub const m_bCommentaryConvarsChanging: usize = 0x11; // bool
                pub const m_bCommentaryEnabledMidGame: usize = 0x12; // bool
                pub const m_flNextTeleportTime: usize = 0x14; // GameTime_t
                pub const m_iTeleportStage: usize = 0x18; // int32
                pub const m_bCheatState: usize = 0x1C; // bool
                pub const m_bIsFirstSpawnGroupToLoad: usize = 0x1D; // bool
                pub const m_hCurrentNode: usize = 0x38; // CHandle<CPointCommentaryNode>
                pub const m_hActiveCommentaryNode: usize = 0x3C; // CHandle<CPointCommentaryNode>
                pub const m_hLastCommentaryNode: usize = 0x40; // CHandle<CPointCommentaryNode>
                pub const m_vecNodes: usize = 0x48; // CUtlVector<CHandle<CPointCommentaryNode>>
            }
            // Parent: None
            // Fields count: 1
            pub mod CPhysicsShake {
                pub const m_force: usize = 0x8; // 
            }
            // Parent: None
            // Fields count: 16
            pub mod CGameScriptedMoveData {
                pub const m_vAccumulatedRootMotion: usize = 0x0; // 
                pub const m_vDest: usize = 0xC; // 
                pub const m_vSrc: usize = 0x18; // 
                pub const m_angSrc: usize = 0x24; // QAngle
                pub const m_angDst: usize = 0x30; // QAngle
                pub const m_angCurrent: usize = 0x3C; // QAngle
                pub const m_flAngRate: usize = 0x48; // float32
                pub const m_flDuration: usize = 0x4C; // float32
                pub const m_flStartTime: usize = 0x50; // GameTime_t
                pub const m_bActive: usize = 0x54; // bool
                pub const m_bTeleportOnEnd: usize = 0x55; // bool
                pub const m_bIgnoreRotation: usize = 0x56; // bool
                pub const m_nType: usize = 0x58; // ScriptedMoveType_t
                pub const m_bSuccess: usize = 0x5C; // bool
                pub const m_nForcedCrouchState: usize = 0x60; // ForcedCrouchState_t
                pub const m_bIgnoreCollisions: usize = 0x64; // bool
            }
            // Parent: IChoreoServices
            // Fields count: 5
            pub mod CGameChoreoServices {
                pub const m_hOwner: usize = 0x8; // CHandle<CBaseAnimGraph>
                pub const m_hScriptedSequence: usize = 0xC; // CHandle<CScriptedSequence>
                pub const m_scriptState: usize = 0x10; // IChoreoServices::ScriptState_t
                pub const m_choreoState: usize = 0x14; // IChoreoServices::ChoreoState_t
                pub const m_flTimeStartedState: usize = 0x18; // GameTime_t
            }
            // Parent: None
            // Fields count: 10
            pub mod HullFlags_t {
                pub const m_bHull_Human: usize = 0x0; // bool
                pub const m_bHull_SmallCentered: usize = 0x1; // bool
                pub const m_bHull_WideHuman: usize = 0x2; // bool
                pub const m_bHull_Tiny: usize = 0x3; // bool
                pub const m_bHull_Medium: usize = 0x4; // bool
                pub const m_bHull_TinyCentered: usize = 0x5; // bool
                pub const m_bHull_Large: usize = 0x6; // bool
                pub const m_bHull_LargeCentered: usize = 0x7; // bool
                pub const m_bHull_MediumTall: usize = 0x8; // bool
                pub const m_bHull_Small: usize = 0x9; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod CConstantForceController {
                pub const m_linear: usize = 0xC; // 
                pub const m_angular: usize = 0x18; // RotationVector
                pub const m_linearSave: usize = 0x24; // 
                pub const m_angularSave: usize = 0x30; // RotationVector
            }
            // Parent: None
            // Fields count: 4
            pub mod CMotorController {
                pub const m_speed: usize = 0x8; // float32
                pub const m_maxTorque: usize = 0xC; // float32
                pub const m_axis: usize = 0x10; // 
                pub const m_inertiaFactor: usize = 0x1C; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod CSoundEnvelope {
                pub const m_current: usize = 0x0; // float32
                pub const m_target: usize = 0x4; // float32
                pub const m_rate: usize = 0x8; // float32
                pub const m_forceupdate: usize = 0xC; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CCopyRecipientFilter {
                pub const m_Flags: usize = 0x8; // int32
                pub const m_Recipients: usize = 0x10; // CUtlVector<CPlayerSlot>
            }
            // Parent: None
            // Fields count: 13
            pub mod CSoundPatch {
                pub const m_pitch: usize = 0x8; // CSoundEnvelope
                pub const m_volume: usize = 0x18; // CSoundEnvelope
                pub const m_shutdownTime: usize = 0x30; // float32
                pub const m_flLastTime: usize = 0x34; // float32
                pub const m_iszSoundScriptName: usize = 0x38; // CUtlSymbolLarge
                pub const m_hEnt: usize = 0x40; // CHandle<CBaseEntity>
                pub const m_soundEntityIndex: usize = 0x44; // CEntityIndex
                pub const m_soundOrigin: usize = 0x48; // 
                pub const m_isPlaying: usize = 0x54; // int32
                pub const m_Filter: usize = 0x58; // CCopyRecipientFilter
                pub const m_flCloseCaptionDuration: usize = 0x80; // float32
                pub const m_bUpdatedSoundOrigin: usize = 0x84; // bool
                pub const m_iszClassName: usize = 0x88; // CUtlSymbolLarge
            }
            // Parent: None
            // Fields count: 0
            pub mod CTakeDamageInfoAPI {
            }
            // Parent: CPulseExecCursor
            // Fields count: 0
            pub mod CPulseServerCursor {
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 1
            pub mod CPulseGraphInstance_ServerEntity {
                pub const m_pComponent: usize = 0xD8; // CPulseGraphComponentBase*
            }
            // Parent: CPulseGraphInstance_ServerEntity
            // Fields count: 0
            pub mod CPulseGraphInstance_ServerPointEntity {
            }
            // Parent: None
            // Fields count: 4
            pub mod CPulseGraphComponentBase {
                pub const m_hOwner: usize = 0x8; // CHandle<CBaseEntity>
                pub const m_sNameFixupStaticPrefix: usize = 0x10; // CUtlSymbolLarge
                pub const m_sNameFixupParent: usize = 0x18; // CUtlSymbolLarge
                pub const m_sNameFixupLocal: usize = 0x20; // CUtlSymbolLarge
            }
            // Parent: CPulseGraphComponentBase
            // Fields count: 0
            pub mod CPulseGraphComponentPointServer {
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 1
            pub mod CPulseCell_Value_FindEntByClassNameWithin {
                pub const m_EntityType: usize = 0x48; // CUtlString
            }
            // Parent: CPulseCell_BaseValue
            // Fields count: 1
            pub mod CPulseCell_Value_FindEntByName {
                pub const m_EntityType: usize = 0x48; // CUtlString
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 2
            pub mod CPulseCell_Step_FollowEntity {
                pub const m_ParamBoneOrAttachName: usize = 0x48; // CUtlString
                pub const m_ParamBoneOrAttachNameChild: usize = 0x50; // CUtlString
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_Step_EntFire {
                pub const m_Input: usize = 0x48; // CUtlString
            }
            // Parent: CPulseCell_Inflow_BaseEntrypoint
            // Fields count: 1
            pub mod CPulseCell_Inflow_GameEvent {
                pub const m_EventName: usize = 0x70; // CBufferString
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseServerFuncs {
            }
            // Parent: CPulseCell_BaseFlow
            // Fields count: 1
            pub mod CPulseCell_SoundEventStart {
                pub const m_Type: usize = 0x48; // SoundEventStartType_t
            }
            // Parent: None
            // Fields count: 0
            pub mod CPulseServerFuncs_Sounds {
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 3
            pub mod CPulseCell_Outflow_PlaySceneBase {
                pub const m_OnFinished: usize = 0x48; // CPulse_ResumePoint
                pub const m_OnCanceled: usize = 0x58; // CPulse_ResumePoint
                pub const m_Triggers: usize = 0x68; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: None
            // Fields count: 1
            pub mod CPulseCell_Outflow_PlaySceneBase__CursorState_t {
                pub const m_sceneInstance: usize = 0x0; // CHandle<CBaseEntity>
            }
            // Parent: CPulseCell_Outflow_PlaySceneBase
            // Fields count: 1
            pub mod CPulseCell_Outflow_PlayVCD {
                pub const m_vcdFilename: usize = 0x80; // CUtlString
            }
            // Parent: CPulseCell_Outflow_PlaySceneBase
            // Fields count: 1
            pub mod CPulseCell_Outflow_PlaySequence {
                pub const m_ParamSequenceName: usize = 0x80; // CUtlString
            }
            // Parent: None
            // Fields count: 9
            pub mod PulseScriptedSequenceData_t {
                pub const m_nActorID: usize = 0x0; // int32
                pub const m_szPreIdleSequence: usize = 0x8; // CUtlString
                pub const m_szEntrySequence: usize = 0x10; // CUtlString
                pub const m_szSequence: usize = 0x18; // CUtlString
                pub const m_szExitSequence: usize = 0x20; // CUtlString
                pub const m_bLoopPreIdleSequence: usize = 0x28; // bool
                pub const m_bLoopActionSequence: usize = 0x29; // bool
                pub const m_bLoopPostIdleSequence: usize = 0x2A; // bool
                pub const m_bIgnoreLookAt: usize = 0x2B; // bool
            }
            // Parent: CPulseCell_BaseYieldingInflow
            // Fields count: 5
            pub mod CPulseCell_Outflow_ScriptedSequence {
                pub const m_scriptedSequenceDataMain: usize = 0x48; // PulseScriptedSequenceData_t
                pub const m_vecAdditionalActors: usize = 0x78; // CUtlVector<PulseScriptedSequenceData_t>
                pub const m_OnFinished: usize = 0x90; // CPulse_ResumePoint
                pub const m_OnCanceled: usize = 0xA0; // CPulse_ResumePoint
                pub const m_Triggers: usize = 0xB0; // CUtlVector<CPulse_OutflowConnection>
            }
            // Parent: None
            // Fields count: 1
            pub mod CPulseCell_Outflow_ScriptedSequence__CursorState_t {
                pub const m_scriptedSequence: usize = 0x0; // CHandle<CBaseEntity>
            }
            // Parent: CEntityComponent
            // Fields count: 0
            pub mod CTouchExpansionComponent {
            }
            // Parent: None
            // Fields count: 25
            pub mod dynpitchvol_base_t {
                pub const preset: usize = 0x0; // int32
                pub const pitchrun: usize = 0x4; // int32
                pub const pitchstart: usize = 0x8; // int32
                pub const spinup: usize = 0xC; // int32
                pub const spindown: usize = 0x10; // int32
                pub const volrun: usize = 0x14; // int32
                pub const volstart: usize = 0x18; // int32
                pub const fadein: usize = 0x1C; // int32
                pub const fadeout: usize = 0x20; // int32
                pub const lfotype: usize = 0x24; // int32
                pub const lforate: usize = 0x28; // int32
                pub const lfomodpitch: usize = 0x2C; // int32
                pub const lfomodvol: usize = 0x30; // int32
                pub const cspinup: usize = 0x34; // int32
                pub const cspincount: usize = 0x38; // int32
                pub const pitch: usize = 0x3C; // int32
                pub const spinupsav: usize = 0x40; // int32
                pub const spindownsav: usize = 0x44; // int32
                pub const pitchfrac: usize = 0x48; // int32
                pub const vol: usize = 0x4C; // int32
                pub const fadeinsav: usize = 0x50; // int32
                pub const fadeoutsav: usize = 0x54; // int32
                pub const volfrac: usize = 0x58; // int32
                pub const lfofrac: usize = 0x5C; // int32
                pub const lfomult: usize = 0x60; // int32
            }
            // Parent: dynpitchvol_base_t
            // Fields count: 0
            pub mod dynpitchvol_t {
            }
            // Parent: None
            // Fields count: 3
            pub mod ResponseContext_t {
                pub const m_iszName: usize = 0x0; // CUtlSymbolLarge
                pub const m_iszValue: usize = 0x8; // CUtlSymbolLarge
                pub const m_fExpirationTime: usize = 0x10; // GameTime_t
            }
            // Parent: None
            // Fields count: 2
            pub mod Relationship_t {
                pub const disposition: usize = 0x0; // Disposition_t
                pub const priority: usize = 0x4; // int32
            }
            // Parent: CEntityInstance
            // Fields count: 75
            pub mod CBaseEntity {
                pub const m_CBodyComponent: usize = 0x38; // CBodyComponent*
                pub const m_NetworkTransmitComponent: usize = 0x40; // CNetworkTransmitComponent
                pub const m_aThinkFunctions: usize = 0x230; // CUtlVector<thinkfunc_t>
                pub const m_iCurrentThinkContext: usize = 0x248; // int32
                pub const m_nLastThinkTick: usize = 0x24C; // GameTick_t
                pub const m_nDisableContextThinkStartTick: usize = 0x250; // GameTick_t
                pub const m_isSteadyState: usize = 0x260; // CBitVec<64>
                pub const m_lastNetworkChange: usize = 0x268; // float32
                pub const m_ResponseContexts: usize = 0x278; // CUtlVector<ResponseContext_t>
                pub const m_iszResponseContext: usize = 0x290; // CUtlSymbolLarge
                pub const m_iHealth: usize = 0x2B8; // int32
                pub const m_iMaxHealth: usize = 0x2BC; // int32
                pub const m_lifeState: usize = 0x2C0; // uint8
                pub const m_flDamageAccumulator: usize = 0x2C4; // float32
                pub const m_bTakesDamage: usize = 0x2C8; // bool
                pub const m_nTakeDamageFlags: usize = 0x2CC; // TakeDamageFlags_t
                pub const m_bIsPlatform: usize = 0x2D0; // bool
                pub const m_MoveCollide: usize = 0x2D2; // MoveCollide_t
                pub const m_MoveType: usize = 0x2D3; // MoveType_t
                pub const m_nActualMoveType: usize = 0x2D4; // MoveType_t
                pub const m_nWaterTouch: usize = 0x2D5; // uint8
                pub const m_nSlimeTouch: usize = 0x2D6; // uint8
                pub const m_bRestoreInHierarchy: usize = 0x2D7; // bool
                pub const m_target: usize = 0x2D8; // CUtlSymbolLarge
                pub const m_hDamageFilter: usize = 0x2E0; // CHandle<CBaseFilter>
                pub const m_iszDamageFilterName: usize = 0x2E8; // CUtlSymbolLarge
                pub const m_flMoveDoneTime: usize = 0x2F0; // float32
                pub const m_nSubclassID: usize = 0x2F4; // CUtlStringToken
                pub const m_flAnimTime: usize = 0x300; // float32
                pub const m_flSimulationTime: usize = 0x304; // float32
                pub const m_flCreateTime: usize = 0x308; // GameTime_t
                pub const m_bClientSideRagdoll: usize = 0x30C; // bool
                pub const m_ubInterpolationFrame: usize = 0x30D; // uint8
                pub const m_vPrevVPhysicsUpdatePos: usize = 0x310; // 
                pub const m_iTeamNum: usize = 0x31C; // uint8
                pub const m_iGlobalname: usize = 0x320; // CUtlSymbolLarge
                pub const m_iSentToClients: usize = 0x328; // int32
                pub const m_flSpeed: usize = 0x32C; // float32
                pub const m_sUniqueHammerID: usize = 0x330; // CUtlString
                pub const m_spawnflags: usize = 0x338; // uint32
                pub const m_nNextThinkTick: usize = 0x33C; // GameTick_t
                pub const m_nSimulationTick: usize = 0x340; // int32
                pub const m_OnKilled: usize = 0x348; // CEntityIOOutput
                pub const m_fFlags: usize = 0x370; // uint32
                pub const m_vecAbsVelocity: usize = 0x374; // 
                pub const m_vecVelocity: usize = 0x380; // CNetworkVelocityVector
                pub const m_vecBaseVelocity: usize = 0x3B0; // 
                pub const m_nPushEnumCount: usize = 0x3BC; // int32
                pub const m_pCollision: usize = 0x3C0; // CCollisionProperty*
                pub const m_hEffectEntity: usize = 0x3C8; // CHandle<CBaseEntity>
                pub const m_hOwnerEntity: usize = 0x3CC; // CHandle<CBaseEntity>
                pub const m_fEffects: usize = 0x3D0; // uint32
                pub const m_hGroundEntity: usize = 0x3D4; // CHandle<CBaseEntity>
                pub const m_flFriction: usize = 0x3D8; // float32
                pub const m_flElasticity: usize = 0x3DC; // float32
                pub const m_flGravityScale: usize = 0x3E0; // float32
                pub const m_flTimeScale: usize = 0x3E4; // float32
                pub const m_flWaterLevel: usize = 0x3E8; // float32
                pub const m_bAnimatedEveryTick: usize = 0x3EC; // bool
                pub const m_bDisableLowViolence: usize = 0x3ED; // bool
                pub const m_nWaterType: usize = 0x3EE; // uint8
                pub const m_iEFlags: usize = 0x3F0; // int32
                pub const m_OnUser1: usize = 0x3F8; // CEntityIOOutput
                pub const m_OnUser2: usize = 0x420; // CEntityIOOutput
                pub const m_OnUser3: usize = 0x448; // CEntityIOOutput
                pub const m_OnUser4: usize = 0x470; // CEntityIOOutput
                pub const m_iInitialTeamNum: usize = 0x498; // int32
                pub const m_flNavIgnoreUntilTime: usize = 0x49C; // GameTime_t
                pub const m_vecAngVelocity: usize = 0x4A0; // QAngle
                pub const m_bNetworkQuantizeOriginAndAngles: usize = 0x4AC; // bool
                pub const m_bLagCompensate: usize = 0x4AD; // bool
                pub const m_flOverriddenFriction: usize = 0x4B0; // float32
                pub const m_pBlocker: usize = 0x4B4; // CHandle<CBaseEntity>
                pub const m_flLocalTime: usize = 0x4B8; // float32
                pub const m_flVPhysicsUpdateLocalTime: usize = 0x4BC; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CServerOnlyEntity {
            }
            // Parent: CServerOnlyEntity
            // Fields count: 0
            pub mod CServerOnlyPointEntity {
            }
            // Parent: CServerOnlyEntity
            // Fields count: 0
            pub mod CLogicalEntity {
            }
            // Parent: CBaseEntity
            // Fields count: 17
            pub mod CColorCorrection {
                pub const m_flFadeInDuration: usize = 0x4C0; // float32
                pub const m_flFadeOutDuration: usize = 0x4C4; // float32
                pub const m_flStartFadeInWeight: usize = 0x4C8; // float32
                pub const m_flStartFadeOutWeight: usize = 0x4CC; // float32
                pub const m_flTimeStartFadeIn: usize = 0x4D0; // GameTime_t
                pub const m_flTimeStartFadeOut: usize = 0x4D4; // GameTime_t
                pub const m_flMaxWeight: usize = 0x4D8; // float32
                pub const m_bStartDisabled: usize = 0x4DC; // bool
                pub const m_bEnabled: usize = 0x4DD; // bool
                pub const m_bMaster: usize = 0x4DE; // bool
                pub const m_bClientSide: usize = 0x4DF; // bool
                pub const m_bExclusive: usize = 0x4E0; // bool
                pub const m_MinFalloff: usize = 0x4E4; // float32
                pub const m_MaxFalloff: usize = 0x4E8; // float32
                pub const m_flCurWeight: usize = 0x4EC; // float32
                pub const m_netlookupFilename: usize = 0x4F0; // char[512]
                pub const m_lookupFilename: usize = 0x6F0; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Fields count: 11
            pub mod CEntityFlame {
                pub const m_hEntAttached: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_bCheapEffect: usize = 0x4C4; // bool
                pub const m_flSize: usize = 0x4C8; // float32
                pub const m_bUseHitboxes: usize = 0x4CC; // bool
                pub const m_iNumHitboxFires: usize = 0x4D0; // int32
                pub const m_flHitboxFireScale: usize = 0x4D4; // float32
                pub const m_flLifetime: usize = 0x4D8; // GameTime_t
                pub const m_hAttacker: usize = 0x4DC; // CHandle<CBaseEntity>
                pub const m_iDangerSound: usize = 0x4E0; // int32
                pub const m_flDirectDamagePerSecond: usize = 0x4E4; // float32
                pub const m_iCustomDamageType: usize = 0x4E8; // int32
            }
            // Parent: CLogicalEntity
            // Fields count: 3
            pub mod CBaseFilter {
                pub const m_bNegated: usize = 0x4C0; // bool
                pub const m_OnPass: usize = 0x4C8; // CEntityIOOutput
                pub const m_OnFail: usize = 0x4F0; // CEntityIOOutput
            }
            // Parent: CBaseFilter
            // Fields count: 4
            pub mod CFilterMultiple {
                pub const m_nFilterType: usize = 0x518; // filter_t
                pub const m_iFilterName: usize = 0x520; // CUtlSymbolLarge[10]
                pub const m_hFilter: usize = 0x570; // CHandle<CBaseEntity>[10]
                pub const m_nFilterCount: usize = 0x598; // int32
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterProximity {
                pub const m_flRadius: usize = 0x518; // float32
            }
            // Parent: CBaseFilter
            // Fields count: 0
            pub mod CFilterLOS {
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterClass {
                pub const m_iFilterClass: usize = 0x518; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Fields count: 4
            pub mod CBaseFire {
                pub const m_flScale: usize = 0x4C0; // float32
                pub const m_flStartScale: usize = 0x4C4; // float32
                pub const m_flScaleTime: usize = 0x4C8; // float32
                pub const m_nFlags: usize = 0x4CC; // uint32
            }
            // Parent: CBaseFire
            // Fields count: 2
            pub mod CFireSmoke {
                pub const m_nFlameModelIndex: usize = 0x4D0; // int32
                pub const m_nFlameFromAboveModelIndex: usize = 0x4D4; // int32
            }
            // Parent: CBaseEntity
            // Fields count: 7
            pub mod CFishPool {
                pub const m_fishCount: usize = 0x4D0; // int32
                pub const m_maxRange: usize = 0x4D4; // float32
                pub const m_swimDepth: usize = 0x4D8; // float32
                pub const m_waterLevel: usize = 0x4DC; // float32
                pub const m_isDormant: usize = 0x4E0; // bool
                pub const m_fishes: usize = 0x4E8; // CUtlVector<CHandle<CFish>>
                pub const m_visTimer: usize = 0x500; // CountdownTimer
            }
            // Parent: CServerOnlyEntity
            // Fields count: 0
            pub mod CInfoData {
            }
            // Parent: None
            // Fields count: 3
            pub mod locksound_t {
                pub const sLockedSound: usize = 0x8; // CUtlSymbolLarge
                pub const sUnlockedSound: usize = 0x10; // CUtlSymbolLarge
                pub const flwaitSound: usize = 0x18; // GameTime_t
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CLogicBranch {
                pub const m_bInValue: usize = 0x4C0; // bool
                pub const m_Listeners: usize = 0x4C8; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_OnTrue: usize = 0x4E0; // CEntityIOOutput
                pub const m_OnFalse: usize = 0x508; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Fields count: 7
            pub mod CLogicDistanceCheck {
                pub const m_iszEntityA: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszEntityB: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_flZone1Distance: usize = 0x4D0; // float32
                pub const m_flZone2Distance: usize = 0x4D4; // float32
                pub const m_InZone1: usize = 0x4D8; // CEntityIOOutput
                pub const m_InZone2: usize = 0x500; // CEntityIOOutput
                pub const m_InZone3: usize = 0x528; // CEntityIOOutput
            }
            // Parent: None
            // Fields count: 3
            pub mod VelocitySampler {
                pub const m_prevSample: usize = 0x0; // 
                pub const m_fPrevSampleTime: usize = 0xC; // GameTime_t
                pub const m_fIdealSampleRate: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod SimpleConstraintSoundProfile {
                pub const eKeypoints: usize = 0x8; // SimpleConstraintSoundProfile::SimpleConstraintsSoundProfileKeypoints_t
                pub const m_keyPoints: usize = 0xC; // float32[2]
                pub const m_reversalSoundThresholds: usize = 0x14; // float32[3]
            }
            // Parent: None
            // Fields count: 8
            pub mod ConstraintSoundInfo {
                pub const m_vSampler: usize = 0x8; // VelocitySampler
                pub const m_soundProfile: usize = 0x20; // SimpleConstraintSoundProfile
                pub const m_forwardAxis: usize = 0x40; // 
                pub const m_iszTravelSoundFwd: usize = 0x50; // CUtlSymbolLarge
                pub const m_iszTravelSoundBack: usize = 0x58; // CUtlSymbolLarge
                pub const m_iszReversalSounds: usize = 0x68; // CUtlSymbolLarge[3]
                pub const m_bPlayTravelSound: usize = 0x80; // bool
                pub const m_bPlayReversalSound: usize = 0x81; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod CSmoothFunc {
                pub const m_flSmoothAmplitude: usize = 0x8; // float32
                pub const m_flSmoothBias: usize = 0xC; // float32
                pub const m_flSmoothDuration: usize = 0x10; // float32
                pub const m_flSmoothRemainingTime: usize = 0x14; // float32
                pub const m_nSmoothDir: usize = 0x18; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod magnetted_objects_t {
                pub const hEntity: usize = 0x8; // CHandle<CBaseEntity>
            }
            // Parent: CServerOnlyPointEntity
            // Fields count: 6
            pub mod CPointPrefab {
                pub const m_targetMapName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_forceWorldGroupID: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_associatedRelayTargetName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_fixupNames: usize = 0x4D8; // bool
                pub const m_bLoadDynamic: usize = 0x4D9; // bool
                pub const m_associatedRelayEntity: usize = 0x4DC; // CHandle<CPointPrefab>
            }
            // Parent: CBaseEntity
            // Fields count: 2
            pub mod CSkyboxReference {
                pub const m_worldGroupId: usize = 0x4C0; // WorldGroupId_t
                pub const m_hSkyCamera: usize = 0x4C4; // CHandle<CSkyCamera>
            }
            // Parent: CBaseEntity
            // Fields count: 4
            pub mod CSkyCamera {
                pub const m_skyboxData: usize = 0x4C0; // sky3dparams_t
                pub const m_skyboxSlotToken: usize = 0x550; // CUtlStringToken
                pub const m_bUseAngles: usize = 0x554; // bool
                pub const m_pNext: usize = 0x558; // CSkyCamera*
            }
            // Parent: None
            // Fields count: 12
            pub mod CSound {
                pub const m_hOwner: usize = 0x0; // CHandle<CBaseEntity>
                pub const m_hTarget: usize = 0x4; // CHandle<CBaseEntity>
                pub const m_iVolume: usize = 0x8; // int32
                pub const m_flOcclusionScale: usize = 0xC; // float32
                pub const m_iType: usize = 0x10; // int32
                pub const m_iNextAudible: usize = 0x14; // int32
                pub const m_flExpireTime: usize = 0x18; // GameTime_t
                pub const m_iNext: usize = 0x1C; // int16
                pub const m_bNoExpirationTime: usize = 0x1E; // bool
                pub const m_ownerChannelIndex: usize = 0x20; // int32
                pub const m_vecOrigin: usize = 0x24; // 
                pub const m_bHasOwner: usize = 0x30; // bool
            }
            // Parent: CServerOnlyEntity
            // Fields count: 11
            pub mod CEnvSoundscape {
                pub const m_OnPlay: usize = 0x4C0; // CEntityIOOutput
                pub const m_flRadius: usize = 0x4E8; // float32
                pub const m_soundscapeName: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_soundEventName: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_bOverrideWithEvent: usize = 0x500; // bool
                pub const m_soundscapeIndex: usize = 0x504; // int32
                pub const m_soundscapeEntityListId: usize = 0x508; // int32
                pub const m_soundEventHash: usize = 0x50C; // uint32
                pub const m_positionNames: usize = 0x510; // CUtlSymbolLarge[8]
                pub const m_hProxySoundscape: usize = 0x550; // CHandle<CEnvSoundscape>
                pub const m_bDisabled: usize = 0x554; // bool
            }
            // Parent: CEnvSoundscape
            // Fields count: 1
            pub mod CEnvSoundscapeProxy {
                pub const m_MainSoundscapeName: usize = 0x558; // CUtlSymbolLarge
            }
            // Parent: CEnvSoundscape
            // Fields count: 0
            pub mod CEnvSoundscapeTriggerable {
            }
            // Parent: None
            // Fields count: 6
            pub mod lerpdata_t {
                pub const m_hEnt: usize = 0x0; // CHandle<CBaseEntity>
                pub const m_MoveType: usize = 0x4; // MoveType_t
                pub const m_flStartTime: usize = 0x8; // GameTime_t
                pub const m_vecStartOrigin: usize = 0xC; // 
                pub const m_qStartRot: usize = 0x20; // Quaternion
                pub const m_nFXIndex: usize = 0x30; // ParticleIndex_t
            }
            // Parent: None
            // Fields count: 2
            pub mod CNavLinkAnimgraphVar {
                pub const m_strAnimgraphVar: usize = 0x0; // CUtlString
                pub const m_unAlignmentDegrees: usize = 0x8; // uint32
            }
            // Parent: None
            // Fields count: 3
            pub mod CNavLinkMovementVData {
                pub const m_bIsInterpolated: usize = 0x0; // bool
                pub const m_unRecommendedDistance: usize = 0x4; // uint32
                pub const m_vecAnimgraphVars: usize = 0x8; // CUtlVector<CNavLinkAnimgraphVar>
            }
            // Parent: CNavVolume
            // Fields count: 0
            pub mod CNavVolumeMarkupVolume {
            }
            // Parent: CNavVolume
            // Fields count: 0
            pub mod CNavVolumeCalculatedVector {
            }
            // Parent: CNavVolumeCalculatedVector
            // Fields count: 2
            pub mod CNavVolumeBreadthFirstSearch {
                pub const m_vStartPos: usize = 0xA0; // 
                pub const m_flSearchDist: usize = 0xAC; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod VPhysicsCollisionAttribute_t {
                pub const m_nInteractsAs: usize = 0x8; // uint64
                pub const m_nInteractsWith: usize = 0x10; // uint64
                pub const m_nInteractsExclude: usize = 0x18; // uint64
                pub const m_nEntityId: usize = 0x20; // uint32
                pub const m_nOwnerId: usize = 0x24; // uint32
                pub const m_nHierarchyId: usize = 0x28; // uint16
                pub const m_nCollisionGroup: usize = 0x2A; // uint8
                pub const m_nCollisionFunctionMask: usize = 0x2B; // uint8
            }
            // Parent: None
            // Fields count: 17
            pub mod CCollisionProperty {
                pub const m_collisionAttribute: usize = 0x10; // VPhysicsCollisionAttribute_t
                pub const m_vecMins: usize = 0x40; // 
                pub const m_vecMaxs: usize = 0x4C; // 
                pub const m_usSolidFlags: usize = 0x5A; // uint8
                pub const m_nSolidType: usize = 0x5B; // SolidType_t
                pub const m_triggerBloat: usize = 0x5C; // uint8
                pub const m_nSurroundType: usize = 0x5D; // SurroundingBoundsType_t
                pub const m_CollisionGroup: usize = 0x5E; // uint8
                pub const m_nEnablePhysics: usize = 0x5F; // uint8
                pub const m_flBoundingRadius: usize = 0x60; // float32
                pub const m_vecSpecifiedSurroundingMins: usize = 0x64; // 
                pub const m_vecSpecifiedSurroundingMaxs: usize = 0x70; // 
                pub const m_vecSurroundingMaxs: usize = 0x7C; // 
                pub const m_vecSurroundingMins: usize = 0x88; // 
                pub const m_vCapsuleCenter1: usize = 0x94; // 
                pub const m_vCapsuleCenter2: usize = 0xA0; // 
                pub const m_flCapsuleRadius: usize = 0xAC; // float32
            }
            // Parent: None
            // Fields count: 21
            pub mod CEffectData {
                pub const m_vOrigin: usize = 0x8; // 
                pub const m_vStart: usize = 0x14; // 
                pub const m_vNormal: usize = 0x20; // 
                pub const m_vAngles: usize = 0x2C; // QAngle
                pub const m_hEntity: usize = 0x38; // CEntityHandle
                pub const m_hOtherEntity: usize = 0x3C; // CEntityHandle
                pub const m_flScale: usize = 0x40; // float32
                pub const m_flMagnitude: usize = 0x44; // float32
                pub const m_flRadius: usize = 0x48; // float32
                pub const m_nSurfaceProp: usize = 0x4C; // CUtlStringToken
                pub const m_nEffectIndex: usize = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_nDamageType: usize = 0x58; // uint32
                pub const m_nPenetrate: usize = 0x5C; // uint8
                pub const m_nMaterial: usize = 0x5E; // uint16
                pub const m_nHitBox: usize = 0x60; // uint16
                pub const m_nColor: usize = 0x62; // uint8
                pub const m_fFlags: usize = 0x63; // uint8
                pub const m_nAttachmentIndex: usize = 0x64; // AttachmentHandle_t
                pub const m_nAttachmentName: usize = 0x68; // CUtlStringToken
                pub const m_iEffectName: usize = 0x6C; // uint16
                pub const m_nExplosionType: usize = 0x6E; // uint8
            }
            // Parent: CBaseEntity
            // Fields count: 2
            pub mod CEnvDetailController {
                pub const m_flFadeStartDist: usize = 0x4C0; // float32
                pub const m_flFadeEndDist: usize = 0x4C4; // float32
            }
            // Parent: None
            // Fields count: 31
            pub mod CEnvWindShared {
                pub const m_flStartTime: usize = 0x8; // GameTime_t
                pub const m_iWindSeed: usize = 0xC; // uint32
                pub const m_iMinWind: usize = 0x10; // uint16
                pub const m_iMaxWind: usize = 0x12; // uint16
                pub const m_windRadius: usize = 0x14; // int32
                pub const m_iMinGust: usize = 0x18; // uint16
                pub const m_iMaxGust: usize = 0x1A; // uint16
                pub const m_flMinGustDelay: usize = 0x1C; // float32
                pub const m_flMaxGustDelay: usize = 0x20; // float32
                pub const m_flGustDuration: usize = 0x24; // float32
                pub const m_iGustDirChange: usize = 0x28; // uint16
                pub const m_location: usize = 0x2C; // 
                pub const m_iszGustSound: usize = 0x38; // int32
                pub const m_iWindDir: usize = 0x3C; // int32
                pub const m_flWindSpeed: usize = 0x40; // float32
                pub const m_currentWindVector: usize = 0x44; // 
                pub const m_CurrentSwayVector: usize = 0x50; // 
                pub const m_PrevSwayVector: usize = 0x5C; // 
                pub const m_iInitialWindDir: usize = 0x68; // uint16
                pub const m_flInitialWindSpeed: usize = 0x6C; // float32
                pub const m_OnGustStart: usize = 0x70; // CEntityIOOutput
                pub const m_OnGustEnd: usize = 0x98; // CEntityIOOutput
                pub const m_flVariationTime: usize = 0xC0; // GameTime_t
                pub const m_flSwayTime: usize = 0xC4; // GameTime_t
                pub const m_flSimTime: usize = 0xC8; // GameTime_t
                pub const m_flSwitchTime: usize = 0xCC; // GameTime_t
                pub const m_flAveWindSpeed: usize = 0xD0; // float32
                pub const m_bGusting: usize = 0xD4; // bool
                pub const m_flWindAngleVariation: usize = 0xD8; // float32
                pub const m_flWindSpeedVariation: usize = 0xDC; // float32
                pub const m_iEntIndex: usize = 0xE0; // CEntityIndex
            }
            // Parent: None
            // Fields count: 2
            pub mod CEnvWindShared__WindAveEvent_t {
                pub const m_flStartWindSpeed: usize = 0x0; // float32
                pub const m_flAveWindSpeed: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CEnvWindShared__WindVariationEvent_t {
                pub const m_flWindAngleVariation: usize = 0x0; // float32
                pub const m_flWindSpeedVariation: usize = 0x4; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CInfoLadderDismount {
            }
            // Parent: None
            // Fields count: 12
            pub mod shard_model_desc_t {
                pub const m_nModelID: usize = 0x8; // int32
                pub const m_hMaterial: usize = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_solid: usize = 0x18; // ShardSolid_t
                pub const m_ShatterPanelMode: usize = 0x19; // ShatterPanelMode
                pub const m_vecPanelSize: usize = 0x1C; // Vector2D
                pub const m_vecStressPositionA: usize = 0x24; // Vector2D
                pub const m_vecStressPositionB: usize = 0x2C; // Vector2D
                pub const m_vecPanelVertices: usize = 0x38; // CNetworkUtlVectorBase<Vector2D>
                pub const m_flGlassHalfThickness: usize = 0x50; // float32
                pub const m_bHasParent: usize = 0x54; // bool
                pub const m_bParentFrozen: usize = 0x55; // bool
                pub const m_SurfacePropStringToken: usize = 0x58; // CUtlStringToken
            }
            // Parent: None
            // Fields count: 30
            pub mod CShatterGlassShard {
                pub const m_hShardHandle: usize = 0x8; // uint32
                pub const m_vecPanelVertices: usize = 0x10; // CUtlVector<Vector2D>
                pub const m_vLocalPanelSpaceOrigin: usize = 0x28; // Vector2D
                pub const m_hModel: usize = 0x30; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_hPhysicsEntity: usize = 0x38; // CHandle<CShatterGlassShardPhysics>
                pub const m_hParentPanel: usize = 0x3C; // CHandle<CFuncShatterglass>
                pub const m_hParentShard: usize = 0x40; // uint32
                pub const m_ShatterStressType: usize = 0x44; // ShatterGlassStressType
                pub const m_vecStressVelocity: usize = 0x48; // 
                pub const m_bCreatedModel: usize = 0x54; // bool
                pub const m_flLongestEdge: usize = 0x58; // float32
                pub const m_flShortestEdge: usize = 0x5C; // float32
                pub const m_flLongestAcross: usize = 0x60; // float32
                pub const m_flShortestAcross: usize = 0x64; // float32
                pub const m_flSumOfAllEdges: usize = 0x68; // float32
                pub const m_flArea: usize = 0x6C; // float32
                pub const m_nOnFrameEdge: usize = 0x70; // OnFrame
                pub const m_nParentPanelsNthShard: usize = 0x74; // int32
                pub const m_nSubShardGeneration: usize = 0x78; // int32
                pub const m_vecAverageVertPosition: usize = 0x7C; // Vector2D
                pub const m_bAverageVertPositionIsValid: usize = 0x84; // bool
                pub const m_vecPanelSpaceStressPositionA: usize = 0x88; // Vector2D
                pub const m_vecPanelSpaceStressPositionB: usize = 0x90; // Vector2D
                pub const m_bStressPositionAIsValid: usize = 0x98; // bool
                pub const m_bStressPositionBIsValid: usize = 0x99; // bool
                pub const m_bFlaggedForRemoval: usize = 0x9A; // bool
                pub const m_flPhysicsEntitySpawnedAtTime: usize = 0x9C; // GameTime_t
                pub const m_bShatterRateLimited: usize = 0xA0; // bool
                pub const m_hEntityHittingMe: usize = 0xA4; // CHandle<CBaseEntity>
                pub const m_vecNeighbors: usize = 0xA8; // CUtlVector<uint32>
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CGameRulesProxy {
            }
            // Parent: None
            // Fields count: 2
            pub mod CGameRules {
                pub const m_szQuestName: usize = 0x8; // char[128]
                pub const m_nQuestPhase: usize = 0x88; // int32
            }
            // Parent: None
            // Fields count: 11
            pub mod CGlowProperty {
                pub const m_fGlowColor: usize = 0x8; // 
                pub const m_iGlowType: usize = 0x30; // int32
                pub const m_iGlowTeam: usize = 0x34; // int32
                pub const m_nGlowRange: usize = 0x38; // int32
                pub const m_nGlowRangeMin: usize = 0x3C; // int32
                pub const m_glowColorOverride: usize = 0x40; // Color
                pub const m_bFlashing: usize = 0x44; // bool
                pub const m_flGlowTime: usize = 0x48; // float32
                pub const m_flGlowStartTime: usize = 0x4C; // float32
                pub const m_bEligibleForScreenHighlight: usize = 0x50; // bool
                pub const m_bGlowing: usize = 0x51; // bool
            }
            // Parent: CGameRules
            // Fields count: 0
            pub mod CMultiplayRules {
            }
            // Parent: None
            // Fields count: 25
            pub mod fogparams_t {
                pub const dirPrimary: usize = 0x8; // 
                pub const colorPrimary: usize = 0x14; // Color
                pub const colorSecondary: usize = 0x18; // Color
                pub const colorPrimaryLerpTo: usize = 0x1C; // Color
                pub const colorSecondaryLerpTo: usize = 0x20; // Color
                pub const start: usize = 0x24; // float32
                pub const end: usize = 0x28; // float32
                pub const farz: usize = 0x2C; // float32
                pub const maxdensity: usize = 0x30; // float32
                pub const exponent: usize = 0x34; // float32
                pub const HDRColorScale: usize = 0x38; // float32
                pub const skyboxFogFactor: usize = 0x3C; // float32
                pub const skyboxFogFactorLerpTo: usize = 0x40; // float32
                pub const startLerpTo: usize = 0x44; // float32
                pub const endLerpTo: usize = 0x48; // float32
                pub const maxdensityLerpTo: usize = 0x4C; // float32
                pub const lerptime: usize = 0x50; // GameTime_t
                pub const duration: usize = 0x54; // float32
                pub const blendtobackground: usize = 0x58; // float32
                pub const scattering: usize = 0x5C; // float32
                pub const locallightscale: usize = 0x60; // float32
                pub const enable: usize = 0x64; // bool
                pub const blend: usize = 0x65; // bool
                pub const m_bNoReflectionFog: usize = 0x66; // bool
                pub const m_bPadding: usize = 0x67; // bool
            }
            // Parent: None
            // Fields count: 14
            pub mod fogplayerparams_t {
                pub const m_hCtrl: usize = 0x8; // CHandle<CFogController>
                pub const m_flTransitionTime: usize = 0xC; // float32
                pub const m_OldColor: usize = 0x10; // Color
                pub const m_flOldStart: usize = 0x14; // float32
                pub const m_flOldEnd: usize = 0x18; // float32
                pub const m_flOldMaxDensity: usize = 0x1C; // float32
                pub const m_flOldHDRColorScale: usize = 0x20; // float32
                pub const m_flOldFarZ: usize = 0x24; // float32
                pub const m_NewColor: usize = 0x28; // Color
                pub const m_flNewStart: usize = 0x2C; // float32
                pub const m_flNewEnd: usize = 0x30; // float32
                pub const m_flNewMaxDensity: usize = 0x34; // float32
                pub const m_flNewHDRColorScale: usize = 0x38; // float32
                pub const m_flNewFarZ: usize = 0x3C; // float32
            }
            // Parent: None
            // Fields count: 6
            pub mod sky3dparams_t {
                pub const scale: usize = 0x8; // int16
                pub const origin: usize = 0xC; // 
                pub const bClip3DSkyBoxNearToWorldFar: usize = 0x18; // bool
                pub const flClip3DSkyBoxNearToWorldFarOffset: usize = 0x1C; // float32
                pub const fog: usize = 0x20; // fogparams_t
                pub const m_nWorldGroupID: usize = 0x88; // WorldGroupId_t
            }
            // Parent: None
            // Fields count: 5
            pub mod sndopvarlatchdata_t {
                pub const m_iszStack: usize = 0x8; // CUtlSymbolLarge
                pub const m_iszOperator: usize = 0x10; // CUtlSymbolLarge
                pub const m_iszOpvar: usize = 0x18; // CUtlSymbolLarge
                pub const m_flVal: usize = 0x20; // float32
                pub const m_vPos: usize = 0x24; // 
            }
            // Parent: None
            // Fields count: 0
            pub mod IRagdoll {
            }
            // Parent: None
            // Fields count: 3
            pub mod ragdollelement_t {
                pub const originParentSpace: usize = 0x0; // 
                pub const parentIndex: usize = 0x20; // int32
                pub const m_flRadius: usize = 0x24; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod ragdoll_t {
                pub const list: usize = 0x0; // CUtlVector<ragdollelement_t>
                pub const boneIndex: usize = 0x18; // CUtlVector<int32>
                pub const allowStretch: usize = 0x30; // bool
                pub const unused: usize = 0x31; // bool
            }
            // Parent: None
            // Fields count: 3
            pub mod PhysicsRagdollPose_t {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
                pub const m_Transforms: usize = 0x30; // CNetworkUtlVectorBase<CTransform>
                pub const m_hOwner: usize = 0x48; // CHandle<CBaseEntity>
            }
            // Parent: None
            // Fields count: 13
            pub mod CSceneEventInfo {
                pub const m_iLayer: usize = 0x0; // int32
                pub const m_iPriority: usize = 0x4; // int32
                pub const m_hSequence: usize = 0x8; // HSequence
                pub const m_flWeight: usize = 0xC; // float32
                pub const m_bHasArrived: usize = 0x10; // bool
                pub const m_nType: usize = 0x14; // int32
                pub const m_flNext: usize = 0x18; // GameTime_t
                pub const m_bIsGesture: usize = 0x1C; // bool
                pub const m_bShouldRemove: usize = 0x1D; // bool
                pub const m_hTarget: usize = 0x44; // CHandle<CBaseEntity>
                pub const m_nSceneEventId: usize = 0x48; // uint32
                pub const m_bClientSide: usize = 0x4C; // bool
                pub const m_bStarted: usize = 0x4D; // bool
            }
            // Parent: None
            // Fields count: 1
            pub mod ParticleIndex_t {
                pub const m_Value: usize = 0x0; // int32
            }
            // Parent: None
            // Fields count: 1
            pub mod AmmoIndex_t {
                pub const m_Value: usize = 0x0; // int8
            }
            // Parent: None
            // Fields count: 0
            pub mod CEntitySubclassVDataBase {
            }
            // Parent: None
            // Fields count: 4
            pub mod thinkfunc_t {
                pub const m_hFn: usize = 0x8; // HSCRIPT
                pub const m_nContext: usize = 0x10; // CUtlStringToken
                pub const m_nNextThinkTick: usize = 0x14; // GameTick_t
                pub const m_nLastThinkTick: usize = 0x18; // GameTick_t
            }
            // Parent: None
            // Fields count: 2
            pub mod RagdollCreationParams_t {
                pub const m_vForce: usize = 0x0; // 
                pub const m_nForceBone: usize = 0xC; // int32
            }
            // Parent: None
            // Fields count: 6
            pub mod hudtextparms_t {
                pub const color1: usize = 0x0; // Color
                pub const color2: usize = 0x4; // Color
                pub const effect: usize = 0x8; // uint8
                pub const channel: usize = 0x9; // uint8
                pub const x: usize = 0xC; // float32
                pub const y: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CSimpleSimTimer {
                pub const m_next: usize = 0x0; // GameTime_t
                pub const m_nWorldGroupId: usize = 0x4; // WorldGroupId_t
            }
            // Parent: CSimpleSimTimer
            // Fields count: 1
            pub mod CSimTimer {
                pub const m_interval: usize = 0x8; // float32
            }
            // Parent: CSimpleSimTimer
            // Fields count: 2
            pub mod CRandSimTimer {
                pub const m_minInterval: usize = 0x8; // float32
                pub const m_maxInterval: usize = 0xC; // float32
            }
            // Parent: CSimpleSimTimer
            // Fields count: 1
            pub mod CStopwatchBase {
                pub const m_fIsRunning: usize = 0x8; // bool
            }
            // Parent: CStopwatchBase
            // Fields count: 0
            pub mod CSimpleStopwatch {
            }
            // Parent: CStopwatchBase
            // Fields count: 1
            pub mod CStopwatch {
                pub const m_interval: usize = 0xC; // float32
            }
            // Parent: CStopwatchBase
            // Fields count: 2
            pub mod CRandStopwatch {
                pub const m_minInterval: usize = 0xC; // float32
                pub const m_maxInterval: usize = 0x10; // float32
            }
            // Parent: CGameRules
            // Fields count: 1
            pub mod CSingleplayRules {
                pub const m_bSinglePlayerGameEnding: usize = 0x90; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 9
            pub mod CSoundOpvarSetPointBase {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_hSource: usize = 0x4C4; // CEntityHandle
                pub const m_iszSourceEntityName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_vLastPosition: usize = 0x528; // 
                pub const m_iszStackName: usize = 0x538; // CUtlSymbolLarge
                pub const m_iszOperatorName: usize = 0x540; // CUtlSymbolLarge
                pub const m_iszOpvarName: usize = 0x548; // CUtlSymbolLarge
                pub const m_iOpvarIndex: usize = 0x550; // int32
                pub const m_bUseAutoCompare: usize = 0x554; // bool
            }
            // Parent: CSoundOpvarSetPointBase
            // Fields count: 23
            pub mod CSoundOpvarSetPointEntity {
                pub const m_OnEnter: usize = 0x558; // CEntityIOOutput
                pub const m_OnExit: usize = 0x580; // CEntityIOOutput
                pub const m_bAutoDisable: usize = 0x5A8; // bool
                pub const m_flDistanceMin: usize = 0x5EC; // float32
                pub const m_flDistanceMax: usize = 0x5F0; // float32
                pub const m_flDistanceMapMin: usize = 0x5F4; // float32
                pub const m_flDistanceMapMax: usize = 0x5F8; // float32
                pub const m_flOcclusionRadius: usize = 0x5FC; // float32
                pub const m_flOcclusionMin: usize = 0x600; // float32
                pub const m_flOcclusionMax: usize = 0x604; // float32
                pub const m_flValSetOnDisable: usize = 0x608; // float32
                pub const m_bSetValueOnDisable: usize = 0x60C; // bool
                pub const m_nSimulationMode: usize = 0x610; // int32
                pub const m_nVisibilitySamples: usize = 0x614; // int32
                pub const m_vDynamicProxyPoint: usize = 0x618; // 
                pub const m_flDynamicMaximumOcclusion: usize = 0x624; // float32
                pub const m_hDynamicEntity: usize = 0x628; // CEntityHandle
                pub const m_iszDynamicEntityName: usize = 0x630; // CUtlSymbolLarge
                pub const m_flPathingDistanceNormFactor: usize = 0x638; // float32
                pub const m_vPathingSourcePos: usize = 0x63C; // 
                pub const m_vPathingListenerPos: usize = 0x648; // 
                pub const m_vPathingDirection: usize = 0x654; // 
                pub const m_nPathingSourceIndex: usize = 0x660; // int32
            }
            // Parent: CSoundOpvarSetPointEntity
            // Fields count: 9
            pub mod CSoundOpvarSetAABBEntity {
                pub const m_vDistanceInnerMins: usize = 0x668; // 
                pub const m_vDistanceInnerMaxs: usize = 0x674; // 
                pub const m_vDistanceOuterMins: usize = 0x680; // 
                pub const m_vDistanceOuterMaxs: usize = 0x68C; // 
                pub const m_nAABBDirection: usize = 0x698; // int32
                pub const m_vInnerMins: usize = 0x69C; // 
                pub const m_vInnerMaxs: usize = 0x6A8; // 
                pub const m_vOuterMins: usize = 0x6B4; // 
                pub const m_vOuterMaxs: usize = 0x6C0; // 
            }
            // Parent: CSoundOpvarSetAABBEntity
            // Fields count: 0
            pub mod CSoundOpvarSetOBBEntity {
            }
            // Parent: CSoundOpvarSetPointEntity
            // Fields count: 3
            pub mod CSoundOpvarSetPathCornerEntity {
                pub const m_flDistMinSqr: usize = 0x680; // float32
                pub const m_flDistMaxSqr: usize = 0x684; // float32
                pub const m_iszPathCornerEntityName: usize = 0x688; // CUtlSymbolLarge
            }
            // Parent: None
            // Fields count: 3
            pub mod SoundOpvarTraceResult_t {
                pub const vPos: usize = 0x0; // 
                pub const bDidHit: usize = 0xC; // bool
                pub const flDistSqrToCenter: usize = 0x10; // float32
            }
            // Parent: CSoundOpvarSetPointEntity
            // Fields count: 4
            pub mod CSoundOpvarSetAutoRoomEntity {
                pub const m_traceResults: usize = 0x668; // CUtlVector<SoundOpvarTraceResult_t>
                pub const m_flSize: usize = 0x698; // float32
                pub const m_flHeightTolerance: usize = 0x69C; // float32
                pub const m_flSizeSqr: usize = 0x6A0; // float32
            }
            // Parent: CSoundOpvarSetPointBase
            // Fields count: 8
            pub mod CSoundOpvarSetOBBWindEntity {
                pub const m_vMins: usize = 0x558; // 
                pub const m_vMaxs: usize = 0x564; // 
                pub const m_vDistanceMins: usize = 0x570; // 
                pub const m_vDistanceMaxs: usize = 0x57C; // 
                pub const m_flWindMin: usize = 0x588; // float32
                pub const m_flWindMax: usize = 0x58C; // float32
                pub const m_flWindMapMin: usize = 0x590; // float32
                pub const m_flWindMapMax: usize = 0x594; // float32
            }
            // Parent: None
            // Fields count: 18
            pub mod CTakeDamageInfo {
                pub const m_vecDamageForce: usize = 0x8; // 
                pub const m_vecDamagePosition: usize = 0x14; // 
                pub const m_vecReportedPosition: usize = 0x20; // 
                pub const m_vecDamageDirection: usize = 0x2C; // 
                pub const m_hInflictor: usize = 0x38; // CHandle<CBaseEntity>
                pub const m_hAttacker: usize = 0x3C; // CHandle<CBaseEntity>
                pub const m_hAbility: usize = 0x40; // CHandle<CBaseEntity>
                pub const m_flDamage: usize = 0x44; // float32
                pub const m_bitsDamageType: usize = 0x48; // int32
                pub const m_iDamageCustom: usize = 0x4C; // int32
                pub const m_iAmmoType: usize = 0x50; // AmmoIndex_t
                pub const m_flOriginalDamage: usize = 0x60; // float32
                pub const m_bShouldBleed: usize = 0x64; // bool
                pub const m_bShouldSpark: usize = 0x65; // bool
                pub const m_nDamageFlags: usize = 0x70; // TakeDamageFlags_t
                pub const m_nNumObjectsPenetrated: usize = 0x74; // int32
                pub const m_hScriptInstance: usize = 0x78; // HSCRIPT
                pub const m_bInTakeDamageFlow: usize = 0x94; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod CTakeDamageResult {
                pub const m_nHealthLost: usize = 0x0; // int32
                pub const m_nDamageTaken: usize = 0x4; // int32
            }
            // Parent: None
            // Fields count: 4
            pub mod SummaryTakeDamageInfo_t {
                pub const nSummarisedCount: usize = 0x0; // int32
                pub const info: usize = 0x8; // CTakeDamageInfo
                pub const result: usize = 0xA0; // CTakeDamageResult
                pub const hTarget: usize = 0xA8; // CHandle<CBaseEntity>
            }
            // Parent: None
            // Fields count: 1
            pub mod CTakeDamageSummaryScopeGuard {
                pub const m_vecSummaries: usize = 0x8; // CUtlVector<SummaryTakeDamageInfo_t*>
            }
            // Parent: CMultiplayRules
            // Fields count: 0
            pub mod CTeamplayRules {
            }
            // Parent: None
            // Fields count: 2
            pub mod CAttributeList {
                pub const m_Attributes: usize = 0x8; // CUtlVectorEmbeddedNetworkVar<CEconItemAttribute>
                pub const m_pManager: usize = 0x58; // CAttributeManager*
            }
            // Parent: None
            // Fields count: 5
            pub mod CEconItemAttribute {
                pub const m_iAttributeDefinitionIndex: usize = 0x30; // uint16
                pub const m_flValue: usize = 0x34; // float32
                pub const m_flInitialValue: usize = 0x38; // float32
                pub const m_nRefundableCurrency: usize = 0x3C; // int32
                pub const m_bSetBonus: usize = 0x40; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod IEconItemInterface {
            }
            // Parent: None
            // Fields count: 6
            pub mod CAttributeManager {
                pub const m_Providers: usize = 0x8; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_iReapplyProvisionParity: usize = 0x20; // int32
                pub const m_hOuter: usize = 0x24; // CHandle<CBaseEntity>
                pub const m_bPreventLoopback: usize = 0x28; // bool
                pub const m_ProviderType: usize = 0x2C; // attributeprovidertypes_t
                pub const m_CachedResults: usize = 0x30; // CUtlVector<CAttributeManager::cached_attribute_float_t>
            }
            // Parent: None
            // Fields count: 3
            pub mod CAttributeManager__cached_attribute_float_t {
                pub const flIn: usize = 0x0; // float32
                pub const iAttribHook: usize = 0x8; // CUtlSymbolLarge
                pub const flOut: usize = 0x10; // float32
            }
            // Parent: CAttributeManager
            // Fields count: 1
            pub mod CAttributeContainer {
                pub const m_Item: usize = 0x50; // CEconItemView
            }
            // Parent: None
            // Fields count: 0
            pub mod IHasAttributes {
            }
            // Parent: AmmoTypeInfo_t
            // Fields count: 2
            pub mod GameAmmoTypeInfo_t {
                pub const m_nBuySize: usize = 0x38; // int32
                pub const m_nCost: usize = 0x3C; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod EntitySpottedState_t {
                pub const m_bSpotted: usize = 0x8; // bool
                pub const m_bSpottedByMask: usize = 0xC; // uint32[2]
            }
            // Parent: CServerOnlyPointEntity
            // Fields count: 3
            pub mod SpawnPoint {
                pub const m_iPriority: usize = 0x4C0; // int32
                pub const m_bEnabled: usize = 0x4C4; // bool
                pub const m_nType: usize = 0x4C8; // int32
            }
            // Parent: SpawnPoint
            // Fields count: 9
            pub mod SpawnPointCoopEnemy {
                pub const m_szWeaponsToGive: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_szPlayerModelToUse: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_nArmorToSpawnWith: usize = 0x4E0; // int32
                pub const m_nDefaultBehavior: usize = 0x4E4; // SpawnPointCoopEnemy::BotDefaultBehavior_t
                pub const m_nBotDifficulty: usize = 0x4E8; // int32
                pub const m_bIsAgressive: usize = 0x4EC; // bool
                pub const m_bStartAsleep: usize = 0x4ED; // bool
                pub const m_flHideRadius: usize = 0x4F0; // float32
                pub const m_szBehaviorTreeFile: usize = 0x500; // CUtlSymbolLarge
            }
            // Parent: CGameRulesProxy
            // Fields count: 1
            pub mod CCSGameRulesProxy {
                pub const m_pGameRules: usize = 0x4C0; // CCSGameRules*
            }
            // Parent: CTeamplayRules
            // Fields count: 215
            pub mod CCSGameRules {
                pub const __m_pChainEntity: usize = 0x98; // CNetworkVarChainer
                pub const m_coopMissionManager: usize = 0xC0; // CHandle<CBaseEntity>
                pub const m_bFreezePeriod: usize = 0xC4; // bool
                pub const m_bWarmupPeriod: usize = 0xC5; // bool
                pub const m_fWarmupPeriodEnd: usize = 0xC8; // GameTime_t
                pub const m_fWarmupPeriodStart: usize = 0xCC; // GameTime_t
                pub const m_nTotalPausedTicks: usize = 0xD0; // int32
                pub const m_nPauseStartTick: usize = 0xD4; // int32
                pub const m_bServerPaused: usize = 0xD8; // bool
                pub const m_bGamePaused: usize = 0xD9; // bool
                pub const m_bTerroristTimeOutActive: usize = 0xDA; // bool
                pub const m_bCTTimeOutActive: usize = 0xDB; // bool
                pub const m_flTerroristTimeOutRemaining: usize = 0xDC; // float32
                pub const m_flCTTimeOutRemaining: usize = 0xE0; // float32
                pub const m_nTerroristTimeOuts: usize = 0xE4; // int32
                pub const m_nCTTimeOuts: usize = 0xE8; // int32
                pub const m_bTechnicalTimeOut: usize = 0xEC; // bool
                pub const m_bMatchWaitingForResume: usize = 0xED; // bool
                pub const m_iRoundTime: usize = 0xF0; // int32
                pub const m_fMatchStartTime: usize = 0xF4; // float32
                pub const m_fRoundStartTime: usize = 0xF8; // GameTime_t
                pub const m_flRestartRoundTime: usize = 0xFC; // GameTime_t
                pub const m_bGameRestart: usize = 0x100; // bool
                pub const m_flGameStartTime: usize = 0x104; // float32
                pub const m_timeUntilNextPhaseStarts: usize = 0x108; // float32
                pub const m_gamePhase: usize = 0x10C; // int32
                pub const m_totalRoundsPlayed: usize = 0x110; // int32
                pub const m_nRoundsPlayedThisPhase: usize = 0x114; // int32
                pub const m_nOvertimePlaying: usize = 0x118; // int32
                pub const m_iHostagesRemaining: usize = 0x11C; // int32
                pub const m_bAnyHostageReached: usize = 0x120; // bool
                pub const m_bMapHasBombTarget: usize = 0x121; // bool
                pub const m_bMapHasRescueZone: usize = 0x122; // bool
                pub const m_bMapHasBuyZone: usize = 0x123; // bool
                pub const m_bIsQueuedMatchmaking: usize = 0x124; // bool
                pub const m_nQueuedMatchmakingMode: usize = 0x128; // int32
                pub const m_bIsValveDS: usize = 0x12C; // bool
                pub const m_bLogoMap: usize = 0x12D; // bool
                pub const m_bPlayAllStepSoundsOnServer: usize = 0x12E; // bool
                pub const m_iSpectatorSlotCount: usize = 0x130; // int32
                pub const m_MatchDevice: usize = 0x134; // int32
                pub const m_bHasMatchStarted: usize = 0x138; // bool
                pub const m_nNextMapInMapgroup: usize = 0x13C; // int32
                pub const m_szTournamentEventName: usize = 0x140; // char[512]
                pub const m_szTournamentEventStage: usize = 0x340; // char[512]
                pub const m_szMatchStatTxt: usize = 0x540; // char[512]
                pub const m_szTournamentPredictionsTxt: usize = 0x740; // char[512]
                pub const m_nTournamentPredictionsPct: usize = 0x940; // int32
                pub const m_flCMMItemDropRevealStartTime: usize = 0x944; // GameTime_t
                pub const m_flCMMItemDropRevealEndTime: usize = 0x948; // GameTime_t
                pub const m_bIsDroppingItems: usize = 0x94C; // bool
                pub const m_bIsQuestEligible: usize = 0x94D; // bool
                pub const m_bIsHltvActive: usize = 0x94E; // bool
                pub const m_nGuardianModeWaveNumber: usize = 0x950; // int32
                pub const m_nGuardianModeSpecialKillsRemaining: usize = 0x954; // int32
                pub const m_nGuardianModeSpecialWeaponNeeded: usize = 0x958; // int32
                pub const m_nGuardianGrenadesToGiveBots: usize = 0x95C; // int32
                pub const m_nNumHeaviesToSpawn: usize = 0x960; // int32
                pub const m_numGlobalGiftsGiven: usize = 0x964; // uint32
                pub const m_numGlobalGifters: usize = 0x968; // uint32
                pub const m_numGlobalGiftsPeriodSeconds: usize = 0x96C; // uint32
                pub const m_arrFeaturedGiftersAccounts: usize = 0x970; // uint32[4]
                pub const m_arrFeaturedGiftersGifts: usize = 0x980; // uint32[4]
                pub const m_arrProhibitedItemIndices: usize = 0x990; // uint16[100]
                pub const m_arrTournamentActiveCasterAccounts: usize = 0xA58; // uint32[4]
                pub const m_numBestOfMaps: usize = 0xA68; // int32
                pub const m_nHalloweenMaskListSeed: usize = 0xA6C; // int32
                pub const m_bBombDropped: usize = 0xA70; // bool
                pub const m_bBombPlanted: usize = 0xA71; // bool
                pub const m_iRoundWinStatus: usize = 0xA74; // int32
                pub const m_eRoundWinReason: usize = 0xA78; // int32
                pub const m_bTCantBuy: usize = 0xA7C; // bool
                pub const m_bCTCantBuy: usize = 0xA7D; // bool
                pub const m_flGuardianBuyUntilTime: usize = 0xA80; // GameTime_t
                pub const m_iMatchStats_RoundResults: usize = 0xA84; // int32[30]
                pub const m_iMatchStats_PlayersAlive_CT: usize = 0xAFC; // int32[30]
                pub const m_iMatchStats_PlayersAlive_T: usize = 0xB74; // int32[30]
                pub const m_TeamRespawnWaveTimes: usize = 0xBEC; // float32[32]
                pub const m_flNextRespawnWave: usize = 0xC6C; // GameTime_t[32]
                pub const m_nServerQuestID: usize = 0xCEC; // int32
                pub const m_vMinimapMins: usize = 0xCF0; // 
                pub const m_vMinimapMaxs: usize = 0xCFC; // 
                pub const m_MinimapVerticalSectionHeights: usize = 0xD08; // float32[8]
                pub const m_bDontIncrementCoopWave: usize = 0xD28; // bool
                pub const m_bSpawnedTerrorHuntHeavy: usize = 0xD29; // bool
                pub const m_nEndMatchMapGroupVoteTypes: usize = 0xD2C; // int32[10]
                pub const m_nEndMatchMapGroupVoteOptions: usize = 0xD54; // int32[10]
                pub const m_nEndMatchMapVoteWinner: usize = 0xD7C; // int32
                pub const m_iNumConsecutiveCTLoses: usize = 0xD80; // int32
                pub const m_iNumConsecutiveTerroristLoses: usize = 0xD84; // int32
                pub const m_bHasHostageBeenTouched: usize = 0xDA0; // bool
                pub const m_flIntermissionStartTime: usize = 0xDA4; // GameTime_t
                pub const m_flIntermissionEndTime: usize = 0xDA8; // GameTime_t
                pub const m_bLevelInitialized: usize = 0xDAC; // bool
                pub const m_iTotalRoundsPlayed: usize = 0xDB0; // int32
                pub const m_iUnBalancedRounds: usize = 0xDB4; // int32
                pub const m_endMatchOnRoundReset: usize = 0xDB8; // bool
                pub const m_endMatchOnThink: usize = 0xDB9; // bool
                pub const m_iFreezeTime: usize = 0xDBC; // int32
                pub const m_iNumTerrorist: usize = 0xDC0; // int32
                pub const m_iNumCT: usize = 0xDC4; // int32
                pub const m_iNumSpawnableTerrorist: usize = 0xDC8; // int32
                pub const m_iNumSpawnableCT: usize = 0xDCC; // int32
                pub const m_arrSelectedHostageSpawnIndices: usize = 0xDD0; // CUtlVector<int32>
                pub const m_nSpawnPointsRandomSeed: usize = 0xDE8; // int32
                pub const m_bFirstConnected: usize = 0xDEC; // bool
                pub const m_bCompleteReset: usize = 0xDED; // bool
                pub const m_bPickNewTeamsOnReset: usize = 0xDEE; // bool
                pub const m_bScrambleTeamsOnRestart: usize = 0xDEF; // bool
                pub const m_bSwapTeamsOnRestart: usize = 0xDF0; // bool
                pub const m_nEndMatchTiedVotes: usize = 0xDF8; // CUtlVector<int32>
                pub const m_bNeedToAskPlayersForContinueVote: usize = 0xE14; // bool
                pub const m_numQueuedMatchmakingAccounts: usize = 0xE18; // uint32
                pub const m_pQueuedMatchmakingReservationString: usize = 0xE20; // char*
                pub const m_numTotalTournamentDrops: usize = 0xE28; // uint32
                pub const m_numSpectatorsCountMax: usize = 0xE2C; // uint32
                pub const m_numSpectatorsCountMaxTV: usize = 0xE30; // uint32
                pub const m_numSpectatorsCountMaxLnk: usize = 0xE34; // uint32
                pub const m_bForceTeamChangeSilent: usize = 0xE40; // bool
                pub const m_bLoadingRoundBackupData: usize = 0xE41; // bool
                pub const m_nMatchInfoShowType: usize = 0xE78; // int32
                pub const m_flMatchInfoDecidedTime: usize = 0xE7C; // float32
                pub const m_flCoopRespawnAndHealTime: usize = 0xE98; // float32
                pub const m_coopBonusCoinsFound: usize = 0xE9C; // int32
                pub const m_coopBonusPistolsOnly: usize = 0xEA0; // bool
                pub const m_coopPlayersInDeploymentZone: usize = 0xEA1; // bool
                pub const m_coopMissionDeadPlayerRespawnEnabled: usize = 0xEA2; // bool
                pub const mTeamDMLastWinningTeamNumber: usize = 0xEA4; // int32
                pub const mTeamDMLastThinkTime: usize = 0xEA8; // float32
                pub const m_flTeamDMLastAnnouncementTime: usize = 0xEAC; // float32
                pub const m_iAccountTerrorist: usize = 0xEB0; // int32
                pub const m_iAccountCT: usize = 0xEB4; // int32
                pub const m_iSpawnPointCount_Terrorist: usize = 0xEB8; // int32
                pub const m_iSpawnPointCount_CT: usize = 0xEBC; // int32
                pub const m_iMaxNumTerrorists: usize = 0xEC0; // int32
                pub const m_iMaxNumCTs: usize = 0xEC4; // int32
                pub const m_iLoserBonus: usize = 0xEC8; // int32
                pub const m_iLoserBonusMostRecentTeam: usize = 0xECC; // int32
                pub const m_tmNextPeriodicThink: usize = 0xED0; // float32
                pub const m_bVoiceWonMatchBragFired: usize = 0xED4; // bool
                pub const m_fWarmupNextChatNoticeTime: usize = 0xED8; // float32
                pub const m_iHostagesRescued: usize = 0xEE0; // int32
                pub const m_iHostagesTouched: usize = 0xEE4; // int32
                pub const m_flNextHostageAnnouncement: usize = 0xEE8; // float32
                pub const m_bNoTerroristsKilled: usize = 0xEEC; // bool
                pub const m_bNoCTsKilled: usize = 0xEED; // bool
                pub const m_bNoEnemiesKilled: usize = 0xEEE; // bool
                pub const m_bCanDonateWeapons: usize = 0xEEF; // bool
                pub const m_firstKillTime: usize = 0xEF4; // float32
                pub const m_firstBloodTime: usize = 0xEFC; // float32
                pub const m_hostageWasInjured: usize = 0xF18; // bool
                pub const m_hostageWasKilled: usize = 0xF19; // bool
                pub const m_bVoteCalled: usize = 0xF28; // bool
                pub const m_bServerVoteOnReset: usize = 0xF29; // bool
                pub const m_flVoteCheckThrottle: usize = 0xF2C; // float32
                pub const m_bBuyTimeEnded: usize = 0xF30; // bool
                pub const m_nLastFreezeEndBeep: usize = 0xF34; // int32
                pub const m_bTargetBombed: usize = 0xF38; // bool
                pub const m_bBombDefused: usize = 0xF39; // bool
                pub const m_bMapHasBombZone: usize = 0xF3A; // bool
                pub const m_vecMainCTSpawnPos: usize = 0xF58; // 
                pub const m_CTSpawnPointsMasterList: usize = 0xF68; // CUtlVector<SpawnPoint*>
                pub const m_TerroristSpawnPointsMasterList: usize = 0xF80; // CUtlVector<SpawnPoint*>
                pub const m_bRespawningAllRespawnablePlayers: usize = 0xF98; // bool
                pub const m_iNextCTSpawnPoint: usize = 0xF9C; // int32
                pub const m_flCTSpawnPointUsedTime: usize = 0xFA0; // float32
                pub const m_iNextTerroristSpawnPoint: usize = 0xFA4; // int32
                pub const m_flTerroristSpawnPointUsedTime: usize = 0xFA8; // float32
                pub const m_CTSpawnPoints: usize = 0xFB0; // CUtlVector<SpawnPoint*>
                pub const m_TerroristSpawnPoints: usize = 0xFC8; // CUtlVector<SpawnPoint*>
                pub const m_bIsUnreservedGameServer: usize = 0xFE0; // bool
                pub const m_fAutobalanceDisplayTime: usize = 0xFE4; // float32
                pub const m_bAllowWeaponSwitch: usize = 0x1250; // bool
                pub const m_bRoundTimeWarningTriggered: usize = 0x1251; // bool
                pub const m_phaseChangeAnnouncementTime: usize = 0x1254; // GameTime_t
                pub const m_fNextUpdateTeamClanNamesTime: usize = 0x1258; // float32
                pub const m_flLastThinkTime: usize = 0x125C; // GameTime_t
                pub const m_fAccumulatedRoundOffDamage: usize = 0x1260; // float32
                pub const m_nShorthandedBonusLastEvalRound: usize = 0x1264; // int32
                pub const m_nMatchAbortedEarlyReason: usize = 0x14E0; // int32
                pub const m_bHasTriggeredRoundStartMusic: usize = 0x14E4; // bool
                pub const m_bHasTriggeredCoopSpawnReset: usize = 0x14E5; // bool
                pub const m_bSwitchingTeamsAtRoundReset: usize = 0x14E6; // bool
                pub const m_pGameModeRules: usize = 0x1500; // CCSGameModeRules*
                pub const m_BtGlobalBlackboard: usize = 0x1508; // KeyValues3
                pub const m_hPlayerResource: usize = 0x1570; // CHandle<CBaseEntity>
                pub const m_RetakeRules: usize = 0x1578; // CRetakeGameRules
                pub const m_GuardianBotSkillLevelMax: usize = 0x175C; // int32
                pub const m_GuardianBotSkillLevelMin: usize = 0x1760; // int32
                pub const m_arrTeamUniqueKillWeaponsMatch: usize = 0x1768; // CUtlVector<int32>[4]
                pub const m_bTeamLastKillUsedUniqueWeaponMatch: usize = 0x17C8; // bool[4]
                pub const m_nMatchEndCount: usize = 0x17F0; // uint8
                pub const m_nTTeamIntroVariant: usize = 0x17F4; // int32
                pub const m_nCTTeamIntroVariant: usize = 0x17F8; // int32
                pub const m_bTeamIntroPeriod: usize = 0x17FC; // bool
                pub const m_fTeamIntroPeriodEnd: usize = 0x1800; // GameTime_t
                pub const m_bPlayedTeamIntroVO: usize = 0x1804; // bool
                pub const m_iRoundEndWinnerTeam: usize = 0x1808; // int32
                pub const m_eRoundEndReason: usize = 0x180C; // int32
                pub const m_bRoundEndShowTimerDefend: usize = 0x1810; // bool
                pub const m_iRoundEndTimerTime: usize = 0x1814; // int32
                pub const m_sRoundEndFunFactToken: usize = 0x1818; // CUtlString
                pub const m_iRoundEndFunFactPlayerSlot: usize = 0x1820; // CPlayerSlot
                pub const m_iRoundEndFunFactData1: usize = 0x1824; // int32
                pub const m_iRoundEndFunFactData2: usize = 0x1828; // int32
                pub const m_iRoundEndFunFactData3: usize = 0x182C; // int32
                pub const m_sRoundEndMessage: usize = 0x1830; // CUtlString
                pub const m_iRoundEndPlayerCount: usize = 0x1838; // int32
                pub const m_bRoundEndNoMusic: usize = 0x183C; // bool
                pub const m_iRoundEndLegacy: usize = 0x1840; // int32
                pub const m_nRoundEndCount: usize = 0x1844; // uint8
                pub const m_iRoundStartRoundNumber: usize = 0x1848; // int32
                pub const m_nRoundStartCount: usize = 0x184C; // uint8
                pub const m_flLastPerfSampleTime: usize = 0x5858; // float64
                pub const m_bSkipNextServerPerfSample: usize = 0x5860; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSTakeDamageInfoAPI {
            }
            // Parent: None
            // Fields count: 1
            pub mod CCSGameModeRules {
                pub const __m_pChainEntity: usize = 0x8; // CNetworkVarChainer
            }
            // Parent: CCSGameModeRules
            // Fields count: 0
            pub mod CCSGameModeRules_Noop {
            }
            // Parent: CBasePulseGraphInstance
            // Fields count: 0
            pub mod CCSGameModeScript {
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSGameModeScript_ConVars {
            }
            // Parent: CCSGameModeRules
            // Fields count: 1
            pub mod CCSGameModeRules_ArmsRace {
                pub const m_WeaponSequence: usize = 0x38; // CNetworkUtlVectorBase<CUtlString>
            }
            // Parent: CCSGameModeScript
            // Fields count: 1
            pub mod CCSArmsRaceScript {
                pub const m_pOuter: usize = 0xD8; // CCSGameModeRules_ArmsRace*
            }
            // Parent: CCSGameModeRules
            // Fields count: 3
            pub mod CCSGameModeRules_Deathmatch {
                pub const m_flDMBonusStartTime: usize = 0x38; // GameTime_t
                pub const m_flDMBonusTimeLength: usize = 0x3C; // float32
                pub const m_nDMBonusWeaponLoadoutSlot: usize = 0x40; // int16
            }
            // Parent: CCSGameModeScript
            // Fields count: 1
            pub mod CCSDeathmatchScript {
                pub const m_pOuter: usize = 0xD8; // CCSGameModeRules_Deathmatch*
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSDeathmatchScript_ConVars {
            }
            // Parent: None
            // Fields count: 5
            pub mod CRetakeGameRules {
                pub const m_nMatchSeed: usize = 0xF8; // int32
                pub const m_bBlockersPresent: usize = 0xFC; // bool
                pub const m_bRoundInProgress: usize = 0xFD; // bool
                pub const m_iFirstSecondHalfRound: usize = 0x100; // int32
                pub const m_iBombSite: usize = 0x104; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod QuestProgress {
            }
            // Parent: None
            // Fields count: 13
            pub mod CSPerRoundStats_t {
                pub const m_iKills: usize = 0x30; // int32
                pub const m_iDeaths: usize = 0x34; // int32
                pub const m_iAssists: usize = 0x38; // int32
                pub const m_iDamage: usize = 0x3C; // int32
                pub const m_iEquipmentValue: usize = 0x40; // int32
                pub const m_iMoneySaved: usize = 0x44; // int32
                pub const m_iKillReward: usize = 0x48; // int32
                pub const m_iLiveTime: usize = 0x4C; // int32
                pub const m_iHeadShotKills: usize = 0x50; // int32
                pub const m_iObjective: usize = 0x54; // int32
                pub const m_iCashEarned: usize = 0x58; // int32
                pub const m_iUtilityDamage: usize = 0x5C; // int32
                pub const m_iEnemiesFlashed: usize = 0x60; // int32
            }
            // Parent: CSPerRoundStats_t
            // Fields count: 21
            pub mod CSMatchStats_t {
                pub const m_iEnemy5Ks: usize = 0x68; // int32
                pub const m_iEnemy4Ks: usize = 0x6C; // int32
                pub const m_iEnemy3Ks: usize = 0x70; // int32
                pub const m_iEnemyKnifeKills: usize = 0x74; // int32
                pub const m_iEnemyTaserKills: usize = 0x78; // int32
                pub const m_iEnemy2Ks: usize = 0x7C; // int32
                pub const m_iUtility_Count: usize = 0x80; // int32
                pub const m_iUtility_Successes: usize = 0x84; // int32
                pub const m_iUtility_Enemies: usize = 0x88; // int32
                pub const m_iFlash_Count: usize = 0x8C; // int32
                pub const m_iFlash_Successes: usize = 0x90; // int32
                pub const m_nHealthPointsRemovedTotal: usize = 0x94; // int32
                pub const m_nHealthPointsDealtTotal: usize = 0x98; // int32
                pub const m_nShotsFiredTotal: usize = 0x9C; // int32
                pub const m_nShotsOnTargetTotal: usize = 0xA0; // int32
                pub const m_i1v1Count: usize = 0xA4; // int32
                pub const m_i1v1Wins: usize = 0xA8; // int32
                pub const m_i1v2Count: usize = 0xAC; // int32
                pub const m_i1v2Wins: usize = 0xB0; // int32
                pub const m_iEntryCount: usize = 0xB4; // int32
                pub const m_iEntryWins: usize = 0xB8; // int32
            }
            // Parent: CBaseEntity
            // Fields count: 8
            pub mod CCSGO_TeamPreviewCharacterPosition {
                pub const m_nVariant: usize = 0x4C0; // int32
                pub const m_nRandom: usize = 0x4C4; // int32
                pub const m_nOrdinal: usize = 0x4C8; // int32
                pub const m_sWeaponName: usize = 0x4D0; // CUtlString
                pub const m_xuid: usize = 0x4D8; // uint64
                pub const m_agentItem: usize = 0x4E0; // CEconItemView
                pub const m_glovesItem: usize = 0x758; // CEconItemView
                pub const m_weaponItem: usize = 0x9D0; // CEconItemView
            }
            // Parent: CCSGO_TeamPreviewCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamSelectCharacterPosition {
            }
            // Parent: CCSGO_TeamSelectCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamSelectTerroristPosition {
            }
            // Parent: CCSGO_TeamSelectCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamSelectCounterTerroristPosition {
            }
            // Parent: CCSGO_TeamPreviewCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamIntroCharacterPosition {
            }
            // Parent: CCSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamIntroTerroristPosition {
            }
            // Parent: CCSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_TeamIntroCounterTerroristPosition {
            }
            // Parent: CCSGO_TeamIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroCharacterPosition {
            }
            // Parent: CCSGO_WingmanIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroTerroristPosition {
            }
            // Parent: CCSGO_WingmanIntroCharacterPosition
            // Fields count: 0
            pub mod CCSGO_WingmanIntroCounterTerroristPosition {
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CCSMinimapBoundary {
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSGOPlayerAnimGraphState {
            }
            // Parent: CBaseEntity
            // Fields count: 5
            pub mod CPlayerPing {
                pub const m_hPlayer: usize = 0x4C8; // CHandle<CCSPlayerPawn>
                pub const m_hPingedEntity: usize = 0x4CC; // CHandle<CBaseEntity>
                pub const m_iType: usize = 0x4D0; // int32
                pub const m_bUrgent: usize = 0x4D4; // bool
                pub const m_szPlaceName: usize = 0x4D5; // char[18]
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 2
            pub mod CCSPlayer_PingServices {
                pub const m_flPlayerPingTokens: usize = 0x40; // GameTime_t[5]
                pub const m_hPlayerPing: usize = 0x54; // CHandle<CBaseEntity>
            }
            // Parent: CBaseEntity
            // Fields count: 10
            pub mod CCSPlayerResource {
                pub const m_bHostageAlive: usize = 0x4C0; // bool[12]
                pub const m_isHostageFollowingSomeone: usize = 0x4CC; // bool[12]
                pub const m_iHostageEntityIDs: usize = 0x4D8; // CEntityIndex[12]
                pub const m_bombsiteCenterA: usize = 0x508; // 
                pub const m_bombsiteCenterB: usize = 0x514; // 
                pub const m_hostageRescueX: usize = 0x520; // int32[4]
                pub const m_hostageRescueY: usize = 0x530; // int32[4]
                pub const m_hostageRescueZ: usize = 0x540; // int32[4]
                pub const m_bEndMatchNextMapAllVoted: usize = 0x550; // bool
                pub const m_foundGoalPositions: usize = 0x551; // bool
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSPlayerControllerAPI {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CPlayer_ViewModelServices {
            }
            // Parent: CPlayer_CameraServices
            // Fields count: 7
            pub mod CCSPlayerBase_CameraServices {
                pub const m_iFOV: usize = 0x170; // uint32
                pub const m_iFOVStart: usize = 0x174; // uint32
                pub const m_flFOVTime: usize = 0x178; // GameTime_t
                pub const m_flFOVRate: usize = 0x17C; // float32
                pub const m_hZoomOwner: usize = 0x180; // CHandle<CBaseEntity>
                pub const m_hTriggerFogList: usize = 0x188; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_hLastFogTrigger: usize = 0x1A0; // CHandle<CBaseEntity>
            }
            // Parent: None
            // Fields count: 2
            pub mod WeaponPurchaseCount_t {
                pub const m_nItemDefIndex: usize = 0x30; // uint16
                pub const m_nCount: usize = 0x32; // uint16
            }
            // Parent: None
            // Fields count: 1
            pub mod WeaponPurchaseTracker_t {
                pub const m_weaponPurchases: usize = 0x8; // CUtlVectorEmbeddedNetworkVar<WeaponPurchaseCount_t>
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 4
            pub mod CCSPlayer_ActionTrackingServices {
                pub const m_hLastWeaponBeforeC4AutoSwitch: usize = 0x208; // CHandle<CBasePlayerWeapon>
                pub const m_bIsRescuing: usize = 0x23C; // bool
                pub const m_weaponPurchasesThisMatch: usize = 0x240; // WeaponPurchaseTracker_t
                pub const m_weaponPurchasesThisRound: usize = 0x298; // WeaponPurchaseTracker_t
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 1
            pub mod CCSPlayer_BulletServices {
                pub const m_totalHitsOnServer: usize = 0x40; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod SellbackPurchaseEntry_t {
                pub const m_unDefIdx: usize = 0x30; // uint16
                pub const m_nCost: usize = 0x34; // int32
                pub const m_nPrevArmor: usize = 0x38; // int32
                pub const m_bPrevHelmet: usize = 0x3C; // bool
                pub const m_hItem: usize = 0x40; // CEntityHandle
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 1
            pub mod CCSPlayer_BuyServices {
                pub const m_vecSellbackPurchaseEntries: usize = 0xC8; // CUtlVectorEmbeddedNetworkVar<SellbackPurchaseEntry_t>
            }
            // Parent: CCSPlayerBase_CameraServices
            // Fields count: 0
            pub mod CCSPlayer_CameraServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 2
            pub mod CCSPlayer_HostageServices {
                pub const m_hCarriedHostage: usize = 0x40; // CHandle<CBaseEntity>
                pub const m_hCarriedHostageProp: usize = 0x44; // CHandle<CBaseEntity>
            }
            // Parent: CPlayer_ItemServices
            // Fields count: 3
            pub mod CCSPlayer_ItemServices {
                pub const m_bHasDefuser: usize = 0x40; // bool
                pub const m_bHasHelmet: usize = 0x41; // bool
                pub const m_bHasHeavyArmor: usize = 0x42; // bool
            }
            // Parent: CPlayer_MovementServices_Humanoid
            // Fields count: 39
            pub mod CCSPlayer_MovementServices {
                pub const m_flMaxFallVelocity: usize = 0x228; // float32
                pub const m_vecLadderNormal: usize = 0x22C; // 
                pub const m_nLadderSurfacePropIndex: usize = 0x238; // int32
                pub const m_flDuckAmount: usize = 0x23C; // float32
                pub const m_flDuckSpeed: usize = 0x240; // float32
                pub const m_bDuckOverride: usize = 0x244; // bool
                pub const m_bDesiresDuck: usize = 0x245; // bool
                pub const m_flDuckOffset: usize = 0x248; // float32
                pub const m_nDuckTimeMsecs: usize = 0x24C; // uint32
                pub const m_nDuckJumpTimeMsecs: usize = 0x250; // uint32
                pub const m_nJumpTimeMsecs: usize = 0x254; // uint32
                pub const m_flLastDuckTime: usize = 0x258; // float32
                pub const m_vecLastPositionAtFullCrouchSpeed: usize = 0x268; // Vector2D
                pub const m_duckUntilOnGround: usize = 0x270; // bool
                pub const m_bHasWalkMovedSinceLastJump: usize = 0x271; // bool
                pub const m_bInStuckTest: usize = 0x272; // bool
                pub const m_flStuckCheckTime: usize = 0x280; // 
                pub const m_nTraceCount: usize = 0x480; // int32
                pub const m_StuckLast: usize = 0x484; // int32
                pub const m_bSpeedCropped: usize = 0x488; // bool
                pub const m_nOldWaterLevel: usize = 0x48C; // int32
                pub const m_flWaterEntryTime: usize = 0x490; // float32
                pub const m_vecForward: usize = 0x494; // 
                pub const m_vecLeft: usize = 0x4A0; // 
                pub const m_vecUp: usize = 0x4AC; // 
                pub const m_nGameCodeHasMovedPlayerAfterCommand: usize = 0x4B8; // int32
                pub const m_bMadeFootstepNoise: usize = 0x4BC; // bool
                pub const m_iFootsteps: usize = 0x4C0; // int32
                pub const m_bOldJumpPressed: usize = 0x4C4; // bool
                pub const m_flJumpPressedTime: usize = 0x4C8; // float32
                pub const m_flJumpUntil: usize = 0x4CC; // float32
                pub const m_flJumpVel: usize = 0x4D0; // float32
                pub const m_fStashGrenadeParameterWhen: usize = 0x4D4; // GameTime_t
                pub const m_nButtonDownMaskPrev: usize = 0x4D8; // uint64
                pub const m_flOffsetTickCompleteTime: usize = 0x4E0; // float32
                pub const m_flOffsetTickStashedSpeed: usize = 0x4E4; // float32
                pub const m_flStamina: usize = 0x4E8; // float32
                pub const m_flHeightAtJumpStart: usize = 0x4EC; // float32
                pub const m_flMaxJumpHeightThisJump: usize = 0x4F0; // float32
            }
            // Parent: CPlayer_UseServices
            // Fields count: 4
            pub mod CCSPlayer_UseServices {
                pub const m_hLastKnownUseEntity: usize = 0x40; // CHandle<CBaseEntity>
                pub const m_flLastUseTimeStamp: usize = 0x44; // GameTime_t
                pub const m_flTimeStartedHoldingUse: usize = 0x48; // GameTime_t
                pub const m_flTimeLastUsedWindow: usize = 0x4C; // GameTime_t
            }
            // Parent: CPlayer_ViewModelServices
            // Fields count: 1
            pub mod CCSPlayer_ViewModelServices {
                pub const m_hViewModel: usize = 0x40; // CHandle<CBaseViewModel>[3]
            }
            // Parent: CPlayer_WaterServices
            // Fields count: 6
            pub mod CCSPlayer_WaterServices {
                pub const m_NextDrownDamageTime: usize = 0x40; // float32
                pub const m_nDrownDmgRate: usize = 0x44; // int32
                pub const m_AirFinishedTime: usize = 0x48; // GameTime_t
                pub const m_flWaterJumpTime: usize = 0x4C; // float32
                pub const m_vecWaterJumpVel: usize = 0x50; // 
                pub const m_flSwimSoundTime: usize = 0x5C; // float32
            }
            // Parent: CPlayer_WeaponServices
            // Fields count: 14
            pub mod CCSPlayer_WeaponServices {
                pub const m_flNextAttack: usize = 0xA8; // GameTime_t
                pub const m_bIsLookingAtWeapon: usize = 0xAC; // bool
                pub const m_bIsHoldingLookAtWeapon: usize = 0xAD; // bool
                pub const m_hSavedWeapon: usize = 0xB0; // CHandle<CBasePlayerWeapon>
                pub const m_nTimeToMelee: usize = 0xB4; // int32
                pub const m_nTimeToSecondary: usize = 0xB8; // int32
                pub const m_nTimeToPrimary: usize = 0xBC; // int32
                pub const m_nTimeToSniperRifle: usize = 0xC0; // int32
                pub const m_bIsBeingGivenItem: usize = 0xC4; // bool
                pub const m_bIsPickingUpItemWithUse: usize = 0xC5; // bool
                pub const m_bPickedUpWeapon: usize = 0xC6; // bool
                pub const m_bDisableAutoDeploy: usize = 0xC7; // bool
                pub const m_nOldShootPositionHistoryCount: usize = 0xC8; // uint32
                pub const m_nOldInputHistoryCount: usize = 0x460; // uint32
            }
            // Parent: CPlayer_ObserverServices
            // Fields count: 0
            pub mod CCSObserver_ObserverServices {
            }
            // Parent: CCSPlayerBase_CameraServices
            // Fields count: 0
            pub mod CCSObserver_CameraServices {
            }
            // Parent: CPlayer_MovementServices
            // Fields count: 0
            pub mod CCSObserver_MovementServices {
            }
            // Parent: CPlayer_UseServices
            // Fields count: 0
            pub mod CCSObserver_UseServices {
            }
            // Parent: CPlayer_ViewModelServices
            // Fields count: 0
            pub mod CCSObserver_ViewModelServices {
            }
            // Parent: None
            // Fields count: 5
            pub mod CSAdditionalPerRoundStats_t {
                pub const m_numChickensKilled: usize = 0x0; // int32
                pub const m_killsWhileBlind: usize = 0x4; // int32
                pub const m_bombCarrierkills: usize = 0x8; // int32
                pub const m_iBurnDamageInflicted: usize = 0xC; // int32
                pub const m_iDinks: usize = 0x10; // int32
            }
            // Parent: CSAdditionalPerRoundStats_t
            // Fields count: 12
            pub mod CSAdditionalMatchStats_t {
                pub const m_numRoundsSurvived: usize = 0x14; // int32
                pub const m_maxNumRoundsSurvived: usize = 0x18; // int32
                pub const m_numRoundsSurvivedTotal: usize = 0x1C; // int32
                pub const m_iRoundsWonWithoutPurchase: usize = 0x20; // int32
                pub const m_iRoundsWonWithoutPurchaseTotal: usize = 0x24; // int32
                pub const m_numFirstKills: usize = 0x28; // int32
                pub const m_numClutchKills: usize = 0x2C; // int32
                pub const m_numPistolKills: usize = 0x30; // int32
                pub const m_numSniperKills: usize = 0x34; // int32
                pub const m_iNumSuicides: usize = 0x38; // int32
                pub const m_iNumTeamKills: usize = 0x3C; // int32
                pub const m_iTeamDamage: usize = 0x40; // int32
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 5
            pub mod CCSPlayerController_ActionTrackingServices {
                pub const m_perRoundStats: usize = 0x40; // CUtlVectorEmbeddedNetworkVar<CSPerRoundStats_t>
                pub const m_matchStats: usize = 0x90; // CSMatchStats_t
                pub const m_iNumRoundKills: usize = 0x150; // int32
                pub const m_iNumRoundKillsHeadshots: usize = 0x154; // int32
                pub const m_unTotalRoundDamageDealt: usize = 0x158; // uint32
            }
            // Parent: None
            // Fields count: 14
            pub mod CDamageRecord {
                pub const m_PlayerDamager: usize = 0x28; // CHandle<CCSPlayerPawnBase>
                pub const m_PlayerRecipient: usize = 0x2C; // CHandle<CCSPlayerPawnBase>
                pub const m_hPlayerControllerDamager: usize = 0x30; // CHandle<CCSPlayerController>
                pub const m_hPlayerControllerRecipient: usize = 0x34; // CHandle<CCSPlayerController>
                pub const m_szPlayerDamagerName: usize = 0x38; // CUtlString
                pub const m_szPlayerRecipientName: usize = 0x40; // CUtlString
                pub const m_DamagerXuid: usize = 0x48; // uint64
                pub const m_RecipientXuid: usize = 0x50; // uint64
                pub const m_iDamage: usize = 0x58; // int32
                pub const m_iActualHealthRemoved: usize = 0x5C; // int32
                pub const m_iNumHits: usize = 0x60; // int32
                pub const m_iLastBulletUpdate: usize = 0x64; // int32
                pub const m_bIsOtherEnemy: usize = 0x68; // bool
                pub const m_killType: usize = 0x69; // EKillTypes_t
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 2
            pub mod CCSPlayerController_DamageServices {
                pub const m_nSendUpdate: usize = 0x40; // int32
                pub const m_DamageList: usize = 0x48; // CUtlVectorEmbeddedNetworkVar<CDamageRecord>
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 6
            pub mod CCSPlayerController_InGameMoneyServices {
                pub const m_bReceivesMoneyNextRound: usize = 0x40; // bool
                pub const m_iAccountMoneyEarnedForNextRound: usize = 0x44; // int32
                pub const m_iAccount: usize = 0x48; // int32
                pub const m_iStartAccount: usize = 0x4C; // int32
                pub const m_iTotalCashSpent: usize = 0x50; // int32
                pub const m_iCashSpentThisRound: usize = 0x54; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod ServerAuthoritativeWeaponSlot_t {
                pub const unClass: usize = 0x28; // uint16
                pub const unSlot: usize = 0x2A; // uint16
                pub const unItemDefIdx: usize = 0x2C; // uint16
            }
            // Parent: CPlayerControllerComponent
            // Fields count: 9
            pub mod CCSPlayerController_InventoryServices {
                pub const m_unMusicID: usize = 0x40; // uint16
                pub const m_rank: usize = 0x44; // MedalRank_t[6]
                pub const m_nPersonaDataPublicLevel: usize = 0x5C; // int32
                pub const m_nPersonaDataPublicCommendsLeader: usize = 0x60; // int32
                pub const m_nPersonaDataPublicCommendsTeacher: usize = 0x64; // int32
                pub const m_nPersonaDataPublicCommendsFriendly: usize = 0x68; // int32
                pub const m_nPersonaDataXpTrailLevel: usize = 0x6C; // int32
                pub const m_unEquippedPlayerSprayIDs: usize = 0xF48; // uint32[1]
                pub const m_vecServerAuthoritativeWeaponSlots: usize = 0xF50; // CUtlVectorEmbeddedNetworkVar<ServerAuthoritativeWeaponSlot_t>
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSWeaponBaseVDataAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSWeaponBaseAPI {
            }
            // Parent: None
            // Fields count: 1
            pub mod CFiringModeFloat {
                pub const m_flValues: usize = 0x0; // float32[2]
            }
            // Parent: None
            // Fields count: 1
            pub mod CFiringModeInt {
                pub const m_nValues: usize = 0x0; // int32[2]
            }
            // Parent: None
            // Fields count: 4
            pub mod CIronSightController {
                pub const m_bIronSightAvailable: usize = 0x8; // bool
                pub const m_flIronSightAmount: usize = 0xC; // float32
                pub const m_flIronSightAmountGained: usize = 0x10; // float32
                pub const m_flIronSightAmountBiased: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CHintMessage {
                pub const m_hintString: usize = 0x0; // char*
                pub const m_args: usize = 0x8; // CUtlVector<char*>
                pub const m_duration: usize = 0x20; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod CHintMessageQueue {
                pub const m_tmMessageEnd: usize = 0x0; // float32
                pub const m_messages: usize = 0x8; // CUtlVector<CHintMessage*>
                pub const m_pPlayerController: usize = 0x20; // CBasePlayerController*
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSObserverPawnAPI {
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSPlayerPawnAPI {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 0
            pub mod CCSPlayer_DamageReactServices {
            }
            // Parent: CPlayerPawnComponent
            // Fields count: 5
            pub mod CCSPlayer_RadioServices {
                pub const m_flGotHostageTalkTimer: usize = 0x40; // GameTime_t
                pub const m_flDefusingTalkTimer: usize = 0x44; // GameTime_t
                pub const m_flC4PlantTalkTimer: usize = 0x48; // GameTime_t
                pub const m_flRadioTokenSlots: usize = 0x4C; // GameTime_t[3]
                pub const m_bIgnoreRadio: usize = 0x58; // bool
            }
            // Parent: None
            // Fields count: 6
            pub mod CBaseIssue {
                pub const m_szTypeString: usize = 0x20; // char[64]
                pub const m_szDetailsString: usize = 0x60; // char[260]
                pub const m_iNumYesVotes: usize = 0x164; // int32
                pub const m_iNumNoVotes: usize = 0x168; // int32
                pub const m_iNumPotentialVotes: usize = 0x16C; // int32
                pub const m_pVoteController: usize = 0x170; // CVoteController*
            }
            // Parent: CBaseEntity
            // Fields count: 14
            pub mod CVoteController {
                pub const m_iActiveIssueIndex: usize = 0x4C0; // int32
                pub const m_iOnlyTeamToVote: usize = 0x4C4; // int32
                pub const m_nVoteOptionCount: usize = 0x4C8; // int32[5]
                pub const m_nPotentialVotes: usize = 0x4DC; // int32
                pub const m_bIsYesNoVote: usize = 0x4E0; // bool
                pub const m_acceptingVotesTimer: usize = 0x4E8; // CountdownTimer
                pub const m_executeCommandTimer: usize = 0x500; // CountdownTimer
                pub const m_resetVoteTimer: usize = 0x518; // CountdownTimer
                pub const m_nVotesCast: usize = 0x530; // int32[64]
                pub const m_playerHoldingVote: usize = 0x630; // CPlayerSlot
                pub const m_playerOverrideForVote: usize = 0x634; // CPlayerSlot
                pub const m_nHighestCountIndex: usize = 0x638; // int32
                pub const m_potentialIssues: usize = 0x640; // CUtlVector<CBaseIssue*>
                pub const m_VoteOptions: usize = 0x658; // CUtlVector<char*>
            }
            // Parent: CBaseEntity
            // Fields count: 24
            pub mod CMapVetoPickController {
                pub const m_bPlayedIntroVcd: usize = 0x4C0; // bool
                pub const m_bNeedToPlayFiveSecondsRemaining: usize = 0x4C1; // bool
                pub const m_dblPreMatchDraftSequenceTime: usize = 0x4E0; // float64
                pub const m_bPreMatchDraftStateChanged: usize = 0x4E8; // bool
                pub const m_nDraftType: usize = 0x4EC; // int32
                pub const m_nTeamWinningCoinToss: usize = 0x4F0; // int32
                pub const m_nTeamWithFirstChoice: usize = 0x4F4; // int32[64]
                pub const m_nVoteMapIdsList: usize = 0x5F4; // int32[7]
                pub const m_nAccountIDs: usize = 0x610; // int32[64]
                pub const m_nMapId0: usize = 0x710; // int32[64]
                pub const m_nMapId1: usize = 0x810; // int32[64]
                pub const m_nMapId2: usize = 0x910; // int32[64]
                pub const m_nMapId3: usize = 0xA10; // int32[64]
                pub const m_nMapId4: usize = 0xB10; // int32[64]
                pub const m_nMapId5: usize = 0xC10; // int32[64]
                pub const m_nStartingSide0: usize = 0xD10; // int32[64]
                pub const m_nCurrentPhase: usize = 0xE10; // int32
                pub const m_nPhaseStartTick: usize = 0xE14; // int32
                pub const m_nPhaseDurationTicks: usize = 0xE18; // int32
                pub const m_OnMapVetoed: usize = 0xE20; // CEntityOutputTemplate<CUtlSymbolLarge>
                pub const m_OnMapPicked: usize = 0xE48; // CEntityOutputTemplate<CUtlSymbolLarge>
                pub const m_OnSidesPicked: usize = 0xE70; // CEntityOutputTemplate<int32>
                pub const m_OnNewPhaseStarted: usize = 0xE98; // CEntityOutputTemplate<int32>
                pub const m_OnLevelTransition: usize = 0xEC0; // CEntityOutputTemplate<int32>
            }
            // Parent: None
            // Fields count: 0
            pub mod CCSPulseServerFuncs_Globals {
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CLogicEventListener {
                pub const m_strEventName: usize = 0x4D0; // CUtlString
                pub const m_bIsEnabled: usize = 0x4D8; // bool
                pub const m_nTeam: usize = 0x4DC; // int32
                pub const m_OnEventFired: usize = 0x4E0; // CEntityIOOutput
            }
            // Parent: CAnimGraphControllerBase
            // Fields count: 1
            pub mod CChicken_GraphController {
                pub const m_pszActivity: usize = 0x18; // CAnimGraphParamRef<char*>
            }
            // Parent: None
            // Fields count: 13
            pub mod CBot {
                pub const m_pController: usize = 0x10; // CCSPlayerController*
                pub const m_pPlayer: usize = 0x18; // CCSPlayerPawn*
                pub const m_bHasSpawned: usize = 0x20; // bool
                pub const m_id: usize = 0x24; // uint32
                pub const m_isRunning: usize = 0xB0; // bool
                pub const m_isCrouching: usize = 0xB1; // bool
                pub const m_forwardSpeed: usize = 0xB4; // float32
                pub const m_leftSpeed: usize = 0xB8; // float32
                pub const m_verticalSpeed: usize = 0xBC; // float32
                pub const m_buttonFlags: usize = 0xC0; // uint64
                pub const m_jumpTimestamp: usize = 0xC8; // float32
                pub const m_viewForward: usize = 0xCC; // 
                pub const m_postureStackIndex: usize = 0xE8; // int32
            }
            // Parent: None
            // Fields count: 0
            pub mod CBtNode {
            }
            // Parent: CBtNode
            // Fields count: 0
            pub mod CBtNodeDecorator {
            }
            // Parent: CBtNode
            // Fields count: 0
            pub mod CBtNodeComposite {
            }
            // Parent: CBtNode
            // Fields count: 12
            pub mod CBtActionAim {
                pub const m_szSensorInputKey: usize = 0x68; // CUtlString
                pub const m_szAimReadyKey: usize = 0x80; // CUtlString
                pub const m_flZoomCooldownTimestamp: usize = 0x88; // float32
                pub const m_bDoneAiming: usize = 0x8C; // bool
                pub const m_flLerpStartTime: usize = 0x90; // float32
                pub const m_flNextLookTargetLerpTime: usize = 0x94; // float32
                pub const m_flPenaltyReductionRatio: usize = 0x98; // float32
                pub const m_NextLookTarget: usize = 0x9C; // QAngle
                pub const m_AimTimer: usize = 0xA8; // CountdownTimer
                pub const m_SniperHoldTimer: usize = 0xC0; // CountdownTimer
                pub const m_FocusIntervalTimer: usize = 0xD8; // CountdownTimer
                pub const m_bAcquired: usize = 0xF0; // bool
            }
            // Parent: CBtNode
            // Fields count: 4
            pub mod CBtActionCombatPositioning {
                pub const m_szSensorInputKey: usize = 0x68; // CUtlString
                pub const m_szIsAttackingKey: usize = 0x80; // CUtlString
                pub const m_ActionTimer: usize = 0x88; // CountdownTimer
                pub const m_bCrouching: usize = 0xA0; // bool
            }
            // Parent: CBtNode
            // Fields count: 14
            pub mod CBtActionMoveTo {
                pub const m_szDestinationInputKey: usize = 0x60; // CUtlString
                pub const m_szHidingSpotInputKey: usize = 0x68; // CUtlString
                pub const m_szThreatInputKey: usize = 0x70; // CUtlString
                pub const m_vecDestination: usize = 0x78; // 
                pub const m_bAutoLookAdjust: usize = 0x84; // bool
                pub const m_bComputePath: usize = 0x85; // bool
                pub const m_flDamagingAreasPenaltyCost: usize = 0x88; // float32
                pub const m_CheckApproximateCornersTimer: usize = 0x90; // CountdownTimer
                pub const m_CheckHighPriorityItem: usize = 0xA8; // CountdownTimer
                pub const m_RepathTimer: usize = 0xC0; // CountdownTimer
                pub const m_flArrivalEpsilon: usize = 0xD8; // float32
                pub const m_flAdditionalArrivalEpsilon2D: usize = 0xDC; // float32
                pub const m_flHidingSpotCheckDistanceThreshold: usize = 0xE0; // float32
                pub const m_flNearestAreaDistanceThreshold: usize = 0xE4; // float32
            }
            // Parent: CBtNode
            // Fields count: 1
            pub mod CBtActionParachutePositioning {
                pub const m_ActionTimer: usize = 0x58; // CountdownTimer
            }
            // Parent: CBtNodeDecorator
            // Fields count: 1
            pub mod CBtNodeCondition {
                pub const m_bNegated: usize = 0x58; // bool
            }
            // Parent: CBtNodeCondition
            // Fields count: 3
            pub mod CBtNodeConditionInactive {
                pub const m_flRoundStartThresholdSeconds: usize = 0x78; // float32
                pub const m_flSensorInactivityThresholdSeconds: usize = 0x7C; // float32
                pub const m_SensorInactivityTimer: usize = 0x80; // CountdownTimer
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CPointEntity {
            }
            // Parent: CBaseEntity
            // Fields count: 24
            pub mod CEnvCombinedLightProbeVolume {
                pub const m_Color: usize = 0x1518; // Color
                pub const m_flBrightness: usize = 0x151C; // float32
                pub const m_hCubemapTexture: usize = 0x1520; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bCustomCubemapTexture: usize = 0x1528; // bool
                pub const m_hLightProbeTexture: usize = 0x1530; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightIndicesTexture: usize = 0x1538; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightScalarsTexture: usize = 0x1540; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightShadowsTexture: usize = 0x1548; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vBoxMins: usize = 0x1550; // 
                pub const m_vBoxMaxs: usize = 0x155C; // 
                pub const m_bMoveable: usize = 0x1568; // bool
                pub const m_nHandshake: usize = 0x156C; // int32
                pub const m_nEnvCubeMapArrayIndex: usize = 0x1570; // int32
                pub const m_nPriority: usize = 0x1574; // int32
                pub const m_bStartDisabled: usize = 0x1578; // bool
                pub const m_flEdgeFadeDist: usize = 0x157C; // float32
                pub const m_vEdgeFadeDists: usize = 0x1580; // 
                pub const m_nLightProbeSizeX: usize = 0x158C; // int32
                pub const m_nLightProbeSizeY: usize = 0x1590; // int32
                pub const m_nLightProbeSizeZ: usize = 0x1594; // int32
                pub const m_nLightProbeAtlasX: usize = 0x1598; // int32
                pub const m_nLightProbeAtlasY: usize = 0x159C; // int32
                pub const m_nLightProbeAtlasZ: usize = 0x15A0; // int32
                pub const m_bEnabled: usize = 0x15B9; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 18
            pub mod CEnvCubemap {
                pub const m_hCubemapTexture: usize = 0x540; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bCustomCubemapTexture: usize = 0x548; // bool
                pub const m_flInfluenceRadius: usize = 0x54C; // float32
                pub const m_vBoxProjectMins: usize = 0x550; // 
                pub const m_vBoxProjectMaxs: usize = 0x55C; // 
                pub const m_bMoveable: usize = 0x568; // bool
                pub const m_nHandshake: usize = 0x56C; // int32
                pub const m_nEnvCubeMapArrayIndex: usize = 0x570; // int32
                pub const m_nPriority: usize = 0x574; // int32
                pub const m_flEdgeFadeDist: usize = 0x578; // float32
                pub const m_vEdgeFadeDists: usize = 0x57C; // 
                pub const m_flDiffuseScale: usize = 0x588; // float32
                pub const m_bStartDisabled: usize = 0x58C; // bool
                pub const m_bDefaultEnvMap: usize = 0x58D; // bool
                pub const m_bDefaultSpecEnvMap: usize = 0x58E; // bool
                pub const m_bIndoorCubeMap: usize = 0x58F; // bool
                pub const m_bCopyDiffuseFromDefaultCubemap: usize = 0x590; // bool
                pub const m_bEnabled: usize = 0x5A0; // bool
            }
            // Parent: CEnvCubemap
            // Fields count: 0
            pub mod CEnvCubemapBox {
            }
            // Parent: CBaseEntity
            // Fields count: 18
            pub mod CEnvCubemapFog {
                pub const m_flEndDistance: usize = 0x4C0; // float32
                pub const m_flStartDistance: usize = 0x4C4; // float32
                pub const m_flFogFalloffExponent: usize = 0x4C8; // float32
                pub const m_bHeightFogEnabled: usize = 0x4CC; // bool
                pub const m_flFogHeightWidth: usize = 0x4D0; // float32
                pub const m_flFogHeightEnd: usize = 0x4D4; // float32
                pub const m_flFogHeightStart: usize = 0x4D8; // float32
                pub const m_flFogHeightExponent: usize = 0x4DC; // float32
                pub const m_flLODBias: usize = 0x4E0; // float32
                pub const m_bActive: usize = 0x4E4; // bool
                pub const m_bStartDisabled: usize = 0x4E5; // bool
                pub const m_flFogMaxOpacity: usize = 0x4E8; // float32
                pub const m_nCubemapSourceType: usize = 0x4EC; // int32
                pub const m_hSkyMaterial: usize = 0x4F0; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_iszSkyEntity: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_hFogCubemapTexture: usize = 0x500; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_bHasHeightFogEnd: usize = 0x508; // bool
                pub const m_bFirstTime: usize = 0x509; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 16
            pub mod CGradientFog {
                pub const m_hGradientFogTexture: usize = 0x4C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_flFogStartDistance: usize = 0x4C8; // float32
                pub const m_flFogEndDistance: usize = 0x4CC; // float32
                pub const m_bHeightFogEnabled: usize = 0x4D0; // bool
                pub const m_flFogStartHeight: usize = 0x4D4; // float32
                pub const m_flFogEndHeight: usize = 0x4D8; // float32
                pub const m_flFarZ: usize = 0x4DC; // float32
                pub const m_flFogMaxOpacity: usize = 0x4E0; // float32
                pub const m_flFogFalloffExponent: usize = 0x4E4; // float32
                pub const m_flFogVerticalExponent: usize = 0x4E8; // float32
                pub const m_fogColor: usize = 0x4EC; // Color
                pub const m_flFogStrength: usize = 0x4F0; // float32
                pub const m_flFadeTime: usize = 0x4F4; // float32
                pub const m_bStartDisabled: usize = 0x4F8; // bool
                pub const m_bIsEnabled: usize = 0x4F9; // bool
                pub const m_bGradientFogNeedsTextures: usize = 0x4FA; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 17
            pub mod CEnvLightProbeVolume {
                pub const m_hLightProbeTexture: usize = 0x1498; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightIndicesTexture: usize = 0x14A0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightScalarsTexture: usize = 0x14A8; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hLightProbeDirectLightShadowsTexture: usize = 0x14B0; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vBoxMins: usize = 0x14B8; // 
                pub const m_vBoxMaxs: usize = 0x14C4; // 
                pub const m_bMoveable: usize = 0x14D0; // bool
                pub const m_nHandshake: usize = 0x14D4; // int32
                pub const m_nPriority: usize = 0x14D8; // int32
                pub const m_bStartDisabled: usize = 0x14DC; // bool
                pub const m_nLightProbeSizeX: usize = 0x14E0; // int32
                pub const m_nLightProbeSizeY: usize = 0x14E4; // int32
                pub const m_nLightProbeSizeZ: usize = 0x14E8; // int32
                pub const m_nLightProbeAtlasX: usize = 0x14EC; // int32
                pub const m_nLightProbeAtlasY: usize = 0x14F0; // int32
                pub const m_nLightProbeAtlasZ: usize = 0x14F4; // int32
                pub const m_bEnabled: usize = 0x1501; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 6
            pub mod CPlayerVisibility {
                pub const m_flVisibilityStrength: usize = 0x4C0; // float32
                pub const m_flFogDistanceMultiplier: usize = 0x4C4; // float32
                pub const m_flFogMaxDensityMultiplier: usize = 0x4C8; // float32
                pub const m_flFadeTime: usize = 0x4CC; // float32
                pub const m_bStartDisabled: usize = 0x4D0; // bool
                pub const m_bIsEnabled: usize = 0x4D1; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 8
            pub mod CTonemapController2 {
                pub const m_flAutoExposureMin: usize = 0x4C0; // float32
                pub const m_flAutoExposureMax: usize = 0x4C4; // float32
                pub const m_flTonemapPercentTarget: usize = 0x4C8; // float32
                pub const m_flTonemapPercentBrightPixels: usize = 0x4CC; // float32
                pub const m_flTonemapMinAvgLum: usize = 0x4D0; // float32
                pub const m_flExposureAdaptationSpeedUp: usize = 0x4D4; // float32
                pub const m_flExposureAdaptationSpeedDown: usize = 0x4D8; // float32
                pub const m_flTonemapEVSmoothingRange: usize = 0x4DC; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 28
            pub mod CEnvVolumetricFogController {
                pub const m_flScattering: usize = 0x4C0; // float32
                pub const m_flAnisotropy: usize = 0x4C4; // float32
                pub const m_flFadeSpeed: usize = 0x4C8; // float32
                pub const m_flDrawDistance: usize = 0x4CC; // float32
                pub const m_flFadeInStart: usize = 0x4D0; // float32
                pub const m_flFadeInEnd: usize = 0x4D4; // float32
                pub const m_flIndirectStrength: usize = 0x4D8; // float32
                pub const m_nIndirectTextureDimX: usize = 0x4DC; // int32
                pub const m_nIndirectTextureDimY: usize = 0x4E0; // int32
                pub const m_nIndirectTextureDimZ: usize = 0x4E4; // int32
                pub const m_vBoxMins: usize = 0x4E8; // 
                pub const m_vBoxMaxs: usize = 0x4F4; // 
                pub const m_bActive: usize = 0x500; // bool
                pub const m_flStartAnisoTime: usize = 0x504; // GameTime_t
                pub const m_flStartScatterTime: usize = 0x508; // GameTime_t
                pub const m_flStartDrawDistanceTime: usize = 0x50C; // GameTime_t
                pub const m_flStartAnisotropy: usize = 0x510; // float32
                pub const m_flStartScattering: usize = 0x514; // float32
                pub const m_flStartDrawDistance: usize = 0x518; // float32
                pub const m_flDefaultAnisotropy: usize = 0x51C; // float32
                pub const m_flDefaultScattering: usize = 0x520; // float32
                pub const m_flDefaultDrawDistance: usize = 0x524; // float32
                pub const m_bStartDisabled: usize = 0x528; // bool
                pub const m_bEnableIndirect: usize = 0x529; // bool
                pub const m_bIsMaster: usize = 0x52A; // bool
                pub const m_hFogIndirectTexture: usize = 0x530; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_nForceRefreshCount: usize = 0x538; // int32
                pub const m_bFirstTime: usize = 0x53C; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 7
            pub mod CEnvVolumetricFogVolume {
                pub const m_bActive: usize = 0x4C0; // bool
                pub const m_vBoxMins: usize = 0x4C4; // 
                pub const m_vBoxMaxs: usize = 0x4D0; // 
                pub const m_bStartDisabled: usize = 0x4DC; // bool
                pub const m_flStrength: usize = 0x4E0; // float32
                pub const m_nFalloffShape: usize = 0x4E4; // int32
                pub const m_flFalloffExponent: usize = 0x4E8; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CFogController {
                pub const m_fog: usize = 0x4C0; // fogparams_t
                pub const m_bUseAngles: usize = 0x528; // bool
                pub const m_iChangedVariables: usize = 0x52C; // int32
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoTarget {
            }
            // Parent: CServerOnlyPointEntity
            // Fields count: 0
            pub mod CInfoTargetServerOnly {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoParticleTarget {
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CInfoVisibilityBox {
                pub const m_nMode: usize = 0x4C4; // int32
                pub const m_vBoxSize: usize = 0x4C8; // 
                pub const m_bEnabled: usize = 0x4D4; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 7
            pub mod CInfoWorldLayer {
                pub const m_pOutputOnEntitiesSpawned: usize = 0x4C0; // CEntityIOOutput
                pub const m_worldName: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_layerName: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_bWorldLayerVisible: usize = 0x4F8; // bool
                pub const m_bEntitiesSpawned: usize = 0x4F9; // bool
                pub const m_bCreateAsChildSpawnGroup: usize = 0x4FA; // bool
                pub const m_hLayerSpawnGroup: usize = 0x4FC; // uint32
            }
            // Parent: CLogicalEntity
            // Fields count: 8
            pub mod CMultiLightProxy {
                pub const m_iszLightNameFilter: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszLightClassFilter: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_flLightRadiusFilter: usize = 0x4D0; // float32
                pub const m_flBrightnessDelta: usize = 0x4D4; // float32
                pub const m_bPerformScreenFade: usize = 0x4D8; // bool
                pub const m_flTargetBrightnessMultiplier: usize = 0x4DC; // float32
                pub const m_flCurrentBrightnessMultiplier: usize = 0x4E0; // float32
                pub const m_vecLights: usize = 0x4E8; // CUtlVector<CHandle<CLightEntity>>
            }
            // Parent: CBaseEntity
            // Fields count: 25
            pub mod CPointCamera {
                pub const m_FOV: usize = 0x4C0; // float32
                pub const m_Resolution: usize = 0x4C4; // float32
                pub const m_bFogEnable: usize = 0x4C8; // bool
                pub const m_FogColor: usize = 0x4C9; // Color
                pub const m_flFogStart: usize = 0x4D0; // float32
                pub const m_flFogEnd: usize = 0x4D4; // float32
                pub const m_flFogMaxDensity: usize = 0x4D8; // float32
                pub const m_bActive: usize = 0x4DC; // bool
                pub const m_bUseScreenAspectRatio: usize = 0x4DD; // bool
                pub const m_flAspectRatio: usize = 0x4E0; // float32
                pub const m_bNoSky: usize = 0x4E4; // bool
                pub const m_fBrightness: usize = 0x4E8; // float32
                pub const m_flZFar: usize = 0x4EC; // float32
                pub const m_flZNear: usize = 0x4F0; // float32
                pub const m_bCanHLTVUse: usize = 0x4F4; // bool
                pub const m_bDofEnabled: usize = 0x4F5; // bool
                pub const m_flDofNearBlurry: usize = 0x4F8; // float32
                pub const m_flDofNearCrisp: usize = 0x4FC; // float32
                pub const m_flDofFarCrisp: usize = 0x500; // float32
                pub const m_flDofFarBlurry: usize = 0x504; // float32
                pub const m_flDofTiltToGround: usize = 0x508; // float32
                pub const m_TargetFOV: usize = 0x50C; // float32
                pub const m_DegreesPerSecond: usize = 0x510; // float32
                pub const m_bIsOn: usize = 0x514; // bool
                pub const m_pNext: usize = 0x518; // CPointCamera*
            }
            // Parent: CPointCamera
            // Fields count: 1
            pub mod CPointCameraVFOV {
                pub const m_flVerticalFOV: usize = 0x520; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 12
            pub mod CPointTemplate {
                pub const m_iszWorldName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszSource2EntityLumpName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszEntityFilterName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_flTimeoutInterval: usize = 0x4D8; // float32
                pub const m_bAsynchronouslySpawnEntities: usize = 0x4DC; // bool
                pub const m_pOutputOnSpawned: usize = 0x4E0; // CEntityIOOutput
                pub const m_clientOnlyEntityBehavior: usize = 0x508; // PointTemplateClientOnlyEntityBehavior_t
                pub const m_ownerSpawnGroupType: usize = 0x50C; // PointTemplateOwnerSpawnGroupType_t
                pub const m_createdSpawnGroupHandles: usize = 0x510; // CUtlVector<uint32>
                pub const m_SpawnedEntityHandles: usize = 0x528; // CUtlVector<CEntityHandle>
                pub const m_ScriptSpawnCallback: usize = 0x540; // HSCRIPT
                pub const m_ScriptCallbackScope: usize = 0x548; // HSCRIPT
            }
            // Parent: CBaseEntity
            // Fields count: 4
            pub mod CGameGibManager {
                pub const m_bAllowNewGibs: usize = 0x4E0; // bool
                pub const m_iCurrentMaxPieces: usize = 0x4E4; // int32
                pub const m_iMaxPieces: usize = 0x4E8; // int32
                pub const m_iLastFrame: usize = 0x4EC; // int32
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CSoundAreaEntityBase {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_iszSoundAreaType: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_vPos: usize = 0x4D0; // 
            }
            // Parent: CSoundAreaEntityBase
            // Fields count: 1
            pub mod CSoundAreaEntitySphere {
                pub const m_flRadius: usize = 0x4E0; // float32
            }
            // Parent: CSoundAreaEntityBase
            // Fields count: 2
            pub mod CSoundAreaEntityOrientedBox {
                pub const m_vMin: usize = 0x4E0; // 
                pub const m_vMax: usize = 0x4EC; // 
            }
            // Parent: CBaseEntity
            // Fields count: 4
            pub mod CTeam {
                pub const m_aPlayerControllers: usize = 0x4C0; // CNetworkUtlVectorBase<CHandle<CBasePlayerController>>
                pub const m_aPlayers: usize = 0x4D8; // CNetworkUtlVectorBase<CHandle<CBasePlayerPawn>>
                pub const m_iScore: usize = 0x4F0; // int32
                pub const m_szTeamname: usize = 0x4F4; // char[129]
            }
            // Parent: CBaseEntity
            // Fields count: 25
            pub mod CBasePlayerController {
                pub const m_nInButtonsWhichAreToggles: usize = 0x4C8; // uint64
                pub const m_nTickBase: usize = 0x4D0; // uint32
                pub const m_hPawn: usize = 0x500; // CHandle<CBasePlayerPawn>
                pub const m_nSplitScreenSlot: usize = 0x504; // CSplitScreenSlot
                pub const m_hSplitOwner: usize = 0x508; // CHandle<CBasePlayerController>
                pub const m_hSplitScreenPlayers: usize = 0x510; // CUtlVector<CHandle<CBasePlayerController>>
                pub const m_bIsHLTV: usize = 0x528; // bool
                pub const m_iConnected: usize = 0x52C; // PlayerConnectedState
                pub const m_iszPlayerName: usize = 0x530; // char[128]
                pub const m_szNetworkIDString: usize = 0x5B0; // CUtlString
                pub const m_fLerpTime: usize = 0x5B8; // float32
                pub const m_bLagCompensation: usize = 0x5BC; // bool
                pub const m_bPredict: usize = 0x5BD; // bool
                pub const m_bAutoKickDisabled: usize = 0x5BE; // bool
                pub const m_bIsLowViolence: usize = 0x5BF; // bool
                pub const m_bGamePaused: usize = 0x5C0; // bool
                pub const m_nLastRealCommandNumberExecuted: usize = 0x654; // int32
                pub const m_nLastLateCommandExecuted: usize = 0x658; // int32
                pub const m_iIgnoreGlobalChat: usize = 0x670; // ChatIgnoreType_t
                pub const m_flLastPlayerTalkTime: usize = 0x674; // float32
                pub const m_flLastEntitySteadyState: usize = 0x678; // float32
                pub const m_nAvailableEntitySteadyState: usize = 0x67C; // int32
                pub const m_bHasAnySteadyStateEnts: usize = 0x680; // bool
                pub const m_steamID: usize = 0x690; // uint64
                pub const m_iDesiredFOV: usize = 0x698; // uint32
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 14
            pub mod CBasePlayerVData {
                pub const m_sModelName: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_flHeadDamageMultiplier: usize = 0x108; // CSkillFloat
                pub const m_flChestDamageMultiplier: usize = 0x118; // CSkillFloat
                pub const m_flStomachDamageMultiplier: usize = 0x128; // CSkillFloat
                pub const m_flArmDamageMultiplier: usize = 0x138; // CSkillFloat
                pub const m_flLegDamageMultiplier: usize = 0x148; // CSkillFloat
                pub const m_flHoldBreathTime: usize = 0x158; // float32
                pub const m_flDrowningDamageInterval: usize = 0x15C; // float32
                pub const m_nDrowningDamageInitial: usize = 0x160; // int32
                pub const m_nDrowningDamageMax: usize = 0x164; // int32
                pub const m_nWaterSpeed: usize = 0x168; // int32
                pub const m_flUseRange: usize = 0x16C; // float32
                pub const m_flUseAngleTolerance: usize = 0x170; // float32
                pub const m_flCrouchTime: usize = 0x174; // float32
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 20
            pub mod CBasePlayerWeaponVData {
                pub const m_szWorldModel: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_bBuiltRightHanded: usize = 0x108; // bool
                pub const m_bAllowFlipping: usize = 0x109; // bool
                pub const m_sMuzzleAttachment: usize = 0x110; // CUtlString
                pub const m_szMuzzleFlashParticle: usize = 0x118; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_iFlags: usize = 0x1F8; // ItemFlagTypes_t
                pub const m_nPrimaryAmmoType: usize = 0x1F9; // AmmoIndex_t
                pub const m_nSecondaryAmmoType: usize = 0x1FA; // AmmoIndex_t
                pub const m_iMaxClip1: usize = 0x1FC; // int32
                pub const m_iMaxClip2: usize = 0x200; // int32
                pub const m_iDefaultClip1: usize = 0x204; // int32
                pub const m_iDefaultClip2: usize = 0x208; // int32
                pub const m_iWeight: usize = 0x20C; // int32
                pub const m_bAutoSwitchTo: usize = 0x210; // bool
                pub const m_bAutoSwitchFrom: usize = 0x211; // bool
                pub const m_iRumbleEffect: usize = 0x214; // RumbleEffect_t
                pub const m_bLinkedCooldowns: usize = 0x218; // bool
                pub const m_aShootSounds: usize = 0x220; // CUtlMap<WeaponSound_t,CSoundEventName>
                pub const m_iSlot: usize = 0x240; // int32
                pub const m_iPosition: usize = 0x244; // int32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CInfoGameEventProxy {
                pub const m_iszEventName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_flRange: usize = 0x4C8; // float32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CProjectedDecal {
                pub const m_nTexture: usize = 0x4C0; // int32
                pub const m_flDistance: usize = 0x4C4; // float32
            }
            // Parent: CSkeletonAnimationController
            // Fields count: 13
            pub mod CBaseAnimGraphController {
                pub const m_animGraphNetworkedVars: usize = 0x18; // CAnimGraphNetworkedVariables
                pub const m_bSequenceFinished: usize = 0x220; // bool
                pub const m_flSoundSyncTime: usize = 0x224; // float32
                pub const m_hSequence: usize = 0x228; // HSequence
                pub const m_flSeqStartTime: usize = 0x22C; // GameTime_t
                pub const m_flSeqFixedCycle: usize = 0x230; // float32
                pub const m_nAnimLoopMode: usize = 0x234; // AnimLoopMode_t
                pub const m_flPlaybackRate: usize = 0x238; // CNetworkedQuantizedFloat
                pub const m_nNotifyState: usize = 0x244; // SequenceFinishNotifyState_t
                pub const m_bNetworkedAnimationInputsChanged: usize = 0x246; // bool
                pub const m_bNetworkedSequenceChanged: usize = 0x247; // bool
                pub const m_bLastUpdateSkipped: usize = 0x248; // bool
                pub const m_flPrevAnimUpdateTime: usize = 0x24C; // GameTime_t
            }
            // Parent: CBaseEntity
            // Fields count: 25
            pub mod CBaseModelEntity {
                pub const m_CRenderComponent: usize = 0x4C0; // CRenderComponent*
                pub const m_CHitboxComponent: usize = 0x4C8; // CHitboxComponent
                pub const m_flDissolveStartTime: usize = 0x4F0; // GameTime_t
                pub const m_OnIgnite: usize = 0x4F8; // CEntityIOOutput
                pub const m_nRenderMode: usize = 0x520; // RenderMode_t
                pub const m_nRenderFX: usize = 0x521; // RenderFx_t
                pub const m_bAllowFadeInView: usize = 0x522; // bool
                pub const m_clrRender: usize = 0x523; // Color
                pub const m_vecRenderAttributes: usize = 0x528; // CUtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
                pub const m_bRenderToCubemaps: usize = 0x578; // bool
                pub const m_Collision: usize = 0x580; // CCollisionProperty
                pub const m_Glow: usize = 0x630; // CGlowProperty
                pub const m_flGlowBackfaceMult: usize = 0x688; // float32
                pub const m_fadeMinDist: usize = 0x68C; // float32
                pub const m_fadeMaxDist: usize = 0x690; // float32
                pub const m_flFadeScale: usize = 0x694; // float32
                pub const m_flShadowStrength: usize = 0x698; // float32
                pub const m_nObjectCulling: usize = 0x69C; // uint8
                pub const m_nAddDecal: usize = 0x6A0; // int32
                pub const m_vDecalPosition: usize = 0x6A4; // 
                pub const m_vDecalForwardAxis: usize = 0x6B0; // 
                pub const m_flDecalHealBloodRate: usize = 0x6BC; // float32
                pub const m_flDecalHealHeightRate: usize = 0x6C0; // float32
                pub const m_ConfigEntitiesToPropagateMaterialDecalsTo: usize = 0x6C8; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                pub const m_vecViewOffset: usize = 0x6E0; // CNetworkViewOffsetVector
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CServerOnlyModelEntity {
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CModelPointEntity {
            }
            // Parent: CLogicalEntity
            // Fields count: 7
            pub mod CLogicRelay {
                pub const m_OnTrigger: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnSpawn: usize = 0x4E8; // CEntityIOOutput
                pub const m_bDisabled: usize = 0x510; // bool
                pub const m_bWaitForRefire: usize = 0x511; // bool
                pub const m_bTriggerOnce: usize = 0x512; // bool
                pub const m_bFastRetrigger: usize = 0x513; // bool
                pub const m_bPassthoughCaller: usize = 0x514; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 22
            pub mod CParticleSystem {
                pub const m_szSnapshotFileName: usize = 0x710; // char[512]
                pub const m_bActive: usize = 0x910; // bool
                pub const m_bFrozen: usize = 0x911; // bool
                pub const m_flFreezeTransitionDuration: usize = 0x914; // float32
                pub const m_nStopType: usize = 0x918; // int32
                pub const m_bAnimateDuringGameplayPause: usize = 0x91C; // bool
                pub const m_iEffectIndex: usize = 0x920; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_flStartTime: usize = 0x928; // GameTime_t
                pub const m_flPreSimTime: usize = 0x92C; // float32
                pub const m_vServerControlPoints: usize = 0x930; // Vector[4]
                pub const m_iServerControlPointAssignments: usize = 0x960; // uint8[4]
                pub const m_hControlPointEnts: usize = 0x964; // CHandle<CBaseEntity>[64]
                pub const m_bNoSave: usize = 0xA64; // bool
                pub const m_bNoFreeze: usize = 0xA65; // bool
                pub const m_bNoRamp: usize = 0xA66; // bool
                pub const m_bStartActive: usize = 0xA67; // bool
                pub const m_iszEffectName: usize = 0xA68; // CUtlSymbolLarge
                pub const m_iszControlPointNames: usize = 0xA70; // CUtlSymbolLarge[64]
                pub const m_nDataCP: usize = 0xC70; // int32
                pub const m_vecDataCPValue: usize = 0xC74; // 
                pub const m_nTintCP: usize = 0xC80; // int32
                pub const m_clrTint: usize = 0xC84; // Color
            }
            // Parent: CBaseEntity
            // Fields count: 16
            pub mod CPathParticleRope {
                pub const m_bStartActive: usize = 0x4C0; // bool
                pub const m_flMaxSimulationTime: usize = 0x4C4; // float32
                pub const m_iszEffectName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_PathNodes_Name: usize = 0x4D0; // CUtlVector<CUtlSymbolLarge>
                pub const m_flParticleSpacing: usize = 0x4E8; // float32
                pub const m_flSlack: usize = 0x4EC; // float32
                pub const m_flRadius: usize = 0x4F0; // float32
                pub const m_ColorTint: usize = 0x4F4; // Color
                pub const m_nEffectState: usize = 0x4F8; // int32
                pub const m_iEffectIndex: usize = 0x500; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_PathNodes_Position: usize = 0x508; // CNetworkUtlVectorBase<Vector>
                pub const m_PathNodes_TangentIn: usize = 0x520; // CNetworkUtlVectorBase<Vector>
                pub const m_PathNodes_TangentOut: usize = 0x538; // CNetworkUtlVectorBase<Vector>
                pub const m_PathNodes_Color: usize = 0x550; // CNetworkUtlVectorBase<Vector>
                pub const m_PathNodes_PinEnabled: usize = 0x568; // CNetworkUtlVectorBase<bool>
                pub const m_PathNodes_RadiusScale: usize = 0x580; // CNetworkUtlVectorBase<float32>
            }
            // Parent: CPathParticleRope
            // Fields count: 0
            pub mod CPathParticleRopeAlias_path_particle_rope_clientside {
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CFuncWall {
                pub const m_nState: usize = 0x710; // int32
            }
            // Parent: CFuncWall
            // Fields count: 0
            pub mod CFuncWallToggle {
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CFuncVehicleClip {
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CFuncIllusionary {
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CFuncVPhysicsClip {
                pub const m_bDisabled: usize = 0x710; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 3
            pub mod CFuncInteractionLayerClip {
                pub const m_bDisabled: usize = 0x710; // bool
                pub const m_iszInteractsAs: usize = 0x718; // CUtlSymbolLarge
                pub const m_iszInteractsWith: usize = 0x720; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CPointClientCommand {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CPointServerCommand {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CPointBroadcastClientCommand {
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CCommentaryAuto {
                pub const m_OnCommentaryNewGame: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnCommentaryMidGame: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnCommentaryMultiplayerSpawn: usize = 0x510; // CEntityIOOutput
            }
            // Parent: CBaseModelEntity
            // Fields count: 9
            pub mod CDynamicLight {
                pub const m_ActualFlags: usize = 0x710; // uint8
                pub const m_Flags: usize = 0x711; // uint8
                pub const m_LightStyle: usize = 0x712; // uint8
                pub const m_On: usize = 0x713; // bool
                pub const m_Radius: usize = 0x714; // float32
                pub const m_Exponent: usize = 0x718; // int32
                pub const m_InnerAngle: usize = 0x71C; // float32
                pub const m_OuterAngle: usize = 0x720; // float32
                pub const m_SpotRadius: usize = 0x724; // float32
            }
            // Parent: CBaseModelEntity
            // Fields count: 3
            pub mod CBubbling {
                pub const m_density: usize = 0x710; // int32
                pub const m_frequency: usize = 0x714; // int32
                pub const m_state: usize = 0x718; // int32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CEnvTracer {
                pub const m_vecEnd: usize = 0x4C0; // 
                pub const m_flDelay: usize = 0x4CC; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 5
            pub mod CTestEffect {
                pub const m_iLoop: usize = 0x4C0; // int32
                pub const m_iBeam: usize = 0x4C4; // int32
                pub const m_pBeam: usize = 0x4C8; // CBeam*[24]
                pub const m_flBeamTime: usize = 0x588; // GameTime_t[24]
                pub const m_flStartTime: usize = 0x5E8; // GameTime_t
            }
            // Parent: CPointEntity
            // Fields count: 4
            pub mod CBlood {
                pub const m_vecSprayAngles: usize = 0x4C0; // QAngle
                pub const m_vecSprayDir: usize = 0x4CC; // 
                pub const m_flAmount: usize = 0x4D8; // float32
                pub const m_Color: usize = 0x4DC; // int32
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CEnvFunnel {
            }
            // Parent: CBaseEntity
            // Fields count: 2
            pub mod CEnvBeverage {
                pub const m_CanInDispenser: usize = 0x4C0; // bool
                pub const m_nBeverageType: usize = 0x4C4; // int32
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CPrecipitationBlocker {
            }
            // Parent: CBaseEntity
            // Fields count: 1
            pub mod CEnvWind {
                pub const m_EnvWindShared: usize = 0x4C0; // CEnvWindShared
            }
            // Parent: CBaseEntity
            // Fields count: 1
            pub mod CPhysicsWire {
                pub const m_nDensity: usize = 0x4C0; // int32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CEnvMuzzleFlash {
                pub const m_flScale: usize = 0x4C0; // float32
                pub const m_iszParentAttachment: usize = 0x4C8; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CEnvSplash {
                pub const m_flScale: usize = 0x4C0; // float32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CEnvViewPunch {
                pub const m_flRadius: usize = 0x4C0; // float32
                pub const m_angViewPunch: usize = 0x4C4; // QAngle
            }
            // Parent: CBaseEntity
            // Fields count: 1
            pub mod CEnvEntityIgniter {
                pub const m_flLifetime: usize = 0x4C0; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 1
            pub mod CDebugHistory {
                pub const m_nNpcEvents: usize = 0x1F4500; // int32
            }
            // Parent: CPointEntity
            // Fields count: 12
            pub mod CEnvEntityMaker {
                pub const m_vecEntityMins: usize = 0x4C0; // 
                pub const m_vecEntityMaxs: usize = 0x4CC; // 
                pub const m_hCurrentInstance: usize = 0x4D8; // CHandle<CBaseEntity>
                pub const m_hCurrentBlocker: usize = 0x4DC; // CHandle<CBaseEntity>
                pub const m_vecBlockerOrigin: usize = 0x4E0; // 
                pub const m_angPostSpawnDirection: usize = 0x4EC; // QAngle
                pub const m_flPostSpawnDirectionVariance: usize = 0x4F8; // float32
                pub const m_flPostSpawnSpeed: usize = 0x4FC; // float32
                pub const m_bPostSpawnUseAngles: usize = 0x500; // bool
                pub const m_iszTemplate: usize = 0x508; // CUtlSymbolLarge
                pub const m_pOutputOnSpawned: usize = 0x510; // CEntityIOOutput
                pub const m_pOutputOnFailedSpawn: usize = 0x538; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoInstructorHintTarget {
            }
            // Parent: CPointEntity
            // Fields count: 24
            pub mod CEnvInstructorHint {
                pub const m_iszName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszReplace_Key: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszHintTargetEntity: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_iTimeout: usize = 0x4D8; // int32
                pub const m_iDisplayLimit: usize = 0x4DC; // int32
                pub const m_iszIcon_Onscreen: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_iszIcon_Offscreen: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_iszCaption: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_iszActivatorCaption: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_Color: usize = 0x500; // Color
                pub const m_fIconOffset: usize = 0x504; // float32
                pub const m_fRange: usize = 0x508; // float32
                pub const m_iPulseOption: usize = 0x50C; // uint8
                pub const m_iAlphaOption: usize = 0x50D; // uint8
                pub const m_iShakeOption: usize = 0x50E; // uint8
                pub const m_bStatic: usize = 0x50F; // bool
                pub const m_bNoOffscreen: usize = 0x510; // bool
                pub const m_bForceCaption: usize = 0x511; // bool
                pub const m_iInstanceType: usize = 0x514; // int32
                pub const m_bSuppressRest: usize = 0x518; // bool
                pub const m_iszBinding: usize = 0x520; // CUtlSymbolLarge
                pub const m_bAllowNoDrawTarget: usize = 0x528; // bool
                pub const m_bAutoStart: usize = 0x529; // bool
                pub const m_bLocalPlayerOnly: usize = 0x52A; // bool
            }
            // Parent: CPointEntity
            // Fields count: 9
            pub mod CEnvInstructorVRHint {
                pub const m_iszName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszHintTargetEntity: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iTimeout: usize = 0x4D0; // int32
                pub const m_iszCaption: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_iszStartSound: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_iLayoutFileType: usize = 0x4E8; // int32
                pub const m_iszCustomLayoutFile: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_iAttachType: usize = 0x4F8; // int32
                pub const m_flHeightOffset: usize = 0x4FC; // float32
            }
            // Parent: CPointEntity
            // Fields count: 3
            pub mod CInstructorEventEntity {
                pub const m_iszName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszHintTargetEntity: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_hTargetPlayer: usize = 0x4D0; // CHandle<CBasePlayerPawn>
            }
            // Parent: CPointEntity
            // Fields count: 5
            pub mod CEnvScreenOverlay {
                pub const m_iszOverlayNames: usize = 0x4C0; // CUtlSymbolLarge[10]
                pub const m_flOverlayTimes: usize = 0x510; // float32[10]
                pub const m_flStartTime: usize = 0x538; // GameTime_t
                pub const m_iDesiredOverlay: usize = 0x53C; // int32
                pub const m_bIsActive: usize = 0x540; // bool
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CEnvFade {
                pub const m_fadeColor: usize = 0x4C0; // Color
                pub const m_Duration: usize = 0x4C4; // float32
                pub const m_HoldDuration: usize = 0x4C8; // float32
                pub const m_OnBeginFade: usize = 0x4D0; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 3
            pub mod CCredits {
                pub const m_OnCreditsDone: usize = 0x4C0; // CEntityIOOutput
                pub const m_bRolledOutroCredits: usize = 0x4E8; // bool
                pub const m_flLogoLength: usize = 0x4EC; // float32
            }
            // Parent: CPointEntity
            // Fields count: 10
            pub mod CEnvShake {
                pub const m_limitToEntity: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_Amplitude: usize = 0x4C8; // float32
                pub const m_Frequency: usize = 0x4CC; // float32
                pub const m_Duration: usize = 0x4D0; // float32
                pub const m_Radius: usize = 0x4D4; // float32
                pub const m_stopTime: usize = 0x4D8; // GameTime_t
                pub const m_nextShake: usize = 0x4DC; // GameTime_t
                pub const m_currentAmp: usize = 0x4E0; // float32
                pub const m_maxForce: usize = 0x4E4; // 
                pub const m_shakeCallback: usize = 0x4F8; // CPhysicsShake
            }
            // Parent: CPointEntity
            // Fields count: 4
            pub mod CEnvTilt {
                pub const m_Duration: usize = 0x4C0; // float32
                pub const m_Radius: usize = 0x4C4; // float32
                pub const m_TiltTime: usize = 0x4C8; // float32
                pub const m_stopTime: usize = 0x4CC; // GameTime_t
            }
            // Parent: CPointEntity
            // Fields count: 5
            pub mod CEnvSpark {
                pub const m_flDelay: usize = 0x4C0; // float32
                pub const m_nMagnitude: usize = 0x4C4; // int32
                pub const m_nTrailLength: usize = 0x4C8; // int32
                pub const m_nType: usize = 0x4CC; // int32
                pub const m_OnSpark: usize = 0x4D0; // CEntityIOOutput
            }
            // Parent: CModelPointEntity
            // Fields count: 0
            pub mod CShower {
            }
            // Parent: CModelPointEntity
            // Fields count: 15
            pub mod CEnvExplosion {
                pub const m_iMagnitude: usize = 0x710; // int32
                pub const m_flPlayerDamage: usize = 0x714; // float32
                pub const m_iRadiusOverride: usize = 0x718; // int32
                pub const m_flInnerRadius: usize = 0x71C; // float32
                pub const m_spriteScale: usize = 0x720; // int32
                pub const m_flDamageForce: usize = 0x724; // float32
                pub const m_hInflictor: usize = 0x728; // CHandle<CBaseEntity>
                pub const m_iCustomDamageType: usize = 0x72C; // int32
                pub const m_iszExplosionType: usize = 0x738; // CUtlSymbolLarge
                pub const m_iszCustomEffectName: usize = 0x740; // CUtlSymbolLarge
                pub const m_iszCustomSoundName: usize = 0x748; // CUtlSymbolLarge
                pub const m_iClassIgnore: usize = 0x750; // Class_T
                pub const m_iClassIgnore2: usize = 0x754; // Class_T
                pub const m_iszEntityIgnoreName: usize = 0x758; // CUtlSymbolLarge
                pub const m_hEntityIgnore: usize = 0x760; // CHandle<CBaseEntity>
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterName {
                pub const m_iFilterName: usize = 0x518; // CUtlSymbolLarge
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterModel {
                pub const m_iFilterModel: usize = 0x518; // CUtlSymbolLarge
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterContext {
                pub const m_iFilterContext: usize = 0x518; // CUtlSymbolLarge
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod FilterTeam {
                pub const m_iFilterTeam: usize = 0x518; // int32
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterMassGreater {
                pub const m_fFilterMass: usize = 0x518; // float32
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod FilterDamageType {
                pub const m_iDamageType: usize = 0x518; // int32
            }
            // Parent: CBaseFilter
            // Fields count: 3
            pub mod FilterHealth {
                pub const m_bAdrenalineActive: usize = 0x518; // bool
                pub const m_iHealthMin: usize = 0x51C; // int32
                pub const m_iHealthMax: usize = 0x520; // int32
            }
            // Parent: CBaseFilter
            // Fields count: 5
            pub mod CFilterEnemy {
                pub const m_iszEnemyName: usize = 0x518; // CUtlSymbolLarge
                pub const m_flRadius: usize = 0x520; // float32
                pub const m_flOuterRadius: usize = 0x524; // float32
                pub const m_nMaxSquadmatesPerEnemy: usize = 0x528; // int32
                pub const m_iszPlayerName: usize = 0x530; // CUtlSymbolLarge
            }
            // Parent: CBaseFilter
            // Fields count: 1
            pub mod CFilterAttributeInt {
                pub const m_sAttributeName: usize = 0x518; // CUtlStringToken
            }
            // Parent: CBaseModelEntity
            // Fields count: 19
            pub mod CFire {
                pub const m_hEffect: usize = 0x710; // CHandle<CBaseFire>
                pub const m_hOwner: usize = 0x714; // CHandle<CBaseEntity>
                pub const m_nFireType: usize = 0x718; // int32
                pub const m_flFuel: usize = 0x71C; // float32
                pub const m_flDamageTime: usize = 0x720; // GameTime_t
                pub const m_lastDamage: usize = 0x724; // GameTime_t
                pub const m_flFireSize: usize = 0x728; // float32
                pub const m_flLastNavUpdateTime: usize = 0x72C; // GameTime_t
                pub const m_flHeatLevel: usize = 0x730; // float32
                pub const m_flHeatAbsorb: usize = 0x734; // float32
                pub const m_flDamageScale: usize = 0x738; // float32
                pub const m_flMaxHeat: usize = 0x73C; // float32
                pub const m_flLastHeatLevel: usize = 0x740; // float32
                pub const m_flAttackTime: usize = 0x744; // float32
                pub const m_bEnabled: usize = 0x748; // bool
                pub const m_bStartDisabled: usize = 0x749; // bool
                pub const m_bDidActivate: usize = 0x74A; // bool
                pub const m_OnIgnited: usize = 0x750; // CEntityIOOutput
                pub const m_OnExtinguished: usize = 0x778; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CEnvFireSource {
                pub const m_bEnabled: usize = 0x4C0; // bool
                pub const m_radius: usize = 0x4C4; // float32
                pub const m_damage: usize = 0x4C8; // float32
            }
            // Parent: CBaseEntity
            // Fields count: 8
            pub mod CEnvFireSensor {
                pub const m_bEnabled: usize = 0x4C0; // bool
                pub const m_bHeatAtLevel: usize = 0x4C1; // bool
                pub const m_radius: usize = 0x4C4; // float32
                pub const m_targetLevel: usize = 0x4C8; // float32
                pub const m_targetTime: usize = 0x4CC; // float32
                pub const m_levelTime: usize = 0x4D0; // float32
                pub const m_OnHeatLevelStart: usize = 0x4D8; // CEntityIOOutput
                pub const m_OnHeatLevelEnd: usize = 0x500; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Fields count: 5
            pub mod CFuncTimescale {
                pub const m_flDesiredTimescale: usize = 0x4C0; // float32
                pub const m_flAcceleration: usize = 0x4C4; // float32
                pub const m_flMinBlendRate: usize = 0x4C8; // float32
                pub const m_flBlendDeltaMultiplier: usize = 0x4CC; // float32
                pub const m_isStarted: usize = 0x4D0; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 7
            pub mod CLightGlow {
                pub const m_nHorizontalSize: usize = 0x710; // uint32
                pub const m_nVerticalSize: usize = 0x714; // uint32
                pub const m_nMinDist: usize = 0x718; // uint32
                pub const m_nMaxDist: usize = 0x71C; // uint32
                pub const m_nOuterMaxDist: usize = 0x720; // uint32
                pub const m_flGlowProxySize: usize = 0x724; // float32
                pub const m_flHDRColorScale: usize = 0x728; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 3
            pub mod CLogicAchievement {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_iszAchievementEventID: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_OnFired: usize = 0x4D0; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Fields count: 5
            pub mod CLogicGameEventListener {
                pub const m_OnEventFired: usize = 0x4D0; // CEntityIOOutput
                pub const m_iszGameEventName: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_iszGameEventItem: usize = 0x500; // CUtlSymbolLarge
                pub const m_bEnabled: usize = 0x508; // bool
                pub const m_bStartDisabled: usize = 0x509; // bool
            }
            // Parent: CLogicalEntity
            // Fields count: 9
            pub mod CLogicMeasureMovement {
                pub const m_strMeasureTarget: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_strMeasureReference: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_strTargetReference: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_hMeasureTarget: usize = 0x4D8; // CHandle<CBaseEntity>
                pub const m_hMeasureReference: usize = 0x4DC; // CHandle<CBaseEntity>
                pub const m_hTarget: usize = 0x4E0; // CHandle<CBaseEntity>
                pub const m_hTargetReference: usize = 0x4E4; // CHandle<CBaseEntity>
                pub const m_flScale: usize = 0x4E8; // float32
                pub const m_nMeasureType: usize = 0x4EC; // int32
            }
            // Parent: CLogicalEntity
            // Fields count: 2
            pub mod CLogicNavigation {
                pub const m_isOn: usize = 0x4C8; // bool
                pub const m_navProperty: usize = 0x4CC; // navproperties_t
            }
            // Parent: CBaseEntity
            // Fields count: 48
            pub mod CLogicNPCCounter {
                pub const m_OnMinCountAll: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnMaxCountAll: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnFactorAll: usize = 0x510; // CEntityOutputTemplate<float32>
                pub const m_OnMinPlayerDistAll: usize = 0x538; // CEntityOutputTemplate<float32>
                pub const m_OnMinCount_1: usize = 0x560; // CEntityIOOutput
                pub const m_OnMaxCount_1: usize = 0x588; // CEntityIOOutput
                pub const m_OnFactor_1: usize = 0x5B0; // CEntityOutputTemplate<float32>
                pub const m_OnMinPlayerDist_1: usize = 0x5D8; // CEntityOutputTemplate<float32>
                pub const m_OnMinCount_2: usize = 0x600; // CEntityIOOutput
                pub const m_OnMaxCount_2: usize = 0x628; // CEntityIOOutput
                pub const m_OnFactor_2: usize = 0x650; // CEntityOutputTemplate<float32>
                pub const m_OnMinPlayerDist_2: usize = 0x678; // CEntityOutputTemplate<float32>
                pub const m_OnMinCount_3: usize = 0x6A0; // CEntityIOOutput
                pub const m_OnMaxCount_3: usize = 0x6C8; // CEntityIOOutput
                pub const m_OnFactor_3: usize = 0x6F0; // CEntityOutputTemplate<float32>
                pub const m_OnMinPlayerDist_3: usize = 0x718; // CEntityOutputTemplate<float32>
                pub const m_hSource: usize = 0x740; // CEntityHandle
                pub const m_iszSourceEntityName: usize = 0x748; // CUtlSymbolLarge
                pub const m_flDistanceMax: usize = 0x750; // float32
                pub const m_bDisabled: usize = 0x754; // bool
                pub const m_nMinCountAll: usize = 0x758; // int32
                pub const m_nMaxCountAll: usize = 0x75C; // int32
                pub const m_nMinFactorAll: usize = 0x760; // int32
                pub const m_nMaxFactorAll: usize = 0x764; // int32
                pub const m_iszNPCClassname_1: usize = 0x770; // CUtlSymbolLarge
                pub const m_nNPCState_1: usize = 0x778; // int32
                pub const m_bInvertState_1: usize = 0x77C; // bool
                pub const m_nMinCount_1: usize = 0x780; // int32
                pub const m_nMaxCount_1: usize = 0x784; // int32
                pub const m_nMinFactor_1: usize = 0x788; // int32
                pub const m_nMaxFactor_1: usize = 0x78C; // int32
                pub const m_flDefaultDist_1: usize = 0x794; // float32
                pub const m_iszNPCClassname_2: usize = 0x798; // CUtlSymbolLarge
                pub const m_nNPCState_2: usize = 0x7A0; // int32
                pub const m_bInvertState_2: usize = 0x7A4; // bool
                pub const m_nMinCount_2: usize = 0x7A8; // int32
                pub const m_nMaxCount_2: usize = 0x7AC; // int32
                pub const m_nMinFactor_2: usize = 0x7B0; // int32
                pub const m_nMaxFactor_2: usize = 0x7B4; // int32
                pub const m_flDefaultDist_2: usize = 0x7BC; // float32
                pub const m_iszNPCClassname_3: usize = 0x7C0; // CUtlSymbolLarge
                pub const m_nNPCState_3: usize = 0x7C8; // int32
                pub const m_bInvertState_3: usize = 0x7CC; // bool
                pub const m_nMinCount_3: usize = 0x7D0; // int32
                pub const m_nMaxCount_3: usize = 0x7D4; // int32
                pub const m_nMinFactor_3: usize = 0x7D8; // int32
                pub const m_nMaxFactor_3: usize = 0x7DC; // int32
                pub const m_flDefaultDist_3: usize = 0x7E4; // float32
            }
            // Parent: CLogicNPCCounter
            // Fields count: 4
            pub mod CLogicNPCCounterAABB {
                pub const m_vDistanceOuterMins: usize = 0x800; // 
                pub const m_vDistanceOuterMaxs: usize = 0x80C; // 
                pub const m_vOuterMins: usize = 0x818; // 
                pub const m_vOuterMaxs: usize = 0x824; // 
            }
            // Parent: CLogicNPCCounterAABB
            // Fields count: 0
            pub mod CLogicNPCCounterOBB {
            }
            // Parent: CLogicalEntity
            // Fields count: 5
            pub mod CLogicPlayerProxy {
                pub const m_hPlayer: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_PlayerHasAmmo: usize = 0x4C8; // CEntityIOOutput
                pub const m_PlayerHasNoAmmo: usize = 0x4F0; // CEntityIOOutput
                pub const m_PlayerDied: usize = 0x518; // CEntityIOOutput
                pub const m_RequestedPlayerHealth: usize = 0x540; // CEntityOutputTemplate<int32>
            }
            // Parent: CBaseEntity
            // Fields count: 11
            pub mod CLogicAuto {
                pub const m_OnMapSpawn: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnDemoMapSpawn: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnNewGame: usize = 0x510; // CEntityIOOutput
                pub const m_OnLoadGame: usize = 0x538; // CEntityIOOutput
                pub const m_OnMapTransition: usize = 0x560; // CEntityIOOutput
                pub const m_OnBackgroundMap: usize = 0x588; // CEntityIOOutput
                pub const m_OnMultiNewMap: usize = 0x5B0; // CEntityIOOutput
                pub const m_OnMultiNewRound: usize = 0x5D8; // CEntityIOOutput
                pub const m_OnVREnabled: usize = 0x600; // CEntityIOOutput
                pub const m_OnVRNotEnabled: usize = 0x628; // CEntityIOOutput
                pub const m_globalstate: usize = 0x650; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CLogicScript {
            }
            // Parent: CLogicalEntity
            // Fields count: 13
            pub mod CTimerEntity {
                pub const m_OnTimer: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnTimerHigh: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnTimerLow: usize = 0x510; // CEntityIOOutput
                pub const m_iDisabled: usize = 0x538; // int32
                pub const m_flInitialDelay: usize = 0x53C; // float32
                pub const m_flRefireTime: usize = 0x540; // float32
                pub const m_bUpDownState: usize = 0x544; // bool
                pub const m_iUseRandomTime: usize = 0x548; // int32
                pub const m_bPauseAfterFiring: usize = 0x54C; // bool
                pub const m_flLowerRandomBound: usize = 0x550; // float32
                pub const m_flUpperRandomBound: usize = 0x554; // float32
                pub const m_flRemainingTime: usize = 0x558; // float32
                pub const m_bPaused: usize = 0x55C; // bool
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CLogicLineToEntity {
                pub const m_Line: usize = 0x4C0; // CEntityOutputTemplate<Vector>
                pub const m_SourceName: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_StartEntity: usize = 0x4F0; // CHandle<CBaseEntity>
                pub const m_EndEntity: usize = 0x4F4; // CHandle<CBaseEntity>
            }
            // Parent: CLogicalEntity
            // Fields count: 11
            pub mod CMathRemap {
                pub const m_flInMin: usize = 0x4C0; // float32
                pub const m_flInMax: usize = 0x4C4; // float32
                pub const m_flOut1: usize = 0x4C8; // float32
                pub const m_flOut2: usize = 0x4CC; // float32
                pub const m_flOldInValue: usize = 0x4D0; // float32
                pub const m_bEnabled: usize = 0x4D4; // bool
                pub const m_OutValue: usize = 0x4D8; // CEntityOutputTemplate<float32>
                pub const m_OnRoseAboveMin: usize = 0x500; // CEntityIOOutput
                pub const m_OnRoseAboveMax: usize = 0x528; // CEntityIOOutput
                pub const m_OnFellBelowMin: usize = 0x550; // CEntityIOOutput
                pub const m_OnFellBelowMax: usize = 0x578; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Fields count: 5
            pub mod CMathColorBlend {
                pub const m_flInMin: usize = 0x4C0; // float32
                pub const m_flInMax: usize = 0x4C4; // float32
                pub const m_OutColor1: usize = 0x4C8; // Color
                pub const m_OutColor2: usize = 0x4CC; // Color
                pub const m_OutValue: usize = 0x4D0; // CEntityOutputTemplate<Color>
            }
            // Parent: CLogicalEntity
            // Fields count: 5
            pub mod CEnvGlobal {
                pub const m_outCounter: usize = 0x4C0; // CEntityOutputTemplate<int32>
                pub const m_globalstate: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_triggermode: usize = 0x4F0; // int32
                pub const m_initialstate: usize = 0x4F4; // int32
                pub const m_counter: usize = 0x4F8; // int32
            }
            // Parent: CLogicalEntity
            // Fields count: 5
            pub mod CMultiSource {
                pub const m_rgEntities: usize = 0x4C0; // CHandle<CBaseEntity>[32]
                pub const m_rgTriggered: usize = 0x540; // int32[32]
                pub const m_OnTrigger: usize = 0x5C0; // CEntityIOOutput
                pub const m_iTotal: usize = 0x5E8; // int32
                pub const m_globalstate: usize = 0x5F0; // CUtlSymbolLarge
            }
            // Parent: CLogicalEntity
            // Fields count: 11
            pub mod CMathCounter {
                pub const m_flMin: usize = 0x4C0; // float32
                pub const m_flMax: usize = 0x4C4; // float32
                pub const m_bHitMin: usize = 0x4C8; // bool
                pub const m_bHitMax: usize = 0x4C9; // bool
                pub const m_bDisabled: usize = 0x4CA; // bool
                pub const m_OutValue: usize = 0x4D0; // CEntityOutputTemplate<float32>
                pub const m_OnGetValue: usize = 0x4F8; // CEntityOutputTemplate<float32>
                pub const m_OnHitMin: usize = 0x520; // CEntityIOOutput
                pub const m_OnHitMax: usize = 0x548; // CEntityIOOutput
                pub const m_OnChangedFromMin: usize = 0x570; // CEntityIOOutput
                pub const m_OnChangedFromMax: usize = 0x598; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Fields count: 6
            pub mod CLogicCase {
                pub const m_nCase: usize = 0x4C0; // CUtlSymbolLarge[32]
                pub const m_nShuffleCases: usize = 0x5C0; // int32
                pub const m_nLastShuffleCase: usize = 0x5C4; // int32
                pub const m_uchShuffleCaseMap: usize = 0x5C8; // uint8[32]
                pub const m_OnCase: usize = 0x5E8; // CEntityIOOutput[32]
                pub const m_OnDefault: usize = 0xAE8; // CEntityOutputTemplate<CVariantBase<CVariantDefaultAllocator>>
            }
            // Parent: CLogicalEntity
            // Fields count: 6
            pub mod CLogicCompare {
                pub const m_flInValue: usize = 0x4C0; // float32
                pub const m_flCompareValue: usize = 0x4C4; // float32
                pub const m_OnLessThan: usize = 0x4C8; // CEntityOutputTemplate<float32>
                pub const m_OnEqualTo: usize = 0x4F0; // CEntityOutputTemplate<float32>
                pub const m_OnNotEqualTo: usize = 0x518; // CEntityOutputTemplate<float32>
                pub const m_OnGreaterThan: usize = 0x540; // CEntityOutputTemplate<float32>
            }
            // Parent: CLogicalEntity
            // Fields count: 3
            pub mod CLogicAutosave {
                pub const m_bForceNewLevelUnit: usize = 0x4C0; // bool
                pub const m_minHitPoints: usize = 0x4C4; // int32
                pub const m_minHitPointsToCommit: usize = 0x4C8; // int32
            }
            // Parent: CLogicAutosave
            // Fields count: 4
            pub mod CLogicActiveAutosave {
                pub const m_TriggerHitPoints: usize = 0x4D0; // int32
                pub const m_flTimeToTrigger: usize = 0x4D4; // float32
                pub const m_flStartTime: usize = 0x4D8; // GameTime_t
                pub const m_flDangerousTime: usize = 0x4DC; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 6
            pub mod CLogicDistanceAutosave {
                pub const m_iszTargetEntity: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_flDistanceToPlayer: usize = 0x4C8; // float32
                pub const m_bForceNewLevelUnit: usize = 0x4CC; // bool
                pub const m_bCheckCough: usize = 0x4CD; // bool
                pub const m_bThinkDangerous: usize = 0x4CE; // bool
                pub const m_flDangerousTime: usize = 0x4D0; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CLogicCollisionPair {
                pub const m_nameAttach1: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_nameAttach2: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_disabled: usize = 0x4D0; // bool
                pub const m_succeeded: usize = 0x4D1; // bool
            }
            // Parent: CLogicalEntity
            // Fields count: 6
            pub mod CLogicBranchList {
                pub const m_nLogicBranchNames: usize = 0x4C0; // CUtlSymbolLarge[16]
                pub const m_LogicBranchList: usize = 0x540; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_eLastState: usize = 0x558; // CLogicBranchList::LogicBranchListenerLastState_t
                pub const m_OnAllTrue: usize = 0x560; // CEntityIOOutput
                pub const m_OnAllFalse: usize = 0x588; // CEntityIOOutput
                pub const m_OnMixed: usize = 0x5B0; // CEntityIOOutput
            }
            // Parent: CLogicalEntity
            // Fields count: 1
            pub mod CLogicGameEvent {
                pub const m_iszEventName: usize = 0x4C0; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 5
            pub mod CMessageEntity {
                pub const m_radius: usize = 0x4C0; // int32
                pub const m_messageText: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_drawText: usize = 0x4D0; // bool
                pub const m_bDeveloperOnly: usize = 0x4D1; // bool
                pub const m_bEnabled: usize = 0x4D2; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 5
            pub mod CTriggerBrush {
                pub const m_OnStartTouch: usize = 0x710; // CEntityIOOutput
                pub const m_OnEndTouch: usize = 0x738; // CEntityIOOutput
                pub const m_OnUse: usize = 0x760; // CEntityIOOutput
                pub const m_iInputFilter: usize = 0x788; // int32
                pub const m_iDontMessageParent: usize = 0x78C; // int32
            }
            // Parent: CLogicalEntity
            // Fields count: 8
            pub mod CPathKeyFrame {
                pub const m_Origin: usize = 0x4C0; // 
                pub const m_Angles: usize = 0x4CC; // QAngle
                pub const m_qAngle: usize = 0x4E0; // Quaternion
                pub const m_iNextKey: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_flNextTime: usize = 0x4F8; // float32
                pub const m_pNextKey: usize = 0x500; // CPathKeyFrame*
                pub const m_pPrevKey: usize = 0x508; // CPathKeyFrame*
                pub const m_flSpeed: usize = 0x510; // float32
            }
            // Parent: CPathKeyFrame
            // Fields count: 11
            pub mod CBaseMoveBehavior {
                pub const m_iPositionInterpolator: usize = 0x520; // int32
                pub const m_iRotationInterpolator: usize = 0x524; // int32
                pub const m_flAnimStartTime: usize = 0x528; // float32
                pub const m_flAnimEndTime: usize = 0x52C; // float32
                pub const m_flAverageSpeedAcrossFrame: usize = 0x530; // float32
                pub const m_pCurrentKeyFrame: usize = 0x538; // CPathKeyFrame*
                pub const m_pTargetKeyFrame: usize = 0x540; // CPathKeyFrame*
                pub const m_pPreKeyFrame: usize = 0x548; // CPathKeyFrame*
                pub const m_pPostKeyFrame: usize = 0x550; // CPathKeyFrame*
                pub const m_flTimeIntoFrame: usize = 0x558; // float32
                pub const m_iDirection: usize = 0x55C; // int32
            }
            // Parent: CPointEntity
            // Fields count: 3
            pub mod CPathCorner {
                pub const m_flWait: usize = 0x4C0; // float32
                pub const m_flRadius: usize = 0x4C4; // float32
                pub const m_OnPass: usize = 0x4C8; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 6
            pub mod CPhysForce {
                pub const m_nameAttach: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_force: usize = 0x4D0; // float32
                pub const m_forceTime: usize = 0x4D4; // float32
                pub const m_attachedObject: usize = 0x4D8; // CHandle<CBaseEntity>
                pub const m_wasRestored: usize = 0x4DC; // bool
                pub const m_integrator: usize = 0x4E0; // CConstantForceController
            }
            // Parent: CPhysForce
            // Fields count: 1
            pub mod CPhysThruster {
                pub const m_localOrigin: usize = 0x520; // 
            }
            // Parent: CPhysForce
            // Fields count: 1
            pub mod CPhysTorque {
                pub const m_axis: usize = 0x520; // 
            }
            // Parent: CLogicalEntity
            // Fields count: 7
            pub mod CPhysMotor {
                pub const m_nameAttach: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_hAttachedObject: usize = 0x4C8; // CHandle<CBaseEntity>
                pub const m_spinUp: usize = 0x4CC; // float32
                pub const m_additionalAcceleration: usize = 0x4D0; // float32
                pub const m_angularAcceleration: usize = 0x4D4; // float32
                pub const m_lastTime: usize = 0x4D8; // GameTime_t
                pub const m_motor: usize = 0x4F0; // CMotorController
            }
            // Parent: CPointEntity
            // Fields count: 7
            pub mod CKeepUpright {
                pub const m_worldGoalAxis: usize = 0x4C8; // 
                pub const m_localTestAxis: usize = 0x4D4; // 
                pub const m_nameAttach: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_attachedObject: usize = 0x4F0; // CHandle<CBaseEntity>
                pub const m_angularLimit: usize = 0x4F4; // float32
                pub const m_bActive: usize = 0x4F8; // bool
                pub const m_bDampAllRotation: usize = 0x4F9; // bool
            }
            // Parent: CLogicalEntity
            // Fields count: 8
            pub mod CPhysConstraint {
                pub const m_nameAttach1: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_nameAttach2: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_breakSound: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_forceLimit: usize = 0x4E0; // float32
                pub const m_torqueLimit: usize = 0x4E4; // float32
                pub const m_teleportTick: usize = 0x4E8; // uint32
                pub const m_minTeleportDistance: usize = 0x4EC; // float32
                pub const m_OnBreak: usize = 0x4F0; // CEntityIOOutput
            }
            // Parent: CPhysConstraint
            // Fields count: 18
            pub mod CPhysHinge {
                pub const m_soundInfo: usize = 0x520; // ConstraintSoundInfo
                pub const m_NotifyMinLimitReached: usize = 0x5A8; // CEntityIOOutput
                pub const m_NotifyMaxLimitReached: usize = 0x5D0; // CEntityIOOutput
                pub const m_bAtMinLimit: usize = 0x5F8; // bool
                pub const m_bAtMaxLimit: usize = 0x5F9; // bool
                pub const m_hinge: usize = 0x5FC; // constraint_hingeparams_t
                pub const m_hingeFriction: usize = 0x63C; // float32
                pub const m_systemLoadScale: usize = 0x640; // float32
                pub const m_bIsAxisLocal: usize = 0x644; // bool
                pub const m_flMinRotation: usize = 0x648; // float32
                pub const m_flMaxRotation: usize = 0x64C; // float32
                pub const m_flInitialRotation: usize = 0x650; // float32
                pub const m_flMotorFrequency: usize = 0x654; // float32
                pub const m_flMotorDampingRatio: usize = 0x658; // float32
                pub const m_flAngleSpeed: usize = 0x65C; // float32
                pub const m_flAngleSpeedThreshold: usize = 0x660; // float32
                pub const m_OnStartMoving: usize = 0x668; // CEntityIOOutput
                pub const m_OnStopMoving: usize = 0x690; // CEntityIOOutput
            }
            // Parent: CPhysHinge
            // Fields count: 0
            pub mod CPhysHingeAlias_phys_hinge_local {
            }
            // Parent: CPhysConstraint
            // Fields count: 6
            pub mod CPhysBallSocket {
                pub const m_flFriction: usize = 0x518; // float32
                pub const m_bEnableSwingLimit: usize = 0x51C; // bool
                pub const m_flSwingLimit: usize = 0x520; // float32
                pub const m_bEnableTwistLimit: usize = 0x524; // bool
                pub const m_flMinTwistAngle: usize = 0x528; // float32
                pub const m_flMaxTwistAngle: usize = 0x52C; // float32
            }
            // Parent: CPhysConstraint
            // Fields count: 10
            pub mod CPhysSlideConstraint {
                pub const m_axisEnd: usize = 0x520; // 
                pub const m_slideFriction: usize = 0x52C; // float32
                pub const m_systemLoadScale: usize = 0x530; // float32
                pub const m_initialOffset: usize = 0x534; // float32
                pub const m_bEnableLinearConstraint: usize = 0x538; // bool
                pub const m_bEnableAngularConstraint: usize = 0x539; // bool
                pub const m_flMotorFrequency: usize = 0x53C; // float32
                pub const m_flMotorDampingRatio: usize = 0x540; // float32
                pub const m_bUseEntityPivot: usize = 0x544; // bool
                pub const m_soundInfo: usize = 0x548; // ConstraintSoundInfo
            }
            // Parent: CPhysConstraint
            // Fields count: 6
            pub mod CPhysFixed {
                pub const m_flLinearFrequency: usize = 0x518; // float32
                pub const m_flLinearDampingRatio: usize = 0x51C; // float32
                pub const m_flAngularFrequency: usize = 0x520; // float32
                pub const m_flAngularDampingRatio: usize = 0x524; // float32
                pub const m_bEnableLinearConstraint: usize = 0x528; // bool
                pub const m_bEnableAngularConstraint: usize = 0x529; // bool
            }
            // Parent: CPhysConstraint
            // Fields count: 4
            pub mod CPhysPulley {
                pub const m_position2: usize = 0x518; // 
                pub const m_offset: usize = 0x524; // Vector[2]
                pub const m_addLength: usize = 0x53C; // float32
                pub const m_gearRatio: usize = 0x540; // float32
            }
            // Parent: CPhysConstraint
            // Fields count: 6
            pub mod CPhysLength {
                pub const m_offset: usize = 0x518; // Vector[2]
                pub const m_vecAttach: usize = 0x530; // 
                pub const m_addLength: usize = 0x53C; // float32
                pub const m_minLength: usize = 0x540; // float32
                pub const m_totalLength: usize = 0x544; // float32
                pub const m_bEnableCollision: usize = 0x548; // bool
            }
            // Parent: CPhysConstraint
            // Fields count: 9
            pub mod CRagdollConstraint {
                pub const m_xmin: usize = 0x518; // float32
                pub const m_xmax: usize = 0x51C; // float32
                pub const m_ymin: usize = 0x520; // float32
                pub const m_ymax: usize = 0x524; // float32
                pub const m_zmin: usize = 0x528; // float32
                pub const m_zmax: usize = 0x52C; // float32
                pub const m_xfriction: usize = 0x530; // float32
                pub const m_yfriction: usize = 0x534; // float32
                pub const m_zfriction: usize = 0x538; // float32
            }
            // Parent: CPhysConstraint
            // Fields count: 48
            pub mod CGenericConstraint {
                pub const m_nLinearMotionX: usize = 0x520; // JointMotion_t
                pub const m_nLinearMotionY: usize = 0x524; // JointMotion_t
                pub const m_nLinearMotionZ: usize = 0x528; // JointMotion_t
                pub const m_flLinearFrequencyX: usize = 0x52C; // float32
                pub const m_flLinearFrequencyY: usize = 0x530; // float32
                pub const m_flLinearFrequencyZ: usize = 0x534; // float32
                pub const m_flLinearDampingRatioX: usize = 0x538; // float32
                pub const m_flLinearDampingRatioY: usize = 0x53C; // float32
                pub const m_flLinearDampingRatioZ: usize = 0x540; // float32
                pub const m_flMaxLinearImpulseX: usize = 0x544; // float32
                pub const m_flMaxLinearImpulseY: usize = 0x548; // float32
                pub const m_flMaxLinearImpulseZ: usize = 0x54C; // float32
                pub const m_flBreakAfterTimeX: usize = 0x550; // float32
                pub const m_flBreakAfterTimeY: usize = 0x554; // float32
                pub const m_flBreakAfterTimeZ: usize = 0x558; // float32
                pub const m_flBreakAfterTimeStartTimeX: usize = 0x55C; // GameTime_t
                pub const m_flBreakAfterTimeStartTimeY: usize = 0x560; // GameTime_t
                pub const m_flBreakAfterTimeStartTimeZ: usize = 0x564; // GameTime_t
                pub const m_flBreakAfterTimeThresholdX: usize = 0x568; // float32
                pub const m_flBreakAfterTimeThresholdY: usize = 0x56C; // float32
                pub const m_flBreakAfterTimeThresholdZ: usize = 0x570; // float32
                pub const m_flNotifyForceX: usize = 0x574; // float32
                pub const m_flNotifyForceY: usize = 0x578; // float32
                pub const m_flNotifyForceZ: usize = 0x57C; // float32
                pub const m_flNotifyForceMinTimeX: usize = 0x580; // float32
                pub const m_flNotifyForceMinTimeY: usize = 0x584; // float32
                pub const m_flNotifyForceMinTimeZ: usize = 0x588; // float32
                pub const m_flNotifyForceLastTimeX: usize = 0x58C; // GameTime_t
                pub const m_flNotifyForceLastTimeY: usize = 0x590; // GameTime_t
                pub const m_flNotifyForceLastTimeZ: usize = 0x594; // GameTime_t
                pub const m_bAxisNotifiedX: usize = 0x598; // bool
                pub const m_bAxisNotifiedY: usize = 0x599; // bool
                pub const m_bAxisNotifiedZ: usize = 0x59A; // bool
                pub const m_nAngularMotionX: usize = 0x59C; // JointMotion_t
                pub const m_nAngularMotionY: usize = 0x5A0; // JointMotion_t
                pub const m_nAngularMotionZ: usize = 0x5A4; // JointMotion_t
                pub const m_flAngularFrequencyX: usize = 0x5A8; // float32
                pub const m_flAngularFrequencyY: usize = 0x5AC; // float32
                pub const m_flAngularFrequencyZ: usize = 0x5B0; // float32
                pub const m_flAngularDampingRatioX: usize = 0x5B4; // float32
                pub const m_flAngularDampingRatioY: usize = 0x5B8; // float32
                pub const m_flAngularDampingRatioZ: usize = 0x5BC; // float32
                pub const m_flMaxAngularImpulseX: usize = 0x5C0; // float32
                pub const m_flMaxAngularImpulseY: usize = 0x5C4; // float32
                pub const m_flMaxAngularImpulseZ: usize = 0x5C8; // float32
                pub const m_NotifyForceReachedX: usize = 0x5D0; // CEntityIOOutput
                pub const m_NotifyForceReachedY: usize = 0x5F8; // CEntityIOOutput
                pub const m_NotifyForceReachedZ: usize = 0x620; // CEntityIOOutput
            }
            // Parent: CPhysConstraint
            // Fields count: 0
            pub mod CSplineConstraint {
            }
            // Parent: CPhysConstraint
            // Fields count: 11
            pub mod CPhysWheelConstraint {
                pub const m_flSuspensionFrequency: usize = 0x518; // float32
                pub const m_flSuspensionDampingRatio: usize = 0x51C; // float32
                pub const m_flSuspensionHeightOffset: usize = 0x520; // float32
                pub const m_bEnableSuspensionLimit: usize = 0x524; // bool
                pub const m_flMinSuspensionOffset: usize = 0x528; // float32
                pub const m_flMaxSuspensionOffset: usize = 0x52C; // float32
                pub const m_bEnableSteeringLimit: usize = 0x530; // bool
                pub const m_flMinSteeringAngle: usize = 0x534; // float32
                pub const m_flMaxSteeringAngle: usize = 0x538; // float32
                pub const m_flSteeringAxisFriction: usize = 0x53C; // float32
                pub const m_flSpinAxisFriction: usize = 0x540; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 4
            pub mod CPhysicsEntitySolver {
                pub const m_hMovingEntity: usize = 0x4C8; // CHandle<CBaseEntity>
                pub const m_hPhysicsBlocker: usize = 0x4CC; // CHandle<CBaseEntity>
                pub const m_separationDuration: usize = 0x4D0; // float32
                pub const m_cancelTime: usize = 0x4D4; // GameTime_t
            }
            // Parent: CBaseEntity
            // Fields count: 8
            pub mod CPhysicsSpring {
                pub const m_flFrequency: usize = 0x4C8; // float32
                pub const m_flDampingRatio: usize = 0x4CC; // float32
                pub const m_flRestLength: usize = 0x4D0; // float32
                pub const m_nameAttachStart: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_nameAttachEnd: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_start: usize = 0x4E8; // 
                pub const m_end: usize = 0x4F4; // 
                pub const m_teleportTick: usize = 0x500; // uint32
            }
            // Parent: CPointEntity
            // Fields count: 7
            pub mod CPointPush {
                pub const m_bEnabled: usize = 0x4C0; // bool
                pub const m_flMagnitude: usize = 0x4C4; // float32
                pub const m_flRadius: usize = 0x4C8; // float32
                pub const m_flInnerRadius: usize = 0x4CC; // float32
                pub const m_flConeOfInfluence: usize = 0x4D0; // float32
                pub const m_iszFilterName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x4E0; // CHandle<CBaseFilter>
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CInfoPlayerStart {
                pub const m_bDisabled: usize = 0x4C0; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 7
            pub mod CPointEntityFinder {
                pub const m_hEntity: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_iFilterName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x4D0; // CHandle<CBaseFilter>
                pub const m_iRefName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_hReference: usize = 0x4E0; // CHandle<CBaseEntity>
                pub const m_FindMethod: usize = 0x4E4; // EntFinderMethod_t
                pub const m_OnFoundEntity: usize = 0x4E8; // CEntityIOOutput
            }
            // Parent: CBaseEntity
            // Fields count: 44
            pub mod CPointValueRemapper {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_bUpdateOnClient: usize = 0x4C1; // bool
                pub const m_nInputType: usize = 0x4C4; // ValueRemapperInputType_t
                pub const m_iszRemapLineStartName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszRemapLineEndName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_hRemapLineStart: usize = 0x4D8; // CHandle<CBaseEntity>
                pub const m_hRemapLineEnd: usize = 0x4DC; // CHandle<CBaseEntity>
                pub const m_flMaximumChangePerSecond: usize = 0x4E0; // float32
                pub const m_flDisengageDistance: usize = 0x4E4; // float32
                pub const m_flEngageDistance: usize = 0x4E8; // float32
                pub const m_bRequiresUseKey: usize = 0x4EC; // bool
                pub const m_nOutputType: usize = 0x4F0; // ValueRemapperOutputType_t
                pub const m_iszOutputEntityName: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_iszOutputEntity2Name: usize = 0x500; // CUtlSymbolLarge
                pub const m_iszOutputEntity3Name: usize = 0x508; // CUtlSymbolLarge
                pub const m_iszOutputEntity4Name: usize = 0x510; // CUtlSymbolLarge
                pub const m_hOutputEntities: usize = 0x518; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
                pub const m_nHapticsType: usize = 0x530; // ValueRemapperHapticsType_t
                pub const m_nMomentumType: usize = 0x534; // ValueRemapperMomentumType_t
                pub const m_flMomentumModifier: usize = 0x538; // float32
                pub const m_flSnapValue: usize = 0x53C; // float32
                pub const m_flCurrentMomentum: usize = 0x540; // float32
                pub const m_nRatchetType: usize = 0x544; // ValueRemapperRatchetType_t
                pub const m_flRatchetOffset: usize = 0x548; // float32
                pub const m_flInputOffset: usize = 0x54C; // float32
                pub const m_bEngaged: usize = 0x550; // bool
                pub const m_bFirstUpdate: usize = 0x551; // bool
                pub const m_flPreviousValue: usize = 0x554; // float32
                pub const m_flPreviousUpdateTickTime: usize = 0x558; // GameTime_t
                pub const m_vecPreviousTestPoint: usize = 0x55C; // 
                pub const m_hUsingPlayer: usize = 0x568; // CHandle<CBasePlayerPawn>
                pub const m_flCustomOutputValue: usize = 0x56C; // float32
                pub const m_iszSoundEngage: usize = 0x570; // CUtlSymbolLarge
                pub const m_iszSoundDisengage: usize = 0x578; // CUtlSymbolLarge
                pub const m_iszSoundReachedValueZero: usize = 0x580; // CUtlSymbolLarge
                pub const m_iszSoundReachedValueOne: usize = 0x588; // CUtlSymbolLarge
                pub const m_iszSoundMovingLoop: usize = 0x590; // CUtlSymbolLarge
                pub const m_Position: usize = 0x5A0; // CEntityOutputTemplate<float32>
                pub const m_PositionDelta: usize = 0x5C8; // CEntityOutputTemplate<float32>
                pub const m_OnReachedValueZero: usize = 0x5F0; // CEntityIOOutput
                pub const m_OnReachedValueOne: usize = 0x618; // CEntityIOOutput
                pub const m_OnReachedValueCustom: usize = 0x640; // CEntityIOOutput
                pub const m_OnEngage: usize = 0x668; // CEntityIOOutput
                pub const m_OnDisengage: usize = 0x690; // CEntityIOOutput
            }
            // Parent: CModelPointEntity
            // Fields count: 11
            pub mod CPointWorldText {
                pub const m_messageText: usize = 0x710; // char[512]
                pub const m_FontName: usize = 0x910; // char[64]
                pub const m_bEnabled: usize = 0x950; // bool
                pub const m_bFullbright: usize = 0x951; // bool
                pub const m_flWorldUnitsPerPx: usize = 0x954; // float32
                pub const m_flFontSize: usize = 0x958; // float32
                pub const m_flDepthOffset: usize = 0x95C; // float32
                pub const m_Color: usize = 0x960; // Color
                pub const m_nJustifyHorizontal: usize = 0x964; // PointWorldTextJustifyHorizontal_t
                pub const m_nJustifyVertical: usize = 0x968; // PointWorldTextJustifyVertical_t
                pub const m_nReorientMode: usize = 0x96C; // PointWorldTextReorientMode_t
            }
            // Parent: CPointEntity
            // Fields count: 12
            pub mod CPointAngleSensor {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_nLookAtName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_hTargetEntity: usize = 0x4D0; // CHandle<CBaseEntity>
                pub const m_hLookAtEntity: usize = 0x4D4; // CHandle<CBaseEntity>
                pub const m_flDuration: usize = 0x4D8; // float32
                pub const m_flDotTolerance: usize = 0x4DC; // float32
                pub const m_flFacingTime: usize = 0x4E0; // GameTime_t
                pub const m_bFired: usize = 0x4E4; // bool
                pub const m_OnFacingLookat: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnNotFacingLookat: usize = 0x510; // CEntityIOOutput
                pub const m_TargetDir: usize = 0x538; // CEntityOutputTemplate<Vector>
                pub const m_FacingPercentage: usize = 0x560; // CEntityOutputTemplate<float32>
            }
            // Parent: CPointEntity
            // Fields count: 3
            pub mod CPointProximitySensor {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_hTargetEntity: usize = 0x4C4; // CHandle<CBaseEntity>
                pub const m_Distance: usize = 0x4C8; // CEntityOutputTemplate<float32>
            }
            // Parent: CPointEntity
            // Fields count: 16
            pub mod CPointAngularVelocitySensor {
                pub const m_hTargetEntity: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_flThreshold: usize = 0x4C4; // float32
                pub const m_nLastCompareResult: usize = 0x4C8; // int32
                pub const m_nLastFireResult: usize = 0x4CC; // int32
                pub const m_flFireTime: usize = 0x4D0; // GameTime_t
                pub const m_flFireInterval: usize = 0x4D4; // float32
                pub const m_flLastAngVelocity: usize = 0x4D8; // float32
                pub const m_lastOrientation: usize = 0x4DC; // QAngle
                pub const m_vecAxis: usize = 0x4E8; // 
                pub const m_bUseHelper: usize = 0x4F4; // bool
                pub const m_AngularVelocity: usize = 0x4F8; // CEntityOutputTemplate<float32>
                pub const m_OnLessThan: usize = 0x520; // CEntityIOOutput
                pub const m_OnLessThanOrEqualTo: usize = 0x548; // CEntityIOOutput
                pub const m_OnGreaterThan: usize = 0x570; // CEntityIOOutput
                pub const m_OnGreaterThanOrEqualTo: usize = 0x598; // CEntityIOOutput
                pub const m_OnEqualTo: usize = 0x5C0; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 6
            pub mod CPointVelocitySensor {
                pub const m_hTargetEntity: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_vecAxis: usize = 0x4C4; // 
                pub const m_bEnabled: usize = 0x4D0; // bool
                pub const m_fPrevVelocity: usize = 0x4D4; // float32
                pub const m_flAvgInterval: usize = 0x4D8; // float32
                pub const m_Velocity: usize = 0x4E0; // CEntityOutputTemplate<float32>
            }
            // Parent: CPointEntity
            // Fields count: 6
            pub mod CPointHurt {
                pub const m_nDamage: usize = 0x4C0; // int32
                pub const m_bitsDamageType: usize = 0x4C4; // int32
                pub const m_flRadius: usize = 0x4C8; // float32
                pub const m_flDelay: usize = 0x4CC; // float32
                pub const m_strTarget: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_pActivator: usize = 0x4D8; // CHandle<CBaseEntity>
            }
            // Parent: CServerOnlyPointEntity
            // Fields count: 4
            pub mod CPointTeleport {
                pub const m_vSaveOrigin: usize = 0x4C0; // 
                pub const m_vSaveAngles: usize = 0x4CC; // QAngle
                pub const m_bTeleportParentedEntities: usize = 0x4D8; // bool
                pub const m_bTeleportUseCurrentAngle: usize = 0x4D9; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CEnableMotionFixup {
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CFuncPropRespawnZone {
            }
            // Parent: CBaseEntity
            // Fields count: 3
            pub mod CRagdollManager {
                pub const m_iCurrentMaxRagdollCount: usize = 0x4C0; // int8
                pub const m_iMaxRagdollCount: usize = 0x4C4; // int32
                pub const m_bSaveImportant: usize = 0x4C8; // bool
            }
            // Parent: CModelPointEntity
            // Fields count: 3
            pub mod CRevertSaved {
                pub const m_loadTime: usize = 0x710; // float32
                pub const m_Duration: usize = 0x714; // float32
                pub const m_HoldTime: usize = 0x718; // float32
            }
            // Parent: CLogicalEntity
            // Fields count: 3
            pub mod CSceneListManager {
                pub const m_hListManagers: usize = 0x4C0; // CUtlVector<CHandle<CSceneListManager>>
                pub const m_iszScenes: usize = 0x4D8; // CUtlSymbolLarge[16]
                pub const m_hScenes: usize = 0x558; // CHandle<CBaseEntity>[16]
            }
            // Parent: CPointEntity
            // Fields count: 64
            pub mod CSceneEntity {
                pub const m_iszSceneFile: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszResumeSceneFile: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_iszTarget1: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_iszTarget2: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_iszTarget3: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_iszTarget4: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_iszTarget5: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_iszTarget6: usize = 0x500; // CUtlSymbolLarge
                pub const m_iszTarget7: usize = 0x508; // CUtlSymbolLarge
                pub const m_iszTarget8: usize = 0x510; // CUtlSymbolLarge
                pub const m_hTarget1: usize = 0x518; // CHandle<CBaseEntity>
                pub const m_hTarget2: usize = 0x51C; // CHandle<CBaseEntity>
                pub const m_hTarget3: usize = 0x520; // CHandle<CBaseEntity>
                pub const m_hTarget4: usize = 0x524; // CHandle<CBaseEntity>
                pub const m_hTarget5: usize = 0x528; // CHandle<CBaseEntity>
                pub const m_hTarget6: usize = 0x52C; // CHandle<CBaseEntity>
                pub const m_hTarget7: usize = 0x530; // CHandle<CBaseEntity>
                pub const m_hTarget8: usize = 0x534; // CHandle<CBaseEntity>
                pub const m_bIsPlayingBack: usize = 0x538; // bool
                pub const m_bPaused: usize = 0x539; // bool
                pub const m_bMultiplayer: usize = 0x53A; // bool
                pub const m_bAutogenerated: usize = 0x53B; // bool
                pub const m_flForceClientTime: usize = 0x53C; // float32
                pub const m_flCurrentTime: usize = 0x540; // float32
                pub const m_flFrameTime: usize = 0x544; // float32
                pub const m_bCancelAtNextInterrupt: usize = 0x548; // bool
                pub const m_fPitch: usize = 0x54C; // float32
                pub const m_bAutomated: usize = 0x550; // bool
                pub const m_nAutomatedAction: usize = 0x554; // int32
                pub const m_flAutomationDelay: usize = 0x558; // float32
                pub const m_flAutomationTime: usize = 0x55C; // float32
                pub const m_hWaitingForThisResumeScene: usize = 0x560; // CHandle<CBaseEntity>
                pub const m_bWaitingForResumeScene: usize = 0x564; // bool
                pub const m_bPausedViaInput: usize = 0x565; // bool
                pub const m_bPauseAtNextInterrupt: usize = 0x566; // bool
                pub const m_bWaitingForActor: usize = 0x567; // bool
                pub const m_bWaitingForInterrupt: usize = 0x568; // bool
                pub const m_bInterruptedActorsScenes: usize = 0x569; // bool
                pub const m_bBreakOnNonIdle: usize = 0x56A; // bool
                pub const m_hActorList: usize = 0x570; // CNetworkUtlVectorBase<CHandle<CBaseFlex>>
                pub const m_hRemoveActorList: usize = 0x588; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_nSceneFlushCounter: usize = 0x5D0; // int32
                pub const m_nSceneStringIndex: usize = 0x5D4; // uint16
                pub const m_OnStart: usize = 0x5D8; // CEntityIOOutput
                pub const m_OnCompletion: usize = 0x600; // CEntityIOOutput
                pub const m_OnCanceled: usize = 0x628; // CEntityIOOutput
                pub const m_OnPaused: usize = 0x650; // CEntityIOOutput
                pub const m_OnResumed: usize = 0x678; // CEntityIOOutput
                pub const m_OnTrigger: usize = 0x6A0; // CEntityIOOutput[16]
                pub const m_hInterruptScene: usize = 0x9B0; // CHandle<CSceneEntity>
                pub const m_nInterruptCount: usize = 0x9B4; // int32
                pub const m_bSceneMissing: usize = 0x9B8; // bool
                pub const m_bInterrupted: usize = 0x9B9; // bool
                pub const m_bCompletedEarly: usize = 0x9BA; // bool
                pub const m_bInterruptSceneFinished: usize = 0x9BB; // bool
                pub const m_bRestoring: usize = 0x9BC; // bool
                pub const m_hNotifySceneCompletion: usize = 0x9C0; // CUtlVector<CHandle<CSceneEntity>>
                pub const m_hListManagers: usize = 0x9D8; // CUtlVector<CHandle<CSceneListManager>>
                pub const m_iszSoundName: usize = 0x9F0; // CUtlSymbolLarge
                pub const m_iszSequenceName: usize = 0x9F8; // CUtlSymbolLarge
                pub const m_hActor: usize = 0xA00; // CHandle<CBaseFlex>
                pub const m_hActivator: usize = 0xA04; // CHandle<CBaseEntity>
                pub const m_BusyActor: usize = 0xA08; // int32
                pub const m_iPlayerDeathBehavior: usize = 0xA0C; // SceneOnPlayerDeath_t
            }
            // Parent: CBaseEntity
            // Fields count: 60
            pub mod CScriptedSequence {
                pub const m_iszEntry: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_iszPreIdle: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszPlay: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_iszPostIdle: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_iszModifierToAddOnPlay: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_iszNextScript: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_iszEntity: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_iszSyncGroup: usize = 0x4F8; // CUtlSymbolLarge
                pub const m_nMoveTo: usize = 0x500; // ScriptedMoveTo_t
                pub const m_bIsPlayingPreIdle: usize = 0x504; // bool
                pub const m_bIsPlayingEntry: usize = 0x505; // bool
                pub const m_bIsPlayingAction: usize = 0x506; // bool
                pub const m_bIsPlayingPostIdle: usize = 0x507; // bool
                pub const m_bLoopPreIdleSequence: usize = 0x508; // bool
                pub const m_bLoopActionSequence: usize = 0x509; // bool
                pub const m_bLoopPostIdleSequence: usize = 0x50A; // bool
                pub const m_bSynchPostIdles: usize = 0x50B; // bool
                pub const m_bIgnoreLookAt: usize = 0x50C; // bool
                pub const m_bIgnoreGravity: usize = 0x50D; // bool
                pub const m_bDisableNPCCollisions: usize = 0x50E; // bool
                pub const m_bKeepAnimgraphLockedPost: usize = 0x50F; // bool
                pub const m_bDontAddModifiers: usize = 0x510; // bool
                pub const m_flRadius: usize = 0x514; // float32
                pub const m_flRepeat: usize = 0x518; // float32
                pub const m_flPlayAnimFadeInTime: usize = 0x51C; // float32
                pub const m_flMoveInterpTime: usize = 0x520; // float32
                pub const m_flAngRate: usize = 0x524; // float32
                pub const m_nNotReadySequenceCount: usize = 0x528; // int32
                pub const m_startTime: usize = 0x52C; // GameTime_t
                pub const m_bWaitForBeginSequence: usize = 0x530; // bool
                pub const m_saved_effects: usize = 0x534; // int32
                pub const m_savedFlags: usize = 0x538; // int32
                pub const m_savedCollisionGroup: usize = 0x53C; // int32
                pub const m_interruptable: usize = 0x540; // bool
                pub const m_sequenceStarted: usize = 0x541; // bool
                pub const m_bPositionRelativeToOtherEntity: usize = 0x542; // bool
                pub const m_hTargetEnt: usize = 0x544; // CHandle<CBaseEntity>
                pub const m_hNextCine: usize = 0x548; // CHandle<CScriptedSequence>
                pub const m_bThinking: usize = 0x54C; // bool
                pub const m_bInitiatedSelfDelete: usize = 0x54D; // bool
                pub const m_bIsTeleportingDueToMoveTo: usize = 0x54E; // bool
                pub const m_bAllowCustomInterruptConditions: usize = 0x54F; // bool
                pub const m_hLastFoundEntity: usize = 0x550; // CHandle<CBaseEntity>
                pub const m_hForcedTarget: usize = 0x554; // CHandle<CBaseAnimGraph>
                pub const m_bDontCancelOtherSequences: usize = 0x558; // bool
                pub const m_bForceSynch: usize = 0x559; // bool
                pub const m_bPreventUpdateYawOnFinish: usize = 0x55A; // bool
                pub const m_bEnsureOnNavmeshOnFinish: usize = 0x55B; // bool
                pub const m_onDeathBehavior: usize = 0x55C; // ScriptedOnDeath_t
                pub const m_ConflictResponse: usize = 0x560; // ScriptedConflictResponse_t
                pub const m_OnBeginSequence: usize = 0x568; // CEntityIOOutput
                pub const m_OnActionStartOrLoop: usize = 0x590; // CEntityIOOutput
                pub const m_OnEndSequence: usize = 0x5B8; // CEntityIOOutput
                pub const m_OnPostIdleEndSequence: usize = 0x5E0; // CEntityIOOutput
                pub const m_OnCancelSequence: usize = 0x608; // CEntityIOOutput
                pub const m_OnCancelFailedSequence: usize = 0x630; // CEntityIOOutput
                pub const m_OnScriptEvent: usize = 0x658; // CEntityIOOutput[8]
                pub const m_matOtherToMain: usize = 0x7A0; // CTransform
                pub const m_hInteractionMainEntity: usize = 0x7C0; // CHandle<CBaseEntity>
                pub const m_iPlayerDeathBehavior: usize = 0x7C4; // int32
            }
            // Parent: CBaseEntity
            // Fields count: 8
            pub mod CSoundOpvarSetEntity {
                pub const m_iszStackName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_iszOperatorName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_iszOpvarName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_nOpvarType: usize = 0x4E0; // int32
                pub const m_nOpvarIndex: usize = 0x4E4; // int32
                pub const m_flOpvarValue: usize = 0x4E8; // float32
                pub const m_OpvarValueString: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_bSetOnSpawn: usize = 0x4F8; // bool
            }
            // Parent: CPointEntity
            // Fields count: 6
            pub mod CAISound {
                pub const m_iSoundType: usize = 0x4C0; // int32
                pub const m_iSoundContext: usize = 0x4C4; // int32
                pub const m_iVolume: usize = 0x4C8; // int32
                pub const m_iSoundIndex: usize = 0x4CC; // int32
                pub const m_flDuration: usize = 0x4D0; // float32
                pub const m_iszProxyEntityName: usize = 0x4D8; // CUtlSymbolLarge
            }
            // Parent: CLogicalEntity
            // Fields count: 1
            pub mod CSoundStackSave {
                pub const m_iszStackName: usize = 0x4C0; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Fields count: 12
            pub mod CSoundEventEntity {
                pub const m_bStartOnSpawn: usize = 0x4C0; // bool
                pub const m_bToLocalPlayer: usize = 0x4C1; // bool
                pub const m_bStopOnNew: usize = 0x4C2; // bool
                pub const m_bSaveRestore: usize = 0x4C3; // bool
                pub const m_bSavedIsPlaying: usize = 0x4C4; // bool
                pub const m_flSavedElapsedTime: usize = 0x4C8; // float32
                pub const m_iszSourceEntityName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_iszAttachmentName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_onGUIDChanged: usize = 0x4E0; // CEntityOutputTemplate<uint64>
                pub const m_onSoundFinished: usize = 0x508; // CEntityIOOutput
                pub const m_iszSoundName: usize = 0x550; // CUtlSymbolLarge
                pub const m_hSource: usize = 0x560; // CEntityHandle
            }
            // Parent: CSoundEventEntity
            // Fields count: 0
            pub mod CSoundEventEntityAlias_snd_event_point {
            }
            // Parent: CSoundEventEntity
            // Fields count: 2
            pub mod CSoundEventAABBEntity {
                pub const m_vMins: usize = 0x568; // 
                pub const m_vMaxs: usize = 0x574; // 
            }
            // Parent: CSoundEventEntity
            // Fields count: 2
            pub mod CSoundEventOBBEntity {
                pub const m_vMins: usize = 0x568; // 
                pub const m_vMaxs: usize = 0x574; // 
            }
            // Parent: CSoundEventEntity
            // Fields count: 6
            pub mod CSoundEventPathCornerEntity {
                pub const m_iszPathCorner: usize = 0x568; // CUtlSymbolLarge
                pub const m_iCountMax: usize = 0x570; // int32
                pub const m_flDistanceMax: usize = 0x574; // float32
                pub const m_flDistMaxSqr: usize = 0x578; // float32
                pub const m_flDotProductMax: usize = 0x57C; // float32
                pub const bPlaying: usize = 0x580; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 2
            pub mod CSoundEventParameter {
                pub const m_iszParamName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_flFloatValue: usize = 0x4D0; // float32
            }
            // Parent: CEnvSoundscapeProxy
            // Fields count: 0
            pub mod CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
            }
            // Parent: CEnvSoundscape
            // Fields count: 0
            pub mod CEnvSoundscapeAlias_snd_soundscape {
            }
            // Parent: CEnvSoundscapeTriggerable
            // Fields count: 0
            pub mod CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CNullEntity {
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CBaseDMStart {
                pub const m_Master: usize = 0x4C0; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoLandmark {
            }
            // Parent: CBaseModelEntity
            // Fields count: 14
            pub mod CSun {
                pub const m_vDirection: usize = 0x710; // 
                pub const m_clrOverlay: usize = 0x71C; // Color
                pub const m_iszEffectName: usize = 0x720; // CUtlSymbolLarge
                pub const m_iszSSEffectName: usize = 0x728; // CUtlSymbolLarge
                pub const m_bOn: usize = 0x730; // bool
                pub const m_bmaxColor: usize = 0x731; // bool
                pub const m_flSize: usize = 0x734; // float32
                pub const m_flRotation: usize = 0x738; // float32
                pub const m_flHazeScale: usize = 0x73C; // float32
                pub const m_flAlphaHaze: usize = 0x740; // float32
                pub const m_flAlphaHdr: usize = 0x744; // float32
                pub const m_flAlphaScale: usize = 0x748; // float32
                pub const m_flHDRColorScale: usize = 0x74C; // float32
                pub const m_flFarZScale: usize = 0x750; // float32
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CTankTargetChange {
                pub const m_newTarget: usize = 0x4C0; // CVariantBase<CVariantDefaultAllocator>
                pub const m_newTargetName: usize = 0x4D0; // CUtlSymbolLarge
            }
            // Parent: CPointEntity
            // Fields count: 7
            pub mod CTankTrainAI {
                pub const m_hTrain: usize = 0x4C0; // CHandle<CFuncTrackTrain>
                pub const m_hTargetEntity: usize = 0x4C4; // CHandle<CBaseEntity>
                pub const m_soundPlaying: usize = 0x4C8; // int32
                pub const m_startSoundName: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_engineSoundName: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_movementSoundName: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_targetEntityName: usize = 0x4F8; // CUtlSymbolLarge
            }
            // Parent: CBaseEntity
            // Fields count: 2
            pub mod CHandleTest {
                pub const m_Handle: usize = 0x4C0; // CHandle<CBaseEntity>
                pub const m_bSendHandle: usize = 0x4C4; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CHandleDummy {
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CPlatTrigger {
                pub const m_pPlatform: usize = 0x710; // CHandle<CFuncPlat>
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CFuncTrainControls {
            }
            // Parent: CBaseModelEntity
            // Fields count: 2
            pub mod CTriggerVolume {
                pub const m_iFilterName: usize = 0x710; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x718; // CHandle<CBaseFilter>
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoTeleportDestination {
            }
            // Parent: CBaseEntity
            // Fields count: 4
            pub mod CAI_ChangeHintGroup {
                pub const m_iSearchType: usize = 0x4C0; // int32
                pub const m_strSearchName: usize = 0x4C8; // CUtlSymbolLarge
                pub const m_strNewHintGroup: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_flRadius: usize = 0x4D8; // float32
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CLogicProximity {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoSpawnGroupLandmark {
            }
            // Parent: CLogicalEntity
            // Fields count: 11
            pub mod CInfoSpawnGroupLoadUnload {
                pub const m_OnSpawnGroupLoadStarted: usize = 0x4C0; // CEntityIOOutput
                pub const m_OnSpawnGroupLoadFinished: usize = 0x4E8; // CEntityIOOutput
                pub const m_OnSpawnGroupUnloadStarted: usize = 0x510; // CEntityIOOutput
                pub const m_OnSpawnGroupUnloadFinished: usize = 0x538; // CEntityIOOutput
                pub const m_iszSpawnGroupName: usize = 0x560; // CUtlSymbolLarge
                pub const m_iszSpawnGroupFilterName: usize = 0x568; // CUtlSymbolLarge
                pub const m_iszLandmarkName: usize = 0x570; // CUtlSymbolLarge
                pub const m_sFixedSpawnGroupName: usize = 0x578; // CUtlString
                pub const m_flTimeoutInterval: usize = 0x580; // float32
                pub const m_bStreamingStarted: usize = 0x584; // bool
                pub const m_bUnloadingStarted: usize = 0x585; // bool
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CPointPulse {
            }
            // Parent: CBaseEntity
            // Fields count: 0
            pub mod CPointScriptEntity {
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CFuncNavObstruction {
                pub const m_bDisabled: usize = 0x718; // bool
            }
            // Parent: CPointEntity
            // Fields count: 10
            pub mod CAmbientGeneric {
                pub const m_radius: usize = 0x4C0; // float32
                pub const m_flMaxRadius: usize = 0x4C4; // float32
                pub const m_iSoundLevel: usize = 0x4C8; // soundlevel_t
                pub const m_dpv: usize = 0x4CC; // dynpitchvol_t
                pub const m_fActive: usize = 0x530; // bool
                pub const m_fLooping: usize = 0x531; // bool
                pub const m_iszSound: usize = 0x538; // CUtlSymbolLarge
                pub const m_sSourceEntName: usize = 0x540; // CUtlSymbolLarge
                pub const m_hSoundSource: usize = 0x548; // CHandle<CBaseEntity>
                pub const m_nSoundSourceEntIndex: usize = 0x54C; // CEntityIndex
            }
            // Parent: Relationship_t
            // Fields count: 2
            pub mod RelationshipOverride_t {
                pub const entity: usize = 0x8; // CHandle<CBaseEntity>
                pub const classType: usize = 0xC; // Class_T
            }
            // Parent: CBaseModelEntity
            // Fields count: 16
            pub mod CBaseToggle {
                pub const m_toggle_state: usize = 0x710; // TOGGLE_STATE
                pub const m_flMoveDistance: usize = 0x714; // float32
                pub const m_flWait: usize = 0x718; // float32
                pub const m_flLip: usize = 0x71C; // float32
                pub const m_bAlwaysFireBlockedOutputs: usize = 0x720; // bool
                pub const m_vecPosition1: usize = 0x724; // 
                pub const m_vecPosition2: usize = 0x730; // 
                pub const m_vecMoveAng: usize = 0x73C; // QAngle
                pub const m_vecAngle1: usize = 0x748; // QAngle
                pub const m_vecAngle2: usize = 0x754; // QAngle
                pub const m_flHeight: usize = 0x760; // float32
                pub const m_hActivator: usize = 0x764; // CHandle<CBaseEntity>
                pub const m_vecFinalDest: usize = 0x768; // 
                pub const m_vecFinalAngle: usize = 0x774; // QAngle
                pub const m_movementType: usize = 0x780; // int32
                pub const m_sMaster: usize = 0x788; // CUtlSymbolLarge
            }
            // Parent: CBaseToggle
            // Fields count: 24
            pub mod CBaseButton {
                pub const m_angMoveEntitySpace: usize = 0x790; // QAngle
                pub const m_fStayPushed: usize = 0x79C; // bool
                pub const m_fRotating: usize = 0x79D; // bool
                pub const m_ls: usize = 0x7A0; // locksound_t
                pub const m_sUseSound: usize = 0x7C0; // CUtlSymbolLarge
                pub const m_sLockedSound: usize = 0x7C8; // CUtlSymbolLarge
                pub const m_sUnlockedSound: usize = 0x7D0; // CUtlSymbolLarge
                pub const m_bLocked: usize = 0x7D8; // bool
                pub const m_bDisabled: usize = 0x7D9; // bool
                pub const m_flUseLockedTime: usize = 0x7DC; // GameTime_t
                pub const m_bSolidBsp: usize = 0x7E0; // bool
                pub const m_OnDamaged: usize = 0x7E8; // CEntityIOOutput
                pub const m_OnPressed: usize = 0x810; // CEntityIOOutput
                pub const m_OnUseLocked: usize = 0x838; // CEntityIOOutput
                pub const m_OnIn: usize = 0x860; // CEntityIOOutput
                pub const m_OnOut: usize = 0x888; // CEntityIOOutput
                pub const m_nState: usize = 0x8B0; // int32
                pub const m_hConstraint: usize = 0x8B4; // CEntityHandle
                pub const m_hConstraintParent: usize = 0x8B8; // CEntityHandle
                pub const m_bForceNpcExclude: usize = 0x8BC; // bool
                pub const m_sGlowEntity: usize = 0x8C0; // CUtlSymbolLarge
                pub const m_glowEntity: usize = 0x8C8; // CHandle<CBaseModelEntity>
                pub const m_usable: usize = 0x8CC; // bool
                pub const m_szDisplayText: usize = 0x8D0; // CUtlSymbolLarge
            }
            // Parent: CBaseButton
            // Fields count: 0
            pub mod CPhysicalButton {
            }
            // Parent: CBaseButton
            // Fields count: 0
            pub mod CRotButton {
            }
            // Parent: CRotButton
            // Fields count: 14
            pub mod CMomentaryRotButton {
                pub const m_Position: usize = 0x8D8; // CEntityOutputTemplate<float32>
                pub const m_OnUnpressed: usize = 0x900; // CEntityIOOutput
                pub const m_OnFullyOpen: usize = 0x928; // CEntityIOOutput
                pub const m_OnFullyClosed: usize = 0x950; // CEntityIOOutput
                pub const m_OnReachedPosition: usize = 0x978; // CEntityIOOutput
                pub const m_lastUsed: usize = 0x9A0; // int32
                pub const m_start: usize = 0x9A4; // QAngle
                pub const m_end: usize = 0x9B0; // QAngle
                pub const m_IdealYaw: usize = 0x9BC; // float32
                pub const m_sNoise: usize = 0x9C0; // CUtlSymbolLarge
                pub const m_bUpdateTarget: usize = 0x9C8; // bool
                pub const m_direction: usize = 0x9CC; // int32
                pub const m_returnSpeed: usize = 0x9D0; // float32
                pub const m_flStartPosition: usize = 0x9D4; // float32
            }
            // Parent: CPointEntity
            // Fields count: 4
            pub mod CRagdollMagnet {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_radius: usize = 0x4C4; // float32
                pub const m_force: usize = 0x4C8; // float32
                pub const m_axis: usize = 0x4CC; // 
            }
            // Parent: CBaseToggle
            // Fields count: 27
            pub mod CBaseDoor {
                pub const m_angMoveEntitySpace: usize = 0x7A0; // QAngle
                pub const m_vecMoveDirParentSpace: usize = 0x7AC; // 
                pub const m_ls: usize = 0x7B8; // locksound_t
                pub const m_bForceClosed: usize = 0x7D8; // bool
                pub const m_bDoorGroup: usize = 0x7D9; // bool
                pub const m_bLocked: usize = 0x7DA; // bool
                pub const m_bIgnoreDebris: usize = 0x7DB; // bool
                pub const m_eSpawnPosition: usize = 0x7DC; // FuncDoorSpawnPos_t
                pub const m_flBlockDamage: usize = 0x7E0; // float32
                pub const m_NoiseMoving: usize = 0x7E8; // CUtlSymbolLarge
                pub const m_NoiseArrived: usize = 0x7F0; // CUtlSymbolLarge
                pub const m_NoiseMovingClosed: usize = 0x7F8; // CUtlSymbolLarge
                pub const m_NoiseArrivedClosed: usize = 0x800; // CUtlSymbolLarge
                pub const m_ChainTarget: usize = 0x808; // CUtlSymbolLarge
                pub const m_OnBlockedClosing: usize = 0x810; // CEntityIOOutput
                pub const m_OnBlockedOpening: usize = 0x838; // CEntityIOOutput
                pub const m_OnUnblockedClosing: usize = 0x860; // CEntityIOOutput
                pub const m_OnUnblockedOpening: usize = 0x888; // CEntityIOOutput
                pub const m_OnFullyClosed: usize = 0x8B0; // CEntityIOOutput
                pub const m_OnFullyOpen: usize = 0x8D8; // CEntityIOOutput
                pub const m_OnClose: usize = 0x900; // CEntityIOOutput
                pub const m_OnOpen: usize = 0x928; // CEntityIOOutput
                pub const m_OnLockedUse: usize = 0x950; // CEntityIOOutput
                pub const m_bLoopMoveSound: usize = 0x978; // bool
                pub const m_bCreateNavObstacle: usize = 0x990; // bool
                pub const m_isChaining: usize = 0x991; // bool
                pub const m_bIsUsable: usize = 0x992; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CEntityBlocker {
            }
            // Parent: CBaseModelEntity
            // Fields count: 10
            pub mod CEntityDissolve {
                pub const m_flFadeInStart: usize = 0x710; // float32
                pub const m_flFadeInLength: usize = 0x714; // float32
                pub const m_flFadeOutModelStart: usize = 0x718; // float32
                pub const m_flFadeOutModelLength: usize = 0x71C; // float32
                pub const m_flFadeOutStart: usize = 0x720; // float32
                pub const m_flFadeOutLength: usize = 0x724; // float32
                pub const m_flStartTime: usize = 0x728; // GameTime_t
                pub const m_nDissolveType: usize = 0x72C; // EntityDisolveType_t
                pub const m_vDissolverOrigin: usize = 0x730; // 
                pub const m_nMagnitude: usize = 0x73C; // uint32
            }
            // Parent: CModelPointEntity
            // Fields count: 30
            pub mod CEnvProjectedTexture {
                pub const m_hTargetEntity: usize = 0x710; // CHandle<CBaseEntity>
                pub const m_bState: usize = 0x714; // bool
                pub const m_bAlwaysUpdate: usize = 0x715; // bool
                pub const m_flLightFOV: usize = 0x718; // float32
                pub const m_bEnableShadows: usize = 0x71C; // bool
                pub const m_bSimpleProjection: usize = 0x71D; // bool
                pub const m_bLightOnlyTarget: usize = 0x71E; // bool
                pub const m_bLightWorld: usize = 0x71F; // bool
                pub const m_bCameraSpace: usize = 0x720; // bool
                pub const m_flBrightnessScale: usize = 0x724; // float32
                pub const m_LightColor: usize = 0x728; // Color
                pub const m_flIntensity: usize = 0x72C; // float32
                pub const m_flLinearAttenuation: usize = 0x730; // float32
                pub const m_flQuadraticAttenuation: usize = 0x734; // float32
                pub const m_bVolumetric: usize = 0x738; // bool
                pub const m_flNoiseStrength: usize = 0x73C; // float32
                pub const m_flFlashlightTime: usize = 0x740; // float32
                pub const m_nNumPlanes: usize = 0x744; // uint32
                pub const m_flPlaneOffset: usize = 0x748; // float32
                pub const m_flVolumetricIntensity: usize = 0x74C; // float32
                pub const m_flColorTransitionTime: usize = 0x750; // float32
                pub const m_flAmbient: usize = 0x754; // float32
                pub const m_SpotlightTextureName: usize = 0x758; // char[512]
                pub const m_nSpotlightTextureFrame: usize = 0x958; // int32
                pub const m_nShadowQuality: usize = 0x95C; // uint32
                pub const m_flNearZ: usize = 0x960; // float32
                pub const m_flFarZ: usize = 0x964; // float32
                pub const m_flProjectionSize: usize = 0x968; // float32
                pub const m_flRotation: usize = 0x96C; // float32
                pub const m_bFlipHorizontal: usize = 0x970; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 9
            pub mod CEnvDecal {
                pub const m_hDecalMaterial: usize = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_flWidth: usize = 0x718; // float32
                pub const m_flHeight: usize = 0x71C; // float32
                pub const m_flDepth: usize = 0x720; // float32
                pub const m_nRenderOrder: usize = 0x724; // uint32
                pub const m_bProjectOnWorld: usize = 0x728; // bool
                pub const m_bProjectOnCharacters: usize = 0x729; // bool
                pub const m_bProjectOnWater: usize = 0x72A; // bool
                pub const m_flDepthSortBias: usize = 0x72C; // float32
            }
            // Parent: CPointEntity
            // Fields count: 6
            pub mod CMessage {
                pub const m_iszMessage: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_MessageVolume: usize = 0x4C8; // float32
                pub const m_MessageAttenuation: usize = 0x4CC; // int32
                pub const m_Radius: usize = 0x4D0; // float32
                pub const m_sNoise: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_OnShowMessage: usize = 0x4E0; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 17
            pub mod CEnvMicrophone {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_hMeasureTarget: usize = 0x4C4; // CHandle<CBaseEntity>
                pub const m_nSoundMask: usize = 0x4C8; // int32
                pub const m_flSensitivity: usize = 0x4CC; // float32
                pub const m_flSmoothFactor: usize = 0x4D0; // float32
                pub const m_flMaxRange: usize = 0x4D4; // float32
                pub const m_iszSpeakerName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_hSpeaker: usize = 0x4E0; // CHandle<CBaseEntity>
                pub const m_bAvoidFeedback: usize = 0x4E4; // bool
                pub const m_iSpeakerDSPPreset: usize = 0x4E8; // int32
                pub const m_iszListenFilter: usize = 0x4F0; // CUtlSymbolLarge
                pub const m_hListenFilter: usize = 0x4F8; // CHandle<CBaseFilter>
                pub const m_SoundLevel: usize = 0x500; // CEntityOutputTemplate<float32>
                pub const m_OnRoutedSound: usize = 0x528; // CEntityIOOutput
                pub const m_OnHeardSound: usize = 0x550; // CEntityIOOutput
                pub const m_szLastSound: usize = 0x578; // char[256]
                pub const m_iLastRoutedFrame: usize = 0x678; // int32
            }
            // Parent: CBaseModelEntity
            // Fields count: 21
            pub mod CBreakable {
                pub const m_Material: usize = 0x720; // Materials
                pub const m_hBreaker: usize = 0x724; // CHandle<CBaseEntity>
                pub const m_Explosion: usize = 0x728; // Explosions
                pub const m_iszSpawnObject: usize = 0x730; // CUtlSymbolLarge
                pub const m_flPressureDelay: usize = 0x738; // float32
                pub const m_iMinHealthDmg: usize = 0x73C; // int32
                pub const m_iszPropData: usize = 0x740; // CUtlSymbolLarge
                pub const m_impactEnergyScale: usize = 0x748; // float32
                pub const m_nOverrideBlockLOS: usize = 0x74C; // EOverrideBlockLOS_t
                pub const m_OnBreak: usize = 0x750; // CEntityIOOutput
                pub const m_OnHealthChanged: usize = 0x778; // CEntityOutputTemplate<float32>
                pub const m_flDmgModBullet: usize = 0x7A0; // float32
                pub const m_flDmgModClub: usize = 0x7A4; // float32
                pub const m_flDmgModExplosive: usize = 0x7A8; // float32
                pub const m_flDmgModFire: usize = 0x7AC; // float32
                pub const m_iszPhysicsDamageTableName: usize = 0x7B0; // CUtlSymbolLarge
                pub const m_iszBasePropData: usize = 0x7B8; // CUtlSymbolLarge
                pub const m_iInteractions: usize = 0x7C0; // int32
                pub const m_PerformanceMode: usize = 0x7C4; // PerformanceMode_t
                pub const m_hPhysicsAttacker: usize = 0x7C8; // CHandle<CBasePlayerPawn>
                pub const m_flLastPhysicsInfluenceTime: usize = 0x7CC; // GameTime_t
            }
            // Parent: CBaseToggle
            // Fields count: 13
            pub mod CFuncMoveLinear {
                pub const m_authoredPosition: usize = 0x790; // MoveLinearAuthoredPos_t
                pub const m_angMoveEntitySpace: usize = 0x794; // QAngle
                pub const m_vecMoveDirParentSpace: usize = 0x7A0; // 
                pub const m_soundStart: usize = 0x7B0; // CUtlSymbolLarge
                pub const m_soundStop: usize = 0x7B8; // CUtlSymbolLarge
                pub const m_currentSound: usize = 0x7C0; // CUtlSymbolLarge
                pub const m_flBlockDamage: usize = 0x7C8; // float32
                pub const m_flStartPosition: usize = 0x7CC; // float32
                pub const m_flMoveDistance: usize = 0x7D0; // float32
                pub const m_OnFullyOpen: usize = 0x7E0; // CEntityIOOutput
                pub const m_OnFullyClosed: usize = 0x808; // CEntityIOOutput
                pub const m_bCreateMovableNavMesh: usize = 0x830; // bool
                pub const m_bCreateNavObstacle: usize = 0x831; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 19
            pub mod CFuncRotating {
                pub const m_OnStopped: usize = 0x710; // CEntityIOOutput
                pub const m_OnStarted: usize = 0x738; // CEntityIOOutput
                pub const m_OnReachedStart: usize = 0x760; // CEntityIOOutput
                pub const m_localRotationVector: usize = 0x788; // RotationVector
                pub const m_flFanFriction: usize = 0x794; // float32
                pub const m_flAttenuation: usize = 0x798; // float32
                pub const m_flVolume: usize = 0x79C; // float32
                pub const m_flTargetSpeed: usize = 0x7A0; // float32
                pub const m_flMaxSpeed: usize = 0x7A4; // float32
                pub const m_flBlockDamage: usize = 0x7A8; // float32
                pub const m_flTimeScale: usize = 0x7AC; // float32
                pub const m_NoiseRunning: usize = 0x7B0; // CUtlSymbolLarge
                pub const m_bReversed: usize = 0x7B8; // bool
                pub const m_bAccelDecel: usize = 0x7B9; // bool
                pub const m_prevLocalAngles: usize = 0x7C4; // QAngle
                pub const m_angStart: usize = 0x7D0; // QAngle
                pub const m_bStopAtStartPos: usize = 0x7DC; // bool
                pub const m_vecClientOrigin: usize = 0x7E0; // 
                pub const m_vecClientAngles: usize = 0x7EC; // QAngle
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CItemGenericTriggerHelper {
                pub const m_hParentItem: usize = 0x710; // CHandle<CItemGeneric>
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CRuleEntity {
                pub const m_iszMaster: usize = 0x710; // CUtlSymbolLarge
            }
            // Parent: CRuleEntity
            // Fields count: 1
            pub mod CRulePointEntity {
                pub const m_Score: usize = 0x718; // int32
            }
            // Parent: CRulePointEntity
            // Fields count: 0
            pub mod CGamePlayerEquip {
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CMarkupVolume {
                pub const m_bEnabled: usize = 0x710; // bool
            }
            // Parent: CMarkupVolume
            // Fields count: 5
            pub mod CMarkupVolumeTagged {
                pub const m_bIsGroup: usize = 0x748; // bool
                pub const m_bGroupByPrefab: usize = 0x749; // bool
                pub const m_bGroupByVolume: usize = 0x74A; // bool
                pub const m_bGroupOtherGroups: usize = 0x74B; // bool
                pub const m_bIsInGroup: usize = 0x74C; // bool
            }
            // Parent: CMarkupVolumeTagged
            // Fields count: 3
            pub mod CMarkupVolumeWithRef {
                pub const m_bUseRef: usize = 0x750; // bool
                pub const m_vRefPos: usize = 0x754; // 
                pub const m_flRefDot: usize = 0x760; // float32
            }
            // Parent: CBaseModelEntity
            // Fields count: 6
            pub mod CFuncBrush {
                pub const m_iSolidity: usize = 0x710; // BrushSolidities_e
                pub const m_iDisabled: usize = 0x714; // int32
                pub const m_bSolidBsp: usize = 0x718; // bool
                pub const m_iszExcludedClass: usize = 0x720; // CUtlSymbolLarge
                pub const m_bInvertExclusion: usize = 0x728; // bool
                pub const m_bScriptedMovement: usize = 0x729; // bool
            }
            // Parent: CPointEntity
            // Fields count: 9
            pub mod CPathTrack {
                pub const m_pnext: usize = 0x4C0; // CPathTrack*
                pub const m_pprevious: usize = 0x4C8; // CPathTrack*
                pub const m_paltpath: usize = 0x4D0; // CPathTrack*
                pub const m_flRadius: usize = 0x4D8; // float32
                pub const m_length: usize = 0x4DC; // float32
                pub const m_altName: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_nIterVal: usize = 0x4E8; // int32
                pub const m_eOrientationType: usize = 0x4EC; // TrackOrientationType_t
                pub const m_OnPass: usize = 0x4F0; // CEntityIOOutput
            }
            // Parent: CBreakable
            // Fields count: 15
            pub mod CPhysBox {
                pub const m_damageType: usize = 0x7D0; // int32
                pub const m_massScale: usize = 0x7D4; // float32
                pub const m_damageToEnableMotion: usize = 0x7D8; // int32
                pub const m_flForceToEnableMotion: usize = 0x7DC; // float32
                pub const m_angPreferredCarryAngles: usize = 0x7E0; // QAngle
                pub const m_bNotSolidToWorld: usize = 0x7EC; // bool
                pub const m_bEnableUseOutput: usize = 0x7ED; // bool
                pub const m_iExploitableByPlayer: usize = 0x7F0; // int32
                pub const m_flTouchOutputPerEntityDelay: usize = 0x7F4; // float32
                pub const m_OnDamaged: usize = 0x7F8; // CEntityIOOutput
                pub const m_OnAwakened: usize = 0x820; // CEntityIOOutput
                pub const m_OnMotionEnabled: usize = 0x848; // CEntityIOOutput
                pub const m_OnPlayerUse: usize = 0x870; // CEntityIOOutput
                pub const m_OnStartTouch: usize = 0x898; // CEntityIOOutput
                pub const m_hCarryingPlayer: usize = 0x8C0; // CHandle<CBasePlayerPawn>
            }
            // Parent: CPointEntity
            // Fields count: 9
            pub mod CPhysExplosion {
                pub const m_bExplodeOnSpawn: usize = 0x4C0; // bool
                pub const m_flMagnitude: usize = 0x4C4; // float32
                pub const m_flDamage: usize = 0x4C8; // float32
                pub const m_radius: usize = 0x4CC; // float32
                pub const m_targetEntityName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_flInnerRadius: usize = 0x4D8; // float32
                pub const m_flPushScale: usize = 0x4DC; // float32
                pub const m_bConvertToDebrisWhenPossible: usize = 0x4E0; // bool
                pub const m_OnPushedPlayer: usize = 0x4E8; // CEntityIOOutput
            }
            // Parent: CPointEntity
            // Fields count: 3
            pub mod CPhysImpact {
                pub const m_damage: usize = 0x4C0; // float32
                pub const m_distance: usize = 0x4C4; // float32
                pub const m_directionEntityName: usize = 0x4C8; // CUtlSymbolLarge
            }
            // Parent: CBaseModelEntity
            // Fields count: 21
            pub mod CRopeKeyframe {
                pub const m_RopeFlags: usize = 0x718; // uint16
                pub const m_iNextLinkName: usize = 0x720; // CUtlSymbolLarge
                pub const m_Slack: usize = 0x728; // int16
                pub const m_Width: usize = 0x72C; // float32
                pub const m_TextureScale: usize = 0x730; // float32
                pub const m_nSegments: usize = 0x734; // uint8
                pub const m_bConstrainBetweenEndpoints: usize = 0x735; // bool
                pub const m_strRopeMaterialModel: usize = 0x738; // CUtlSymbolLarge
                pub const m_iRopeMaterialModelIndex: usize = 0x740; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_Subdiv: usize = 0x748; // uint8
                pub const m_nChangeCount: usize = 0x749; // uint8
                pub const m_RopeLength: usize = 0x74A; // int16
                pub const m_fLockedPoints: usize = 0x74C; // uint8
                pub const m_bCreatedFromMapFile: usize = 0x74D; // bool
                pub const m_flScrollSpeed: usize = 0x750; // float32
                pub const m_bStartPointValid: usize = 0x754; // bool
                pub const m_bEndPointValid: usize = 0x755; // bool
                pub const m_hStartPoint: usize = 0x758; // CHandle<CBaseEntity>
                pub const m_hEndPoint: usize = 0x75C; // CHandle<CBaseEntity>
                pub const m_iStartAttachment: usize = 0x760; // AttachmentHandle_t
                pub const m_iEndAttachment: usize = 0x761; // AttachmentHandle_t
            }
            // Parent: CPointEntity
            // Fields count: 4
            pub mod CSoundEnt {
                pub const m_iFreeSound: usize = 0x4C0; // int32
                pub const m_iActiveSound: usize = 0x4C4; // int32
                pub const m_cLastActiveSounds: usize = 0x4C8; // int32
                pub const m_SoundPool: usize = 0x4CC; // CSound[128]
            }
            // Parent: CBaseModelEntity
            // Fields count: 4
            pub mod CSpotlightEnd {
                pub const m_flLightScale: usize = 0x710; // float32
                pub const m_Radius: usize = 0x714; // float32
                pub const m_vSpotlightDir: usize = 0x718; // 
                pub const m_vSpotlightOrg: usize = 0x724; // 
            }
            // Parent: CBaseModelEntity
            // Fields count: 38
            pub mod CFuncTrackTrain {
                pub const m_ppath: usize = 0x710; // CHandle<CPathTrack>
                pub const m_length: usize = 0x714; // float32
                pub const m_vPosPrev: usize = 0x718; // 
                pub const m_angPrev: usize = 0x724; // QAngle
                pub const m_controlMins: usize = 0x730; // 
                pub const m_controlMaxs: usize = 0x73C; // 
                pub const m_lastBlockPos: usize = 0x748; // 
                pub const m_lastBlockTick: usize = 0x754; // int32
                pub const m_flVolume: usize = 0x758; // float32
                pub const m_flBank: usize = 0x75C; // float32
                pub const m_oldSpeed: usize = 0x760; // float32
                pub const m_flBlockDamage: usize = 0x764; // float32
                pub const m_height: usize = 0x768; // float32
                pub const m_maxSpeed: usize = 0x76C; // float32
                pub const m_dir: usize = 0x770; // float32
                pub const m_iszSoundMove: usize = 0x778; // CUtlSymbolLarge
                pub const m_iszSoundMovePing: usize = 0x780; // CUtlSymbolLarge
                pub const m_iszSoundStart: usize = 0x788; // CUtlSymbolLarge
                pub const m_iszSoundStop: usize = 0x790; // CUtlSymbolLarge
                pub const m_strPathTarget: usize = 0x798; // CUtlSymbolLarge
                pub const m_flMoveSoundMinDuration: usize = 0x7A0; // float32
                pub const m_flMoveSoundMaxDuration: usize = 0x7A4; // float32
                pub const m_flNextMoveSoundTime: usize = 0x7A8; // GameTime_t
                pub const m_flMoveSoundMinPitch: usize = 0x7AC; // float32
                pub const m_flMoveSoundMaxPitch: usize = 0x7B0; // float32
                pub const m_eOrientationType: usize = 0x7B4; // TrainOrientationType_t
                pub const m_eVelocityType: usize = 0x7B8; // TrainVelocityType_t
                pub const m_OnStart: usize = 0x7C8; // CEntityIOOutput
                pub const m_OnNext: usize = 0x7F0; // CEntityIOOutput
                pub const m_OnArrivedAtDestinationNode: usize = 0x818; // CEntityIOOutput
                pub const m_bManualSpeedChanges: usize = 0x840; // bool
                pub const m_flDesiredSpeed: usize = 0x844; // float32
                pub const m_flSpeedChangeTime: usize = 0x848; // GameTime_t
                pub const m_flAccelSpeed: usize = 0x84C; // float32
                pub const m_flDecelSpeed: usize = 0x850; // float32
                pub const m_bAccelToSpeed: usize = 0x854; // bool
                pub const m_flTimeScale: usize = 0x858; // float32
                pub const m_flNextMPSoundTime: usize = 0x85C; // GameTime_t
            }
            // Parent: CBaseToggle
            // Fields count: 11
            pub mod CBaseTrigger {
                pub const m_bDisabled: usize = 0x790; // bool
                pub const m_iFilterName: usize = 0x798; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x7A0; // CHandle<CBaseFilter>
                pub const m_OnStartTouch: usize = 0x7A8; // CEntityIOOutput
                pub const m_OnStartTouchAll: usize = 0x7D0; // CEntityIOOutput
                pub const m_OnEndTouch: usize = 0x7F8; // CEntityIOOutput
                pub const m_OnEndTouchAll: usize = 0x820; // CEntityIOOutput
                pub const m_OnTouching: usize = 0x848; // CEntityIOOutput
                pub const m_OnNotTouching: usize = 0x870; // CEntityIOOutput
                pub const m_hTouchingEntities: usize = 0x898; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_bClientSidePredicted: usize = 0x8B0; // bool
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CTriggerMultiple {
                pub const m_OnTrigger: usize = 0x8B8; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Fields count: 15
            pub mod CTriggerSndSosOpvar {
                pub const m_hTouchingPlayers: usize = 0x8B8; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_flPosition: usize = 0x8D0; // 
                pub const m_flCenterSize: usize = 0x8DC; // float32
                pub const m_flMinVal: usize = 0x8E0; // float32
                pub const m_flMaxVal: usize = 0x8E4; // float32
                pub const m_flWait: usize = 0x8E8; // float32
                pub const m_opvarName: usize = 0x8F0; // CUtlSymbolLarge
                pub const m_stackName: usize = 0x8F8; // CUtlSymbolLarge
                pub const m_operatorName: usize = 0x900; // CUtlSymbolLarge
                pub const m_bVolIs2D: usize = 0x908; // bool
                pub const m_opvarNameChar: usize = 0x909; // char[256]
                pub const m_stackNameChar: usize = 0xA09; // char[256]
                pub const m_operatorNameChar: usize = 0xB09; // char[256]
                pub const m_VecNormPos: usize = 0xC0C; // 
                pub const m_flNormCenterSize: usize = 0xC18; // float32
            }
            // Parent: CBaseTrigger
            // Fields count: 14
            pub mod CTriggerHurt {
                pub const m_flOriginalDamage: usize = 0x8B8; // float32
                pub const m_flDamage: usize = 0x8BC; // float32
                pub const m_flDamageCap: usize = 0x8C0; // float32
                pub const m_flLastDmgTime: usize = 0x8C4; // GameTime_t
                pub const m_flForgivenessDelay: usize = 0x8C8; // float32
                pub const m_bitsDamageInflict: usize = 0x8CC; // int32
                pub const m_damageModel: usize = 0x8D0; // int32
                pub const m_bNoDmgForce: usize = 0x8D4; // bool
                pub const m_vDamageForce: usize = 0x8D8; // 
                pub const m_thinkAlways: usize = 0x8E4; // bool
                pub const m_hurtThinkPeriod: usize = 0x8E8; // float32
                pub const m_OnHurt: usize = 0x8F0; // CEntityIOOutput
                pub const m_OnHurtPlayer: usize = 0x918; // CEntityIOOutput
                pub const m_hurtEntities: usize = 0x940; // CUtlVector<CHandle<CBaseEntity>>
            }
            // Parent: CTriggerHurt
            // Fields count: 0
            pub mod CTriggerHurtGhost {
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CTriggerCallback {
            }
            // Parent: CBaseTrigger
            // Fields count: 14
            pub mod CTriggerLerpObject {
                pub const m_iszLerpTarget: usize = 0x8B8; // CUtlSymbolLarge
                pub const m_hLerpTarget: usize = 0x8C0; // CHandle<CBaseEntity>
                pub const m_iszLerpTargetAttachment: usize = 0x8C8; // CUtlSymbolLarge
                pub const m_hLerpTargetAttachment: usize = 0x8D0; // AttachmentHandle_t
                pub const m_flLerpDuration: usize = 0x8D4; // float32
                pub const m_bLerpRestoreMoveType: usize = 0x8D8; // bool
                pub const m_bSingleLerpObject: usize = 0x8D9; // bool
                pub const m_vecLerpingObjects: usize = 0x8E0; // CUtlVector<lerpdata_t>
                pub const m_iszLerpEffect: usize = 0x8F8; // CUtlSymbolLarge
                pub const m_iszLerpSound: usize = 0x900; // CUtlSymbolLarge
                pub const m_bAttachTouchingObject: usize = 0x908; // bool
                pub const m_hEntityToWaitForDisconnect: usize = 0x90C; // CHandle<CBaseEntity>
                pub const m_OnLerpStarted: usize = 0x910; // CEntityIOOutput
                pub const m_OnLerpFinished: usize = 0x938; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Fields count: 7
            pub mod CChangeLevel {
                pub const m_sMapName: usize = 0x8B8; // CUtlString
                pub const m_sLandmarkName: usize = 0x8C0; // CUtlString
                pub const m_OnChangeLevel: usize = 0x8C8; // CEntityIOOutput
                pub const m_bTouched: usize = 0x8F0; // bool
                pub const m_bNoTouch: usize = 0x8F1; // bool
                pub const m_bNewChapter: usize = 0x8F2; // bool
                pub const m_bOnChangeLevelFired: usize = 0x8F3; // bool
            }
            // Parent: CBaseTrigger
            // Fields count: 3
            pub mod CTriggerTeleport {
                pub const m_iLandmark: usize = 0x8B8; // CUtlSymbolLarge
                pub const m_bUseLandmarkAngles: usize = 0x8C0; // bool
                pub const m_bMirrorPlayer: usize = 0x8C1; // bool
            }
            // Parent: CBaseTrigger
            // Fields count: 12
            pub mod CTriggerFan {
                pub const m_vFanOrigin: usize = 0x8B8; // 
                pub const m_vFanEnd: usize = 0x8C4; // 
                pub const m_vNoise: usize = 0x8D0; // 
                pub const m_flForce: usize = 0x8DC; // float32
                pub const m_flRopeForceScale: usize = 0x8E0; // float32
                pub const m_flPlayerForce: usize = 0x8E4; // float32
                pub const m_flRampTime: usize = 0x8E8; // float32
                pub const m_bFalloff: usize = 0x8EC; // bool
                pub const m_bPushPlayer: usize = 0x8ED; // bool
                pub const m_bRampDown: usize = 0x8EE; // bool
                pub const m_bAddNoise: usize = 0x8EF; // bool
                pub const m_RampTimer: usize = 0x8F0; // CountdownTimer
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CNavWalkable {
            }
            // Parent: CBaseModelEntity
            // Fields count: 2
            pub mod CFuncNavBlocker {
                pub const m_bDisabled: usize = 0x710; // bool
                pub const m_nBlockedTeamNumber: usize = 0x714; // int32
            }
            // Parent: CPointEntity
            // Fields count: 13
            pub mod CNavLinkAreaEntity {
                pub const m_flWidth: usize = 0x4C0; // float32
                pub const m_vLocatorOffset: usize = 0x4C4; // 
                pub const m_qLocatorAnglesOffset: usize = 0x4D0; // QAngle
                pub const m_strMovementForward: usize = 0x4E0; // CUtlSymbolLarge
                pub const m_strMovementReverse: usize = 0x4E8; // CUtlSymbolLarge
                pub const m_nNavLinkIdForward: usize = 0x4F0; // int32
                pub const m_nNavLinkIdReverse: usize = 0x4F4; // int32
                pub const m_bEnabled: usize = 0x4F8; // bool
                pub const m_strFilterName: usize = 0x500; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x508; // CHandle<CBaseFilter>
                pub const m_OnNavLinkStart: usize = 0x510; // CEntityIOOutput
                pub const m_OnNavLinkFinish: usize = 0x538; // CEntityIOOutput
                pub const m_bIsTerminus: usize = 0x560; // bool
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CNavSpaceInfo {
                pub const m_bCreateFlightSpace: usize = 0x4C0; // bool
            }
            // Parent: CBaseModelEntity
            // Fields count: 24
            pub mod CBeam {
                pub const m_flFrameRate: usize = 0x710; // float32
                pub const m_flHDRColorScale: usize = 0x714; // float32
                pub const m_flFireTime: usize = 0x718; // GameTime_t
                pub const m_flDamage: usize = 0x71C; // float32
                pub const m_nNumBeamEnts: usize = 0x720; // uint8
                pub const m_hBaseMaterial: usize = 0x728; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nHaloIndex: usize = 0x730; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nBeamType: usize = 0x738; // BeamType_t
                pub const m_nBeamFlags: usize = 0x73C; // uint32
                pub const m_hAttachEntity: usize = 0x740; // CHandle<CBaseEntity>[10]
                pub const m_nAttachIndex: usize = 0x768; // AttachmentHandle_t[10]
                pub const m_fWidth: usize = 0x774; // float32
                pub const m_fEndWidth: usize = 0x778; // float32
                pub const m_fFadeLength: usize = 0x77C; // float32
                pub const m_fHaloScale: usize = 0x780; // float32
                pub const m_fAmplitude: usize = 0x784; // float32
                pub const m_fStartFrame: usize = 0x788; // float32
                pub const m_fSpeed: usize = 0x78C; // float32
                pub const m_flFrame: usize = 0x790; // float32
                pub const m_nClipStyle: usize = 0x794; // BeamClipStyle_t
                pub const m_bTurnedOff: usize = 0x798; // bool
                pub const m_vecEndPos: usize = 0x79C; // 
                pub const m_hEndEntity: usize = 0x7A8; // CHandle<CBaseEntity>
                pub const m_nDissolveType: usize = 0x7AC; // int32
            }
            // Parent: CBaseModelEntity
            // Fields count: 12
            pub mod CFuncLadder {
                pub const m_vecLadderDir: usize = 0x710; // 
                pub const m_Dismounts: usize = 0x720; // CUtlVector<CHandle<CInfoLadderDismount>>
                pub const m_vecLocalTop: usize = 0x738; // 
                pub const m_vecPlayerMountPositionTop: usize = 0x744; // 
                pub const m_vecPlayerMountPositionBottom: usize = 0x750; // 
                pub const m_flAutoRideSpeed: usize = 0x75C; // float32
                pub const m_bDisabled: usize = 0x760; // bool
                pub const m_bFakeLadder: usize = 0x761; // bool
                pub const m_bHasSlack: usize = 0x762; // bool
                pub const m_surfacePropName: usize = 0x768; // CUtlSymbolLarge
                pub const m_OnPlayerGotOnLadder: usize = 0x770; // CEntityIOOutput
                pub const m_OnPlayerGotOffLadder: usize = 0x798; // CEntityIOOutput
            }
            // Parent: CBaseModelEntity
            // Fields count: 32
            pub mod CFuncShatterglass {
                pub const m_hGlassMaterialDamaged: usize = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hGlassMaterialUndamaged: usize = 0x718; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hConcreteMaterialEdgeFace: usize = 0x720; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hConcreteMaterialEdgeCaps: usize = 0x728; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hConcreteMaterialEdgeFins: usize = 0x730; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_matPanelTransform: usize = 0x738; // matrix3x4_t
                pub const m_matPanelTransformWsTemp: usize = 0x768; // matrix3x4_t
                pub const m_vecShatterGlassShards: usize = 0x798; // CUtlVector<uint32>
                pub const m_PanelSize: usize = 0x7B0; // Vector2D
                pub const m_vecPanelNormalWs: usize = 0x7B8; // 
                pub const m_nNumShardsEverCreated: usize = 0x7C4; // int32
                pub const m_flLastShatterSoundEmitTime: usize = 0x7C8; // GameTime_t
                pub const m_flLastCleanupTime: usize = 0x7CC; // GameTime_t
                pub const m_flInitAtTime: usize = 0x7D0; // GameTime_t
                pub const m_flGlassThickness: usize = 0x7D4; // float32
                pub const m_flSpawnInvulnerability: usize = 0x7D8; // float32
                pub const m_bBreakSilent: usize = 0x7DC; // bool
                pub const m_bBreakShardless: usize = 0x7DD; // bool
                pub const m_bBroken: usize = 0x7DE; // bool
                pub const m_bHasRateLimitedShards: usize = 0x7DF; // bool
                pub const m_bGlassNavIgnore: usize = 0x7E0; // bool
                pub const m_bGlassInFrame: usize = 0x7E1; // bool
                pub const m_bStartBroken: usize = 0x7E2; // bool
                pub const m_iInitialDamageType: usize = 0x7E3; // uint8
                pub const m_szDamagePositioningEntityName01: usize = 0x7E8; // CUtlSymbolLarge
                pub const m_szDamagePositioningEntityName02: usize = 0x7F0; // CUtlSymbolLarge
                pub const m_szDamagePositioningEntityName03: usize = 0x7F8; // CUtlSymbolLarge
                pub const m_szDamagePositioningEntityName04: usize = 0x800; // CUtlSymbolLarge
                pub const m_vInitialDamagePositions: usize = 0x808; // CUtlVector<Vector>
                pub const m_vExtraDamagePositions: usize = 0x820; // CUtlVector<Vector>
                pub const m_OnBroken: usize = 0x838; // CEntityIOOutput
                pub const m_iSurfaceType: usize = 0x861; // uint8
            }
            // Parent: CEntitySubclassVDataBase
            // Fields count: 7
            pub mod CPrecipitationVData {
                pub const m_szParticlePrecipitationEffect: usize = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_flInnerDistance: usize = 0x108; // float32
                pub const m_nAttachType: usize = 0x10C; // ParticleAttachment_t
                pub const m_bBatchSameVolumeType: usize = 0x110; // bool
                pub const m_nRTEnvCP: usize = 0x114; // int32
                pub const m_nRTEnvCPComponent: usize = 0x118; // int32
                pub const m_szModifier: usize = 0x120; // CUtlString
            }
            // Parent: CBaseModelEntity
            // Fields count: 23
            pub mod CSprite {
                pub const m_hSpriteMaterial: usize = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hAttachedToEntity: usize = 0x718; // CHandle<CBaseEntity>
                pub const m_nAttachment: usize = 0x71C; // AttachmentHandle_t
                pub const m_flSpriteFramerate: usize = 0x720; // float32
                pub const m_flFrame: usize = 0x724; // float32
                pub const m_flDieTime: usize = 0x728; // GameTime_t
                pub const m_nBrightness: usize = 0x738; // uint32
                pub const m_flBrightnessDuration: usize = 0x73C; // float32
                pub const m_flSpriteScale: usize = 0x740; // float32
                pub const m_flScaleDuration: usize = 0x744; // float32
                pub const m_bWorldSpaceScale: usize = 0x748; // bool
                pub const m_flGlowProxySize: usize = 0x74C; // float32
                pub const m_flHDRColorScale: usize = 0x750; // float32
                pub const m_flLastTime: usize = 0x754; // GameTime_t
                pub const m_flMaxFrame: usize = 0x758; // float32
                pub const m_flStartScale: usize = 0x75C; // float32
                pub const m_flDestScale: usize = 0x760; // float32
                pub const m_flScaleTimeStart: usize = 0x764; // GameTime_t
                pub const m_nStartBrightness: usize = 0x768; // int32
                pub const m_nDestBrightness: usize = 0x76C; // int32
                pub const m_flBrightnessTimeStart: usize = 0x770; // GameTime_t
                pub const m_nSpriteWidth: usize = 0x774; // int32
                pub const m_nSpriteHeight: usize = 0x778; // int32
            }
            // Parent: CSprite
            // Fields count: 0
            pub mod CSpriteOriented {
            }
            // Parent: CBaseModelEntity
            // Fields count: 14
            pub mod CBaseClientUIEntity {
                pub const m_bEnabled: usize = 0x710; // bool
                pub const m_DialogXMLName: usize = 0x718; // CUtlSymbolLarge
                pub const m_PanelClassName: usize = 0x720; // CUtlSymbolLarge
                pub const m_PanelID: usize = 0x728; // CUtlSymbolLarge
                pub const m_CustomOutput0: usize = 0x730; // CEntityIOOutput
                pub const m_CustomOutput1: usize = 0x758; // CEntityIOOutput
                pub const m_CustomOutput2: usize = 0x780; // CEntityIOOutput
                pub const m_CustomOutput3: usize = 0x7A8; // CEntityIOOutput
                pub const m_CustomOutput4: usize = 0x7D0; // CEntityIOOutput
                pub const m_CustomOutput5: usize = 0x7F8; // CEntityIOOutput
                pub const m_CustomOutput6: usize = 0x820; // CEntityIOOutput
                pub const m_CustomOutput7: usize = 0x848; // CEntityIOOutput
                pub const m_CustomOutput8: usize = 0x870; // CEntityIOOutput
                pub const m_CustomOutput9: usize = 0x898; // CEntityIOOutput
            }
            // Parent: CBaseClientUIEntity
            // Fields count: 2
            pub mod CPointClientUIDialog {
                pub const m_hActivator: usize = 0x8C0; // CHandle<CBaseEntity>
                pub const m_bStartEnabled: usize = 0x8C4; // bool
            }
            // Parent: CBaseClientUIEntity
            // Fields count: 23
            pub mod CPointClientUIWorldPanel {
                pub const m_bIgnoreInput: usize = 0x8C0; // bool
                pub const m_bLit: usize = 0x8C1; // bool
                pub const m_bFollowPlayerAcrossTeleport: usize = 0x8C2; // bool
                pub const m_flWidth: usize = 0x8C4; // float32
                pub const m_flHeight: usize = 0x8C8; // float32
                pub const m_flDPI: usize = 0x8CC; // float32
                pub const m_flInteractDistance: usize = 0x8D0; // float32
                pub const m_flDepthOffset: usize = 0x8D4; // float32
                pub const m_unOwnerContext: usize = 0x8D8; // uint32
                pub const m_unHorizontalAlign: usize = 0x8DC; // uint32
                pub const m_unVerticalAlign: usize = 0x8E0; // uint32
                pub const m_unOrientation: usize = 0x8E4; // uint32
                pub const m_bAllowInteractionFromAllSceneWorlds: usize = 0x8E8; // bool
                pub const m_vecCSSClasses: usize = 0x8F0; // CNetworkUtlVectorBase<CUtlSymbolLarge>
                pub const m_bOpaque: usize = 0x908; // bool
                pub const m_bNoDepth: usize = 0x909; // bool
                pub const m_bRenderBackface: usize = 0x90A; // bool
                pub const m_bUseOffScreenIndicator: usize = 0x90B; // bool
                pub const m_bExcludeFromSaveGames: usize = 0x90C; // bool
                pub const m_bGrabbable: usize = 0x90D; // bool
                pub const m_bOnlyRenderToTexture: usize = 0x90E; // bool
                pub const m_bDisableMipGen: usize = 0x90F; // bool
                pub const m_nExplicitImageLayout: usize = 0x910; // int32
            }
            // Parent: CPointClientUIWorldPanel
            // Fields count: 1
            pub mod CPointClientUIWorldTextPanel {
                pub const m_messageText: usize = 0x918; // char[512]
            }
            // Parent: CPointEntity
            // Fields count: 10
            pub mod CInfoOffscreenPanoramaTexture {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_nResolutionX: usize = 0x4C4; // int32
                pub const m_nResolutionY: usize = 0x4C8; // int32
                pub const m_szLayoutFileName: usize = 0x4D0; // CUtlSymbolLarge
                pub const m_RenderAttrName: usize = 0x4D8; // CUtlSymbolLarge
                pub const m_TargetEntities: usize = 0x4E0; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                pub const m_nTargetChangeCount: usize = 0x4F8; // int32
                pub const m_vecCSSClasses: usize = 0x500; // CNetworkUtlVectorBase<CUtlSymbolLarge>
                pub const m_szTargetsName: usize = 0x518; // CUtlSymbolLarge
                pub const m_AdditionalTargetEntities: usize = 0x520; // CUtlVector<CHandle<CBaseModelEntity>>
            }
            // Parent: IEconItemInterface
            // Fields count: 13
            pub mod CEconItemView {
                pub const m_iItemDefinitionIndex: usize = 0x38; // uint16
                pub const m_iEntityQuality: usize = 0x3C; // int32
                pub const m_iEntityLevel: usize = 0x40; // uint32
                pub const m_iItemID: usize = 0x48; // uint64
                pub const m_iItemIDHigh: usize = 0x50; // uint32
                pub const m_iItemIDLow: usize = 0x54; // uint32
                pub const m_iAccountID: usize = 0x58; // uint32
                pub const m_iInventoryPosition: usize = 0x5C; // uint32
                pub const m_bInitialized: usize = 0x68; // bool
                pub const m_AttributeList: usize = 0x70; // CAttributeList
                pub const m_NetworkedDynamicAttributes: usize = 0xD0; // CAttributeList
                pub const m_szCustomName: usize = 0x130; // char[161]
                pub const m_szCustomNameOverride: usize = 0x1D1; // char[161]
            }
            // Parent: SpawnPoint
            // Fields count: 0
            pub mod CInfoPlayerTerrorist {
            }
            // Parent: SpawnPoint
            // Fields count: 0
            pub mod CInfoPlayerCounterterrorist {
            }
            // Parent: SpawnPoint
            // Fields count: 0
            pub mod CInfoDeathmatchSpawn {
            }
            // Parent: SpawnPointCoopEnemy
            // Fields count: 0
            pub mod CInfoEnemyTerroristSpawn {
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CPointGiveAmmo {
                pub const m_pActivator: usize = 0x4C0; // CHandle<CBaseEntity>
            }
            // Parent: CBaseTrigger
            // Fields count: 9
            pub mod CBombTarget {
                pub const m_OnBombExplode: usize = 0x8B8; // CEntityIOOutput
                pub const m_OnBombPlanted: usize = 0x8E0; // CEntityIOOutput
                pub const m_OnBombDefused: usize = 0x908; // CEntityIOOutput
                pub const m_bIsBombSiteB: usize = 0x930; // bool
                pub const m_bIsHeistBombTarget: usize = 0x931; // bool
                pub const m_bBombPlantedHere: usize = 0x932; // bool
                pub const m_szMountTarget: usize = 0x938; // CUtlSymbolLarge
                pub const m_hInstructorHint: usize = 0x940; // CHandle<CBaseEntity>
                pub const m_nBombSiteDesignation: usize = 0x944; // int32
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoInstructorHintBombTargetA {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoInstructorHintBombTargetB {
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CHostageRescueZoneShim {
            }
            // Parent: CHostageRescueZoneShim
            // Fields count: 0
            pub mod CHostageRescueZone {
            }
            // Parent: CPointEntity
            // Fields count: 0
            pub mod CInfoInstructorHintHostageRescueZone {
            }
            // Parent: CBaseTrigger
            // Fields count: 2
            pub mod CTriggerBuoyancy {
                pub const m_BuoyancyHelper: usize = 0x8B8; // CBuoyancyHelper
                pub const m_flFluidDensity: usize = 0x8D8; // float32
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CFuncWater {
                pub const m_BuoyancyHelper: usize = 0x710; // CBuoyancyHelper
            }
            // Parent: CSprite
            // Fields count: 0
            pub mod CCSSprite {
            }
            // Parent: CBasePlayerController
            // Fields count: 86
            pub mod CCSPlayerController {
                pub const m_pInGameMoneyServices: usize = 0x6C8; // CCSPlayerController_InGameMoneyServices*
                pub const m_pInventoryServices: usize = 0x6D0; // CCSPlayerController_InventoryServices*
                pub const m_pActionTrackingServices: usize = 0x6D8; // CCSPlayerController_ActionTrackingServices*
                pub const m_pDamageServices: usize = 0x6E0; // CCSPlayerController_DamageServices*
                pub const m_iPing: usize = 0x6E8; // uint32
                pub const m_bHasCommunicationAbuseMute: usize = 0x6EC; // bool
                pub const m_szCrosshairCodes: usize = 0x6F0; // CUtlSymbolLarge
                pub const m_iPendingTeamNum: usize = 0x6F8; // uint8
                pub const m_flForceTeamTime: usize = 0x6FC; // GameTime_t
                pub const m_iCompTeammateColor: usize = 0x700; // int32
                pub const m_bEverPlayedOnTeam: usize = 0x704; // bool
                pub const m_bAttemptedToGetColor: usize = 0x705; // bool
                pub const m_iTeammatePreferredColor: usize = 0x708; // int32
                pub const m_bTeamChanged: usize = 0x70C; // bool
                pub const m_bInSwitchTeam: usize = 0x70D; // bool
                pub const m_bHasSeenJoinGame: usize = 0x70E; // bool
                pub const m_bJustBecameSpectator: usize = 0x70F; // bool
                pub const m_bSwitchTeamsOnNextRoundReset: usize = 0x710; // bool
                pub const m_bRemoveAllItemsOnNextRoundReset: usize = 0x711; // bool
                pub const m_szClan: usize = 0x718; // CUtlSymbolLarge
                pub const m_szClanName: usize = 0x720; // char[32]
                pub const m_iCoachingTeam: usize = 0x740; // int32
                pub const m_nPlayerDominated: usize = 0x748; // uint64
                pub const m_nPlayerDominatingMe: usize = 0x750; // uint64
                pub const m_iCompetitiveRanking: usize = 0x758; // int32
                pub const m_iCompetitiveWins: usize = 0x75C; // int32
                pub const m_iCompetitiveRankType: usize = 0x760; // int8
                pub const m_iCompetitiveRankingPredicted_Win: usize = 0x764; // int32
                pub const m_iCompetitiveRankingPredicted_Loss: usize = 0x768; // int32
                pub const m_iCompetitiveRankingPredicted_Tie: usize = 0x76C; // int32
                pub const m_nEndMatchNextMapVote: usize = 0x770; // int32
                pub const m_unActiveQuestId: usize = 0x774; // uint16
                pub const m_nQuestProgressReason: usize = 0x778; // QuestProgress::Reason
                pub const m_unPlayerTvControlFlags: usize = 0x77C; // uint32
                pub const m_iDraftIndex: usize = 0x7A8; // int32
                pub const m_msQueuedModeDisconnectionTimestamp: usize = 0x7AC; // uint32
                pub const m_uiAbandonRecordedReason: usize = 0x7B0; // uint32
                pub const m_bCannotBeKicked: usize = 0x7B4; // bool
                pub const m_bEverFullyConnected: usize = 0x7B5; // bool
                pub const m_bAbandonAllowsSurrender: usize = 0x7B6; // bool
                pub const m_bAbandonOffersInstantSurrender: usize = 0x7B7; // bool
                pub const m_bDisconnection1MinWarningPrinted: usize = 0x7B8; // bool
                pub const m_bScoreReported: usize = 0x7B9; // bool
                pub const m_nDisconnectionTick: usize = 0x7BC; // int32
                pub const m_bControllingBot: usize = 0x7C8; // bool
                pub const m_bHasControlledBotThisRound: usize = 0x7C9; // bool
                pub const m_bHasBeenControlledByPlayerThisRound: usize = 0x7CA; // bool
                pub const m_nBotsControlledThisRound: usize = 0x7CC; // int32
                pub const m_bCanControlObservedBot: usize = 0x7D0; // bool
                pub const m_hPlayerPawn: usize = 0x7D4; // CHandle<CCSPlayerPawn>
                pub const m_hObserverPawn: usize = 0x7D8; // CHandle<CCSObserverPawn>
                pub const m_DesiredObserverMode: usize = 0x7DC; // int32
                pub const m_hDesiredObserverTarget: usize = 0x7E0; // CEntityHandle
                pub const m_bPawnIsAlive: usize = 0x7E4; // bool
                pub const m_iPawnHealth: usize = 0x7E8; // uint32
                pub const m_iPawnArmor: usize = 0x7EC; // int32
                pub const m_bPawnHasDefuser: usize = 0x7F0; // bool
                pub const m_bPawnHasHelmet: usize = 0x7F1; // bool
                pub const m_nPawnCharacterDefIndex: usize = 0x7F2; // uint16
                pub const m_iPawnLifetimeStart: usize = 0x7F4; // int32
                pub const m_iPawnLifetimeEnd: usize = 0x7F8; // int32
                pub const m_iPawnBotDifficulty: usize = 0x7FC; // int32
                pub const m_hOriginalControllerOfCurrentPawn: usize = 0x800; // CHandle<CCSPlayerController>
                pub const m_iScore: usize = 0x804; // int32
                pub const m_iRoundScore: usize = 0x808; // int32
                pub const m_iRoundsWon: usize = 0x80C; // int32
                pub const m_vecKills: usize = 0x810; // CNetworkUtlVectorBase<EKillTypes_t>
                pub const m_bMvpNoMusic: usize = 0x828; // bool
                pub const m_eMvpReason: usize = 0x82C; // int32
                pub const m_iMusicKitID: usize = 0x830; // int32
                pub const m_iMusicKitMVPs: usize = 0x834; // int32
                pub const m_iMVPs: usize = 0x838; // int32
                pub const m_nUpdateCounter: usize = 0x83C; // int32
                pub const m_flSmoothedPing: usize = 0x840; // float32
                pub const m_lastHeldVoteTimer: usize = 0xF8E8; // IntervalTimer
                pub const m_bShowHints: usize = 0xF900; // bool
                pub const m_iNextTimeCheck: usize = 0xF904; // int32
                pub const m_bJustDidTeamKill: usize = 0xF908; // bool
                pub const m_bPunishForTeamKill: usize = 0xF909; // bool
                pub const m_bGaveTeamDamageWarning: usize = 0xF90A; // bool
                pub const m_bGaveTeamDamageWarningThisRound: usize = 0xF90B; // bool
                pub const m_dblLastReceivedPacketPlatFloatTime: usize = 0xF910; // float64
                pub const m_LastTeamDamageWarningTime: usize = 0xF918; // GameTime_t
                pub const m_LastTimePlayerWasDisconnectedForPawnsRemove: usize = 0xF91C; // GameTime_t
                pub const m_nSuspiciousHitCount: usize = 0xF920; // uint32
                pub const m_nNonSuspiciousHitStreak: usize = 0xF924; // uint32
            }
            // Parent: CBaseTrigger
            // Fields count: 2
            pub mod CFootstepControl {
                pub const m_source: usize = 0x8B8; // CUtlSymbolLarge
                pub const m_destination: usize = 0x8C0; // CUtlSymbolLarge
            }
            // Parent: CBasePlayerWeaponVData
            // Fields count: 92
            pub mod CCSWeaponBaseVData {
                pub const m_WeaponType: usize = 0x248; // CSWeaponType
                pub const m_WeaponCategory: usize = 0x24C; // CSWeaponCategory
                pub const m_szViewModel: usize = 0x250; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szPlayerModel: usize = 0x330; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szWorldDroppedModel: usize = 0x410; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szAimsightLensMaskModel: usize = 0x4F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szMagazineModel: usize = 0x5D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
                pub const m_szHeatEffect: usize = 0x6B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szEjectBrassEffect: usize = 0x790; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashParticleAlt: usize = 0x870; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashThirdPersonParticle: usize = 0x950; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szMuzzleFlashThirdPersonParticleAlt: usize = 0xA30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_szTracerParticle: usize = 0xB10; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
                pub const m_GearSlot: usize = 0xBF0; // gear_slot_t
                pub const m_GearSlotPosition: usize = 0xBF4; // int32
                pub const m_DefaultLoadoutSlot: usize = 0xBF8; // loadout_slot_t
                pub const m_sWrongTeamMsg: usize = 0xC00; // CUtlString
                pub const m_nPrice: usize = 0xC08; // int32
                pub const m_nKillAward: usize = 0xC0C; // int32
                pub const m_nPrimaryReserveAmmoMax: usize = 0xC10; // int32
                pub const m_nSecondaryReserveAmmoMax: usize = 0xC14; // int32
                pub const m_bMeleeWeapon: usize = 0xC18; // bool
                pub const m_bHasBurstMode: usize = 0xC19; // bool
                pub const m_bIsRevolver: usize = 0xC1A; // bool
                pub const m_bCannotShootUnderwater: usize = 0xC1B; // bool
                pub const m_szName: usize = 0xC20; // CGlobalSymbol
                pub const m_szAnimExtension: usize = 0xC28; // CUtlString
                pub const m_eSilencerType: usize = 0xC30; // CSWeaponSilencerType
                pub const m_nCrosshairMinDistance: usize = 0xC34; // int32
                pub const m_nCrosshairDeltaDistance: usize = 0xC38; // int32
                pub const m_bIsFullAuto: usize = 0xC3C; // bool
                pub const m_nNumBullets: usize = 0xC40; // int32
                pub const m_flCycleTime: usize = 0xC44; // CFiringModeFloat
                pub const m_flMaxSpeed: usize = 0xC4C; // CFiringModeFloat
                pub const m_flSpread: usize = 0xC54; // CFiringModeFloat
                pub const m_flInaccuracyCrouch: usize = 0xC5C; // CFiringModeFloat
                pub const m_flInaccuracyStand: usize = 0xC64; // CFiringModeFloat
                pub const m_flInaccuracyJump: usize = 0xC6C; // CFiringModeFloat
                pub const m_flInaccuracyLand: usize = 0xC74; // CFiringModeFloat
                pub const m_flInaccuracyLadder: usize = 0xC7C; // CFiringModeFloat
                pub const m_flInaccuracyFire: usize = 0xC84; // CFiringModeFloat
                pub const m_flInaccuracyMove: usize = 0xC8C; // CFiringModeFloat
                pub const m_flRecoilAngle: usize = 0xC94; // CFiringModeFloat
                pub const m_flRecoilAngleVariance: usize = 0xC9C; // CFiringModeFloat
                pub const m_flRecoilMagnitude: usize = 0xCA4; // CFiringModeFloat
                pub const m_flRecoilMagnitudeVariance: usize = 0xCAC; // CFiringModeFloat
                pub const m_nTracerFrequency: usize = 0xCB4; // CFiringModeInt
                pub const m_flInaccuracyJumpInitial: usize = 0xCBC; // float32
                pub const m_flInaccuracyJumpApex: usize = 0xCC0; // float32
                pub const m_flInaccuracyReload: usize = 0xCC4; // float32
                pub const m_nRecoilSeed: usize = 0xCC8; // int32
                pub const m_nSpreadSeed: usize = 0xCCC; // int32
                pub const m_flTimeToIdleAfterFire: usize = 0xCD0; // float32
                pub const m_flIdleInterval: usize = 0xCD4; // float32
                pub const m_flAttackMovespeedFactor: usize = 0xCD8; // float32
                pub const m_flHeatPerShot: usize = 0xCDC; // float32
                pub const m_flInaccuracyPitchShift: usize = 0xCE0; // float32
                pub const m_flInaccuracyAltSoundThreshold: usize = 0xCE4; // float32
                pub const m_flBotAudibleRange: usize = 0xCE8; // float32
                pub const m_szUseRadioSubtitle: usize = 0xCF0; // CUtlString
                pub const m_bUnzoomsAfterShot: usize = 0xCF8; // bool
                pub const m_bHideViewModelWhenZoomed: usize = 0xCF9; // bool
                pub const m_nZoomLevels: usize = 0xCFC; // int32
                pub const m_nZoomFOV1: usize = 0xD00; // int32
                pub const m_nZoomFOV2: usize = 0xD04; // int32
                pub const m_flZoomTime0: usize = 0xD08; // float32
                pub const m_flZoomTime1: usize = 0xD0C; // float32
                pub const m_flZoomTime2: usize = 0xD10; // float32
                pub const m_flIronSightPullUpSpeed: usize = 0xD14; // float32
                pub const m_flIronSightPutDownSpeed: usize = 0xD18; // float32
                pub const m_flIronSightFOV: usize = 0xD1C; // float32
                pub const m_flIronSightPivotForward: usize = 0xD20; // float32
                pub const m_flIronSightLooseness: usize = 0xD24; // float32
                pub const m_angPivotAngle: usize = 0xD28; // QAngle
                pub const m_vecIronSightEyePos: usize = 0xD34; // 
                pub const m_nDamage: usize = 0xD40; // int32
                pub const m_flHeadshotMultiplier: usize = 0xD44; // float32
                pub const m_flArmorRatio: usize = 0xD48; // float32
                pub const m_flPenetration: usize = 0xD4C; // float32
                pub const m_flRange: usize = 0xD50; // float32
                pub const m_flRangeModifier: usize = 0xD54; // float32
                pub const m_flFlinchVelocityModifierLarge: usize = 0xD58; // float32
                pub const m_flFlinchVelocityModifierSmall: usize = 0xD5C; // float32
                pub const m_flRecoveryTimeCrouch: usize = 0xD60; // float32
                pub const m_flRecoveryTimeStand: usize = 0xD64; // float32
                pub const m_flRecoveryTimeCrouchFinal: usize = 0xD68; // float32
                pub const m_flRecoveryTimeStandFinal: usize = 0xD6C; // float32
                pub const m_nRecoveryTransitionStartBullet: usize = 0xD70; // int32
                pub const m_nRecoveryTransitionEndBullet: usize = 0xD74; // int32
                pub const m_flThrowVelocity: usize = 0xD78; // float32
                pub const m_vSmokeColor: usize = 0xD7C; // 
                pub const m_szAnimClass: usize = 0xD88; // CGlobalSymbol
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CTriggerTripWire {
            }
            // Parent: CPointEntity
            // Fields count: 2
            pub mod CPointGamestatsCounter {
                pub const m_strStatisticName: usize = 0x4C0; // CUtlSymbolLarge
                pub const m_bDisabled: usize = 0x4C8; // bool
            }
            // Parent: CPointEntity
            // Fields count: 1
            pub mod CEnvHudHint {
                pub const m_iszMessage: usize = 0x4C0; // CUtlSymbolLarge
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CBuyZone {
                pub const m_LegacyTeamNum: usize = 0x8B8; // int32
            }
            // Parent: CBaseModelEntity
            // Fields count: 9
            pub mod CFuncConveyor {
                pub const m_szConveyorModels: usize = 0x710; // CUtlSymbolLarge
                pub const m_flTransitionDurationSeconds: usize = 0x718; // float32
                pub const m_angMoveEntitySpace: usize = 0x71C; // QAngle
                pub const m_vecMoveDirEntitySpace: usize = 0x728; // 
                pub const m_flTargetSpeed: usize = 0x734; // float32
                pub const m_nTransitionStartTick: usize = 0x738; // GameTick_t
                pub const m_nTransitionDurationTicks: usize = 0x73C; // int32
                pub const m_flTransitionStartSpeed: usize = 0x740; // float32
                pub const m_hConveyorModels: usize = 0x748; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CTriggerBombReset {
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CTriggerHostageReset {
            }
            // Parent: CServerOnlyModelEntity
            // Fields count: 1
            pub mod CCSPlace {
                pub const m_name: usize = 0x718; // CUtlSymbolLarge
            }
            // Parent: CRulePointEntity
            // Fields count: 4
            pub mod CGameMoney {
                pub const m_OnMoneySpent: usize = 0x720; // CEntityIOOutput
                pub const m_OnMoneySpentFail: usize = 0x748; // CEntityIOOutput
                pub const m_nMoney: usize = 0x770; // int32
                pub const m_strAwardText: usize = 0x778; // CUtlString
            }
            // Parent: CModelPointEntity
            // Fields count: 15
            pub mod CPlayerSprayDecal {
                pub const m_nUniqueID: usize = 0x710; // int32
                pub const m_unAccountID: usize = 0x714; // uint32
                pub const m_unTraceID: usize = 0x718; // uint32
                pub const m_rtGcTime: usize = 0x71C; // uint32
                pub const m_vecEndPos: usize = 0x720; // 
                pub const m_vecStart: usize = 0x72C; // 
                pub const m_vecLeft: usize = 0x738; // 
                pub const m_vecNormal: usize = 0x744; // 
                pub const m_nPlayer: usize = 0x750; // int32
                pub const m_nEntity: usize = 0x754; // int32
                pub const m_nHitbox: usize = 0x758; // int32
                pub const m_flCreationTime: usize = 0x75C; // float32
                pub const m_nTintID: usize = 0x760; // int32
                pub const m_nVersion: usize = 0x764; // uint8
                pub const m_ubSignature: usize = 0x765; // uint8[128]
            }
            // Parent: CBaseModelEntity
            // Fields count: 25
            pub mod CInferno {
                pub const m_firePositions: usize = 0x720; // Vector[64]
                pub const m_fireParentPositions: usize = 0xA20; // Vector[64]
                pub const m_bFireIsBurning: usize = 0xD20; // bool[64]
                pub const m_BurnNormal: usize = 0xD60; // Vector[64]
                pub const m_fireCount: usize = 0x1060; // int32
                pub const m_nInfernoType: usize = 0x1064; // int32
                pub const m_nFireEffectTickBegin: usize = 0x1068; // int32
                pub const m_nFireLifetime: usize = 0x106C; // float32
                pub const m_bInPostEffectTime: usize = 0x1070; // bool
                pub const m_nFiresExtinguishCount: usize = 0x1074; // int32
                pub const m_bWasCreatedInSmoke: usize = 0x1078; // bool
                pub const m_extent: usize = 0x1280; // Extent
                pub const m_damageTimer: usize = 0x1298; // CountdownTimer
                pub const m_damageRampTimer: usize = 0x12B0; // CountdownTimer
                pub const m_splashVelocity: usize = 0x12C8; // 
                pub const m_InitialSplashVelocity: usize = 0x12D4; // 
                pub const m_startPos: usize = 0x12E0; // 
                pub const m_vecOriginalSpawnLocation: usize = 0x12EC; // 
                pub const m_activeTimer: usize = 0x12F8; // IntervalTimer
                pub const m_fireSpawnOffset: usize = 0x1308; // int32
                pub const m_nMaxFlames: usize = 0x130C; // int32
                pub const m_nSpreadCount: usize = 0x1310; // int32
                pub const m_BookkeepingTimer: usize = 0x1318; // CountdownTimer
                pub const m_NextSpreadTimer: usize = 0x1330; // CountdownTimer
                pub const m_nSourceItemDefIndex: usize = 0x1348; // uint16
            }
            // Parent: CInferno
            // Fields count: 0
            pub mod CFireCrackerBlast {
            }
            // Parent: CBaseModelEntity
            // Fields count: 52
            pub mod CBarnLight {
                pub const m_bEnabled: usize = 0x710; // bool
                pub const m_nColorMode: usize = 0x714; // int32
                pub const m_Color: usize = 0x718; // Color
                pub const m_flColorTemperature: usize = 0x71C; // float32
                pub const m_flBrightness: usize = 0x720; // float32
                pub const m_flBrightnessScale: usize = 0x724; // float32
                pub const m_nDirectLight: usize = 0x728; // int32
                pub const m_nBakedShadowIndex: usize = 0x72C; // int32
                pub const m_nLuminaireShape: usize = 0x730; // int32
                pub const m_flLuminaireSize: usize = 0x734; // float32
                pub const m_flLuminaireAnisotropy: usize = 0x738; // float32
                pub const m_LightStyleString: usize = 0x740; // CUtlString
                pub const m_flLightStyleStartTime: usize = 0x748; // GameTime_t
                pub const m_QueuedLightStyleStrings: usize = 0x750; // CNetworkUtlVectorBase<CUtlString>
                pub const m_LightStyleEvents: usize = 0x768; // CNetworkUtlVectorBase<CUtlString>
                pub const m_LightStyleTargets: usize = 0x780; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
                pub const m_StyleEvent: usize = 0x798; // CEntityIOOutput[4]
                pub const m_hLightCookie: usize = 0x858; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_flShape: usize = 0x860; // float32
                pub const m_flSoftX: usize = 0x864; // float32
                pub const m_flSoftY: usize = 0x868; // float32
                pub const m_flSkirt: usize = 0x86C; // float32
                pub const m_flSkirtNear: usize = 0x870; // float32
                pub const m_vSizeParams: usize = 0x874; // 
                pub const m_flRange: usize = 0x880; // float32
                pub const m_vShear: usize = 0x884; // 
                pub const m_nBakeSpecularToCubemaps: usize = 0x890; // int32
                pub const m_vBakeSpecularToCubemapsSize: usize = 0x894; // 
                pub const m_nCastShadows: usize = 0x8A0; // int32
                pub const m_nShadowMapSize: usize = 0x8A4; // int32
                pub const m_nShadowPriority: usize = 0x8A8; // int32
                pub const m_bContactShadow: usize = 0x8AC; // bool
                pub const m_nBounceLight: usize = 0x8B0; // int32
                pub const m_flBounceScale: usize = 0x8B4; // float32
                pub const m_flMinRoughness: usize = 0x8B8; // float32
                pub const m_vAlternateColor: usize = 0x8BC; // 
                pub const m_fAlternateColorBrightness: usize = 0x8C8; // float32
                pub const m_nFog: usize = 0x8CC; // int32
                pub const m_flFogStrength: usize = 0x8D0; // float32
                pub const m_nFogShadows: usize = 0x8D4; // int32
                pub const m_flFogScale: usize = 0x8D8; // float32
                pub const m_flFadeSizeStart: usize = 0x8DC; // float32
                pub const m_flFadeSizeEnd: usize = 0x8E0; // float32
                pub const m_flShadowFadeSizeStart: usize = 0x8E4; // float32
                pub const m_flShadowFadeSizeEnd: usize = 0x8E8; // float32
                pub const m_bPrecomputedFieldsValid: usize = 0x8EC; // bool
                pub const m_vPrecomputedBoundsMins: usize = 0x8F0; // 
                pub const m_vPrecomputedBoundsMaxs: usize = 0x8FC; // 
                pub const m_vPrecomputedOBBOrigin: usize = 0x908; // 
                pub const m_vPrecomputedOBBAngles: usize = 0x914; // QAngle
                pub const m_vPrecomputedOBBExtent: usize = 0x920; // 
                pub const m_bPvsModifyEntity: usize = 0x92C; // bool
            }
            // Parent: CBarnLight
            // Fields count: 1
            pub mod CRectLight {
                pub const m_bShowLight: usize = 0x938; // bool
            }
            // Parent: CBarnLight
            // Fields count: 3
            pub mod COmniLight {
                pub const m_flInnerAngle: usize = 0x938; // float32
                pub const m_flOuterAngle: usize = 0x93C; // float32
                pub const m_bShowLight: usize = 0x940; // bool
            }
            // Parent: CTeam
            // Fields count: 14
            pub mod CCSTeam {
                pub const m_nLastRecievedShorthandedRoundBonus: usize = 0x578; // int32
                pub const m_nShorthandedRoundBonusStartRound: usize = 0x57C; // int32
                pub const m_bSurrendered: usize = 0x580; // bool
                pub const m_szTeamMatchStat: usize = 0x581; // char[512]
                pub const m_numMapVictories: usize = 0x784; // int32
                pub const m_scoreFirstHalf: usize = 0x788; // int32
                pub const m_scoreSecondHalf: usize = 0x78C; // int32
                pub const m_scoreOvertime: usize = 0x790; // int32
                pub const m_szClanTeamname: usize = 0x794; // char[129]
                pub const m_iClanID: usize = 0x818; // uint32
                pub const m_szTeamFlagImage: usize = 0x81C; // char[8]
                pub const m_szTeamLogoImage: usize = 0x824; // char[8]
                pub const m_flNextResourceTime: usize = 0x82C; // float32
                pub const m_iLastUpdateSentAt: usize = 0x830; // int32
            }
            // Parent: CPointEntity
            // Fields count: 8
            pub mod CMapInfo {
                pub const m_iBuyingStatus: usize = 0x4C0; // int32
                pub const m_flBombRadius: usize = 0x4C4; // float32
                pub const m_iPetPopulation: usize = 0x4C8; // int32
                pub const m_bUseNormalSpawnsForDM: usize = 0x4CC; // bool
                pub const m_bDisableAutoGeneratedDMSpawns: usize = 0x4CD; // bool
                pub const m_flBotMaxVisionDistance: usize = 0x4D0; // float32
                pub const m_iHostageCount: usize = 0x4D4; // int32
                pub const m_bFadePlayerVisibilityFarZ: usize = 0x4D8; // bool
            }
            // Parent: CBot
            // Fields count: 140
            pub mod CCSBot {
                pub const m_lastCoopSpawnPoint: usize = 0xF0; // CHandle<SpawnPointCoopEnemy>
                pub const m_eyePosition: usize = 0x100; // 
                pub const m_name: usize = 0x10C; // char[64]
                pub const m_combatRange: usize = 0x14C; // float32
                pub const m_isRogue: usize = 0x150; // bool
                pub const m_rogueTimer: usize = 0x158; // CountdownTimer
                pub const m_diedLastRound: usize = 0x174; // bool
                pub const m_safeTime: usize = 0x178; // float32
                pub const m_wasSafe: usize = 0x17C; // bool
                pub const m_blindFire: usize = 0x184; // bool
                pub const m_surpriseTimer: usize = 0x188; // CountdownTimer
                pub const m_bAllowActive: usize = 0x1A0; // bool
                pub const m_isFollowing: usize = 0x1A1; // bool
                pub const m_leader: usize = 0x1A4; // CHandle<CCSPlayerPawn>
                pub const m_followTimestamp: usize = 0x1A8; // float32
                pub const m_allowAutoFollowTime: usize = 0x1AC; // float32
                pub const m_hurryTimer: usize = 0x1B0; // CountdownTimer
                pub const m_alertTimer: usize = 0x1C8; // CountdownTimer
                pub const m_sneakTimer: usize = 0x1E0; // CountdownTimer
                pub const m_panicTimer: usize = 0x1F8; // CountdownTimer
                pub const m_stateTimestamp: usize = 0x4C8; // float32
                pub const m_isAttacking: usize = 0x4CC; // bool
                pub const m_isOpeningDoor: usize = 0x4CD; // bool
                pub const m_taskEntity: usize = 0x4D4; // CHandle<CBaseEntity>
                pub const m_goalPosition: usize = 0x4E4; // 
                pub const m_goalEntity: usize = 0x4F0; // CHandle<CBaseEntity>
                pub const m_avoid: usize = 0x4F4; // CHandle<CBaseEntity>
                pub const m_avoidTimestamp: usize = 0x4F8; // float32
                pub const m_isStopping: usize = 0x4FC; // bool
                pub const m_hasVisitedEnemySpawn: usize = 0x4FD; // bool
                pub const m_stillTimer: usize = 0x500; // IntervalTimer
                pub const m_bEyeAnglesUnderPathFinderControl: usize = 0x510; // bool
                pub const m_pathIndex: usize = 0x6608; // int32
                pub const m_areaEnteredTimestamp: usize = 0x660C; // GameTime_t
                pub const m_repathTimer: usize = 0x6610; // CountdownTimer
                pub const m_avoidFriendTimer: usize = 0x6628; // CountdownTimer
                pub const m_isFriendInTheWay: usize = 0x6640; // bool
                pub const m_politeTimer: usize = 0x6648; // CountdownTimer
                pub const m_isWaitingBehindFriend: usize = 0x6660; // bool
                pub const m_pathLadderEnd: usize = 0x668C; // float32
                pub const m_mustRunTimer: usize = 0x66D8; // CountdownTimer
                pub const m_waitTimer: usize = 0x66F0; // CountdownTimer
                pub const m_updateTravelDistanceTimer: usize = 0x6708; // CountdownTimer
                pub const m_playerTravelDistance: usize = 0x6720; // float32[64]
                pub const m_travelDistancePhase: usize = 0x6820; // uint8
                pub const m_hostageEscortCount: usize = 0x69B8; // uint8
                pub const m_hostageEscortCountTimestamp: usize = 0x69BC; // float32
                pub const m_desiredTeam: usize = 0x69C0; // int32
                pub const m_hasJoined: usize = 0x69C4; // bool
                pub const m_isWaitingForHostage: usize = 0x69C5; // bool
                pub const m_inhibitWaitingForHostageTimer: usize = 0x69C8; // CountdownTimer
                pub const m_waitForHostageTimer: usize = 0x69E0; // CountdownTimer
                pub const m_noisePosition: usize = 0x69F8; // 
                pub const m_noiseTravelDistance: usize = 0x6A04; // float32
                pub const m_noiseTimestamp: usize = 0x6A08; // float32
                pub const m_noiseSource: usize = 0x6A10; // CCSPlayerPawn*
                pub const m_noiseBendTimer: usize = 0x6A28; // CountdownTimer
                pub const m_bentNoisePosition: usize = 0x6A40; // 
                pub const m_bendNoisePositionValid: usize = 0x6A4C; // bool
                pub const m_lookAroundStateTimestamp: usize = 0x6A50; // float32
                pub const m_lookAheadAngle: usize = 0x6A54; // float32
                pub const m_forwardAngle: usize = 0x6A58; // float32
                pub const m_inhibitLookAroundTimestamp: usize = 0x6A5C; // float32
                pub const m_lookAtSpot: usize = 0x6A64; // 
                pub const m_lookAtSpotDuration: usize = 0x6A74; // float32
                pub const m_lookAtSpotTimestamp: usize = 0x6A78; // float32
                pub const m_lookAtSpotAngleTolerance: usize = 0x6A7C; // float32
                pub const m_lookAtSpotClearIfClose: usize = 0x6A80; // bool
                pub const m_lookAtSpotAttack: usize = 0x6A81; // bool
                pub const m_lookAtDesc: usize = 0x6A88; // char*
                pub const m_peripheralTimestamp: usize = 0x6A90; // float32
                pub const m_approachPointCount: usize = 0x6C18; // uint8
                pub const m_approachPointViewPosition: usize = 0x6C1C; // 
                pub const m_viewSteadyTimer: usize = 0x6C28; // IntervalTimer
                pub const m_tossGrenadeTimer: usize = 0x6C40; // CountdownTimer
                pub const m_isAvoidingGrenade: usize = 0x6C60; // CountdownTimer
                pub const m_spotCheckTimestamp: usize = 0x6C80; // float32
                pub const m_checkedHidingSpotCount: usize = 0x7088; // int32
                pub const m_lookPitch: usize = 0x708C; // float32
                pub const m_lookPitchVel: usize = 0x7090; // float32
                pub const m_lookYaw: usize = 0x7094; // float32
                pub const m_lookYawVel: usize = 0x7098; // float32
                pub const m_targetSpot: usize = 0x709C; // 
                pub const m_targetSpotVelocity: usize = 0x70A8; // 
                pub const m_targetSpotPredicted: usize = 0x70B4; // 
                pub const m_aimError: usize = 0x70C0; // QAngle
                pub const m_aimGoal: usize = 0x70CC; // QAngle
                pub const m_targetSpotTime: usize = 0x70D8; // GameTime_t
                pub const m_aimFocus: usize = 0x70DC; // float32
                pub const m_aimFocusInterval: usize = 0x70E0; // float32
                pub const m_aimFocusNextUpdate: usize = 0x70E4; // GameTime_t
                pub const m_ignoreEnemiesTimer: usize = 0x70F0; // CountdownTimer
                pub const m_enemy: usize = 0x7108; // CHandle<CCSPlayerPawn>
                pub const m_isEnemyVisible: usize = 0x710C; // bool
                pub const m_visibleEnemyParts: usize = 0x710D; // uint8
                pub const m_lastEnemyPosition: usize = 0x7110; // 
                pub const m_lastSawEnemyTimestamp: usize = 0x711C; // float32
                pub const m_firstSawEnemyTimestamp: usize = 0x7120; // float32
                pub const m_currentEnemyAcquireTimestamp: usize = 0x7124; // float32
                pub const m_enemyDeathTimestamp: usize = 0x7128; // float32
                pub const m_friendDeathTimestamp: usize = 0x712C; // float32
                pub const m_isLastEnemyDead: usize = 0x7130; // bool
                pub const m_nearbyEnemyCount: usize = 0x7134; // int32
                pub const m_bomber: usize = 0x7340; // CHandle<CCSPlayerPawn>
                pub const m_nearbyFriendCount: usize = 0x7344; // int32
                pub const m_closestVisibleFriend: usize = 0x7348; // CHandle<CCSPlayerPawn>
                pub const m_closestVisibleHumanFriend: usize = 0x734C; // CHandle<CCSPlayerPawn>
                pub const m_attentionInterval: usize = 0x7350; // IntervalTimer
                pub const m_attacker: usize = 0x7360; // CHandle<CCSPlayerPawn>
                pub const m_attackedTimestamp: usize = 0x7364; // float32
                pub const m_burnedByFlamesTimer: usize = 0x7368; // IntervalTimer
                pub const m_lastVictimID: usize = 0x7378; // int32
                pub const m_isAimingAtEnemy: usize = 0x737C; // bool
                pub const m_isRapidFiring: usize = 0x737D; // bool
                pub const m_equipTimer: usize = 0x7380; // IntervalTimer
                pub const m_zoomTimer: usize = 0x7390; // CountdownTimer
                pub const m_fireWeaponTimestamp: usize = 0x73A8; // GameTime_t
                pub const m_lookForWeaponsOnGroundTimer: usize = 0x73B0; // CountdownTimer
                pub const m_bIsSleeping: usize = 0x73C8; // bool
                pub const m_isEnemySniperVisible: usize = 0x73C9; // bool
                pub const m_sawEnemySniperTimer: usize = 0x73D0; // CountdownTimer
                pub const m_enemyQueueIndex: usize = 0x7488; // uint8
                pub const m_enemyQueueCount: usize = 0x7489; // uint8
                pub const m_enemyQueueAttendIndex: usize = 0x748A; // uint8
                pub const m_isStuck: usize = 0x748B; // bool
                pub const m_stuckTimestamp: usize = 0x748C; // GameTime_t
                pub const m_stuckSpot: usize = 0x7490; // 
                pub const m_wiggleTimer: usize = 0x74A0; // CountdownTimer
                pub const m_stuckJumpTimer: usize = 0x74B8; // CountdownTimer
                pub const m_nextCleanupCheckTimestamp: usize = 0x74D0; // GameTime_t
                pub const m_avgVel: usize = 0x74D4; // float32[10]
                pub const m_avgVelIndex: usize = 0x74FC; // int32
                pub const m_avgVelCount: usize = 0x7500; // int32
                pub const m_lastOrigin: usize = 0x7504; // 
                pub const m_lastRadioRecievedTimestamp: usize = 0x7514; // float32
                pub const m_lastRadioSentTimestamp: usize = 0x7518; // float32
                pub const m_radioSubject: usize = 0x751C; // CHandle<CCSPlayerPawn>
                pub const m_radioPosition: usize = 0x7520; // 
                pub const m_voiceEndTimestamp: usize = 0x752C; // float32
                pub const m_lastValidReactionQueueFrame: usize = 0x7538; // int32
            }
            // Parent: CServerOnlyModelEntity
            // Fields count: 5
            pub mod CFogVolume {
                pub const m_fogName: usize = 0x710; // CUtlSymbolLarge
                pub const m_postProcessName: usize = 0x718; // CUtlSymbolLarge
                pub const m_colorCorrectionName: usize = 0x720; // CUtlSymbolLarge
                pub const m_bDisabled: usize = 0x730; // bool
                pub const m_bInFogVolumesList: usize = 0x731; // bool
            }
            // Parent: CPointEntity
            // Fields count: 5
            pub mod CInfoDynamicShadowHint {
                pub const m_bDisabled: usize = 0x4C0; // bool
                pub const m_flRange: usize = 0x4C4; // float32
                pub const m_nImportance: usize = 0x4C8; // int32
                pub const m_nLightChoice: usize = 0x4CC; // int32
                pub const m_hLight: usize = 0x4D0; // CHandle<CBaseEntity>
            }
            // Parent: CInfoDynamicShadowHint
            // Fields count: 2
            pub mod CInfoDynamicShadowHintBox {
                pub const m_vBoxMins: usize = 0x4D8; // 
                pub const m_vBoxMaxs: usize = 0x4E4; // 
            }
            // Parent: CBaseModelEntity
            // Fields count: 12
            pub mod CEnvSky {
                pub const m_hSkyMaterial: usize = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_hSkyMaterialLightingOnly: usize = 0x718; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_bStartDisabled: usize = 0x720; // bool
                pub const m_vTintColor: usize = 0x721; // Color
                pub const m_vTintColorLightingOnly: usize = 0x725; // Color
                pub const m_flBrightnessScale: usize = 0x72C; // float32
                pub const m_nFogType: usize = 0x730; // int32
                pub const m_flFogMinStart: usize = 0x734; // float32
                pub const m_flFogMinEnd: usize = 0x738; // float32
                pub const m_flFogMaxStart: usize = 0x73C; // float32
                pub const m_flFogMaxEnd: usize = 0x740; // float32
                pub const m_bEnabled: usize = 0x744; // bool
            }
            // Parent: CTonemapController2
            // Fields count: 0
            pub mod CTonemapController2Alias_env_tonemap_controller2 {
            }
            // Parent: CBaseTrigger
            // Fields count: 2
            pub mod CTonemapTrigger {
                pub const m_tonemapControllerName: usize = 0x8B8; // CUtlSymbolLarge
                pub const m_hTonemapController: usize = 0x8C0; // CEntityHandle
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CFogTrigger {
                pub const m_fog: usize = 0x8B8; // fogparams_t
            }
            // Parent: CBaseModelEntity
            // Fields count: 1
            pub mod CLightEntity {
                pub const m_CLightComponent: usize = 0x710; // CLightComponent*
            }
            // Parent: CLightEntity
            // Fields count: 0
            pub mod CLightSpotEntity {
            }
            // Parent: CLightEntity
            // Fields count: 0
            pub mod CLightOrthoEntity {
            }
            // Parent: CLightEntity
            // Fields count: 0
            pub mod CLightDirectionalEntity {
            }
            // Parent: CLightDirectionalEntity
            // Fields count: 0
            pub mod CLightEnvironmentEntity {
            }
            // Parent: CBaseTrigger
            // Fields count: 16
            pub mod CPostProcessingVolume {
                pub const m_hPostSettings: usize = 0x8C8; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
                pub const m_flFadeDuration: usize = 0x8D0; // float32
                pub const m_flMinLogExposure: usize = 0x8D4; // float32
                pub const m_flMaxLogExposure: usize = 0x8D8; // float32
                pub const m_flMinExposure: usize = 0x8DC; // float32
                pub const m_flMaxExposure: usize = 0x8E0; // float32
                pub const m_flExposureCompensation: usize = 0x8E4; // float32
                pub const m_flExposureFadeSpeedUp: usize = 0x8E8; // float32
                pub const m_flExposureFadeSpeedDown: usize = 0x8EC; // float32
                pub const m_flTonemapEVSmoothingRange: usize = 0x8F0; // float32
                pub const m_bMaster: usize = 0x8F4; // bool
                pub const m_bExposureControl: usize = 0x8F5; // bool
                pub const m_flRate: usize = 0x8F8; // float32
                pub const m_flTonemapPercentTarget: usize = 0x8FC; // float32
                pub const m_flTonemapPercentBrightPixels: usize = 0x900; // float32
                pub const m_flTonemapMinAvgLum: usize = 0x904; // float32
            }
            // Parent: CParticleSystem
            // Fields count: 5
            pub mod CEnvParticleGlow {
                pub const m_flAlphaScale: usize = 0xC88; // float32
                pub const m_flRadiusScale: usize = 0xC8C; // float32
                pub const m_flSelfIllumScale: usize = 0xC90; // float32
                pub const m_ColorTint: usize = 0xC94; // Color
                pub const m_hTextureOverride: usize = 0xC98; // CStrongHandle<InfoForResourceTypeCTextureBase>
            }
            // Parent: CBaseModelEntity
            // Fields count: 8
            pub mod CTextureBasedAnimatable {
                pub const m_bLoop: usize = 0x710; // bool
                pub const m_flFPS: usize = 0x714; // float32
                pub const m_hPositionKeys: usize = 0x718; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_hRotationKeys: usize = 0x720; // CStrongHandle<InfoForResourceTypeCTextureBase>
                pub const m_vAnimationBoundsMin: usize = 0x728; // 
                pub const m_vAnimationBoundsMax: usize = 0x734; // 
                pub const m_flStartTime: usize = 0x740; // float32
                pub const m_flStartFrame: usize = 0x744; // float32
            }
            // Parent: CBaseModelEntity
            // Fields count: 0
            pub mod CWorld {
            }
            // Parent: CBaseModelEntity
            // Fields count: 10
            pub mod CBaseAnimGraph {
                pub const m_bInitiallyPopulateInterpHistory: usize = 0x788; // bool
                pub const m_pChoreoServices: usize = 0x790; // IChoreoServices*
                pub const m_bAnimGraphUpdateEnabled: usize = 0x798; // bool
                pub const m_flMaxSlopeDistance: usize = 0x79C; // float32
                pub const m_vLastSlopeCheckPos: usize = 0x7A0; // 
                pub const m_bAnimationUpdateScheduled: usize = 0x7AC; // bool
                pub const m_vecForce: usize = 0x7B0; // 
                pub const m_nForceBone: usize = 0x7BC; // int32
                pub const m_pRagdollPose: usize = 0x7D0; // PhysicsRagdollPose_t*
                pub const m_bClientRagdoll: usize = 0x7D8; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 4
            pub mod CBaseProp {
                pub const m_bModelOverrodeBlockLOS: usize = 0x8E8; // bool
                pub const m_iShapeType: usize = 0x8EC; // int32
                pub const m_bConformToCollisionBounds: usize = 0x8F0; // bool
                pub const m_mPreferredCatchTransform: usize = 0x8F4; // matrix3x4_t
            }
            // Parent: CBaseProp
            // Fields count: 34
            pub mod CBreakableProp {
                pub const m_OnBreak: usize = 0x938; // CEntityIOOutput
                pub const m_OnHealthChanged: usize = 0x960; // CEntityOutputTemplate<float32>
                pub const m_OnTakeDamage: usize = 0x988; // CEntityIOOutput
                pub const m_impactEnergyScale: usize = 0x9B0; // float32
                pub const m_iMinHealthDmg: usize = 0x9B4; // int32
                pub const m_preferredCarryAngles: usize = 0x9B8; // QAngle
                pub const m_flPressureDelay: usize = 0x9C4; // float32
                pub const m_hBreaker: usize = 0x9C8; // CHandle<CBaseEntity>
                pub const m_PerformanceMode: usize = 0x9CC; // PerformanceMode_t
                pub const m_flDmgModBullet: usize = 0x9D0; // float32
                pub const m_flDmgModClub: usize = 0x9D4; // float32
                pub const m_flDmgModExplosive: usize = 0x9D8; // float32
                pub const m_flDmgModFire: usize = 0x9DC; // float32
                pub const m_iszPhysicsDamageTableName: usize = 0x9E0; // CUtlSymbolLarge
                pub const m_iszBasePropData: usize = 0x9E8; // CUtlSymbolLarge
                pub const m_iInteractions: usize = 0x9F0; // int32
                pub const m_flPreventDamageBeforeTime: usize = 0x9F4; // GameTime_t
                pub const m_bHasBreakPiecesOrCommands: usize = 0x9F8; // bool
                pub const m_explodeDamage: usize = 0x9FC; // float32
                pub const m_explodeRadius: usize = 0xA00; // float32
                pub const m_explosionDelay: usize = 0xA08; // float32
                pub const m_explosionBuildupSound: usize = 0xA10; // CUtlSymbolLarge
                pub const m_explosionCustomEffect: usize = 0xA18; // CUtlSymbolLarge
                pub const m_explosionCustomSound: usize = 0xA20; // CUtlSymbolLarge
                pub const m_explosionModifier: usize = 0xA28; // CUtlSymbolLarge
                pub const m_hPhysicsAttacker: usize = 0xA30; // CHandle<CBasePlayerPawn>
                pub const m_flLastPhysicsInfluenceTime: usize = 0xA34; // GameTime_t
                pub const m_bOriginalBlockLOS: usize = 0xA38; // bool
                pub const m_flDefaultFadeScale: usize = 0xA3C; // float32
                pub const m_hLastAttacker: usize = 0xA40; // CHandle<CBaseEntity>
                pub const m_hFlareEnt: usize = 0xA44; // CHandle<CBaseEntity>
                pub const m_bUsePuntSound: usize = 0xA48; // bool
                pub const m_iszPuntSound: usize = 0xA50; // CUtlSymbolLarge
                pub const m_noGhostCollision: usize = 0xA58; // bool
            }
            // Parent: CBreakableProp
            // Fields count: 21
            pub mod CDynamicProp {
                pub const m_bCreateNavObstacle: usize = 0xA68; // bool
                pub const m_bUseHitboxesForRenderBox: usize = 0xA69; // bool
                pub const m_bUseAnimGraph: usize = 0xA6A; // bool
                pub const m_pOutputAnimBegun: usize = 0xA70; // CEntityIOOutput
                pub const m_pOutputAnimOver: usize = 0xA98; // CEntityIOOutput
                pub const m_pOutputAnimLoopCycleOver: usize = 0xAC0; // CEntityIOOutput
                pub const m_OnAnimReachedStart: usize = 0xAE8; // CEntityIOOutput
                pub const m_OnAnimReachedEnd: usize = 0xB10; // CEntityIOOutput
                pub const m_iszIdleAnim: usize = 0xB38; // CUtlSymbolLarge
                pub const m_nIdleAnimLoopMode: usize = 0xB40; // AnimLoopMode_t
                pub const m_bRandomizeCycle: usize = 0xB44; // bool
                pub const m_bStartDisabled: usize = 0xB45; // bool
                pub const m_bFiredStartEndOutput: usize = 0xB46; // bool
                pub const m_bForceNpcExclude: usize = 0xB47; // bool
                pub const m_bCreateNonSolid: usize = 0xB48; // bool
                pub const m_bIsOverrideProp: usize = 0xB49; // bool
                pub const m_iInitialGlowState: usize = 0xB4C; // int32
                pub const m_nGlowRange: usize = 0xB50; // int32
                pub const m_nGlowRangeMin: usize = 0xB54; // int32
                pub const m_glowColor: usize = 0xB58; // Color
                pub const m_nGlowTeam: usize = 0xB5C; // int32
            }
            // Parent: CDynamicProp
            // Fields count: 0
            pub mod CDynamicPropAlias_dynamic_prop {
            }
            // Parent: CDynamicProp
            // Fields count: 0
            pub mod CDynamicPropAlias_prop_dynamic_override {
            }
            // Parent: CDynamicProp
            // Fields count: 0
            pub mod CDynamicPropAlias_cable_dynamic {
            }
            // Parent: CBaseTrigger
            // Fields count: 10
            pub mod CColorCorrectionVolume {
                pub const m_bEnabled: usize = 0x8B8; // bool
                pub const m_MaxWeight: usize = 0x8BC; // float32
                pub const m_FadeDuration: usize = 0x8C0; // float32
                pub const m_bStartDisabled: usize = 0x8C4; // bool
                pub const m_Weight: usize = 0x8C8; // float32
                pub const m_lookupFilename: usize = 0x8CC; // char[512]
                pub const m_LastEnterWeight: usize = 0xACC; // float32
                pub const m_LastEnterTime: usize = 0xAD0; // GameTime_t
                pub const m_LastExitWeight: usize = 0xAD4; // float32
                pub const m_LastExitTime: usize = 0xAD8; // GameTime_t
            }
            // Parent: CBaseAnimGraph
            // Fields count: 30
            pub mod CPointCommentaryNode {
                pub const m_iszPreCommands: usize = 0x8E8; // CUtlSymbolLarge
                pub const m_iszPostCommands: usize = 0x8F0; // CUtlSymbolLarge
                pub const m_iszCommentaryFile: usize = 0x8F8; // CUtlSymbolLarge
                pub const m_iszViewTarget: usize = 0x900; // CUtlSymbolLarge
                pub const m_hViewTarget: usize = 0x908; // CHandle<CBaseEntity>
                pub const m_hViewTargetAngles: usize = 0x90C; // CHandle<CBaseEntity>
                pub const m_iszViewPosition: usize = 0x910; // CUtlSymbolLarge
                pub const m_hViewPosition: usize = 0x918; // CHandle<CBaseEntity>
                pub const m_hViewPositionMover: usize = 0x91C; // CHandle<CBaseEntity>
                pub const m_bPreventMovement: usize = 0x920; // bool
                pub const m_bUnderCrosshair: usize = 0x921; // bool
                pub const m_bUnstoppable: usize = 0x922; // bool
                pub const m_flFinishedTime: usize = 0x924; // GameTime_t
                pub const m_vecFinishOrigin: usize = 0x928; // 
                pub const m_vecOriginalAngles: usize = 0x934; // QAngle
                pub const m_vecFinishAngles: usize = 0x940; // QAngle
                pub const m_bPreventChangesWhileMoving: usize = 0x94C; // bool
                pub const m_bDisabled: usize = 0x94D; // bool
                pub const m_vecTeleportOrigin: usize = 0x950; // 
                pub const m_flAbortedPlaybackAt: usize = 0x95C; // GameTime_t
                pub const m_pOnCommentaryStarted: usize = 0x960; // CEntityIOOutput
                pub const m_pOnCommentaryStopped: usize = 0x988; // CEntityIOOutput
                pub const m_bActive: usize = 0x9B0; // bool
                pub const m_flStartTime: usize = 0x9B4; // GameTime_t
                pub const m_flStartTimeInCommentary: usize = 0x9B8; // float32
                pub const m_iszTitle: usize = 0x9C0; // CUtlSymbolLarge
                pub const m_iszSpeakers: usize = 0x9C8; // CUtlSymbolLarge
                pub const m_iNodeNumber: usize = 0x9D0; // int32
                pub const m_iNodeNumberMax: usize = 0x9D4; // int32
                pub const m_bListenedTo: usize = 0x9D8; // bool
            }
            // Parent: CSprite
            // Fields count: 0
            pub mod CCommentaryViewPosition {
            }
            // Parent: CBaseDoor
            // Fields count: 1
            pub mod CRotDoor {
                pub const m_bSolidBsp: usize = 0x998; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod CItemSoda {
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CPrecipitation {
            }
            // Parent: CBeam
            // Fields count: 19
            pub mod CEnvBeam {
                pub const m_active: usize = 0x7B0; // int32
                pub const m_spriteTexture: usize = 0x7B8; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_iszStartEntity: usize = 0x7C0; // CUtlSymbolLarge
                pub const m_iszEndEntity: usize = 0x7C8; // CUtlSymbolLarge
                pub const m_life: usize = 0x7D0; // float32
                pub const m_boltWidth: usize = 0x7D4; // float32
                pub const m_noiseAmplitude: usize = 0x7D8; // float32
                pub const m_speed: usize = 0x7DC; // int32
                pub const m_restrike: usize = 0x7E0; // float32
                pub const m_iszSpriteName: usize = 0x7E8; // CUtlSymbolLarge
                pub const m_frameStart: usize = 0x7F0; // int32
                pub const m_vEndPointWorld: usize = 0x7F4; // 
                pub const m_vEndPointRelative: usize = 0x800; // 
                pub const m_radius: usize = 0x80C; // float32
                pub const m_TouchType: usize = 0x810; // Touch_t
                pub const m_iFilterName: usize = 0x818; // CUtlSymbolLarge
                pub const m_hFilter: usize = 0x820; // CHandle<CBaseEntity>
                pub const m_iszDecal: usize = 0x828; // CUtlSymbolLarge
                pub const m_OnTouchedByEntity: usize = 0x830; // CEntityIOOutput
            }
            // Parent: CBreakable
            // Fields count: 0
            pub mod CPushable {
            }
            // Parent: CFuncLadder
            // Fields count: 0
            pub mod CFuncLadderAlias_func_useableladder {
            }
            // Parent: CFuncBrush
            // Fields count: 9
            pub mod CFuncMonitor {
                pub const m_targetCamera: usize = 0x730; // CUtlString
                pub const m_nResolutionEnum: usize = 0x738; // int32
                pub const m_bRenderShadows: usize = 0x73C; // bool
                pub const m_bUseUniqueColorTarget: usize = 0x73D; // bool
                pub const m_brushModelName: usize = 0x740; // CUtlString
                pub const m_hTargetCamera: usize = 0x748; // CHandle<CBaseEntity>
                pub const m_bEnabled: usize = 0x74C; // bool
                pub const m_bDraw3DSkybox: usize = 0x74D; // bool
                pub const m_bStartEnabled: usize = 0x74E; // bool
            }
            // Parent: CFuncMoveLinear
            // Fields count: 0
            pub mod CFuncMoveLinearAlias_momentary_door {
            }
            // Parent: CBaseToggle
            // Fields count: 3
            pub mod CGunTarget {
                pub const m_on: usize = 0x790; // bool
                pub const m_hTargetEnt: usize = 0x794; // CHandle<CBaseEntity>
                pub const m_OnDeath: usize = 0x798; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Fields count: 3
            pub mod CTriggerGameEvent {
                pub const m_strStartTouchEventName: usize = 0x8B8; // CUtlString
                pub const m_strEndTouchEventName: usize = 0x8C0; // CUtlString
                pub const m_strTriggerID: usize = 0x8C8; // CUtlString
            }
            // Parent: CRuleEntity
            // Fields count: 0
            pub mod CRuleBrushEntity {
            }
            // Parent: CRulePointEntity
            // Fields count: 0
            pub mod CGameEnd {
            }
            // Parent: CRulePointEntity
            // Fields count: 2
            pub mod CGameText {
                pub const m_iszMessage: usize = 0x720; // CUtlSymbolLarge
                pub const m_textParms: usize = 0x728; // hudtextparms_t
            }
            // Parent: CRuleBrushEntity
            // Fields count: 4
            pub mod CGamePlayerZone {
                pub const m_OnPlayerInZone: usize = 0x718; // CEntityIOOutput
                pub const m_OnPlayerOutZone: usize = 0x740; // CEntityIOOutput
                pub const m_PlayersInCount: usize = 0x768; // CEntityOutputTemplate<int32>
                pub const m_PlayersOutCount: usize = 0x790; // CEntityOutputTemplate<int32>
            }
            // Parent: CMarkupVolumeTagged
            // Fields count: 0
            pub mod CSimpleMarkupVolumeTagged {
            }
            // Parent: CMarkupVolumeTagged
            // Fields count: 0
            pub mod CMarkupVolumeTagged_Nav {
            }
            // Parent: CMarkupVolumeWithRef
            // Fields count: 1
            pub mod CMarkupVolumeTagged_NavGame {
                pub const m_bFloodFillAttribute: usize = 0x768; // bool
            }
            // Parent: CFuncBrush
            // Fields count: 4
            pub mod CFuncElectrifiedVolume {
                pub const m_EffectName: usize = 0x730; // CUtlSymbolLarge
                pub const m_EffectInterpenetrateName: usize = 0x738; // CUtlSymbolLarge
                pub const m_EffectZapName: usize = 0x740; // CUtlSymbolLarge
                pub const m_iszEffectSource: usize = 0x748; // CUtlSymbolLarge
            }
            // Parent: CPathCorner
            // Fields count: 0
            pub mod CPathCornerCrash {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 1
            pub mod CConstraintAnchor {
                pub const m_massScale: usize = 0x8E8; // float32
            }
            // Parent: CDynamicProp
            // Fields count: 1
            pub mod COrnamentProp {
                pub const m_initialOwner: usize = 0xB60; // CUtlSymbolLarge
            }
            // Parent: CRopeKeyframe
            // Fields count: 0
            pub mod CRopeKeyframeAlias_move_rope {
            }
            // Parent: CSceneEntity
            // Fields count: 0
            pub mod CSceneEntityAlias_logic_choreographed_scene {
            }
            // Parent: CSceneEntity
            // Fields count: 7
            pub mod CInstancedSceneEntity {
                pub const m_hOwner: usize = 0xA18; // CHandle<CBaseEntity>
                pub const m_bHadOwner: usize = 0xA1C; // bool
                pub const m_flPostSpeakDelay: usize = 0xA20; // float32
                pub const m_flPreDelay: usize = 0xA24; // float32
                pub const m_bIsBackground: usize = 0xA28; // bool
                pub const m_bRemoveOnCompletion: usize = 0xA29; // bool
                pub const m_hTarget: usize = 0xA2C; // CHandle<CBaseEntity>
            }
            // Parent: CBaseTrigger
            // Fields count: 3
            pub mod CTriggerSoundscape {
                pub const m_hSoundscape: usize = 0x8B8; // CHandle<CEnvSoundscapeTriggerable>
                pub const m_SoundscapeName: usize = 0x8C0; // CUtlSymbolLarge
                pub const m_spectators: usize = 0x8C8; // CUtlVector<CHandle<CBasePlayerPawn>>
            }
            // Parent: CSprite
            // Fields count: 0
            pub mod CSpriteAlias_env_glow {
            }
            // Parent: CFuncTrackTrain
            // Fields count: 1
            pub mod CFuncTankTrain {
                pub const m_OnDeath: usize = 0x860; // CEntityIOOutput
            }
            // Parent: CBaseToggle
            // Fields count: 5
            pub mod CBasePlatTrain {
                pub const m_NoiseMoving: usize = 0x790; // CUtlSymbolLarge
                pub const m_NoiseArrived: usize = 0x798; // CUtlSymbolLarge
                pub const m_volume: usize = 0x7A8; // float32
                pub const m_flTWidth: usize = 0x7AC; // float32
                pub const m_flTLength: usize = 0x7B0; // float32
            }
            // Parent: CBasePlatTrain
            // Fields count: 1
            pub mod CFuncPlat {
                pub const m_sNoise: usize = 0x7B8; // CUtlSymbolLarge
            }
            // Parent: CFuncPlat
            // Fields count: 2
            pub mod CFuncPlatRot {
                pub const m_end: usize = 0x7C0; // QAngle
                pub const m_start: usize = 0x7CC; // QAngle
            }
            // Parent: CBasePlatTrain
            // Fields count: 6
            pub mod CFuncTrain {
                pub const m_hCurrentTarget: usize = 0x7B8; // CHandle<CBaseEntity>
                pub const m_activated: usize = 0x7BC; // bool
                pub const m_hEnemy: usize = 0x7C0; // CHandle<CBaseEntity>
                pub const m_flBlockDamage: usize = 0x7C4; // float32
                pub const m_flNextBlockTime: usize = 0x7C8; // GameTime_t
                pub const m_iszLastTarget: usize = 0x7D0; // CUtlSymbolLarge
            }
            // Parent: CFuncPlatRot
            // Fields count: 9
            pub mod CFuncTrackChange {
                pub const m_trackTop: usize = 0x7D8; // CPathTrack*
                pub const m_trackBottom: usize = 0x7E0; // CPathTrack*
                pub const m_train: usize = 0x7E8; // CFuncTrackTrain*
                pub const m_trackTopName: usize = 0x7F0; // CUtlSymbolLarge
                pub const m_trackBottomName: usize = 0x7F8; // CUtlSymbolLarge
                pub const m_trainName: usize = 0x800; // CUtlSymbolLarge
                pub const m_code: usize = 0x808; // TRAIN_CODE
                pub const m_targetState: usize = 0x80C; // int32
                pub const m_use: usize = 0x810; // int32
            }
            // Parent: CFuncTrackChange
            // Fields count: 0
            pub mod CFuncTrackAuto {
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CTriggerRemove {
                pub const m_OnRemove: usize = 0x8B8; // CEntityIOOutput
            }
            // Parent: CTriggerHurt
            // Fields count: 1
            pub mod CScriptTriggerHurt {
                pub const m_vExtent: usize = 0x958; // 
            }
            // Parent: CTriggerMultiple
            // Fields count: 1
            pub mod CScriptTriggerMultiple {
                pub const m_vExtent: usize = 0x8E0; // 
            }
            // Parent: CTriggerMultiple
            // Fields count: 0
            pub mod CTriggerOnce {
            }
            // Parent: CTriggerOnce
            // Fields count: 1
            pub mod CScriptTriggerOnce {
                pub const m_vExtent: usize = 0x8E0; // 
            }
            // Parent: CTriggerOnce
            // Fields count: 15
            pub mod CTriggerLook {
                pub const m_hLookTarget: usize = 0x8E0; // CHandle<CBaseEntity>
                pub const m_flFieldOfView: usize = 0x8E4; // float32
                pub const m_flLookTime: usize = 0x8E8; // float32
                pub const m_flLookTimeTotal: usize = 0x8EC; // float32
                pub const m_flLookTimeLast: usize = 0x8F0; // GameTime_t
                pub const m_flTimeoutDuration: usize = 0x8F4; // float32
                pub const m_bTimeoutFired: usize = 0x8F8; // bool
                pub const m_bIsLooking: usize = 0x8F9; // bool
                pub const m_b2DFOV: usize = 0x8FA; // bool
                pub const m_bUseVelocity: usize = 0x8FB; // bool
                pub const m_hActivator: usize = 0x8FC; // CHandle<CBaseEntity>
                pub const m_bTestOcclusion: usize = 0x900; // bool
                pub const m_OnTimeout: usize = 0x908; // CEntityIOOutput
                pub const m_OnStartLook: usize = 0x930; // CEntityIOOutput
                pub const m_OnEndLook: usize = 0x958; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Fields count: 3
            pub mod CTriggerPush {
                pub const m_angPushEntitySpace: usize = 0x8B8; // QAngle
                pub const m_vecPushDirEntitySpace: usize = 0x8C4; // 
                pub const m_bTriggerOnStartTouch: usize = 0x8D0; // bool
            }
            // Parent: CTriggerPush
            // Fields count: 1
            pub mod CScriptTriggerPush {
                pub const m_vExtent: usize = 0x8D8; // 
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CTriggerToggleSave {
                pub const m_bDisabled: usize = 0x8B8; // bool
            }
            // Parent: CBaseTrigger
            // Fields count: 3
            pub mod CTriggerSave {
                pub const m_bForceNewLevelUnit: usize = 0x8B8; // bool
                pub const m_fDangerousTimer: usize = 0x8BC; // float32
                pub const m_minHitPoints: usize = 0x8C0; // int32
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CTriggerGravity {
            }
            // Parent: CBaseTrigger
            // Fields count: 5
            pub mod CTriggerProximity {
                pub const m_hMeasureTarget: usize = 0x8B8; // CHandle<CBaseEntity>
                pub const m_iszMeasureTarget: usize = 0x8C0; // CUtlSymbolLarge
                pub const m_fRadius: usize = 0x8C8; // float32
                pub const m_nTouchers: usize = 0x8CC; // int32
                pub const m_NearestEntityDistance: usize = 0x8D0; // CEntityOutputTemplate<float32>
            }
            // Parent: CTriggerMultiple
            // Fields count: 4
            pub mod CTriggerImpact {
                pub const m_flMagnitude: usize = 0x8E0; // float32
                pub const m_flNoise: usize = 0x8E4; // float32
                pub const m_flViewkick: usize = 0x8E8; // float32
                pub const m_pOutputForce: usize = 0x8F0; // CEntityOutputTemplate<Vector>
            }
            // Parent: CBaseTrigger
            // Fields count: 0
            pub mod CServerRagdollTrigger {
            }
            // Parent: CBaseTrigger
            // Fields count: 2
            pub mod CTriggerActiveWeaponDetect {
                pub const m_OnTouchedActiveWeapon: usize = 0x8B8; // CEntityIOOutput
                pub const m_iszWeaponClassName: usize = 0x8E0; // CUtlSymbolLarge
            }
            // Parent: CBaseTrigger
            // Fields count: 13
            pub mod CTriggerPhysics {
                pub const m_gravityScale: usize = 0x8C8; // float32
                pub const m_linearLimit: usize = 0x8CC; // float32
                pub const m_linearDamping: usize = 0x8D0; // float32
                pub const m_angularLimit: usize = 0x8D4; // float32
                pub const m_angularDamping: usize = 0x8D8; // float32
                pub const m_linearForce: usize = 0x8DC; // float32
                pub const m_flFrequency: usize = 0x8E0; // float32
                pub const m_flDampingRatio: usize = 0x8E4; // float32
                pub const m_vecLinearForcePointAt: usize = 0x8E8; // 
                pub const m_bCollapseToForcePoint: usize = 0x8F4; // bool
                pub const m_vecLinearForcePointAtWorld: usize = 0x8F8; // 
                pub const m_vecLinearForceDirection: usize = 0x904; // 
                pub const m_bConvertToDebrisWhenPossible: usize = 0x910; // bool
            }
            // Parent: CBaseTrigger
            // Fields count: 2
            pub mod CTriggerDetectBulletFire {
                pub const m_bPlayerFireOnly: usize = 0x8B8; // bool
                pub const m_OnDetectedBulletFire: usize = 0x8C0; // CEntityIOOutput
            }
            // Parent: CBaseTrigger
            // Fields count: 1
            pub mod CTriggerDetectExplosion {
                pub const m_OnDetectedExplosion: usize = 0x8F0; // CEntityIOOutput
            }
            // Parent: CFuncNavBlocker
            // Fields count: 1
            pub mod CScriptNavBlocker {
                pub const m_vExtent: usize = 0x720; // 
            }
            // Parent: CBaseAnimGraph
            // Fields count: 7
            pub mod CBaseFlex {
                pub const m_flexWeight: usize = 0x8E8; // CNetworkUtlVectorBase<float32>
                pub const m_vLookTargetPosition: usize = 0x900; // 
                pub const m_blinktoggle: usize = 0x90C; // bool
                pub const m_flAllowResponsesEndTime: usize = 0x960; // GameTime_t
                pub const m_flLastFlexAnimationTime: usize = 0x964; // GameTime_t
                pub const m_nNextSceneEventId: usize = 0x968; // uint32
                pub const m_bUpdateLayerPriorities: usize = 0x96C; // bool
            }
            // Parent: CDynamicProp
            // Fields count: 37
            pub mod CBasePropDoor {
                pub const m_flAutoReturnDelay: usize = 0xB70; // float32
                pub const m_hDoorList: usize = 0xB78; // CUtlVector<CHandle<CBasePropDoor>>
                pub const m_nHardwareType: usize = 0xB90; // int32
                pub const m_bNeedsHardware: usize = 0xB94; // bool
                pub const m_eDoorState: usize = 0xB98; // DoorState_t
                pub const m_bLocked: usize = 0xB9C; // bool
                pub const m_closedPosition: usize = 0xBA0; // 
                pub const m_closedAngles: usize = 0xBAC; // QAngle
                pub const m_hBlocker: usize = 0xBB8; // CHandle<CBaseEntity>
                pub const m_bFirstBlocked: usize = 0xBBC; // bool
                pub const m_ls: usize = 0xBC0; // locksound_t
                pub const m_bForceClosed: usize = 0xBE0; // bool
                pub const m_vecLatchWorldPosition: usize = 0xBE4; // 
                pub const m_hActivator: usize = 0xBF0; // CHandle<CBaseEntity>
                pub const m_SoundMoving: usize = 0xC00; // CUtlSymbolLarge
                pub const m_SoundOpen: usize = 0xC08; // CUtlSymbolLarge
                pub const m_SoundClose: usize = 0xC10; // CUtlSymbolLarge
                pub const m_SoundLock: usize = 0xC18; // CUtlSymbolLarge
                pub const m_SoundUnlock: usize = 0xC20; // CUtlSymbolLarge
                pub const m_SoundLatch: usize = 0xC28; // CUtlSymbolLarge
                pub const m_SoundPound: usize = 0xC30; // CUtlSymbolLarge
                pub const m_SoundJiggle: usize = 0xC38; // CUtlSymbolLarge
                pub const m_SoundLockedAnim: usize = 0xC40; // CUtlSymbolLarge
                pub const m_numCloseAttempts: usize = 0xC48; // int32
                pub const m_nPhysicsMaterial: usize = 0xC4C; // CUtlStringToken
                pub const m_SlaveName: usize = 0xC50; // CUtlSymbolLarge
                pub const m_hMaster: usize = 0xC58; // CHandle<CBasePropDoor>
                pub const m_OnBlockedClosing: usize = 0xC60; // CEntityIOOutput
                pub const m_OnBlockedOpening: usize = 0xC88; // CEntityIOOutput
                pub const m_OnUnblockedClosing: usize = 0xCB0; // CEntityIOOutput
                pub const m_OnUnblockedOpening: usize = 0xCD8; // CEntityIOOutput
                pub const m_OnFullyClosed: usize = 0xD00; // CEntityIOOutput
                pub const m_OnFullyOpen: usize = 0xD28; // CEntityIOOutput
                pub const m_OnClose: usize = 0xD50; // CEntityIOOutput
                pub const m_OnOpen: usize = 0xD78; // CEntityIOOutput
                pub const m_OnLockedUse: usize = 0xDA0; // CEntityIOOutput
                pub const m_OnAjarOpen: usize = 0xDC8; // CEntityIOOutput
            }
            // Parent: CBeam
            // Fields count: 5
            pub mod CEnvLaser {
                pub const m_iszLaserTarget: usize = 0x7B0; // CUtlSymbolLarge
                pub const m_pSprite: usize = 0x7B8; // CSprite*
                pub const m_iszSpriteName: usize = 0x7C0; // CUtlSymbolLarge
                pub const m_firePosition: usize = 0x7C8; // 
                pub const m_flStartFrame: usize = 0x7D4; // float32
            }
            // Parent: CBaseAnimGraph
            // Fields count: 24
            pub mod CFish {
                pub const m_pool: usize = 0x8E8; // CHandle<CFishPool>
                pub const m_id: usize = 0x8EC; // uint32
                pub const m_x: usize = 0x8F0; // float32
                pub const m_y: usize = 0x8F4; // float32
                pub const m_z: usize = 0x8F8; // float32
                pub const m_angle: usize = 0x8FC; // float32
                pub const m_angleChange: usize = 0x900; // float32
                pub const m_forward: usize = 0x904; // 
                pub const m_perp: usize = 0x910; // 
                pub const m_poolOrigin: usize = 0x91C; // 
                pub const m_waterLevel: usize = 0x928; // float32
                pub const m_speed: usize = 0x92C; // float32
                pub const m_desiredSpeed: usize = 0x930; // float32
                pub const m_calmSpeed: usize = 0x934; // float32
                pub const m_panicSpeed: usize = 0x938; // float32
                pub const m_avoidRange: usize = 0x93C; // float32
                pub const m_turnTimer: usize = 0x940; // CountdownTimer
                pub const m_turnClockwise: usize = 0x958; // bool
                pub const m_goTimer: usize = 0x960; // CountdownTimer
                pub const m_moveTimer: usize = 0x978; // CountdownTimer
                pub const m_panicTimer: usize = 0x990; // CountdownTimer
                pub const m_disperseTimer: usize = 0x9A8; // CountdownTimer
                pub const m_proximityTimer: usize = 0x9C0; // CountdownTimer
                pub const m_visible: usize = 0x9D8; // CUtlVector<CFish*>
            }
            // Parent: CBaseAnimGraph
            // Fields count: 8
            pub mod CItem {
                pub const m_OnPlayerTouch: usize = 0x8F0; // CEntityIOOutput
                pub const m_bActivateWhenAtRest: usize = 0x918; // bool
                pub const m_OnCacheInteraction: usize = 0x920; // CEntityIOOutput
                pub const m_OnPlayerPickup: usize = 0x948; // CEntityIOOutput
                pub const m_OnGlovePulled: usize = 0x970; // CEntityIOOutput
                pub const m_vOriginalSpawnOrigin: usize = 0x998; // 
                pub const m_vOriginalSpawnAngles: usize = 0x9A4; // QAngle
                pub const m_bPhysStartAsleep: usize = 0x9B0; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 28
            pub mod CRagdollProp {
                pub const m_ragdoll: usize = 0x8F0; // ragdoll_t
                pub const m_bStartDisabled: usize = 0x928; // bool
                pub const m_ragPos: usize = 0x930; // CNetworkUtlVectorBase<Vector>
                pub const m_ragAngles: usize = 0x948; // CNetworkUtlVectorBase<QAngle>
                pub const m_hRagdollSource: usize = 0x960; // CHandle<CBaseEntity>
                pub const m_lastUpdateTickCount: usize = 0x964; // uint32
                pub const m_allAsleep: usize = 0x968; // bool
                pub const m_bFirstCollisionAfterLaunch: usize = 0x969; // bool
                pub const m_hDamageEntity: usize = 0x96C; // CHandle<CBaseEntity>
                pub const m_hKiller: usize = 0x970; // CHandle<CBaseEntity>
                pub const m_hPhysicsAttacker: usize = 0x974; // CHandle<CBasePlayerPawn>
                pub const m_flLastPhysicsInfluenceTime: usize = 0x978; // GameTime_t
                pub const m_flFadeOutStartTime: usize = 0x97C; // GameTime_t
                pub const m_flFadeTime: usize = 0x980; // float32
                pub const m_vecLastOrigin: usize = 0x984; // 
                pub const m_flAwakeTime: usize = 0x990; // GameTime_t
                pub const m_flLastOriginChangeTime: usize = 0x994; // GameTime_t
                pub const m_nBloodColor: usize = 0x998; // int32
                pub const m_strOriginClassName: usize = 0x9A0; // CUtlSymbolLarge
                pub const m_strSourceClassName: usize = 0x9A8; // CUtlSymbolLarge
                pub const m_bHasBeenPhysgunned: usize = 0x9B0; // bool
                pub const m_bShouldTeleportPhysics: usize = 0x9B1; // bool
                pub const m_flBlendWeight: usize = 0x9B4; // float32
                pub const m_flDefaultFadeScale: usize = 0x9B8; // float32
                pub const m_ragdollMins: usize = 0x9C0; // CUtlVector<Vector>
                pub const m_ragdollMaxs: usize = 0x9D8; // CUtlVector<Vector>
                pub const m_bShouldDeleteActivationRecord: usize = 0x9F0; // bool
                pub const m_bValidatePoweredRagdollPose: usize = 0xA50; // bool
            }
            // Parent: CBaseAnimGraph
            // Fields count: 12
            pub mod CPhysMagnet {
                pub const m_OnMagnetAttach: usize = 0x8E8; // CEntityIOOutput
                pub const m_OnMagnetDetach: usize = 0x910; // CEntityIOOutput
                pub const m_massScale: usize = 0x938; // float32
                pub const m_forceLimit: usize = 0x93C; // float32
                pub const m_torqueLimit: usize = 0x940; // float32
                pub const m_MagnettedEntities: usize = 0x948; // CUtlVector<magnetted_objects_t>
                pub const m_bActive: usize = 0x960; // bool
                pub const m_bHasHitSomething: usize = 0x961; // bool
                pub const m_flTotalMass: usize = 0x964; // float32
                pub const m_flRadius: usize = 0x968; // float32
                pub const m_flNextSuckTime: usize = 0x96C; // GameTime_t
                pub const m_iMaxObjectsAttached: usize = 0x970; // int32
            }
            // Parent: CBreakableProp
            // Fields count: 34
            pub mod CPhysicsProp {
                pub const m_MotionEnabled: usize = 0xA68; // CEntityIOOutput
                pub const m_OnAwakened: usize = 0xA90; // CEntityIOOutput
                pub const m_OnAwake: usize = 0xAB8; // CEntityIOOutput
                pub const m_OnAsleep: usize = 0xAE0; // CEntityIOOutput
                pub const m_OnPlayerUse: usize = 0xB08; // CEntityIOOutput
                pub const m_OnPlayerPickup: usize = 0xB30; // CEntityIOOutput
                pub const m_OnOutOfWorld: usize = 0xB58; // CEntityIOOutput
                pub const m_massScale: usize = 0xB80; // float32
                pub const m_inertiaScale: usize = 0xB84; // float32
                pub const m_buoyancyScale: usize = 0xB88; // float32
                pub const m_damageType: usize = 0xB8C; // int32
                pub const m_damageToEnableMotion: usize = 0xB90; // int32
                pub const m_flForceToEnableMotion: usize = 0xB94; // float32
                pub const m_bThrownByPlayer: usize = 0xB98; // bool
                pub const m_bDroppedByPlayer: usize = 0xB99; // bool
                pub const m_bTouchedByPlayer: usize = 0xB9A; // bool
                pub const m_bFirstCollisionAfterLaunch: usize = 0xB9B; // bool
                pub const m_iExploitableByPlayer: usize = 0xB9C; // int32
                pub const m_bHasBeenAwakened: usize = 0xBA0; // bool
                pub const m_bIsOverrideProp: usize = 0xBA1; // bool
                pub const m_fNextCheckDisableMotionContactsTime: usize = 0xBA4; // GameTime_t
                pub const m_iInitialGlowState: usize = 0xBA8; // int32
                pub const m_nGlowRange: usize = 0xBAC; // int32
                pub const m_nGlowRangeMin: usize = 0xBB0; // int32
                pub const m_glowColor: usize = 0xBB4; // Color
                pub const m_bForceNavIgnore: usize = 0xBB8; // bool
                pub const m_bNoNavmeshBlocker: usize = 0xBB9; // bool
                pub const m_bForceNpcExclude: usize = 0xBBA; // bool
                pub const m_bShouldAutoConvertBackFromDebris: usize = 0xBBB; // bool
                pub const m_bMuteImpactEffects: usize = 0xBBC; // bool
                pub const m_bAcceptDamageFromHeldObjects: usize = 0xBC4; // bool
                pub const m_bEnableUseOutput: usize = 0xBC5; // bool
                pub const m_bAwake: usize = 0xBC6; // bool
                pub const m_nCollisionGroupOverride: usize = 0xBC8; // int32
            }
            // Parent: CPhysicsProp
            // Fields count: 0
            pub mod CPhysicsPropOverride {
            }
            // Parent: CPhysicsProp
            // Fields count: 5
            pub mod CPhysicsPropRespawnable {
                pub const m_vOriginalSpawnOrigin: usize = 0xBD0; // 
                pub const m_vOriginalSpawnAngles: usize = 0xBDC; // QAngle
                pub const m_vOriginalMins: usize = 0xBE8; // 
                pub const m_vOriginalMaxs: usize = 0xBF4; // 
                pub const m_flRespawnDuration: usize = 0xC00; // float32
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod CWaterBullet {
            }
            // Parent: CPhysicsProp
            // Fields count: 3
            pub mod CShatterGlassShardPhysics {
                pub const m_bDebris: usize = 0xBD0; // bool
                pub const m_hParentShard: usize = 0xBD4; // uint32
                pub const m_ShardDesc: usize = 0xBD8; // shard_model_desc_t
            }
            // Parent: CBaseFlex
            // Fields count: 9
            pub mod CEconEntity {
                pub const m_AttributeManager: usize = 0x988; // CAttributeContainer
                pub const m_OriginalOwnerXuidLow: usize = 0xC50; // uint32
                pub const m_OriginalOwnerXuidHigh: usize = 0xC54; // uint32
                pub const m_nFallbackPaintKit: usize = 0xC58; // int32
                pub const m_nFallbackSeed: usize = 0xC5C; // int32
                pub const m_flFallbackWear: usize = 0xC60; // float32
                pub const m_nFallbackStatTrak: usize = 0xC64; // int32
                pub const m_hOldProvidee: usize = 0xC68; // CHandle<CBaseEntity>
                pub const m_iOldOwnerClass: usize = 0xC6C; // int32
            }
            // Parent: CEconEntity
            // Fields count: 2
            pub mod CEconWearable {
                pub const m_nForceSkin: usize = 0xC70; // int32
                pub const m_bAlwaysAllow: usize = 0xC74; // bool
            }
            // Parent: CBaseFlex
            // Fields count: 14
            pub mod CBaseGrenade {
                pub const m_OnPlayerPickup: usize = 0x980; // CEntityIOOutput
                pub const m_OnExplode: usize = 0x9A8; // CEntityIOOutput
                pub const m_bHasWarnedAI: usize = 0x9D0; // bool
                pub const m_bIsSmokeGrenade: usize = 0x9D1; // bool
                pub const m_bIsLive: usize = 0x9D2; // bool
                pub const m_DmgRadius: usize = 0x9D4; // float32
                pub const m_flDetonateTime: usize = 0x9D8; // GameTime_t
                pub const m_flWarnAITime: usize = 0x9DC; // float32
                pub const m_flDamage: usize = 0x9E0; // float32
                pub const m_iszBounceSound: usize = 0x9E8; // CUtlSymbolLarge
                pub const m_ExplosionSound: usize = 0x9F0; // CUtlString
                pub const m_hThrower: usize = 0x9FC; // CHandle<CCSPlayerPawn>
                pub const m_flNextAttack: usize = 0xA14; // GameTime_t
                pub const m_hOriginalThrower: usize = 0xA18; // CHandle<CCSPlayerPawn>
            }
            // Parent: CDynamicProp
            // Fields count: 0
            pub mod CCoopBonusCoin {
            }
            // Parent: CPhysicsProp
            // Fields count: 0
            pub mod CPhysicsPropMultiplayer {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 11
            pub mod CBaseViewModel {
                pub const m_vecLastFacing: usize = 0x8F0; // 
                pub const m_nViewModelIndex: usize = 0x8FC; // uint32
                pub const m_nAnimationParity: usize = 0x900; // uint32
                pub const m_flAnimationStartTime: usize = 0x904; // float32
                pub const m_hWeapon: usize = 0x908; // CHandle<CBasePlayerWeapon>
                pub const m_sVMName: usize = 0x910; // CUtlSymbolLarge
                pub const m_sAnimationPrefix: usize = 0x918; // CUtlSymbolLarge
                pub const m_hOldLayerSequence: usize = 0x920; // HSequence
                pub const m_oldLayer: usize = 0x924; // int32
                pub const m_oldLayerStartTime: usize = 0x928; // float32
                pub const m_hControlPanel: usize = 0x92C; // CHandle<CBaseEntity>
            }
            // Parent: CBaseViewModel
            // Fields count: 0
            pub mod CPredictedViewModel {
            }
            // Parent: CBaseAnimGraph
            // Fields count: 26
            pub mod CPlantedC4 {
                pub const m_bBombTicking: usize = 0x8E8; // bool
                pub const m_flC4Blow: usize = 0x8EC; // GameTime_t
                pub const m_nBombSite: usize = 0x8F0; // int32
                pub const m_nSourceSoundscapeHash: usize = 0x8F4; // int32
                pub const m_OnBombDefused: usize = 0x8F8; // CEntityIOOutput
                pub const m_OnBombBeginDefuse: usize = 0x920; // CEntityIOOutput
                pub const m_OnBombDefuseAborted: usize = 0x948; // CEntityIOOutput
                pub const m_bCannotBeDefused: usize = 0x970; // bool
                pub const m_entitySpottedState: usize = 0x978; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0x990; // int32
                pub const m_bTrainingPlacedByPlayer: usize = 0x994; // bool
                pub const m_bHasExploded: usize = 0x995; // bool
                pub const m_flTimerLength: usize = 0x998; // float32
                pub const m_bBeingDefused: usize = 0x99C; // bool
                pub const m_fLastDefuseTime: usize = 0x9A4; // GameTime_t
                pub const m_flDefuseLength: usize = 0x9AC; // float32
                pub const m_flDefuseCountDown: usize = 0x9B0; // GameTime_t
                pub const m_bBombDefused: usize = 0x9B4; // bool
                pub const m_hBombDefuser: usize = 0x9B8; // CHandle<CCSPlayerPawn>
                pub const m_hControlPanel: usize = 0x9BC; // CHandle<CBaseEntity>
                pub const m_iProgressBarTime: usize = 0x9C0; // int32
                pub const m_bVoiceAlertFired: usize = 0x9C4; // bool
                pub const m_bVoiceAlertPlayed: usize = 0x9C5; // bool[4]
                pub const m_flNextBotBeepTime: usize = 0x9CC; // GameTime_t
                pub const m_angCatchUpToPlayerEye: usize = 0x9D4; // QAngle
                pub const m_flLastSpinDetectionTime: usize = 0x9E0; // GameTime_t
            }
            // Parent: CBaseGrenade
            // Fields count: 18
            pub mod CBaseCSGrenadeProjectile {
                pub const m_vInitialPosition: usize = 0xA20; // 
                pub const m_vInitialVelocity: usize = 0xA2C; // 
                pub const m_nBounces: usize = 0xA38; // int32
                pub const m_nExplodeEffectIndex: usize = 0xA40; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_nExplodeEffectTickBegin: usize = 0xA48; // int32
                pub const m_vecExplodeEffectOrigin: usize = 0xA4C; // 
                pub const m_flSpawnTime: usize = 0xA58; // GameTime_t
                pub const m_unOGSExtraFlags: usize = 0xA5C; // uint8
                pub const m_bDetonationRecorded: usize = 0xA5D; // bool
                pub const m_flDetonateTime: usize = 0xA60; // GameTime_t
                pub const m_nItemIndex: usize = 0xA64; // uint16
                pub const m_vecOriginalSpawnLocation: usize = 0xA68; // 
                pub const m_flLastBounceSoundTime: usize = 0xA74; // GameTime_t
                pub const m_vecGrenadeSpin: usize = 0xA78; // RotationVector
                pub const m_vecLastHitSurfaceNormal: usize = 0xA84; // 
                pub const m_nTicksAtZeroVelocity: usize = 0xA90; // int32
                pub const m_bHasEverHitPlayer: usize = 0xA94; // bool
                pub const m_bClearFromPlayers: usize = 0xA95; // bool
            }
            // Parent: CItem
            // Fields count: 2
            pub mod CItemDogtags {
                pub const m_OwningPlayer: usize = 0x9C0; // CHandle<CCSPlayerPawn>
                pub const m_KillingPlayer: usize = 0x9C4; // CHandle<CCSPlayerPawn>
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 3
            pub mod CSensorGrenadeProjectile {
                pub const m_fExpireTime: usize = 0xA98; // GameTime_t
                pub const m_fNextDetectPlayerSound: usize = 0xA9C; // GameTime_t
                pub const m_hDisplayGrenade: usize = 0xAA0; // CHandle<CBaseEntity>
            }
            // Parent: CBaseGrenade
            // Fields count: 0
            pub mod CBreachChargeProjectile {
            }
            // Parent: CBaseGrenade
            // Fields count: 0
            pub mod CBumpMineProjectile {
            }
            // Parent: CBaseGrenade
            // Fields count: 0
            pub mod CTripWireFireProjectile {
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 3
            pub mod CFlashbangProjectile {
                pub const m_flTimeToDetonate: usize = 0xA98; // float32
                pub const m_numOpponentsHit: usize = 0xA9C; // uint8
                pub const m_numTeammatesHit: usize = 0xA9D; // uint8
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 0
            pub mod CHEGrenadeProjectile {
            }
            // Parent: CDynamicProp
            // Fields count: 34
            pub mod CChicken {
                pub const m_AttributeManager: usize = 0xB80; // CAttributeContainer
                pub const m_OriginalOwnerXuidLow: usize = 0xE48; // uint32
                pub const m_OriginalOwnerXuidHigh: usize = 0xE4C; // uint32
                pub const m_updateTimer: usize = 0xE50; // CountdownTimer
                pub const m_stuckAnchor: usize = 0xE68; // 
                pub const m_stuckTimer: usize = 0xE78; // CountdownTimer
                pub const m_collisionStuckTimer: usize = 0xE90; // CountdownTimer
                pub const m_isOnGround: usize = 0xEA8; // bool
                pub const m_vFallVelocity: usize = 0xEAC; // 
                pub const m_activity: usize = 0xEB8; // ChickenActivity
                pub const m_activityTimer: usize = 0xEC0; // CountdownTimer
                pub const m_turnRate: usize = 0xED8; // float32
                pub const m_fleeFrom: usize = 0xEDC; // CHandle<CBaseEntity>
                pub const m_moveRateThrottleTimer: usize = 0xEE0; // CountdownTimer
                pub const m_startleTimer: usize = 0xEF8; // CountdownTimer
                pub const m_vocalizeTimer: usize = 0xF10; // CountdownTimer
                pub const m_flWhenZombified: usize = 0xF28; // GameTime_t
                pub const m_jumpedThisFrame: usize = 0xF2C; // bool
                pub const m_leader: usize = 0xF30; // CHandle<CCSPlayerPawn>
                pub const m_reuseTimer: usize = 0xF38; // CountdownTimer
                pub const m_hasBeenUsed: usize = 0xF50; // bool
                pub const m_jumpTimer: usize = 0xF58; // CountdownTimer
                pub const m_flLastJumpTime: usize = 0xF70; // float32
                pub const m_bInJump: usize = 0xF74; // bool
                pub const m_isWaitingForLeader: usize = 0xF75; // bool
                pub const m_repathTimer: usize = 0x2F80; // CountdownTimer
                pub const m_inhibitDoorTimer: usize = 0x2F98; // CountdownTimer
                pub const m_inhibitObstacleAvoidanceTimer: usize = 0x3028; // CountdownTimer
                pub const m_vecPathGoal: usize = 0x3048; // 
                pub const m_flActiveFollowStartTime: usize = 0x3054; // GameTime_t
                pub const m_followMinuteTimer: usize = 0x3058; // CountdownTimer
                pub const m_vecLastEggPoopPosition: usize = 0x3070; // 
                pub const m_vecEggsPooped: usize = 0x3080; // CUtlVector<CHandle<CBaseEntity>>
                pub const m_BlockDirectionTimer: usize = 0x30A0; // CountdownTimer
            }
            // Parent: CBaseAnimGraph
            // Fields count: 0
            pub mod CHostageCarriableProp {
            }
            // Parent: CItem
            // Fields count: 0
            pub mod CItemAssaultSuit {
            }
            // Parent: CItemAssaultSuit
            // Fields count: 0
            pub mod CItemHeavyAssaultSuit {
            }
            // Parent: CItem
            // Fields count: 0
            pub mod CItemKevlar {
            }
            // Parent: CItem
            // Fields count: 2
            pub mod CItemDefuser {
                pub const m_entitySpottedState: usize = 0x9C0; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0x9D8; // int32
            }
            // Parent: CEconEntity
            // Fields count: 8
            pub mod CBasePlayerWeapon {
                pub const m_nNextPrimaryAttackTick: usize = 0xC70; // GameTick_t
                pub const m_flNextPrimaryAttackTickRatio: usize = 0xC74; // float32
                pub const m_nNextSecondaryAttackTick: usize = 0xC78; // GameTick_t
                pub const m_flNextSecondaryAttackTickRatio: usize = 0xC7C; // float32
                pub const m_iClip1: usize = 0xC80; // int32
                pub const m_iClip2: usize = 0xC84; // int32
                pub const m_pReserveAmmo: usize = 0xC88; // int32[2]
                pub const m_OnPlayerUse: usize = 0xC90; // CEntityIOOutput
            }
            // Parent: CBaseFlex
            // Fields count: 0
            pub mod CBaseFlexAlias_funCBaseFlex {
            }
            // Parent: CItem
            // Fields count: 2
            pub mod CScriptItem {
                pub const m_OnPlayerPickup: usize = 0x9C0; // CEntityIOOutput
                pub const m_MoveTypeOverride: usize = 0x9E8; // MoveType_t
            }
            // Parent: CRagdollProp
            // Fields count: 0
            pub mod CRagdollPropAlias_physics_prop_ragdoll {
            }
            // Parent: CRagdollProp
            // Fields count: 6
            pub mod CRagdollPropAttached {
                pub const m_boneIndexAttached: usize = 0xA90; // uint32
                pub const m_ragdollAttachedObjectIndex: usize = 0xA94; // uint32
                pub const m_attachmentPointBoneSpace: usize = 0xA98; // 
                pub const m_attachmentPointRagdollSpace: usize = 0xAA4; // 
                pub const m_bShouldDetach: usize = 0xAB0; // bool
                pub const m_bShouldDeleteAttachedActivationRecord: usize = 0xAC0; // bool
            }
            // Parent: CBasePropDoor
            // Fields count: 17
            pub mod CPropDoorRotating {
                pub const m_vecAxis: usize = 0xDF0; // 
                pub const m_flDistance: usize = 0xDFC; // float32
                pub const m_eSpawnPosition: usize = 0xE00; // PropDoorRotatingSpawnPos_t
                pub const m_eOpenDirection: usize = 0xE04; // PropDoorRotatingOpenDirection_e
                pub const m_eCurrentOpenDirection: usize = 0xE08; // PropDoorRotatingOpenDirection_e
                pub const m_flAjarAngle: usize = 0xE0C; // float32
                pub const m_angRotationAjarDeprecated: usize = 0xE10; // QAngle
                pub const m_angRotationClosed: usize = 0xE1C; // QAngle
                pub const m_angRotationOpenForward: usize = 0xE28; // QAngle
                pub const m_angRotationOpenBack: usize = 0xE34; // QAngle
                pub const m_angGoal: usize = 0xE40; // QAngle
                pub const m_vecForwardBoundsMin: usize = 0xE4C; // 
                pub const m_vecForwardBoundsMax: usize = 0xE58; // 
                pub const m_vecBackBoundsMin: usize = 0xE64; // 
                pub const m_vecBackBoundsMax: usize = 0xE70; // 
                pub const m_bAjarDoorShouldntAlwaysOpen: usize = 0xE7C; // bool
                pub const m_hEntityBlocker: usize = 0xE80; // CHandle<CEntityBlocker>
            }
            // Parent: CPropDoorRotating
            // Fields count: 4
            pub mod CPropDoorRotatingBreakable {
                pub const m_bBreakable: usize = 0xE88; // bool
                pub const m_isAbleToCloseAreaPortals: usize = 0xE89; // bool
                pub const m_currentDamageState: usize = 0xE8C; // int32
                pub const m_damageStates: usize = 0xE90; // CUtlVector<CUtlSymbolLarge>
            }
            // Parent: CBaseFlex
            // Fields count: 12
            pub mod CBaseCombatCharacter {
                pub const m_bForceServerRagdoll: usize = 0x978; // bool
                pub const m_hMyWearables: usize = 0x980; // CNetworkUtlVectorBase<CHandle<CEconWearable>>
                pub const m_flFieldOfView: usize = 0x998; // float32
                pub const m_impactEnergyScale: usize = 0x99C; // float32
                pub const m_LastHitGroup: usize = 0x9A0; // HitGroup_t
                pub const m_bApplyStressDamage: usize = 0x9A4; // bool
                pub const m_bloodColor: usize = 0x9A8; // int32
                pub const m_iDamageCount: usize = 0x9F0; // int32
                pub const m_pVecRelationships: usize = 0x9F8; // CUtlVector<RelationshipOverride_t>*
                pub const m_strRelationships: usize = 0xA00; // CUtlSymbolLarge
                pub const m_eHull: usize = 0xA08; // Hull_t
                pub const m_nNavHullIdx: usize = 0xA0C; // uint32
            }
            // Parent: CItem
            // Fields count: 32
            pub mod CItemGeneric {
                pub const m_bHasTriggerRadius: usize = 0x9C8; // bool
                pub const m_bHasPickupRadius: usize = 0x9C9; // bool
                pub const m_flPickupRadiusSqr: usize = 0x9CC; // float32
                pub const m_flTriggerRadiusSqr: usize = 0x9D0; // float32
                pub const m_flLastPickupCheck: usize = 0x9D4; // GameTime_t
                pub const m_bPlayerCounterListenerAdded: usize = 0x9D8; // bool
                pub const m_bPlayerInTriggerRadius: usize = 0x9D9; // bool
                pub const m_hSpawnParticleEffect: usize = 0x9E0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_pAmbientSoundEffect: usize = 0x9E8; // CUtlSymbolLarge
                pub const m_bAutoStartAmbientSound: usize = 0x9F0; // bool
                pub const m_pSpawnScriptFunction: usize = 0x9F8; // CUtlSymbolLarge
                pub const m_hPickupParticleEffect: usize = 0xA00; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_pPickupSoundEffect: usize = 0xA08; // CUtlSymbolLarge
                pub const m_pPickupScriptFunction: usize = 0xA10; // CUtlSymbolLarge
                pub const m_hTimeoutParticleEffect: usize = 0xA18; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
                pub const m_pTimeoutSoundEffect: usize = 0xA20; // CUtlSymbolLarge
                pub const m_pTimeoutScriptFunction: usize = 0xA28; // CUtlSymbolLarge
                pub const m_pPickupFilterName: usize = 0xA30; // CUtlSymbolLarge
                pub const m_hPickupFilter: usize = 0xA38; // CHandle<CBaseFilter>
                pub const m_OnPickup: usize = 0xA40; // CEntityIOOutput
                pub const m_OnTimeout: usize = 0xA68; // CEntityIOOutput
                pub const m_OnTriggerStartTouch: usize = 0xA90; // CEntityIOOutput
                pub const m_OnTriggerTouch: usize = 0xAB8; // CEntityIOOutput
                pub const m_OnTriggerEndTouch: usize = 0xAE0; // CEntityIOOutput
                pub const m_pAllowPickupScriptFunction: usize = 0xB08; // CUtlSymbolLarge
                pub const m_flPickupRadius: usize = 0xB10; // float32
                pub const m_flTriggerRadius: usize = 0xB14; // float32
                pub const m_pTriggerSoundEffect: usize = 0xB18; // CUtlSymbolLarge
                pub const m_bGlowWhenInTrigger: usize = 0xB20; // bool
                pub const m_glowColor: usize = 0xB21; // Color
                pub const m_bUseable: usize = 0xB25; // bool
                pub const m_hTriggerHelper: usize = 0xB28; // CHandle<CItemGenericTriggerHelper>
            }
            // Parent: CBaseCombatCharacter
            // Fields count: 25
            pub mod CBasePlayerPawn {
                pub const m_pWeaponServices: usize = 0xA10; // CPlayer_WeaponServices*
                pub const m_pItemServices: usize = 0xA18; // CPlayer_ItemServices*
                pub const m_pAutoaimServices: usize = 0xA20; // CPlayer_AutoaimServices*
                pub const m_pObserverServices: usize = 0xA28; // CPlayer_ObserverServices*
                pub const m_pWaterServices: usize = 0xA30; // CPlayer_WaterServices*
                pub const m_pUseServices: usize = 0xA38; // CPlayer_UseServices*
                pub const m_pFlashlightServices: usize = 0xA40; // CPlayer_FlashlightServices*
                pub const m_pCameraServices: usize = 0xA48; // CPlayer_CameraServices*
                pub const m_pMovementServices: usize = 0xA50; // CPlayer_MovementServices*
                pub const m_ServerViewAngleChanges: usize = 0xA60; // CUtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
                pub const m_nHighestGeneratedServerViewAngleChangeIndex: usize = 0xAB0; // uint32
                pub const v_angle: usize = 0xAB4; // QAngle
                pub const v_anglePrevious: usize = 0xAC0; // QAngle
                pub const m_iHideHUD: usize = 0xACC; // uint32
                pub const m_skybox3d: usize = 0xAD0; // sky3dparams_t
                pub const m_fTimeLastHurt: usize = 0xB60; // GameTime_t
                pub const m_flDeathTime: usize = 0xB64; // GameTime_t
                pub const m_fNextSuicideTime: usize = 0xB68; // GameTime_t
                pub const m_fInitHUD: usize = 0xB6C; // bool
                pub const m_pExpresser: usize = 0xB70; // CAI_Expresser*
                pub const m_hController: usize = 0xB78; // CHandle<CBasePlayerController>
                pub const m_fHltvReplayDelay: usize = 0xB80; // float32
                pub const m_fHltvReplayEnd: usize = 0xB84; // float32
                pub const m_iHltvReplayEntity: usize = 0xB88; // CEntityIndex
                pub const m_sndOpvarLatchData: usize = 0xB90; // CUtlVector<sndopvarlatchdata_t>
            }
            // Parent: CPredictedViewModel
            // Fields count: 3
            pub mod CCSGOViewModel {
                pub const m_bShouldIgnoreOffsetAndAccuracy: usize = 0x930; // bool
                pub const m_nWeaponParity: usize = 0x934; // uint32
                pub const m_nOldWeaponParity: usize = 0x938; // uint32
            }
            // Parent: CBasePlayerWeapon
            // Fields count: 62
            pub mod CCSWeaponBase {
                pub const m_bRemoveable: usize = 0xCE0; // bool
                pub const m_flFireSequenceStartTime: usize = 0xCE8; // float32
                pub const m_nFireSequenceStartTimeChange: usize = 0xCEC; // int32
                pub const m_nFireSequenceStartTimeAck: usize = 0xCF0; // int32
                pub const m_ePlayerFireEvent: usize = 0xCF4; // PlayerAnimEvent_t
                pub const m_ePlayerFireEventAttackType: usize = 0xCF8; // WeaponAttackType_t
                pub const m_seqIdle: usize = 0xCFC; // HSequence
                pub const m_seqFirePrimary: usize = 0xD00; // HSequence
                pub const m_seqFireSecondary: usize = 0xD04; // HSequence
                pub const m_thirdPersonFireSequences: usize = 0xD08; // CUtlVector<HSequence>
                pub const m_hCurrentThirdPersonSequence: usize = 0xD20; // HSequence
                pub const m_nSilencerBoneIndex: usize = 0xD24; // int32
                pub const m_thirdPersonSequences: usize = 0xD28; // HSequence[7]
                pub const m_bPlayerAmmoStockOnPickup: usize = 0xD50; // bool
                pub const m_bRequireUseToTouch: usize = 0xD51; // bool
                pub const m_iState: usize = 0xD54; // CSWeaponState_t
                pub const m_flLastTimeInAir: usize = 0xD58; // GameTime_t
                pub const m_flLastDeployTime: usize = 0xD5C; // GameTime_t
                pub const m_nLastEmptySoundCmdNum: usize = 0xD60; // int32
                pub const m_nViewModelIndex: usize = 0xD64; // uint32
                pub const m_bReloadsWithClips: usize = 0xD68; // bool
                pub const m_flTimeWeaponIdle: usize = 0xD88; // GameTime_t
                pub const m_bFireOnEmpty: usize = 0xD8C; // bool
                pub const m_OnPlayerPickup: usize = 0xD90; // CEntityIOOutput
                pub const m_weaponMode: usize = 0xDB8; // CSWeaponMode
                pub const m_flTurningInaccuracyDelta: usize = 0xDBC; // float32
                pub const m_vecTurningInaccuracyEyeDirLast: usize = 0xDC0; // 
                pub const m_flTurningInaccuracy: usize = 0xDCC; // float32
                pub const m_fAccuracyPenalty: usize = 0xDD0; // float32
                pub const m_flLastAccuracyUpdateTime: usize = 0xDD4; // GameTime_t
                pub const m_fAccuracySmoothedForZoom: usize = 0xDD8; // float32
                pub const m_fScopeZoomEndTime: usize = 0xDDC; // GameTime_t
                pub const m_iRecoilIndex: usize = 0xDE0; // int32
                pub const m_flRecoilIndex: usize = 0xDE4; // float32
                pub const m_bBurstMode: usize = 0xDE8; // bool
                pub const m_nPostponeFireReadyTicks: usize = 0xDEC; // GameTick_t
                pub const m_flPostponeFireReadyFrac: usize = 0xDF0; // float32
                pub const m_bInReload: usize = 0xDF4; // bool
                pub const m_bReloadVisuallyComplete: usize = 0xDF5; // bool
                pub const m_flDroppedAtTime: usize = 0xDF8; // GameTime_t
                pub const m_bIsHauledBack: usize = 0xDFC; // bool
                pub const m_bSilencerOn: usize = 0xDFD; // bool
                pub const m_flTimeSilencerSwitchComplete: usize = 0xE00; // GameTime_t
                pub const m_iOriginalTeamNumber: usize = 0xE04; // int32
                pub const m_flNextAttackRenderTimeOffset: usize = 0xE08; // float32
                pub const m_bCanBePickedUp: usize = 0xE20; // bool
                pub const m_bUseCanOverrideNextOwnerTouchTime: usize = 0xE21; // bool
                pub const m_nextOwnerTouchTime: usize = 0xE24; // GameTime_t
                pub const m_nextPrevOwnerTouchTime: usize = 0xE28; // GameTime_t
                pub const m_hPrevOwner: usize = 0xE2C; // CHandle<CCSPlayerPawn>
                pub const m_nDropTick: usize = 0xE30; // GameTick_t
                pub const m_donated: usize = 0xE54; // bool
                pub const m_fLastShotTime: usize = 0xE58; // GameTime_t
                pub const m_bWasOwnedByCT: usize = 0xE5C; // bool
                pub const m_bWasOwnedByTerrorist: usize = 0xE5D; // bool
                pub const m_bFiredOutOfAmmoEvent: usize = 0xE5E; // bool
                pub const m_numRemoveUnownedWeaponThink: usize = 0xE60; // int32
                pub const m_IronSightController: usize = 0xE68; // CIronSightController
                pub const m_iIronSightMode: usize = 0xE80; // int32
                pub const m_flLastLOSTraceFailureTime: usize = 0xE84; // GameTime_t
                pub const m_iNumEmptyAttacks: usize = 0xE88; // int32
                pub const m_flWatTickOffset: usize = 0xE8C; // float32
            }
            // Parent: CCSWeaponBase
            // Fields count: 9
            pub mod CCSWeaponBaseGun {
                pub const m_zoomLevel: usize = 0xE90; // int32
                pub const m_iBurstShotsRemaining: usize = 0xE94; // int32
                pub const m_silencedModelIndex: usize = 0xEA0; // int32
                pub const m_inPrecache: usize = 0xEA4; // bool
                pub const m_bNeedsBoltAction: usize = 0xEA5; // bool
                pub const m_bSkillReloadAvailable: usize = 0xEA6; // bool
                pub const m_bSkillReloadLiftedReloadKey: usize = 0xEA7; // bool
                pub const m_bSkillBoltInterruptAvailable: usize = 0xEA8; // bool
                pub const m_bSkillBoltLiftedFireKey: usize = 0xEA9; // bool
            }
            // Parent: CCSWeaponBase
            // Fields count: 11
            pub mod CC4 {
                pub const m_vecLastValidPlayerHeldPosition: usize = 0xE90; // 
                pub const m_vecLastValidDroppedPosition: usize = 0xE9C; // 
                pub const m_bDoValidDroppedPositionCheck: usize = 0xEA8; // bool
                pub const m_bStartedArming: usize = 0xEA9; // bool
                pub const m_fArmedTime: usize = 0xEAC; // GameTime_t
                pub const m_bBombPlacedAnimation: usize = 0xEB0; // bool
                pub const m_bIsPlantingViaUse: usize = 0xEB1; // bool
                pub const m_entitySpottedState: usize = 0xEB8; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0xED0; // int32
                pub const m_bPlayedArmingBeeps: usize = 0xED4; // bool[7]
                pub const m_bBombPlanted: usize = 0xEDB; // bool
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CDEagle {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponElite {
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CWeaponNOVA {
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CWeaponSawedoff {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 1
            pub mod CWeaponTaser {
                pub const m_fFireTime: usize = 0xEB0; // GameTime_t
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CWeaponXM1014 {
            }
            // Parent: CCSWeaponBase
            // Fields count: 1
            pub mod CKnife {
                pub const m_bFirstAttack: usize = 0xE90; // bool
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CMelee {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 3
            pub mod CWeaponShield {
                pub const m_flBulletDamageAbsorbed: usize = 0xEB0; // float32
                pub const m_flLastBulletHitSoundTime: usize = 0xEB4; // GameTime_t
                pub const m_flDisplayHealth: usize = 0xEB8; // float32
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 4
            pub mod CMolotovProjectile {
                pub const m_bIsIncGrenade: usize = 0xA98; // bool
                pub const m_bDetonated: usize = 0xAA4; // bool
                pub const m_stillTimer: usize = 0xAA8; // IntervalTimer
                pub const m_bHasBouncedOffPlayer: usize = 0xB88; // bool
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 4
            pub mod CDecoyProjectile {
                pub const m_nDecoyShotTick: usize = 0xAA0; // int32
                pub const m_shotsRemaining: usize = 0xAA4; // int32
                pub const m_fExpireTime: usize = 0xAA8; // GameTime_t
                pub const m_decoyWeaponDefIndex: usize = 0xAB8; // uint16
            }
            // Parent: CBaseCSGrenadeProjectile
            // Fields count: 8
            pub mod CSmokeGrenadeProjectile {
                pub const m_nSmokeEffectTickBegin: usize = 0xAB0; // int32
                pub const m_bDidSmokeEffect: usize = 0xAB4; // bool
                pub const m_nRandomSeed: usize = 0xAB8; // int32
                pub const m_vSmokeColor: usize = 0xABC; // 
                pub const m_vSmokeDetonationPos: usize = 0xAC8; // 
                pub const m_VoxelFrameData: usize = 0xAD8; // CUtlVector<uint8>
                pub const m_flLastBounce: usize = 0xAF0; // GameTime_t
                pub const m_fllastSimulationTime: usize = 0xAF4; // GameTime_t
            }
            // Parent: CCSWeaponBase
            // Fields count: 13
            pub mod CBaseCSGrenade {
                pub const m_bRedraw: usize = 0xE90; // bool
                pub const m_bIsHeldByPlayer: usize = 0xE91; // bool
                pub const m_bPinPulled: usize = 0xE92; // bool
                pub const m_bJumpThrow: usize = 0xE93; // bool
                pub const m_bThrowAnimating: usize = 0xE94; // bool
                pub const m_fThrowTime: usize = 0xE98; // GameTime_t
                pub const m_flThrowStrength: usize = 0xE9C; // float32
                pub const m_flThrowStrengthApproach: usize = 0xEA0; // float32
                pub const m_fDropTime: usize = 0xEA4; // GameTime_t
                pub const m_bJustPulledPin: usize = 0xEA8; // bool
                pub const m_nNextHoldTick: usize = 0xEAC; // GameTick_t
                pub const m_flNextHoldFrac: usize = 0xEB0; // float32
                pub const m_hSwitchToWeaponAfterThrow: usize = 0xEB4; // CHandle<CCSWeaponBase>
            }
            // Parent: CCSWeaponBase
            // Fields count: 2
            pub mod CWeaponBaseItem {
                pub const m_SequenceCompleteTimer: usize = 0xE90; // CountdownTimer
                pub const m_bRedraw: usize = 0xEA8; // bool
            }
            // Parent: CWeaponBaseItem
            // Fields count: 0
            pub mod CItem_Healthshot {
            }
            // Parent: CCSWeaponBase
            // Fields count: 7
            pub mod CFists {
                pub const m_bPlayingUninterruptableAct: usize = 0xE90; // bool
                pub const m_nUninterruptableActivity: usize = 0xE94; // PlayerAnimEvent_t
                pub const m_bRestorePrevWep: usize = 0xE98; // bool
                pub const m_hWeaponBeforePrevious: usize = 0xE9C; // CHandle<CBasePlayerWeapon>
                pub const m_hWeaponPrevious: usize = 0xEA0; // CHandle<CBasePlayerWeapon>
                pub const m_bDelayedHardPunchIncoming: usize = 0xEA4; // bool
                pub const m_bDestroyAfterTaunt: usize = 0xEA5; // bool
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CSensorGrenade {
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CBreachCharge {
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CBumpMine {
            }
            // Parent: CCSWeaponBase
            // Fields count: 0
            pub mod CTablet {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CTripWireFire {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponZoneRepulsor {
            }
            // Parent: CBasePlayerPawn
            // Fields count: 136
            pub mod CCSPlayerPawnBase {
                pub const m_CTouchExpansionComponent: usize = 0xBC0; // CTouchExpansionComponent
                pub const m_pPingServices: usize = 0xC10; // CCSPlayer_PingServices*
                pub const m_pViewModelServices: usize = 0xC18; // CPlayer_ViewModelServices*
                pub const m_iDisplayHistoryBits: usize = 0xC20; // uint32
                pub const m_flLastAttackedTeammate: usize = 0xC24; // float32
                pub const m_hOriginalController: usize = 0xC28; // CHandle<CCSPlayerController>
                pub const m_blindUntilTime: usize = 0xC2C; // GameTime_t
                pub const m_blindStartTime: usize = 0xC30; // GameTime_t
                pub const m_allowAutoFollowTime: usize = 0xC34; // GameTime_t
                pub const m_entitySpottedState: usize = 0xC38; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0xC50; // int32
                pub const m_iPlayerState: usize = 0xC54; // CSPlayerState
                pub const m_chickenIdleSoundTimer: usize = 0xC60; // CountdownTimer
                pub const m_chickenJumpSoundTimer: usize = 0xC78; // CountdownTimer
                pub const m_vecLastBookmarkedPosition: usize = 0xD30; // 
                pub const m_flLastDistanceTraveledNotice: usize = 0xD3C; // float32
                pub const m_flAccumulatedDistanceTraveled: usize = 0xD40; // float32
                pub const m_flLastFriendlyFireDamageReductionRatio: usize = 0xD44; // float32
                pub const m_bRespawning: usize = 0xD48; // bool
                pub const m_nLastPickupPriority: usize = 0xD4C; // int32
                pub const m_flLastPickupPriorityTime: usize = 0xD50; // float32
                pub const m_bIsScoped: usize = 0xD54; // bool
                pub const m_bIsWalking: usize = 0xD55; // bool
                pub const m_bResumeZoom: usize = 0xD56; // bool
                pub const m_bIsDefusing: usize = 0xD57; // bool
                pub const m_bIsGrabbingHostage: usize = 0xD58; // bool
                pub const m_iBlockingUseActionInProgress: usize = 0xD5C; // CSPlayerBlockingUseAction_t
                pub const m_fImmuneToGunGameDamageTime: usize = 0xD60; // GameTime_t
                pub const m_bGunGameImmunity: usize = 0xD64; // bool
                pub const m_GunGameImmunityColor: usize = 0xD65; // Color
                pub const m_fMolotovDamageTime: usize = 0xD6C; // float32
                pub const m_bHasMovedSinceSpawn: usize = 0xD70; // bool
                pub const m_bCanMoveDuringFreezePeriod: usize = 0xD71; // bool
                pub const m_flGuardianTooFarDistFrac: usize = 0xD74; // float32
                pub const m_flNextGuardianTooFarHurtTime: usize = 0xD78; // float32
                pub const m_flDetectedByEnemySensorTime: usize = 0xD7C; // GameTime_t
                pub const m_flDealtDamageToEnemyMostRecentTimestamp: usize = 0xD80; // float32
                pub const m_flLastEquippedHelmetTime: usize = 0xD84; // GameTime_t
                pub const m_flLastEquippedArmorTime: usize = 0xD88; // GameTime_t
                pub const m_nHeavyAssaultSuitCooldownRemaining: usize = 0xD8C; // int32
                pub const m_bResetArmorNextSpawn: usize = 0xD90; // bool
                pub const m_flLastBumpMineBumpTime: usize = 0xD94; // GameTime_t
                pub const m_flEmitSoundTime: usize = 0xD98; // GameTime_t
                pub const m_iNumSpawns: usize = 0xD9C; // int32
                pub const m_iShouldHaveCash: usize = 0xDA0; // int32
                pub const m_flIdleTimeSinceLastAction: usize = 0xDA8; // float32
                pub const m_flNameChangeHistory: usize = 0xDAC; // float32[5]
                pub const m_fLastGivenDefuserTime: usize = 0xDC0; // float32
                pub const m_fLastGivenBombTime: usize = 0xDC4; // float32
                pub const m_bHasNightVision: usize = 0xDC8; // bool
                pub const m_bNightVisionOn: usize = 0xDC9; // bool
                pub const m_fNextRadarUpdateTime: usize = 0xDCC; // float32
                pub const m_flLastMoneyUpdateTime: usize = 0xDD0; // float32
                pub const m_MenuStringBuffer: usize = 0xDD4; // char[1024]
                pub const m_fIntroCamTime: usize = 0x11D4; // float32
                pub const m_nMyCollisionGroup: usize = 0x11D8; // int32
                pub const m_bInNoDefuseArea: usize = 0x11DC; // bool
                pub const m_bKilledByTaser: usize = 0x11DD; // bool
                pub const m_iMoveState: usize = 0x11E0; // int32
                pub const m_grenadeParameterStashTime: usize = 0x11E4; // GameTime_t
                pub const m_bGrenadeParametersStashed: usize = 0x11E8; // bool
                pub const m_angStashedShootAngles: usize = 0x11EC; // QAngle
                pub const m_vecStashedGrenadeThrowPosition: usize = 0x11F8; // 
                pub const m_vecStashedVelocity: usize = 0x1204; // 
                pub const m_angShootAngleHistory: usize = 0x1210; // QAngle[2]
                pub const m_vecThrowPositionHistory: usize = 0x1228; // Vector[2]
                pub const m_vecVelocityHistory: usize = 0x1240; // Vector[2]
                pub const m_bDiedAirborne: usize = 0x1258; // bool
                pub const m_iBombSiteIndex: usize = 0x125C; // CEntityIndex
                pub const m_nWhichBombZone: usize = 0x1260; // int32
                pub const m_bInBombZoneTrigger: usize = 0x1264; // bool
                pub const m_bWasInBombZoneTrigger: usize = 0x1265; // bool
                pub const m_iDirection: usize = 0x1268; // int32
                pub const m_iShotsFired: usize = 0x126C; // int32
                pub const m_ArmorValue: usize = 0x1270; // int32
                pub const m_flFlinchStack: usize = 0x1274; // float32
                pub const m_flVelocityModifier: usize = 0x1278; // float32
                pub const m_flHitHeading: usize = 0x127C; // float32
                pub const m_nHitBodyPart: usize = 0x1280; // int32
                pub const m_iHostagesKilled: usize = 0x1284; // int32
                pub const m_vecTotalBulletForce: usize = 0x1288; // 
                pub const m_flFlashDuration: usize = 0x1294; // float32
                pub const m_flFlashMaxAlpha: usize = 0x1298; // float32
                pub const m_flProgressBarStartTime: usize = 0x129C; // float32
                pub const m_iProgressBarDuration: usize = 0x12A0; // int32
                pub const m_bWaitForNoAttack: usize = 0x12A4; // bool
                pub const m_flLowerBodyYawTarget: usize = 0x12A8; // float32
                pub const m_bStrafing: usize = 0x12AC; // bool
                pub const m_lastStandingPos: usize = 0x12B0; // 
                pub const m_ignoreLadderJumpTime: usize = 0x12BC; // float32
                pub const m_ladderSurpressionTimer: usize = 0x12C0; // CountdownTimer
                pub const m_lastLadderNormal: usize = 0x12D8; // 
                pub const m_lastLadderPos: usize = 0x12E4; // 
                pub const m_thirdPersonHeading: usize = 0x12F0; // QAngle
                pub const m_flSlopeDropOffset: usize = 0x12FC; // float32
                pub const m_flSlopeDropHeight: usize = 0x1300; // float32
                pub const m_vHeadConstraintOffset: usize = 0x1304; // 
                pub const m_iLastWeaponFireUsercmd: usize = 0x1318; // int32
                pub const m_angEyeAngles: usize = 0x131C; // QAngle
                pub const m_bVCollisionInitted: usize = 0x1328; // bool
                pub const m_storedSpawnPosition: usize = 0x132C; // 
                pub const m_storedSpawnAngle: usize = 0x1338; // QAngle
                pub const m_bIsSpawning: usize = 0x1344; // bool
                pub const m_bHideTargetID: usize = 0x1345; // bool
                pub const m_nNumDangerZoneDamageHits: usize = 0x1348; // int32
                pub const m_bHud_MiniScoreHidden: usize = 0x134C; // bool
                pub const m_bHud_RadarHidden: usize = 0x134D; // bool
                pub const m_nLastKillerIndex: usize = 0x1350; // CEntityIndex
                pub const m_nLastConcurrentKilled: usize = 0x1354; // int32
                pub const m_nDeathCamMusic: usize = 0x1358; // int32
                pub const m_iAddonBits: usize = 0x135C; // int32
                pub const m_iPrimaryAddon: usize = 0x1360; // int32
                pub const m_iSecondaryAddon: usize = 0x1364; // int32
                pub const m_currentDeafnessFilter: usize = 0x1368; // CUtlStringToken
                pub const m_NumEnemiesKilledThisSpawn: usize = 0x136C; // int32
                pub const m_NumEnemiesKilledThisRound: usize = 0x1370; // int32
                pub const m_NumEnemiesAtRoundStart: usize = 0x1374; // int32
                pub const m_wasNotKilledNaturally: usize = 0x1378; // bool
                pub const m_vecPlayerPatchEconIndices: usize = 0x137C; // uint32[5]
                pub const m_iDeathFlags: usize = 0x1390; // int32
                pub const m_hPet: usize = 0x1394; // CHandle<CChicken>
                pub const m_unCurrentEquipmentValue: usize = 0x1560; // uint16
                pub const m_unRoundStartEquipmentValue: usize = 0x1562; // uint16
                pub const m_unFreezetimeEndEquipmentValue: usize = 0x1564; // uint16
                pub const m_nSurvivalTeamNumber: usize = 0x1568; // int32
                pub const m_bHasDeathInfo: usize = 0x156C; // bool
                pub const m_flDeathInfoTime: usize = 0x1570; // float32
                pub const m_vecDeathInfoOrigin: usize = 0x1574; // 
                pub const m_bKilledByHeadshot: usize = 0x1580; // bool
                pub const m_LastHitBox: usize = 0x1584; // int32
                pub const m_LastHealth: usize = 0x1588; // int32
                pub const m_flLastCollisionCeiling: usize = 0x158C; // float32
                pub const m_flLastCollisionCeilingChangeTime: usize = 0x1590; // float32
                pub const m_pBot: usize = 0x1598; // CCSBot*
                pub const m_bBotAllowActive: usize = 0x15A0; // bool
                pub const m_bCommittingSuicideOnTeamChange: usize = 0x15A1; // bool
            }
            // Parent: CCSPlayerPawnBase
            // Fields count: 0
            pub mod CCSObserverPawn {
            }
            // Parent: CCSPlayerPawnBase
            // Fields count: 49
            pub mod CCSPlayerPawn {
                pub const m_pBulletServices: usize = 0x15A8; // CCSPlayer_BulletServices*
                pub const m_pHostageServices: usize = 0x15B0; // CCSPlayer_HostageServices*
                pub const m_pBuyServices: usize = 0x15B8; // CCSPlayer_BuyServices*
                pub const m_pActionTrackingServices: usize = 0x15C0; // CCSPlayer_ActionTrackingServices*
                pub const m_pRadioServices: usize = 0x15C8; // CCSPlayer_RadioServices*
                pub const m_pDamageReactServices: usize = 0x15D0; // CCSPlayer_DamageReactServices*
                pub const m_nCharacterDefIndex: usize = 0x15D8; // uint16
                pub const m_hPreviousModel: usize = 0x15E0; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_bHasFemaleVoice: usize = 0x15E8; // bool
                pub const m_strVOPrefix: usize = 0x15F0; // CUtlString
                pub const m_szLastPlaceName: usize = 0x15F8; // char[18]
                pub const m_bInHostageResetZone: usize = 0x16B8; // bool
                pub const m_bInBuyZone: usize = 0x16B9; // bool
                pub const m_bWasInBuyZone: usize = 0x16BA; // bool
                pub const m_bInHostageRescueZone: usize = 0x16BB; // bool
                pub const m_bInBombZone: usize = 0x16BC; // bool
                pub const m_bWasInHostageRescueZone: usize = 0x16BD; // bool
                pub const m_iRetakesOffering: usize = 0x16C0; // int32
                pub const m_iRetakesOfferingCard: usize = 0x16C4; // int32
                pub const m_bRetakesHasDefuseKit: usize = 0x16C8; // bool
                pub const m_bRetakesMVPLastRound: usize = 0x16C9; // bool
                pub const m_iRetakesMVPBoostItem: usize = 0x16CC; // int32
                pub const m_RetakesMVPBoostExtraUtility: usize = 0x16D0; // loadout_slot_t
                pub const m_flHealthShotBoostExpirationTime: usize = 0x16D4; // GameTime_t
                pub const m_flLandseconds: usize = 0x16D8; // float32
                pub const m_aimPunchAngle: usize = 0x16DC; // QAngle
                pub const m_aimPunchAngleVel: usize = 0x16E8; // QAngle
                pub const m_aimPunchTickBase: usize = 0x16F4; // int32
                pub const m_aimPunchTickFraction: usize = 0x16F8; // float32
                pub const m_aimPunchCache: usize = 0x1700; // CUtlVector<QAngle>
                pub const m_bIsBuyMenuOpen: usize = 0x1718; // bool
                pub const m_xLastHeadBoneTransform: usize = 0x1D60; // CTransform
                pub const m_bLastHeadBoneTransformIsValid: usize = 0x1D80; // bool
                pub const m_lastLandTime: usize = 0x1D84; // GameTime_t
                pub const m_bOnGroundLastTick: usize = 0x1D88; // bool
                pub const m_iPlayerLocked: usize = 0x1D8C; // int32
                pub const m_flTimeOfLastInjury: usize = 0x1D94; // GameTime_t
                pub const m_flNextSprayDecalTime: usize = 0x1D98; // GameTime_t
                pub const m_bNextSprayDecalTimeExpedited: usize = 0x1D9C; // bool
                pub const m_nRagdollDamageBone: usize = 0x1DA0; // int32
                pub const m_vRagdollDamageForce: usize = 0x1DA4; // 
                pub const m_vRagdollDamagePosition: usize = 0x1DB0; // 
                pub const m_szRagdollDamageWeaponName: usize = 0x1DBC; // char[64]
                pub const m_bRagdollDamageHeadshot: usize = 0x1DFC; // bool
                pub const m_vRagdollServerOrigin: usize = 0x1E00; // 
                pub const m_EconGloves: usize = 0x1E10; // CEconItemView
                pub const m_nEconGlovesChanged: usize = 0x2088; // uint8
                pub const m_qDeathEyeAngles: usize = 0x208C; // QAngle
                pub const m_bSkipOneHeadConstraintUpdate: usize = 0x2098; // bool
            }
            // Parent: CBaseCombatCharacter
            // Fields count: 1
            pub mod CHostageExpresserShim {
                pub const m_pExpresser: usize = 0xA10; // CAI_Expresser*
            }
            // Parent: CHostageExpresserShim
            // Fields count: 39
            pub mod CHostage {
                pub const m_OnHostageBeginGrab: usize = 0xA28; // CEntityIOOutput
                pub const m_OnFirstPickedUp: usize = 0xA50; // CEntityIOOutput
                pub const m_OnDroppedNotRescued: usize = 0xA78; // CEntityIOOutput
                pub const m_OnRescued: usize = 0xAA0; // CEntityIOOutput
                pub const m_entitySpottedState: usize = 0xAC8; // EntitySpottedState_t
                pub const m_nSpotRules: usize = 0xAE0; // int32
                pub const m_uiHostageSpawnExclusionGroupMask: usize = 0xAE4; // uint32
                pub const m_nHostageSpawnRandomFactor: usize = 0xAE8; // uint32
                pub const m_bRemove: usize = 0xAEC; // bool
                pub const m_vel: usize = 0xAF0; // 
                pub const m_isRescued: usize = 0xAFC; // bool
                pub const m_jumpedThisFrame: usize = 0xAFD; // bool
                pub const m_nHostageState: usize = 0xB00; // int32
                pub const m_leader: usize = 0xB04; // CHandle<CBaseEntity>
                pub const m_lastLeader: usize = 0xB08; // CHandle<CCSPlayerPawnBase>
                pub const m_reuseTimer: usize = 0xB10; // CountdownTimer
                pub const m_hasBeenUsed: usize = 0xB28; // bool
                pub const m_accel: usize = 0xB2C; // 
                pub const m_isRunning: usize = 0xB38; // bool
                pub const m_isCrouching: usize = 0xB39; // bool
                pub const m_jumpTimer: usize = 0xB40; // CountdownTimer
                pub const m_isWaitingForLeader: usize = 0xB58; // bool
                pub const m_repathTimer: usize = 0x2B68; // CountdownTimer
                pub const m_inhibitDoorTimer: usize = 0x2B80; // CountdownTimer
                pub const m_inhibitObstacleAvoidanceTimer: usize = 0x2C10; // CountdownTimer
                pub const m_wiggleTimer: usize = 0x2C30; // CountdownTimer
                pub const m_isAdjusted: usize = 0x2C4C; // bool
                pub const m_bHandsHaveBeenCut: usize = 0x2C4D; // bool
                pub const m_hHostageGrabber: usize = 0x2C50; // CHandle<CCSPlayerPawn>
                pub const m_fLastGrabTime: usize = 0x2C54; // GameTime_t
                pub const m_vecPositionWhenStartedDroppingToGround: usize = 0x2C58; // 
                pub const m_vecGrabbedPos: usize = 0x2C64; // 
                pub const m_flRescueStartTime: usize = 0x2C70; // GameTime_t
                pub const m_flGrabSuccessTime: usize = 0x2C74; // GameTime_t
                pub const m_flDropStartTime: usize = 0x2C78; // GameTime_t
                pub const m_nApproachRewardPayouts: usize = 0x2C7C; // int32
                pub const m_nPickupEventCount: usize = 0x2C80; // int32
                pub const m_vecSpawnGroundPos: usize = 0x2C84; // 
                pub const m_vecHostageResetPosition: usize = 0x2CA4; // 
            }
            // Parent: CHostage
            // Fields count: 0
            pub mod CHostageAlias_info_hostage_spawn {
            }
            // Parent: CItemDefuser
            // Fields count: 0
            pub mod CItemDefuserAlias_item_defuser {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CAK47 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponAug {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponAWP {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponBizon {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponFamas {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponFiveSeven {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponG3SG1 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponGalilAR {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponGlock {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponHKP2000 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponUSPSilencer {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponM4A1 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponM4A1Silencer {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponMAC10 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponMag7 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponMP5SD {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponMP7 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponMP9 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponNegev {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponP250 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponCZ75a {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponP90 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponSCAR20 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponSG556 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponSSG08 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponTec9 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponUMP45 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponM249 {
            }
            // Parent: CCSWeaponBaseGun
            // Fields count: 0
            pub mod CWeaponRevolver {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CMolotovGrenade {
            }
            // Parent: CMolotovGrenade
            // Fields count: 0
            pub mod CIncendiaryGrenade {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CDecoyGrenade {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CFlashbang {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CHEGrenade {
            }
            // Parent: CBaseCSGrenade
            // Fields count: 0
            pub mod CSmokeGrenade {
            }
        }
        // Module: soundsystem.dll
        // Classes count: 51
        // Enums count: 13
        pub mod soundsystem {
            // Alignment: 4
            // Members count: 30
            #[repr(u32)]
            pub enum soundlevel_t {
                SNDLVL_NONE = 0x0,
                SNDLVL_20dB = 0x14,
                SNDLVL_25dB = 0x19,
                SNDLVL_30dB = 0x1E,
                SNDLVL_35dB = 0x23,
                SNDLVL_40dB = 0x28,
                SNDLVL_45dB = 0x2D,
                SNDLVL_50dB = 0x32,
                SNDLVL_55dB = 0x37,
                SNDLVL_IDLE = 0x3C,
                SNDLVL_60dB = 0x3C,
                SNDLVL_65dB = 0x41,
                SNDLVL_STATIC = 0x42,
                SNDLVL_70dB = 0x46,
                SNDLVL_NORM = 0x4B,
                SNDLVL_75dB = 0x4B,
                SNDLVL_80dB = 0x50,
                SNDLVL_TALKING = 0x50,
                SNDLVL_85dB = 0x55,
                SNDLVL_90dB = 0x5A,
                SNDLVL_95dB = 0x5F,
                SNDLVL_100dB = 0x64,
                SNDLVL_105dB = 0x69,
                SNDLVL_110dB = 0x6E,
                SNDLVL_120dB = 0x78,
                SNDLVL_130dB = 0x82,
                SNDLVL_GUNFIRE = 0x8C,
                SNDLVL_140dB = 0x8C,
                SNDLVL_150dB = 0x96,
                SNDLVL_180dB = 0xB4
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum ActionType_t {
                SOS_ACTION_NONE = 0x0,
                SOS_ACTION_LIMITER = 0x1,
                SOS_ACTION_TIME_LIMIT = 0x2,
                SOS_ACTION_TIME_BLOCK_LIMITER = 0x3,
                SOS_ACTION_SET_SOUNDEVENT_PARAM = 0x4,
                SOS_ACTION_SOUNDEVENT_CLUSTER = 0x5
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum SosActionStopType_t {
                SOS_STOPTYPE_NONE = 0x0,
                SOS_STOPTYPE_TIME = 0x1,
                SOS_STOPTYPE_OPVAR = 0x2
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum SosActionSortType_t {
                SOS_SORTTYPE_HIGHEST = 0x0,
                SOS_SORTTYPE_LOWEST = 0x1
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum SosGroupType_t {
                SOS_GROUPTYPE_DYNAMIC = 0x0,
                SOS_GROUPTYPE_STATIC = 0x1
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum SosEditItemType_t {
                SOS_EDIT_ITEM_TYPE_SOUNDEVENTS = 0x0,
                SOS_EDIT_ITEM_TYPE_SOUNDEVENT = 0x1,
                SOS_EDIT_ITEM_TYPE_LIBRARYSTACKS = 0x2,
                SOS_EDIT_ITEM_TYPE_STACK = 0x3,
                SOS_EDIT_ITEM_TYPE_OPERATOR = 0x4,
                SOS_EDIT_ITEM_TYPE_FIELD = 0x5
            }
            // Alignment: 2
            // Members count: 10
            #[repr(u16)]
            pub enum VMixFilterType_t {
                FILTER_UNKNOWN = 0xFFFFFFFFFFFFFFFF,
                FILTER_LOWPASS = 0x0,
                FILTER_HIGHPASS = 0x1,
                FILTER_BANDPASS = 0x2,
                FILTER_NOTCH = 0x3,
                FILTER_PEAKING_EQ = 0x4,
                FILTER_LOW_SHELF = 0x5,
                FILTER_HIGH_SHELF = 0x6,
                FILTER_ALLPASS = 0x7,
                FILTER_PASSTHROUGH = 0x8
            }
            // Alignment: 1
            // Members count: 9
            #[repr(u8)]
            pub enum VMixFilterSlope_t {
                FILTER_SLOPE_1POLE_6dB = 0x0,
                FILTER_SLOPE_1POLE_12dB = 0x1,
                FILTER_SLOPE_1POLE_18dB = 0x2,
                FILTER_SLOPE_1POLE_24dB = 0x3,
                FILTER_SLOPE_12dB = 0x4,
                FILTER_SLOPE_24dB = 0x5,
                FILTER_SLOPE_36dB = 0x6,
                FILTER_SLOPE_48dB = 0x7,
                FILTER_SLOPE_MAX = 0x7
            }
            // Alignment: 2
            // Members count: 30
            #[repr(u16)]
            pub enum VMixProcessorType_t {
                VPROCESSOR_UNKNOWN = 0x0,
                VPROCESSOR_STEAMAUDIO_REVERB = 0x1,
                VPROCESSOR_RT_PITCH = 0x2,
                VPROCESSOR_STEAMAUDIO_HRTF = 0x3,
                VPROCESSOR_DYNAMICS = 0x4,
                VPROCESSOR_PRESETDSP = 0x5,
                VPROCESSOR_DELAY = 0x6,
                VPROCESSOR_MOD_DELAY = 0x7,
                VPROCESSOR_DIFFUSOR = 0x8,
                VPROCESSOR_BOXVERB = 0x9,
                VPROCESSOR_FREEVERB = 0xA,
                VPROCESSOR_PLATEVERB = 0xB,
                VPROCESSOR_FULLWAVE_INTEGRATOR = 0xC,
                VPROCESSOR_FILTER = 0xD,
                VPROCESSOR_STEAMAUDIO_PATHING = 0xE,
                VPROCESSOR_EQ8 = 0xF,
                VPROCESSOR_ENVELOPE = 0x10,
                VPROCESSOR_VOCODER = 0x11,
                VPROCESSOR_CONVOLUTION = 0x12,
                VPROCESSOR_DYNAMICS_3BAND = 0x13,
                VPROCESSOR_DYNAMICS_COMPRESSOR = 0x14,
                VPROCESSOR_SHAPER = 0x15,
                VPROCESSOR_PANNER = 0x16,
                VPROCESSOR_UTILITY = 0x17,
                VPROCESSOR_AUTOFILTER = 0x18,
                VPROCESSOR_OSC = 0x19,
                VPROCESSOR_STEREODELAY = 0x1A,
                VPROCESSOR_EFFECT_CHAIN = 0x1B,
                VPROCESSOR_SUBGRAPH_SWITCH = 0x1C,
                VPROCESSOR_STEAMAUDIO_DIRECT = 0x1D
            }
            // Alignment: 4
            // Members count: 5
            #[repr(u32)]
            pub enum VMixLFOShape_t {
                LFO_SHAPE_SINE = 0x0,
                LFO_SHAPE_SQUARE = 0x1,
                LFO_SHAPE_TRI = 0x2,
                LFO_SHAPE_SAW = 0x3,
                LFO_SHAPE_NOISE = 0x4
            }
            // Alignment: 4
            // Members count: 2
            #[repr(u32)]
            pub enum VMixPannerType_t {
                PANNER_TYPE_LINEAR = 0x0,
                PANNER_TYPE_EQUAL_POWER = 0x1
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum VMixSubgraphSwitchInterpolationType_t {
                SUBGRAPH_INTERPOLATION_TEMPORAL_CROSSFADE = 0x0,
                SUBGRAPH_INTERPOLATION_TEMPORAL_FADE_OUT = 0x1,
                SUBGRAPH_INTERPOLATION_KEEP_LAST_SUBGRAPH_RUNNING = 0x2
            }
            // Alignment: 4
            // Members count: 6
            #[repr(u32)]
            pub enum VMixChannelOperation_t {
                VMIX_CHAN_STEREO = 0x0,
                VMIX_CHAN_LEFT = 0x1,
                VMIX_CHAN_RIGHT = 0x2,
                VMIX_CHAN_SWAP = 0x3,
                VMIX_CHAN_MONO = 0x4,
                VMIX_CHAN_MID_SIDE = 0x5
            }
            // Parent: None
            // Fields count: 3
            pub mod CSosGroupActionSchema {
                pub const m_name: usize = 0x8; // CUtlString
                pub const m_actionType: usize = 0x10; // ActionType_t
                pub const m_actionInstanceType: usize = 0x14; // ActionType_t
            }
            // Parent: CSosGroupActionSchema
            // Fields count: 3
            pub mod CSosGroupActionLimitSchema {
                pub const m_nMaxCount: usize = 0x18; // int32
                pub const m_nStopType: usize = 0x1C; // SosActionStopType_t
                pub const m_nSortType: usize = 0x20; // SosActionSortType_t
            }
            // Parent: CSosGroupActionSchema
            // Fields count: 1
            pub mod CSosGroupActionTimeLimitSchema {
                pub const m_flMaxDuration: usize = 0x18; // float32
            }
            // Parent: CSosGroupActionSchema
            // Fields count: 2
            pub mod CSosGroupActionTimeBlockLimitSchema {
                pub const m_nMaxCount: usize = 0x18; // int32
                pub const m_flMaxDuration: usize = 0x1C; // float32
            }
            // Parent: CSosGroupActionSchema
            // Fields count: 5
            pub mod CSosGroupActionSetSoundeventParameterSchema {
                pub const m_nMaxCount: usize = 0x18; // int32
                pub const m_flMinValue: usize = 0x1C; // float32
                pub const m_flMaxValue: usize = 0x20; // float32
                pub const m_opvarName: usize = 0x28; // CUtlString
                pub const m_nSortType: usize = 0x30; // SosActionSortType_t
            }
            // Parent: CSosGroupActionSchema
            // Fields count: 7
            pub mod CSosGroupActionSoundeventClusterSchema {
                pub const m_nMinNearby: usize = 0x18; // int32
                pub const m_flClusterEpsilon: usize = 0x1C; // float32
                pub const m_shouldPlayOpvar: usize = 0x20; // CUtlString
                pub const m_shouldPlayClusterChild: usize = 0x28; // CUtlString
                pub const m_clusterSizeOpvar: usize = 0x30; // CUtlString
                pub const m_groupBoundingBoxMinsOpvar: usize = 0x38; // CUtlString
                pub const m_groupBoundingBoxMaxsOpvar: usize = 0x40; // CUtlString
            }
            // Parent: None
            // Fields count: 4
            pub mod CSosGroupBranchPattern {
                pub const m_bMatchEventName: usize = 0x8; // bool
                pub const m_bMatchEventSubString: usize = 0x9; // bool
                pub const m_bMatchEntIndex: usize = 0xA; // bool
                pub const m_bMatchOpvar: usize = 0xB; // bool
            }
            // Parent: CSosGroupBranchPattern
            // Fields count: 4
            pub mod CSosGroupMatchPattern {
                pub const m_matchSoundEventName: usize = 0x10; // CUtlString
                pub const m_matchSoundEventSubString: usize = 0x18; // CUtlString
                pub const m_flEntIndex: usize = 0x20; // float32
                pub const m_flOpvar: usize = 0x24; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod CSosSoundEventGroupSchema {
                pub const m_name: usize = 0x0; // CUtlString
                pub const m_nType: usize = 0x8; // SosGroupType_t
                pub const m_bIsBlocking: usize = 0xC; // bool
                pub const m_nBlockMaxCount: usize = 0x10; // int32
                pub const m_bInvertMatch: usize = 0x14; // bool
                pub const m_matchPattern: usize = 0x18; // CSosGroupMatchPattern
                pub const m_branchPattern: usize = 0x40; // CSosGroupBranchPattern
                pub const m_vActions: usize = 0xB0; // CSosGroupActionSchema*[4]
            }
            // Parent: None
            // Fields count: 1
            pub mod CSosSoundEventGroupListSchema {
                pub const m_groupList: usize = 0x0; // CUtlVector<CSosSoundEventGroupSchema>
            }
            // Parent: None
            // Fields count: 5
            pub mod SosEditItemInfo_t {
                pub const itemType: usize = 0x0; // SosEditItemType_t
                pub const itemName: usize = 0x8; // CUtlString
                pub const itemTypeName: usize = 0x10; // CUtlString
                pub const itemKVString: usize = 0x20; // CUtlString
                pub const itemPos: usize = 0x28; // Vector2D
            }
            // Parent: None
            // Fields count: 1
            pub mod SelectedEditItemInfo_t {
                pub const m_EditItems: usize = 0x0; // CUtlVector<SosEditItemInfo_t>
            }
            // Parent: None
            // Fields count: 1
            pub mod CSoundEventMetaData {
                pub const m_soundEventVMix: usize = 0x0; // CStrongHandle<InfoForResourceTypeCVMixListResource>
            }
            // Parent: None
            // Fields count: 6
            pub mod CDSPMixgroupModifier {
                pub const m_mixgroup: usize = 0x0; // CUtlString
                pub const m_flModifier: usize = 0x8; // float32
                pub const m_flModifierMin: usize = 0xC; // float32
                pub const m_flSourceModifier: usize = 0x10; // float32
                pub const m_flSourceModifierMin: usize = 0x14; // float32
                pub const m_flListenerReverbModifierWhenSourceReverbIsActive: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod CDspPresetModifierList {
                pub const m_dspName: usize = 0x0; // CUtlString
                pub const m_modifiers: usize = 0x8; // CUtlVector<CDSPMixgroupModifier>
            }
            // Parent: None
            // Fields count: 1
            pub mod CDSPPresetMixgroupModifierTable {
                pub const m_table: usize = 0x0; // CUtlVector<CDspPresetModifierList>
            }
            // Parent: None
            // Fields count: 1
            pub mod CVoiceContainerBase {
                pub const m_curves: usize = 0x20; // CUtlDict<CPiecewiseCurve,F(size=1)>
            }
            // Parent: CVoiceContainerBase
            // Fields count: 0
            pub mod CVoiceContainerDefault {
            }
            // Parent: CVoiceContainerBase
            // Fields count: 1
            pub mod CVoiceContainerWavFileReader {
                pub const m_wavFilePath: usize = 0x60; // CUtlString
            }
            // Parent: CVoiceContainerWavFileReader
            // Fields count: 1
            pub mod CVoiceContainerTestConstant {
                pub const m_flTestConstantParam: usize = 0x68; // bool
            }
            // Parent: CVoiceContainerBase
            // Fields count: 2
            pub mod CVoiceContainerTestNestedDynamic {
                pub const m_SoundToPlay: usize = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
                pub const m_flTestConstantParam: usize = 0x68; // float32
            }
            // Parent: CVoiceContainerBase
            // Fields count: 2
            pub mod CVoiceContainerDecayingSineWave {
                pub const m_flFrequency: usize = 0x60; // float32
                pub const m_flDecayTime: usize = 0x64; // float32
            }
            // Parent: CVoiceContainerDecayingSineWave
            // Fields count: 1
            pub mod CVoiceContainerAmpedDecayingSineWave {
                pub const m_flGainAmount: usize = 0x68; // float32
            }
            // Parent: CVoiceContainerBase
            // Fields count: 3
            pub mod CVoiceContainerRealtimeFMSineWave {
                pub const m_flCarrierFrequency: usize = 0x60; // float32
                pub const m_flModulatorFrequency: usize = 0x64; // float32
                pub const m_flModulatorAmount: usize = 0x68; // float32
            }
            // Parent: CVoiceContainerBase
            // Fields count: 3
            pub mod CVoiceContainerBlend {
                pub const m_hSoundOne: usize = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
                pub const m_hSoundTwo: usize = 0x68; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
                pub const m_flBlendAmount: usize = 0x70; // float32
            }
            // Parent: CVoiceContainerBase
            // Fields count: 4
            pub mod CVoiceContainerEngineSound {
                pub const m_SoundToPlay: usize = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
                pub const m_flTestConstantParam: usize = 0x68; // float32
                pub const m_flTestSoundEventBoundParam: usize = 0x6C; // float32
                pub const m_flEngineRPM: usize = 0x70; // float32
            }
            // Parent: CVoiceContainerWavFileReader
            // Fields count: 1
            pub mod CVoiceContainerEnvelopeAnalyzer {
                pub const m_envBuffer: usize = 0x68; // CUtlVector<float32>
            }
            // Parent: CVoiceContainerBase
            // Fields count: 7
            pub mod CVoiceContainerRandomSampler {
                pub const m_flLoudAmplitude: usize = 0x60; // float32
                pub const m_flLoudAmplitudeJitter: usize = 0x64; // float32
                pub const m_flSoftAmplitude: usize = 0x68; // float32
                pub const m_flSoftAmplitudeJitter: usize = 0x6C; // float32
                pub const m_flLoudTimeJitter: usize = 0x70; // float32
                pub const m_flSoftTimeJitter: usize = 0x74; // float32
                pub const m_grainResources: usize = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCVoiceContainerBase>>
            }
            // Parent: None
            // Fields count: 6
            pub mod VMixFilterDesc_t {
                pub const m_nFilterType: usize = 0x0; // VMixFilterType_t
                pub const m_nFilterSlope: usize = 0x2; // VMixFilterSlope_t
                pub const m_bEnabled: usize = 0x3; // bool
                pub const m_fldbGain: usize = 0x4; // float32
                pub const m_flCutoffFreq: usize = 0x8; // float32
                pub const m_flQ: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod VMixEQ8Desc_t {
                pub const m_stages: usize = 0x0; // VMixFilterDesc_t[8]
            }
            // Parent: None
            // Fields count: 7
            pub mod VMixDelayDesc_t {
                pub const m_feedbackFilter: usize = 0x0; // VMixFilterDesc_t
                pub const m_bEnableFilter: usize = 0x10; // bool
                pub const m_flDelay: usize = 0x14; // float32
                pub const m_flDirectGain: usize = 0x18; // float32
                pub const m_flDelayGain: usize = 0x1C; // float32
                pub const m_flFeedbackGain: usize = 0x20; // float32
                pub const m_flWidth: usize = 0x24; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod VMixPannerDesc_t {
                pub const m_type: usize = 0x0; // VMixPannerType_t
                pub const m_flStrength: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 9
            pub mod VMixModDelayDesc_t {
                pub const m_feedbackFilter: usize = 0x0; // VMixFilterDesc_t
                pub const m_bPhaseInvert: usize = 0x10; // bool
                pub const m_flGlideTime: usize = 0x14; // float32
                pub const m_flDelay: usize = 0x18; // float32
                pub const m_flOutputGain: usize = 0x1C; // float32
                pub const m_flFeedbackGain: usize = 0x20; // float32
                pub const m_flModRate: usize = 0x24; // float32
                pub const m_flModDepth: usize = 0x28; // float32
                pub const m_bApplyAntialiasing: usize = 0x2C; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod VMixDiffusorDesc_t {
                pub const m_flSize: usize = 0x0; // float32
                pub const m_flComplexity: usize = 0x4; // float32
                pub const m_flFeedback: usize = 0x8; // float32
                pub const m_flOutputGain: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 17
            pub mod VMixBoxverbDesc_t {
                pub const m_flSizeMax: usize = 0x0; // float32
                pub const m_flSizeMin: usize = 0x4; // float32
                pub const m_flComplexity: usize = 0x8; // float32
                pub const m_flDiffusion: usize = 0xC; // float32
                pub const m_flModDepth: usize = 0x10; // float32
                pub const m_flModRate: usize = 0x14; // float32
                pub const m_bParallel: usize = 0x18; // bool
                pub const m_filterType: usize = 0x1C; // VMixFilterDesc_t
                pub const m_flWidth: usize = 0x2C; // float32
                pub const m_flHeight: usize = 0x30; // float32
                pub const m_flDepth: usize = 0x34; // float32
                pub const m_flFeedbackScale: usize = 0x38; // float32
                pub const m_flFeedbackWidth: usize = 0x3C; // float32
                pub const m_flFeedbackHeight: usize = 0x40; // float32
                pub const m_flFeedbackDepth: usize = 0x44; // float32
                pub const m_flOutputGain: usize = 0x48; // float32
                pub const m_flTaps: usize = 0x4C; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod VMixFreeverbDesc_t {
                pub const m_flRoomSize: usize = 0x0; // float32
                pub const m_flDamp: usize = 0x4; // float32
                pub const m_flWidth: usize = 0x8; // float32
                pub const m_flLateReflections: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 7
            pub mod VMixPlateverbDesc_t {
                pub const m_flPrefilter: usize = 0x0; // float32
                pub const m_flInputDiffusion1: usize = 0x4; // float32
                pub const m_flInputDiffusion2: usize = 0x8; // float32
                pub const m_flDecay: usize = 0xC; // float32
                pub const m_flDamp: usize = 0x10; // float32
                pub const m_flFeedbackDiffusion1: usize = 0x14; // float32
                pub const m_flFeedbackDiffusion2: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 12
            pub mod VMixDynamicsDesc_t {
                pub const m_fldbGain: usize = 0x0; // float32
                pub const m_fldbNoiseGateThreshold: usize = 0x4; // float32
                pub const m_fldbCompressionThreshold: usize = 0x8; // float32
                pub const m_fldbLimiterThreshold: usize = 0xC; // float32
                pub const m_fldbKneeWidth: usize = 0x10; // float32
                pub const m_flRatio: usize = 0x14; // float32
                pub const m_flLimiterRatio: usize = 0x18; // float32
                pub const m_flAttackTimeMS: usize = 0x1C; // float32
                pub const m_flReleaseTimeMS: usize = 0x20; // float32
                pub const m_flRMSTimeMS: usize = 0x24; // float32
                pub const m_flWetMix: usize = 0x28; // float32
                pub const m_bPeakMode: usize = 0x2C; // bool
            }
            // Parent: None
            // Fields count: 9
            pub mod VMixDynamicsCompressorDesc_t {
                pub const m_fldbOutputGain: usize = 0x0; // float32
                pub const m_fldbCompressionThreshold: usize = 0x4; // float32
                pub const m_fldbKneeWidth: usize = 0x8; // float32
                pub const m_flCompressionRatio: usize = 0xC; // float32
                pub const m_flAttackTimeMS: usize = 0x10; // float32
                pub const m_flReleaseTimeMS: usize = 0x14; // float32
                pub const m_flRMSTimeMS: usize = 0x18; // float32
                pub const m_flWetMix: usize = 0x1C; // float32
                pub const m_bPeakMode: usize = 0x20; // bool
            }
            // Parent: None
            // Fields count: 10
            pub mod VMixDynamicsBand_t {
                pub const m_fldbGainInput: usize = 0x0; // float32
                pub const m_fldbGainOutput: usize = 0x4; // float32
                pub const m_fldbThresholdBelow: usize = 0x8; // float32
                pub const m_fldbThresholdAbove: usize = 0xC; // float32
                pub const m_flRatioBelow: usize = 0x10; // float32
                pub const m_flRatioAbove: usize = 0x14; // float32
                pub const m_flAttackTimeMS: usize = 0x18; // float32
                pub const m_flReleaseTimeMS: usize = 0x1C; // float32
                pub const m_bEnable: usize = 0x20; // bool
                pub const m_bSolo: usize = 0x21; // bool
            }
            // Parent: None
            // Fields count: 10
            pub mod VMixDynamics3BandDesc_t {
                pub const m_fldbGainOutput: usize = 0x0; // float32
                pub const m_flRMSTimeMS: usize = 0x4; // float32
                pub const m_fldbKneeWidth: usize = 0x8; // float32
                pub const m_flDepth: usize = 0xC; // float32
                pub const m_flWetMix: usize = 0x10; // float32
                pub const m_flTimeScale: usize = 0x14; // float32
                pub const m_flLowCutoffFreq: usize = 0x18; // float32
                pub const m_flHighCutoffFreq: usize = 0x1C; // float32
                pub const m_bPeakMode: usize = 0x20; // bool
                pub const m_bandDesc: usize = 0x24; // VMixDynamicsBand_t[3]
            }
            // Parent: None
            // Fields count: 3
            pub mod VMixEnvelopeDesc_t {
                pub const m_flAttackTimeMS: usize = 0x0; // float32
                pub const m_flHoldTimeMS: usize = 0x4; // float32
                pub const m_flReleaseTimeMS: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod VMixPitchShiftDesc_t {
                pub const m_nGrainSampleCount: usize = 0x0; // int32
                pub const m_flPitchShift: usize = 0x4; // float32
                pub const m_nQuality: usize = 0x8; // int32
                pub const m_nProcType: usize = 0xC; // int32
            }
            // Parent: None
            // Fields count: 8
            pub mod VMixConvolutionDesc_t {
                pub const m_fldbGain: usize = 0x0; // float32
                pub const m_flPreDelayMS: usize = 0x4; // float32
                pub const m_flWetMix: usize = 0x8; // float32
                pub const m_fldbLow: usize = 0xC; // float32
                pub const m_fldbMid: usize = 0x10; // float32
                pub const m_fldbHigh: usize = 0x14; // float32
                pub const m_flLowCutoffFreq: usize = 0x18; // float32
                pub const m_flHighCutoffFreq: usize = 0x1C; // float32
            }
            // Parent: None
            // Fields count: 10
            pub mod VMixVocoderDesc_t {
                pub const m_nBandCount: usize = 0x0; // int32
                pub const m_flBandwidth: usize = 0x4; // float32
                pub const m_fldBModGain: usize = 0x8; // float32
                pub const m_flFreqRangeStart: usize = 0xC; // float32
                pub const m_flFreqRangeEnd: usize = 0x10; // float32
                pub const m_fldBUnvoicedGain: usize = 0x14; // float32
                pub const m_flAttackTimeMS: usize = 0x18; // float32
                pub const m_flReleaseTimeMS: usize = 0x1C; // float32
                pub const m_nDebugBand: usize = 0x20; // int32
                pub const m_bPeakMode: usize = 0x24; // bool
            }
            // Parent: None
            // Fields count: 5
            pub mod VMixShaperDesc_t {
                pub const m_nShape: usize = 0x0; // int32
                pub const m_fldbDrive: usize = 0x4; // float32
                pub const m_fldbOutputGain: usize = 0x8; // float32
                pub const m_flWetMix: usize = 0xC; // float32
                pub const m_nOversampleFactor: usize = 0x10; // int32
            }
            // Parent: None
            // Fields count: 6
            pub mod VMixUtilityDesc_t {
                pub const m_nOp: usize = 0x0; // VMixChannelOperation_t
                pub const m_flInputPan: usize = 0x4; // float32
                pub const m_flOutputBalance: usize = 0x8; // float32
                pub const m_fldbOutputGain: usize = 0xC; // float32
                pub const m_bBassMono: usize = 0x10; // bool
                pub const m_flBassFreq: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 8
            pub mod VMixAutoFilterDesc_t {
                pub const m_flEnvelopeAmount: usize = 0x0; // float32
                pub const m_flAttackTimeMS: usize = 0x4; // float32
                pub const m_flReleaseTimeMS: usize = 0x8; // float32
                pub const m_filter: usize = 0xC; // VMixFilterDesc_t
                pub const m_flLFOAmount: usize = 0x1C; // float32
                pub const m_flLFORate: usize = 0x20; // float32
                pub const m_flPhase: usize = 0x24; // float32
                pub const m_nLFOShape: usize = 0x28; // VMixLFOShape_t
            }
            // Parent: None
            // Fields count: 3
            pub mod VMixOscDesc_t {
                pub const oscType: usize = 0x0; // VMixLFOShape_t
                pub const m_freq: usize = 0x4; // float32
                pub const m_flPhase: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod VMixEffectChainDesc_t {
                pub const m_flCrossfadeTime: usize = 0x0; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod VMixSubgraphSwitchDesc_t {
                pub const m_interpolationMode: usize = 0x0; // VMixSubgraphSwitchInterpolationType_t
                pub const m_bOnlyTailsOnFadeOut: usize = 0x4; // bool
                pub const m_flInterpolationTime: usize = 0x8; // float32
            }
        }
        // Module: vphysics2.dll
        // Classes count: 88
        // Enums count: 2
        pub mod vphysics2 {
            // Alignment: 4
            // Members count: 4
            #[repr(u32)]
            pub enum JointAxis_t {
                JOINT_AXIS_X = 0x0,
                JOINT_AXIS_Y = 0x1,
                JOINT_AXIS_Z = 0x2,
                JOINT_AXIS_COUNT = 0x3
            }
            // Alignment: 4
            // Members count: 3
            #[repr(u32)]
            pub enum JointMotion_t {
                JOINT_MOTION_FREE = 0x0,
                JOINT_MOTION_LOCKED = 0x1,
                JOINT_MOTION_COUNT = 0x2
            }
            // Parent: None
            // Fields count: 5
            pub mod constraint_breakableparams_t {
                pub const strength: usize = 0x0; // float32
                pub const forceLimit: usize = 0x4; // float32
                pub const torqueLimit: usize = 0x8; // float32
                pub const bodyMassScale: usize = 0xC; // float32[2]
                pub const isActive: usize = 0x14; // bool
            }
            // Parent: None
            // Fields count: 4
            pub mod constraint_axislimit_t {
                pub const flMinRotation: usize = 0x0; // float32
                pub const flMaxRotation: usize = 0x4; // float32
                pub const flMotorTargetAngSpeed: usize = 0x8; // float32
                pub const flMotorMaxTorque: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod constraint_hingeparams_t {
                pub const worldPosition: usize = 0x0; // 
                pub const worldAxisDirection: usize = 0xC; // 
                pub const hingeAxis: usize = 0x18; // constraint_axislimit_t
                pub const constraint: usize = 0x28; // constraint_breakableparams_t
            }
            // Parent: None
            // Fields count: 0
            pub mod IPhysicsPlayerController {
            }
            // Parent: None
            // Fields count: 35
            pub mod CFeJiggleBone {
                pub const m_nFlags: usize = 0x0; // uint32
                pub const m_flLength: usize = 0x4; // float32
                pub const m_flTipMass: usize = 0x8; // float32
                pub const m_flYawStiffness: usize = 0xC; // float32
                pub const m_flYawDamping: usize = 0x10; // float32
                pub const m_flPitchStiffness: usize = 0x14; // float32
                pub const m_flPitchDamping: usize = 0x18; // float32
                pub const m_flAlongStiffness: usize = 0x1C; // float32
                pub const m_flAlongDamping: usize = 0x20; // float32
                pub const m_flAngleLimit: usize = 0x24; // float32
                pub const m_flMinYaw: usize = 0x28; // float32
                pub const m_flMaxYaw: usize = 0x2C; // float32
                pub const m_flYawFriction: usize = 0x30; // float32
                pub const m_flYawBounce: usize = 0x34; // float32
                pub const m_flMinPitch: usize = 0x38; // float32
                pub const m_flMaxPitch: usize = 0x3C; // float32
                pub const m_flPitchFriction: usize = 0x40; // float32
                pub const m_flPitchBounce: usize = 0x44; // float32
                pub const m_flBaseMass: usize = 0x48; // float32
                pub const m_flBaseStiffness: usize = 0x4C; // float32
                pub const m_flBaseDamping: usize = 0x50; // float32
                pub const m_flBaseMinLeft: usize = 0x54; // float32
                pub const m_flBaseMaxLeft: usize = 0x58; // float32
                pub const m_flBaseLeftFriction: usize = 0x5C; // float32
                pub const m_flBaseMinUp: usize = 0x60; // float32
                pub const m_flBaseMaxUp: usize = 0x64; // float32
                pub const m_flBaseUpFriction: usize = 0x68; // float32
                pub const m_flBaseMinForward: usize = 0x6C; // float32
                pub const m_flBaseMaxForward: usize = 0x70; // float32
                pub const m_flBaseForwardFriction: usize = 0x74; // float32
                pub const m_flRadius0: usize = 0x78; // float32
                pub const m_flRadius1: usize = 0x7C; // float32
                pub const m_vPoint0: usize = 0x80; // 
                pub const m_vPoint1: usize = 0x8C; // 
                pub const m_nCollisionMask: usize = 0x98; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod CFeNamedJiggleBone {
                pub const m_strParentBone: usize = 0x0; // CUtlString
                pub const m_transform: usize = 0x10; // CTransform
                pub const m_nJiggleParent: usize = 0x30; // uint32
                pub const m_jiggleBone: usize = 0x34; // CFeJiggleBone
            }
            // Parent: None
            // Fields count: 3
            pub mod CFeIndexedJiggleBone {
                pub const m_nNode: usize = 0x0; // uint32
                pub const m_nJiggleParent: usize = 0x4; // uint32
                pub const m_jiggleBone: usize = 0x8; // CFeJiggleBone
            }
            // Parent: None
            // Fields count: 100
            pub mod PhysFeModelDesc_t {
                pub const m_CtrlHash: usize = 0x0; // CUtlVector<uint32>
                pub const m_CtrlName: usize = 0x18; // CUtlVector<CUtlString>
                pub const m_nStaticNodeFlags: usize = 0x30; // uint32
                pub const m_nDynamicNodeFlags: usize = 0x34; // uint32
                pub const m_flLocalForce: usize = 0x38; // float32
                pub const m_flLocalRotation: usize = 0x3C; // float32
                pub const m_nNodeCount: usize = 0x40; // uint16
                pub const m_nStaticNodes: usize = 0x42; // uint16
                pub const m_nRotLockStaticNodes: usize = 0x44; // uint16
                pub const m_nFirstPositionDrivenNode: usize = 0x46; // uint16
                pub const m_nSimdTriCount1: usize = 0x48; // uint16
                pub const m_nSimdTriCount2: usize = 0x4A; // uint16
                pub const m_nSimdQuadCount1: usize = 0x4C; // uint16
                pub const m_nSimdQuadCount2: usize = 0x4E; // uint16
                pub const m_nQuadCount1: usize = 0x50; // uint16
                pub const m_nQuadCount2: usize = 0x52; // uint16
                pub const m_nTreeDepth: usize = 0x54; // uint16
                pub const m_nNodeBaseJiggleboneDependsCount: usize = 0x56; // uint16
                pub const m_nRopeCount: usize = 0x58; // uint16
                pub const m_Ropes: usize = 0x60; // CUtlVector<uint16>
                pub const m_NodeBases: usize = 0x78; // CUtlVector<FeNodeBase_t>
                pub const m_SimdNodeBases: usize = 0x90; // CUtlVector<FeSimdNodeBase_t>
                pub const m_Quads: usize = 0xA8; // CUtlVector<FeQuad_t>
                pub const m_SimdQuads: usize = 0xC0; // CUtlVector<FeSimdQuad_t>
                pub const m_SimdTris: usize = 0xD8; // CUtlVector<FeSimdTri_t>
                pub const m_SimdRods: usize = 0xF0; // CUtlVector<FeSimdRodConstraint_t>
                pub const m_SimdRodsAnim: usize = 0x108; // CUtlVector<FeSimdRodConstraintAnim_t>
                pub const m_InitPose: usize = 0x120; // CUtlVector<CTransform>
                pub const m_Rods: usize = 0x138; // CUtlVector<FeRodConstraint_t>
                pub const m_Twists: usize = 0x150; // CUtlVector<FeTwistConstraint_t>
                pub const m_AxialEdges: usize = 0x168; // CUtlVector<FeAxialEdgeBend_t>
                pub const m_NodeInvMasses: usize = 0x180; // CUtlVector<float32>
                pub const m_CtrlOffsets: usize = 0x198; // CUtlVector<FeCtrlOffset_t>
                pub const m_CtrlOsOffsets: usize = 0x1B0; // CUtlVector<FeCtrlOsOffset_t>
                pub const m_FollowNodes: usize = 0x1C8; // CUtlVector<FeFollowNode_t>
                pub const m_CollisionPlanes: usize = 0x1E0; // CUtlVector<FeCollisionPlane_t>
                pub const m_NodeIntegrator: usize = 0x1F8; // CUtlVector<FeNodeIntegrator_t>
                pub const m_SpringIntegrator: usize = 0x210; // CUtlVector<FeSpringIntegrator_t>
                pub const m_SimdSpringIntegrator: usize = 0x228; // CUtlVector<FeSimdSpringIntegrator_t>
                pub const m_WorldCollisionParams: usize = 0x240; // CUtlVector<FeWorldCollisionParams_t>
                pub const m_LegacyStretchForce: usize = 0x258; // CUtlVector<float32>
                pub const m_NodeCollisionRadii: usize = 0x270; // CUtlVector<float32>
                pub const m_DynNodeFriction: usize = 0x288; // CUtlVector<float32>
                pub const m_LocalRotation: usize = 0x2A0; // CUtlVector<float32>
                pub const m_LocalForce: usize = 0x2B8; // CUtlVector<float32>
                pub const m_TaperedCapsuleStretches: usize = 0x2D0; // CUtlVector<FeTaperedCapsuleStretch_t>
                pub const m_TaperedCapsuleRigids: usize = 0x2E8; // CUtlVector<FeTaperedCapsuleRigid_t>
                pub const m_SphereRigids: usize = 0x300; // CUtlVector<FeSphereRigid_t>
                pub const m_WorldCollisionNodes: usize = 0x318; // CUtlVector<uint16>
                pub const m_TreeParents: usize = 0x330; // CUtlVector<uint16>
                pub const m_TreeCollisionMasks: usize = 0x348; // CUtlVector<uint16>
                pub const m_TreeChildren: usize = 0x360; // CUtlVector<FeTreeChildren_t>
                pub const m_FreeNodes: usize = 0x378; // CUtlVector<uint16>
                pub const m_FitMatrices: usize = 0x390; // CUtlVector<FeFitMatrix_t>
                pub const m_FitWeights: usize = 0x3A8; // CUtlVector<FeFitWeight_t>
                pub const m_ReverseOffsets: usize = 0x3C0; // CUtlVector<FeNodeReverseOffset_t>
                pub const m_AnimStrayRadii: usize = 0x3D8; // CUtlVector<FeAnimStrayRadius_t>
                pub const m_SimdAnimStrayRadii: usize = 0x3F0; // CUtlVector<FeSimdAnimStrayRadius_t>
                pub const m_KelagerBends: usize = 0x408; // CUtlVector<FeKelagerBend2_t>
                pub const m_CtrlSoftOffsets: usize = 0x420; // CUtlVector<FeCtrlSoftOffset_t>
                pub const m_JiggleBones: usize = 0x438; // CUtlVector<CFeIndexedJiggleBone>
                pub const m_SourceElems: usize = 0x450; // CUtlVector<uint16>
                pub const m_GoalDampedSpringIntegrators: usize = 0x468; // CUtlVector<uint32>
                pub const m_Tris: usize = 0x480; // CUtlVector<FeTri_t>
                pub const m_nTriCount1: usize = 0x498; // uint16
                pub const m_nTriCount2: usize = 0x49A; // uint16
                pub const m_nReservedUint8: usize = 0x49C; // uint8
                pub const m_nExtraPressureIterations: usize = 0x49D; // uint8
                pub const m_nExtraGoalIterations: usize = 0x49E; // uint8
                pub const m_nExtraIterations: usize = 0x49F; // uint8
                pub const m_BoxRigids: usize = 0x4A0; // CUtlVector<FeBoxRigid_t>
                pub const m_DynNodeVertexSet: usize = 0x4B8; // CUtlVector<uint8>
                pub const m_VertexSetNames: usize = 0x4D0; // CUtlVector<uint32>
                pub const m_RigidColliderPriorities: usize = 0x4E8; // CUtlVector<FeRigidColliderIndices_t>
                pub const m_MorphLayers: usize = 0x500; // CUtlVector<FeMorphLayerDepr_t>
                pub const m_MorphSetData: usize = 0x518; // CUtlVector<uint8>
                pub const m_VertexMaps: usize = 0x530; // CUtlVector<FeVertexMapDesc_t>
                pub const m_VertexMapValues: usize = 0x548; // CUtlVector<uint8>
                pub const m_Effects: usize = 0x560; // CUtlVector<FeEffectDesc_t>
                pub const m_LockToParent: usize = 0x578; // CUtlVector<FeCtrlOffset_t>
                pub const m_LockToGoal: usize = 0x590; // CUtlVector<uint16>
                pub const m_SkelParents: usize = 0x5A8; // CUtlVector<int16>
                pub const m_DynNodeWindBases: usize = 0x5C0; // CUtlVector<FeNodeWindBase_t>
                pub const m_flInternalPressure: usize = 0x5D8; // float32
                pub const m_flDefaultTimeDilation: usize = 0x5DC; // float32
                pub const m_flWindage: usize = 0x5E0; // float32
                pub const m_flWindDrag: usize = 0x5E4; // float32
                pub const m_flDefaultSurfaceStretch: usize = 0x5E8; // float32
                pub const m_flDefaultThreadStretch: usize = 0x5EC; // float32
                pub const m_flDefaultGravityScale: usize = 0x5F0; // float32
                pub const m_flDefaultVelAirDrag: usize = 0x5F4; // float32
                pub const m_flDefaultExpAirDrag: usize = 0x5F8; // float32
                pub const m_flDefaultVelQuadAirDrag: usize = 0x5FC; // float32
                pub const m_flDefaultExpQuadAirDrag: usize = 0x600; // float32
                pub const m_flRodVelocitySmoothRate: usize = 0x604; // float32
                pub const m_flQuadVelocitySmoothRate: usize = 0x608; // float32
                pub const m_flAddWorldCollisionRadius: usize = 0x60C; // float32
                pub const m_flDefaultVolumetricSolveAmount: usize = 0x610; // float32
                pub const m_nRodVelocitySmoothIterations: usize = 0x614; // uint16
                pub const m_nQuadVelocitySmoothIterations: usize = 0x616; // uint16
            }
            // Parent: None
            // Fields count: 2
            pub mod FourVectors2D {
                pub const x: usize = 0x0; // fltx4
                pub const y: usize = 0x10; // fltx4
            }
            // Parent: None
            // Fields count: 3
            pub mod FeEdgeDesc_t {
                pub const nEdge: usize = 0x0; // uint16[2]
                pub const nSide: usize = 0x4; // uint16[2][2]
                pub const nVirtElem: usize = 0xC; // uint16[2]
            }
            // Parent: None
            // Fields count: 12
            pub mod OldFeEdge_t {
                pub const m_flK: usize = 0x0; // float32[3]
                pub const invA: usize = 0xC; // float32
                pub const t: usize = 0x10; // float32
                pub const flThetaRelaxed: usize = 0x14; // float32
                pub const flThetaFactor: usize = 0x18; // float32
                pub const c01: usize = 0x1C; // float32
                pub const c02: usize = 0x20; // float32
                pub const c03: usize = 0x24; // float32
                pub const c04: usize = 0x28; // float32
                pub const flAxialModelDist: usize = 0x2C; // float32
                pub const flAxialModelWeights: usize = 0x30; // float32[4]
                pub const m_nNode: usize = 0x40; // uint16[4]
            }
            // Parent: None
            // Fields count: 2
            pub mod FeWeightedNode_t {
                pub const nNode: usize = 0x0; // uint16
                pub const nWeight: usize = 0x2; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod FeKelagerBend2_t {
                pub const flWeight: usize = 0x0; // float32[3]
                pub const flHeight0: usize = 0xC; // float32
                pub const nNode: usize = 0x10; // uint16[3]
                pub const nReserved: usize = 0x16; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod FeStiffHingeBuild_t {
                pub const flMaxAngle: usize = 0x0; // float32
                pub const flStrength: usize = 0x4; // float32
                pub const flMotionBias: usize = 0x8; // float32[3]
                pub const nNode: usize = 0x14; // uint16[3]
            }
            // Parent: None
            // Fields count: 5
            pub mod FeTri_t {
                pub const nNode: usize = 0x0; // uint16[3]
                pub const w1: usize = 0x8; // float32
                pub const w2: usize = 0xC; // float32
                pub const v1x: usize = 0x10; // float32
                pub const v2: usize = 0x14; // Vector2D
            }
            // Parent: None
            // Fields count: 5
            pub mod FeSimdTri_t {
                pub const nNode: usize = 0x0; // uint32[4][3]
                pub const w1: usize = 0x30; // fltx4
                pub const w2: usize = 0x40; // fltx4
                pub const v1x: usize = 0x50; // fltx4
                pub const v2: usize = 0x60; // FourVectors2D
            }
            // Parent: None
            // Fields count: 3
            pub mod FeQuad_t {
                pub const nNode: usize = 0x0; // uint16[4]
                pub const flSlack: usize = 0x8; // float32
                pub const vShape: usize = 0xC; // Vector4D[4]
            }
            // Parent: None
            // Fields count: 7
            pub mod FeNodeBase_t {
                pub const nNode: usize = 0x0; // uint16
                pub const nDummy: usize = 0x2; // uint16[3]
                pub const nNodeX0: usize = 0x8; // uint16
                pub const nNodeX1: usize = 0xA; // uint16
                pub const nNodeY0: usize = 0xC; // uint16
                pub const nNodeY1: usize = 0xE; // uint16
                pub const qAdjust: usize = 0x10; // QuaternionStorage
            }
            // Parent: None
            // Fields count: 4
            pub mod FeNodeWindBase_t {
                pub const nNodeX0: usize = 0x0; // uint16
                pub const nNodeX1: usize = 0x2; // uint16
                pub const nNodeY0: usize = 0x4; // uint16
                pub const nNodeY1: usize = 0x6; // uint16
            }
            // Parent: None
            // Fields count: 3
            pub mod FeNodeReverseOffset_t {
                pub const vOffset: usize = 0x0; // 
                pub const nBoneCtrl: usize = 0xC; // uint16
                pub const nTargetNode: usize = 0xE; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod FeSimdQuad_t {
                pub const nNode: usize = 0x0; // uint16[4][4]
                pub const f4Slack: usize = 0x20; // fltx4
                pub const vShape: usize = 0x30; // FourVectors[4]
                pub const f4Weights: usize = 0xF0; // fltx4[4]
            }
            // Parent: None
            // Fields count: 5
            pub mod FeAxialEdgeBend_t {
                pub const te: usize = 0x0; // float32
                pub const tv: usize = 0x4; // float32
                pub const flDist: usize = 0x8; // float32
                pub const flWeight: usize = 0xC; // float32[4]
                pub const nNode: usize = 0x1C; // uint16[6]
            }
            // Parent: None
            // Fields count: 3
            pub mod FeBandBendLimit_t {
                pub const flDistMin: usize = 0x0; // float32
                pub const flDistMax: usize = 0x4; // float32
                pub const nNode: usize = 0x8; // uint16[6]
            }
            // Parent: None
            // Fields count: 5
            pub mod FeRodConstraint_t {
                pub const nNode: usize = 0x0; // uint16[2]
                pub const flMaxDist: usize = 0x4; // float32
                pub const flMinDist: usize = 0x8; // float32
                pub const flWeight0: usize = 0xC; // float32
                pub const flRelaxationFactor: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod FeTwistConstraint_t {
                pub const nNodeOrient: usize = 0x0; // uint16
                pub const nNodeEnd: usize = 0x2; // uint16
                pub const flTwistRelax: usize = 0x4; // float32
                pub const flSwingRelax: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod FeSimdRodConstraint_t {
                pub const nNode: usize = 0x0; // uint16[4][2]
                pub const f4MaxDist: usize = 0x10; // fltx4
                pub const f4MinDist: usize = 0x20; // fltx4
                pub const f4Weight0: usize = 0x30; // fltx4
                pub const f4RelaxationFactor: usize = 0x40; // fltx4
            }
            // Parent: None
            // Fields count: 3
            pub mod FeSimdRodConstraintAnim_t {
                pub const nNode: usize = 0x0; // uint16[4][2]
                pub const f4Weight0: usize = 0x10; // fltx4
                pub const f4RelaxationFactor: usize = 0x20; // fltx4
            }
            // Parent: None
            // Fields count: 3
            pub mod FeAnimStrayRadius_t {
                pub const nNode: usize = 0x0; // uint16[2]
                pub const flMaxDist: usize = 0x4; // float32
                pub const flRelaxationFactor: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod FeSimdAnimStrayRadius_t {
                pub const nNode: usize = 0x0; // uint16[4][2]
                pub const flMaxDist: usize = 0x10; // fltx4
                pub const flRelaxationFactor: usize = 0x20; // fltx4
            }
            // Parent: None
            // Fields count: 7
            pub mod FeSimdNodeBase_t {
                pub const nNode: usize = 0x0; // uint16[4]
                pub const nNodeX0: usize = 0x8; // uint16[4]
                pub const nNodeX1: usize = 0x10; // uint16[4]
                pub const nNodeY0: usize = 0x18; // uint16[4]
                pub const nNodeY1: usize = 0x20; // uint16[4]
                pub const nDummy: usize = 0x28; // uint16[4]
                pub const qAdjust: usize = 0x30; // FourQuaternions
            }
            // Parent: None
            // Fields count: 4
            pub mod FeNodeIntegrator_t {
                pub const flPointDamping: usize = 0x0; // float32
                pub const flAnimationForceAttraction: usize = 0x4; // float32
                pub const flAnimationVertexAttraction: usize = 0x8; // float32
                pub const flGravity: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod FeSpringIntegrator_t {
                pub const nNode: usize = 0x0; // uint16[2]
                pub const flSpringRestLength: usize = 0x4; // float32
                pub const flSpringConstant: usize = 0x8; // float32
                pub const flSpringDamping: usize = 0xC; // float32
                pub const flNodeWeight0: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 5
            pub mod FeSimdSpringIntegrator_t {
                pub const nNode: usize = 0x0; // uint16[4][2]
                pub const flSpringRestLength: usize = 0x10; // fltx4
                pub const flSpringConstant: usize = 0x20; // fltx4
                pub const flSpringDamping: usize = 0x30; // fltx4
                pub const flNodeWeight0: usize = 0x40; // fltx4
            }
            // Parent: None
            // Fields count: 3
            pub mod FeCtrlOffset_t {
                pub const vOffset: usize = 0x0; // 
                pub const nCtrlParent: usize = 0xC; // uint16
                pub const nCtrlChild: usize = 0xE; // uint16
            }
            // Parent: None
            // Fields count: 2
            pub mod FeSoftParent_t {
                pub const nParent: usize = 0x0; // int32
                pub const flAlpha: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod FeCtrlSoftOffset_t {
                pub const nCtrlParent: usize = 0x0; // uint16
                pub const nCtrlChild: usize = 0x2; // uint16
                pub const vOffset: usize = 0x4; // 
                pub const flAlpha: usize = 0x10; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod FeCtrlOsOffset_t {
                pub const nCtrlParent: usize = 0x0; // uint16
                pub const nCtrlChild: usize = 0x2; // uint16
            }
            // Parent: None
            // Fields count: 3
            pub mod FeFollowNode_t {
                pub const nParentNode: usize = 0x0; // uint16
                pub const nChildNode: usize = 0x2; // uint16
                pub const flWeight: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod FeCollisionPlane_t {
                pub const nCtrlParent: usize = 0x0; // uint16
                pub const nChildNode: usize = 0x2; // uint16
                pub const m_Plane: usize = 0x4; // RnPlane_t
                pub const flStrength: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod FeWorldCollisionParams_t {
                pub const flWorldFriction: usize = 0x0; // float32
                pub const flGroundFriction: usize = 0x4; // float32
                pub const nListBegin: usize = 0x8; // uint16
                pub const nListEnd: usize = 0xA; // uint16
            }
            // Parent: None
            // Fields count: 1
            pub mod FeTreeChildren_t {
                pub const nChild: usize = 0x0; // uint16[2]
            }
            // Parent: None
            // Fields count: 5
            pub mod FeTaperedCapsuleRigid_t {
                pub const vSphere: usize = 0x0; // fltx4[2]
                pub const nNode: usize = 0x20; // uint16
                pub const nCollisionMask: usize = 0x22; // uint16
                pub const nVertexMapIndex: usize = 0x24; // uint16
                pub const nFlags: usize = 0x26; // uint16
            }
            // Parent: None
            // Fields count: 5
            pub mod FeSphereRigid_t {
                pub const vSphere: usize = 0x0; // fltx4
                pub const nNode: usize = 0x10; // uint16
                pub const nCollisionMask: usize = 0x12; // uint16
                pub const nVertexMapIndex: usize = 0x14; // uint16
                pub const nFlags: usize = 0x16; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod FeTaperedCapsuleStretch_t {
                pub const nNode: usize = 0x0; // uint16[2]
                pub const nCollisionMask: usize = 0x4; // uint16
                pub const nDummy: usize = 0x6; // uint16
                pub const flRadius: usize = 0x8; // float32[2]
            }
            // Parent: None
            // Fields count: 6
            pub mod FeBoxRigid_t {
                pub const tmFrame2: usize = 0x0; // CTransform
                pub const nNode: usize = 0x20; // uint16
                pub const nCollisionMask: usize = 0x22; // uint16
                pub const vSize: usize = 0x24; // 
                pub const nVertexMapIndex: usize = 0x30; // uint16
                pub const nFlags: usize = 0x32; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod CovMatrix3 {
                pub const m_vDiag: usize = 0x0; // 
                pub const m_flXY: usize = 0xC; // float32
                pub const m_flXZ: usize = 0x10; // float32
                pub const m_flYZ: usize = 0x14; // float32
            }
            // Parent: None
            // Fields count: 4
            pub mod FourCovMatrices3 {
                pub const m_vDiag: usize = 0x0; // FourVectors
                pub const m_flXY: usize = 0x30; // fltx4
                pub const m_flXZ: usize = 0x40; // fltx4
                pub const m_flYZ: usize = 0x50; // fltx4
            }
            // Parent: None
            // Fields count: 3
            pub mod FeFitWeight_t {
                pub const flWeight: usize = 0x0; // float32
                pub const nNode: usize = 0x4; // uint16
                pub const nDummy: usize = 0x6; // uint16
            }
            // Parent: None
            // Fields count: 3
            pub mod FeFitInfluence_t {
                pub const nVertexNode: usize = 0x0; // uint32
                pub const flWeight: usize = 0x4; // float32
                pub const nMatrixNode: usize = 0x8; // uint32
            }
            // Parent: None
            // Fields count: 5
            pub mod FeFitMatrix_t {
                pub const bone: usize = 0x0; // CTransform
                pub const vCenter: usize = 0x20; // 
                pub const nEnd: usize = 0x2C; // uint16
                pub const nNode: usize = 0x2E; // uint16
                pub const nBeginDynamic: usize = 0x30; // uint16
            }
            // Parent: None
            // Fields count: 4
            pub mod FeRigidColliderIndices_t {
                pub const m_nTaperedCapsuleRigidIndex: usize = 0x0; // uint16
                pub const m_nSphereRigidIndex: usize = 0x2; // uint16
                pub const m_nBoxRigidIndex: usize = 0x4; // uint16
                pub const m_nCollisionPlaneIndex: usize = 0x6; // uint16
            }
            // Parent: FeTaperedCapsuleRigid_t
            // Fields count: 2
            pub mod FeBuildTaperedCapsuleRigid_t {
                pub const m_nPriority: usize = 0x30; // int32
                pub const m_nVertexMapHash: usize = 0x34; // uint32
            }
            // Parent: FeBoxRigid_t
            // Fields count: 2
            pub mod FeBuildBoxRigid_t {
                pub const m_nPriority: usize = 0x40; // int32
                pub const m_nVertexMapHash: usize = 0x44; // uint32
            }
            // Parent: FeSphereRigid_t
            // Fields count: 2
            pub mod FeBuildSphereRigid_t {
                pub const m_nPriority: usize = 0x20; // int32
                pub const m_nVertexMapHash: usize = 0x24; // uint32
            }
            // Parent: None
            // Fields count: 1
            pub mod FeSourceEdge_t {
                pub const nNode: usize = 0x0; // uint16[2]
            }
            // Parent: None
            // Fields count: 4
            pub mod FeEffectDesc_t {
                pub const sName: usize = 0x0; // CUtlString
                pub const nNameHash: usize = 0x8; // uint32
                pub const nType: usize = 0xC; // int32
                pub const m_Params: usize = 0x10; // KeyValues3
            }
            // Parent: None
            // Fields count: 6
            pub mod FeVertexMapBuild_t {
                pub const m_VertexMapName: usize = 0x0; // CUtlString
                pub const m_nNameHash: usize = 0x8; // uint32
                pub const m_Color: usize = 0xC; // Color
                pub const m_flVolumetricSolveStrength: usize = 0x10; // float32
                pub const m_nScaleSourceNode: usize = 0x14; // int32
                pub const m_Weights: usize = 0x18; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 1
            pub mod CFeVertexMapBuildArray {
                pub const m_Array: usize = 0x0; // CUtlVector<FeVertexMapBuild_t*>
            }
            // Parent: None
            // Fields count: 2
            pub mod FeProxyVertexMap_t {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_flWeight: usize = 0x8; // float32
            }
            // Parent: None
            // Fields count: 12
            pub mod FeVertexMapDesc_t {
                pub const sName: usize = 0x0; // CUtlString
                pub const nNameHash: usize = 0x8; // uint32
                pub const nColor: usize = 0xC; // uint32
                pub const nFlags: usize = 0x10; // uint32
                pub const nVertexBase: usize = 0x14; // uint16
                pub const nVertexCount: usize = 0x16; // uint16
                pub const nMapOffset: usize = 0x18; // uint32
                pub const nNodeListOffset: usize = 0x1C; // uint32
                pub const vCenterOfMass: usize = 0x20; // 
                pub const flVolumetricSolveStrength: usize = 0x2C; // float32
                pub const nScaleSourceNode: usize = 0x30; // int16
                pub const nNodeListCount: usize = 0x32; // uint16
            }
            // Parent: None
            // Fields count: 8
            pub mod FeMorphLayerDepr_t {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_nNameHash: usize = 0x8; // uint32
                pub const m_Nodes: usize = 0x10; // CUtlVector<uint16>
                pub const m_InitPos: usize = 0x28; // CUtlVector<Vector>
                pub const m_Gravity: usize = 0x40; // CUtlVector<float32>
                pub const m_GoalStrength: usize = 0x58; // CUtlVector<float32>
                pub const m_GoalDamping: usize = 0x70; // CUtlVector<float32>
                pub const m_nFlags: usize = 0x88; // uint32
            }
            // Parent: None
            // Fields count: 7
            pub mod CFeMorphLayer {
                pub const m_Name: usize = 0x0; // CUtlString
                pub const m_nNameHash: usize = 0x8; // uint32
                pub const m_Nodes: usize = 0x10; // CUtlVector<uint16>
                pub const m_InitPos: usize = 0x28; // CUtlVector<Vector>
                pub const m_Gravity: usize = 0x40; // CUtlVector<float32>
                pub const m_GoalStrength: usize = 0x58; // CUtlVector<float32>
                pub const m_GoalDamping: usize = 0x70; // CUtlVector<float32>
            }
            // Parent: None
            // Fields count: 1
            pub mod Dop26_t {
                pub const m_flSupport: usize = 0x0; // float32[26]
            }
            // Parent: None
            // Fields count: 2
            pub mod RnCapsule_t {
                pub const m_vCenter: usize = 0x0; // Vector[2]
                pub const m_flRadius: usize = 0x18; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod RnPlane_t {
                pub const m_vNormal: usize = 0x0; // 
                pub const m_flOffset: usize = 0xC; // float32
            }
            // Parent: None
            // Fields count: 1
            pub mod RnVertex_t {
                pub const m_nEdge: usize = 0x0; // uint8
            }
            // Parent: None
            // Fields count: 4
            pub mod RnHalfEdge_t {
                pub const m_nNext: usize = 0x0; // uint8
                pub const m_nTwin: usize = 0x1; // uint8
                pub const m_nOrigin: usize = 0x2; // uint8
                pub const m_nFace: usize = 0x3; // uint8
            }
            // Parent: None
            // Fields count: 1
            pub mod RnFace_t {
                pub const m_nEdge: usize = 0x0; // uint8
            }
            // Parent: None
            // Fields count: 2
            pub mod CRegionSVM {
                pub const m_Planes: usize = 0x0; // CUtlVector<RnPlane_t>
                pub const m_Nodes: usize = 0x18; // CUtlVector<uint32>
            }
            // Parent: None
            // Fields count: 14
            pub mod RnHull_t {
                pub const m_vCentroid: usize = 0x0; // 
                pub const m_flMaxAngularRadius: usize = 0xC; // float32
                pub const m_Bounds: usize = 0x10; // AABB_t
                pub const m_vOrthographicAreas: usize = 0x28; // 
                pub const m_MassProperties: usize = 0x34; // matrix3x4_t
                pub const m_flVolume: usize = 0x64; // float32
                pub const m_flSurfaceArea: usize = 0x68; // float32
                pub const m_Vertices: usize = 0x70; // CUtlVector<RnVertex_t>
                pub const m_VertexPositions: usize = 0x88; // CUtlVector<Vector>
                pub const m_Edges: usize = 0xA0; // CUtlVector<RnHalfEdge_t>
                pub const m_Faces: usize = 0xB8; // CUtlVector<RnFace_t>
                pub const m_FacePlanes: usize = 0xD0; // CUtlVector<RnPlane_t>
                pub const m_nFlags: usize = 0xE8; // uint32
                pub const m_pRegionSVM: usize = 0xF0; // CRegionSVM*
            }
            // Parent: None
            // Fields count: 1
            pub mod RnTriangle_t {
                pub const m_nIndex: usize = 0x0; // int32[3]
            }
            // Parent: None
            // Fields count: 1
            pub mod RnWing_t {
                pub const m_nIndex: usize = 0x0; // int32[3]
            }
            // Parent: None
            // Fields count: 4
            pub mod RnNode_t {
                pub const m_vMin: usize = 0x0; // 
                pub const m_nChildren: usize = 0xC; // uint32
                pub const m_vMax: usize = 0x10; // 
                pub const m_nTriangleOffset: usize = 0x1C; // uint32
            }
            // Parent: None
            // Fields count: 10
            pub mod RnMesh_t {
                pub const m_vMin: usize = 0x0; // 
                pub const m_vMax: usize = 0xC; // 
                pub const m_Nodes: usize = 0x18; // CUtlVector<RnNode_t>
                pub const m_Vertices: usize = 0x30; // CUtlVectorSIMDPaddedVector
                pub const m_Triangles: usize = 0x48; // CUtlVector<RnTriangle_t>
                pub const m_Wings: usize = 0x60; // CUtlVector<RnWing_t>
                pub const m_Materials: usize = 0x78; // CUtlVector<uint8>
                pub const m_vOrthographicAreas: usize = 0x90; // 
                pub const m_nFlags: usize = 0x9C; // uint32
                pub const m_nDebugFlags: usize = 0xA0; // uint32
            }
            // Parent: None
            // Fields count: 3
            pub mod RnShapeDesc_t {
                pub const m_nCollisionAttributeIndex: usize = 0x0; // uint32
                pub const m_nSurfacePropertyIndex: usize = 0x4; // uint32
                pub const m_UserFriendlyName: usize = 0x8; // CUtlString
            }
            // Parent: RnShapeDesc_t
            // Fields count: 1
            pub mod RnSphereDesc_t {
                pub const m_Sphere: usize = 0x10; // SphereBase_t<float32>
            }
            // Parent: RnShapeDesc_t
            // Fields count: 1
            pub mod RnCapsuleDesc_t {
                pub const m_Capsule: usize = 0x10; // RnCapsule_t
            }
            // Parent: RnShapeDesc_t
            // Fields count: 1
            pub mod RnHullDesc_t {
                pub const m_Hull: usize = 0x10; // RnHull_t
            }
            // Parent: RnShapeDesc_t
            // Fields count: 1
            pub mod RnMeshDesc_t {
                pub const m_Mesh: usize = 0x10; // RnMesh_t
            }
            // Parent: None
            // Fields count: 1
            pub mod RnSoftbodyParticle_t {
                pub const m_flMassInv: usize = 0x0; // float32
            }
            // Parent: None
            // Fields count: 2
            pub mod RnSoftbodySpring_t {
                pub const m_nParticle: usize = 0x0; // uint16[2]
                pub const m_flLength: usize = 0x4; // float32
            }
            // Parent: None
            // Fields count: 3
            pub mod RnSoftbodyCapsule_t {
                pub const m_vCenter: usize = 0x0; // Vector[2]
                pub const m_flRadius: usize = 0x18; // float32
                pub const m_nParticle: usize = 0x1C; // uint16[2]
            }
            // Parent: None
            // Fields count: 8
            pub mod RnBlendVertex_t {
                pub const m_nWeight0: usize = 0x0; // uint16
                pub const m_nIndex0: usize = 0x2; // uint16
                pub const m_nWeight1: usize = 0x4; // uint16
                pub const m_nIndex1: usize = 0x6; // uint16
                pub const m_nWeight2: usize = 0x8; // uint16
                pub const m_nIndex2: usize = 0xA; // uint16
                pub const m_nFlags: usize = 0xC; // uint16
                pub const m_nTargetIndex: usize = 0xE; // uint16
            }
            // Parent: None
            // Fields count: 6
            pub mod CastSphereSATParams_t {
                pub const m_vRayStart: usize = 0x0; // 
                pub const m_vRayDelta: usize = 0xC; // 
                pub const m_flRadius: usize = 0x18; // float32
                pub const m_flMaxFraction: usize = 0x1C; // float32
                pub const m_flScale: usize = 0x20; // float32
                pub const m_pHull: usize = 0x28; // RnHull_t*
            }
            // Parent: None
            // Fields count: 35
            pub mod RnBodyDesc_t {
                pub const m_sDebugName: usize = 0x0; // CUtlString
                pub const m_vPosition: usize = 0x8; // 
                pub const m_qOrientation: usize = 0x14; // QuaternionStorage
                pub const m_vLinearVelocity: usize = 0x24; // 
                pub const m_vAngularVelocity: usize = 0x30; // 
                pub const m_vLocalMassCenter: usize = 0x3C; // 
                pub const m_LocalInertiaInv: usize = 0x48; // Vector[3]
                pub const m_flMassInv: usize = 0x6C; // float32
                pub const m_flGameMass: usize = 0x70; // float32
                pub const m_flInertiaScaleInv: usize = 0x74; // float32
                pub const m_flLinearDamping: usize = 0x78; // float32
                pub const m_flAngularDamping: usize = 0x7C; // float32
                pub const m_flLinearDrag: usize = 0x80; // float32
                pub const m_flAngularDrag: usize = 0x84; // float32
                pub const m_flLinearBuoyancyDrag: usize = 0x88; // float32
                pub const m_flAngularBuoyancyDrag: usize = 0x8C; // float32
                pub const m_vLastAwakeForceAccum: usize = 0x90; // 
                pub const m_vLastAwakeTorqueAccum: usize = 0x9C; // 
                pub const m_flBuoyancyFactor: usize = 0xA8; // float32
                pub const m_flGravityScale: usize = 0xAC; // float32
                pub const m_flTimeScale: usize = 0xB0; // float32
                pub const m_nBodyType: usize = 0xB4; // int32
                pub const m_nGameIndex: usize = 0xB8; // uint32
                pub const m_nGameFlags: usize = 0xBC; // uint32
                pub const m_nMinVelocityIterations: usize = 0xC0; // int8
                pub const m_nMinPositionIterations: usize = 0xC1; // int8
                pub const m_nMassPriority: usize = 0xC2; // int8
                pub const m_bEnabled: usize = 0xC3; // bool
                pub const m_bSleeping: usize = 0xC4; // bool
                pub const m_bIsContinuousEnabled: usize = 0xC5; // bool
                pub const m_bDragEnabled: usize = 0xC6; // bool
                pub const m_bBuoyancyDragEnabled: usize = 0xC7; // bool
                pub const m_bGravityDisabled: usize = 0xC8; // bool
                pub const m_bSpeculativeEnabled: usize = 0xC9; // bool
                pub const m_bHasShadowController: usize = 0xCA; // bool
            }
            // Parent: None
            // Fields count: 2
            pub mod VertexPositionNormal_t {
                pub const m_vPosition: usize = 0x0; // 
                pub const m_vNormal: usize = 0xC; // 
            }
            // Parent: None
            // Fields count: 1
            pub mod VertexPositionColor_t {
                pub const m_vPosition: usize = 0x0; // 
            }
            // Parent: RnBodyDesc_t
            // Fields count: 1
            pub mod vphysics_save_cphysicsbody_t {
                pub const m_nOldPointer: usize = 0xD0; // uint64
            }
        }
        // Module: worldrenderer.dll
        // Classes count: 27
        // Enums count: 1
        pub mod worldrenderer {
            // Alignment: 4
            // Members count: 13
            #[repr(u32)]
            pub enum ObjectTypeFlags_t {
                OBJECT_TYPE_NONE = 0x0,
                OBJECT_TYPE_MODEL = 0x8,
                OBJECT_TYPE_BLOCK_LIGHT = 0x10,
                OBJECT_TYPE_NO_SHADOWS = 0x20,
                OBJECT_TYPE_WORLDSPACE_TEXURE_BLEND = 0x40,
                OBJECT_TYPE_DISABLED_IN_LOW_QUALITY = 0x80,
                OBJECT_TYPE_NO_SUN_SHADOWS = 0x100,
                OBJECT_TYPE_RENDER_WITH_DYNAMIC = 0x200,
                OBJECT_TYPE_RENDER_TO_CUBEMAPS = 0x400,
                OBJECT_TYPE_MODEL_HAS_LODS = 0x800,
                OBJECT_TYPE_OVERLAY = 0x2000,
                OBJECT_TYPE_PRECOMPUTED_VISMEMBERS = 0x4000,
                OBJECT_TYPE_STATIC_CUBE_MAP = 0x8000
            }
            // Parent: None
            // Fields count: 7
            pub mod EntityIOConnectionData_t {
                pub const m_outputName: usize = 0x0; // CUtlString
                pub const m_targetType: usize = 0x8; // uint32
                pub const m_targetName: usize = 0x10; // CUtlString
                pub const m_inputName: usize = 0x18; // CUtlString
                pub const m_overrideParam: usize = 0x20; // CUtlString
                pub const m_flDelay: usize = 0x28; // float32
                pub const m_nTimesToFire: usize = 0x2C; // int32
            }
            // Parent: None
            // Fields count: 2
            pub mod EntityKeyValueData_t {
                pub const m_connections: usize = 0x8; // CUtlVector<EntityIOConnectionData_t>
                pub const m_keyValuesData: usize = 0x20; // CUtlBinaryBlock
            }
            // Parent: None
            // Fields count: 4
            pub mod PermEntityLumpData_t {
                pub const m_name: usize = 0x8; // CUtlString
                pub const m_hammerUniqueId: usize = 0x10; // CUtlString
                pub const m_childLumps: usize = 0x18; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
                pub const m_entityKeyValues: usize = 0x30; // CUtlLeanVector<EntityKeyValueData_t>
            }
            // Parent: None
            // Fields count: 14
            pub mod SceneObject_t {
                pub const m_nObjectID: usize = 0x0; // uint32
                pub const m_vTransform: usize = 0x4; // Vector4D[3]
                pub const m_flFadeStartDistance: usize = 0x34; // float32
                pub const m_flFadeEndDistance: usize = 0x38; // float32
                pub const m_vTintColor: usize = 0x3C; // Vector4D
                pub const m_skin: usize = 0x50; // CUtlString
                pub const m_nObjectTypeFlags: usize = 0x58; // ObjectTypeFlags_t
                pub const m_vLightingOrigin: usize = 0x5C; // 
                pub const m_nOverlayRenderOrder: usize = 0x68; // int16
                pub const m_nLODOverride: usize = 0x6A; // int16
                pub const m_nCubeMapPrecomputedHandshake: usize = 0x6C; // int32
                pub const m_nLightProbeVolumePrecomputedHandshake: usize = 0x70; // int32
                pub const m_renderableModel: usize = 0x78; // CStrongHandle<InfoForResourceTypeCModel>
                pub const m_renderable: usize = 0x80; // CStrongHandle<InfoForResourceTypeCRenderMesh>
            }
            // Parent: None
            // Fields count: 1
            pub mod BaseSceneObjectOverride_t {
                pub const m_nSceneObjectIndex: usize = 0x0; // uint32
            }
            // Parent: BaseSceneObjectOverride_t
            // Fields count: 4
            pub mod ExtraVertexStreamOverride_t {
                pub const m_nSubSceneObject: usize = 0x4; // uint32
                pub const m_nDrawCallIndex: usize = 0x8; // uint32
                pub const m_nAdditionalMeshDrawPrimitiveFlags: usize = 0xC; // MeshDrawPrimitiveFlags_t
                pub const m_extraBufferBinding: usize = 0x10; // CRenderBufferBinding
            }
            // Parent: BaseSceneObjectOverride_t
            // Fields count: 3
            pub mod MaterialOverride_t {
                pub const m_nSubSceneObject: usize = 0x4; // uint32
                pub const m_nDrawCallIndex: usize = 0x8; // uint32
                pub const m_pMaterial: usize = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            }
            // Parent: None
            // Fields count: 10
            pub mod InfoOverlayData_t {
                pub const m_transform: usize = 0x0; // matrix3x4_t
                pub const m_flWidth: usize = 0x30; // float32
                pub const m_flHeight: usize = 0x34; // float32
                pub const m_flDepth: usize = 0x38; // float32
                pub const m_vUVStart: usize = 0x3C; // Vector2D
                pub const m_vUVEnd: usize = 0x44; // Vector2D
                pub const m_pMaterial: usize = 0x50; // CStrongHandle<InfoForResourceTypeIMaterial2>
                pub const m_nRenderOrder: usize = 0x58; // int32
                pub const m_vTintColor: usize = 0x5C; // Vector4D
                pub const m_nSequenceOverride: usize = 0x6C; // int32
            }
            // Parent: None
            // Fields count: 5
            pub mod BakedLightingInfo_t {
                pub const m_nLightmapVersionNumber: usize = 0x0; // uint32
                pub const m_nLightmapGameVersionNumber: usize = 0x4; // uint32
                pub const m_vLightmapUvScale: usize = 0x8; // Vector2D
                pub const m_bHasLightmaps: usize = 0x10; // bool
                pub const m_lightMaps: usize = 0x18; // CUtlVector<CStrongHandle<InfoForResourceTypeCTextureBase>>
            }
            // Parent: None
            // Fields count: 4
            pub mod WorldNodeOnDiskBufferData_t {
                pub const m_nElementCount: usize = 0x0; // int32
                pub const m_nElementSizeInBytes: usize = 0x4; // int32
                pub const m_inputLayoutFields: usize = 0x8; // CUtlVector<RenderInputLayoutField_t>
                pub const m_pData: usize = 0x20; // CUtlVector<uint8>
            }
            // Parent: None
            // Fields count: 9
            pub mod AggregateMeshInfo_t {
                pub const m_nVisClusterMemberOffset: usize = 0x0; // uint32
                pub const m_nVisClusterMemberCount: usize = 0x4; // uint8
                pub const m_bHasTransform: usize = 0x5; // bool
                pub const m_nDrawCallIndex: usize = 0x6; // int16
                pub const m_nLODSetupIndex: usize = 0x8; // int16
                pub const m_nLODGroupMask: usize = 0xA; // uint8
                pub const m_vTintColor: usize = 0xB; // Color
                pub const m_objectFlags: usize = 0x10; // ObjectTypeFlags_t
                pub const m_nLightProbeVolumePrecomputedHandshake: usize = 0x14; // int32
            }
            // Parent: None
            // Fields count: 3
            pub mod AggregateLODSetup_t {
                pub const m_vLODOrigin: usize = 0x0; // 
                pub const m_fMaxObjectScale: usize = 0xC; // float32
                pub const m_fSwitchDistances: usize = 0x10; // CUtlVectorFixedGrowable<float32>
            }
            // Parent: None
            // Fields count: 8
            pub mod AggregateSceneObject_t {
                pub const m_allFlags: usize = 0x0; // ObjectTypeFlags_t
                pub const m_anyFlags: usize = 0x4; // ObjectTypeFlags_t
                pub const m_nLayer: usize = 0x8; // int16
                pub const m_aggregateMeshes: usize = 0x10; // CUtlVector<AggregateMeshInfo_t>
                pub const m_lodSetups: usize = 0x28; // CUtlVector<AggregateLODSetup_t>
                pub const m_visClusterMembership: usize = 0x40; // CUtlVector<uint16>
                pub const m_fragmentTransforms: usize = 0x58; // CUtlVector<matrix3x4_t>
                pub const m_renderableModel: usize = 0x70; // CStrongHandle<InfoForResourceTypeCModel>
            }
            // Parent: None
            // Fields count: 3
            pub mod ClutterTile_t {
                pub const m_nFirstInstance: usize = 0x0; // uint32
                pub const m_nLastInstance: usize = 0x4; // uint32
                pub const m_BoundsWs: usize = 0x8; // AABB_t
            }
            // Parent: None
            // Fields count: 8
            pub mod ClutterSceneObject_t {
                pub const m_Bounds: usize = 0x0; // AABB_t
                pub const m_flags: usize = 0x18; // ObjectTypeFlags_t
                pub const m_nLayer: usize = 0x1C; // int16
                pub const m_instancePositions: usize = 0x20; // CUtlVector<Vector>
                pub const m_instanceScales: usize = 0x50; // CUtlVector<float32>
                pub const m_instanceTintSrgb: usize = 0x68; // CUtlVector<Color>
                pub const m_tiles: usize = 0x80; // CUtlVector<ClutterTile_t>
                pub const m_renderableModel: usize = 0x98; // CStrongHandle<InfoForResourceTypeCModel>
            }
            // Parent: None
            // Fields count: 13
            pub mod WorldNode_t {
                pub const m_sceneObjects: usize = 0x0; // CUtlVector<SceneObject_t>
                pub const m_infoOverlays: usize = 0x18; // CUtlVector<InfoOverlayData_t>
                pub const m_visClusterMembership: usize = 0x30; // CUtlVector<uint16>
                pub const m_aggregateSceneObjects: usize = 0x48; // CUtlVector<AggregateSceneObject_t>
                pub const m_clutterSceneObjects: usize = 0x60; // CUtlVector<ClutterSceneObject_t>
                pub const m_extraVertexStreamOverrides: usize = 0x78; // CUtlVector<ExtraVertexStreamOverride_t>
                pub const m_materialOverrides: usize = 0x90; // CUtlVector<MaterialOverride_t>
                pub const m_extraVertexStreams: usize = 0xA8; // CUtlVector<WorldNodeOnDiskBufferData_t>
                pub const m_layerNames: usize = 0xC0; // CUtlVector<CUtlString>
                pub const m_sceneObjectLayerIndices: usize = 0xD8; // CUtlVector<uint8>
                pub const m_overlayLayerIndices: usize = 0xF0; // CUtlVector<uint8>
                pub const m_grassFileName: usize = 0x108; // CUtlString
                pub const m_nodeLightingInfo: usize = 0x110; // BakedLightingInfo_t
            }
            // Parent: None
            // Fields count: 5
            pub mod WorldBuilderParams_t {
                pub const m_flMinDrawVolumeSize: usize = 0x0; // float32
                pub const m_bBuildBakedLighting: usize = 0x4; // bool
                pub const m_vLightmapUvScale: usize = 0x8; // Vector2D
                pub const m_nCompileTimestamp: usize = 0x10; // uint64
                pub const m_nCompileFingerprint: usize = 0x18; // uint64
            }
            // Parent: None
            // Fields count: 7
            pub mod NodeData_t {
                pub const m_nParent: usize = 0x0; // int32
                pub const m_vOrigin: usize = 0x4; // 
                pub const m_vMinBounds: usize = 0x10; // 
                pub const m_vMaxBounds: usize = 0x1C; // 
                pub const m_flMinimumDistance: usize = 0x28; // float32
                pub const m_ChildNodeIndices: usize = 0x30; // CUtlVector<int32>
                pub const m_worldNodePrefix: usize = 0x48; // CUtlString
            }
            // Parent: None
            // Fields count: 4
            pub mod World_t {
                pub const m_builderParams: usize = 0x0; // WorldBuilderParams_t
                pub const m_worldNodes: usize = 0x20; // CUtlVector<NodeData_t>
                pub const m_worldLightingInfo: usize = 0x38; // BakedLightingInfo_t
                pub const m_entityLumps: usize = 0x68; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
            }
            // Parent: None
            // Fields count: 2
            pub mod VoxelVisBlockOffset_t {
                pub const m_nOffset: usize = 0x0; // uint32
                pub const m_nElementCount: usize = 0x4; // uint32
            }
            // Parent: None
            // Fields count: 13
            pub mod CVoxelVisibility {
                pub const m_nBaseClusterCount: usize = 0x40; // uint32
                pub const m_nPVSBytesPerCluster: usize = 0x44; // uint32
                pub const m_vMinBounds: usize = 0x48; // 
                pub const m_vMaxBounds: usize = 0x54; // 
                pub const m_flGridSize: usize = 0x60; // float32
                pub const m_nSkyVisibilityCluster: usize = 0x64; // uint32
                pub const m_nSunVisibilityCluster: usize = 0x68; // uint32
                pub const m_NodeBlock: usize = 0x6C; // VoxelVisBlockOffset_t
                pub const m_RegionBlock: usize = 0x74; // VoxelVisBlockOffset_t
                pub const m_EnclosedClusterListBlock: usize = 0x7C; // VoxelVisBlockOffset_t
                pub const m_EnclosedClustersBlock: usize = 0x84; // VoxelVisBlockOffset_t
                pub const m_MasksBlock: usize = 0x8C; // VoxelVisBlockOffset_t
                pub const m_nVisBlocks: usize = 0x94; // VoxelVisBlockOffset_t
            }
            // Parent: None
            // Fields count: 0
            pub mod VMapResourceData_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod InfoForResourceTypeVMapResourceData_t {
            }
            // Parent: None
            // Fields count: 0
            pub mod CEntityComponent {
            }
            // Parent: None
            // Fields count: 11
            pub mod CEntityIdentity {
                pub const m_nameStringableIndex: usize = 0x14; // int32
                pub const m_name: usize = 0x18; // CUtlSymbolLarge
                pub const m_designerName: usize = 0x20; // CUtlSymbolLarge
                pub const m_flags: usize = 0x30; // uint32
                pub const m_worldGroupId: usize = 0x38; // WorldGroupId_t
                pub const m_fDataObjectTypes: usize = 0x3C; // uint32
                pub const m_PathIndex: usize = 0x40; // ChangeAccessorFieldPathIndex_t
                pub const m_pPrev: usize = 0x58; // CEntityIdentity*
                pub const m_pNext: usize = 0x60; // CEntityIdentity*
                pub const m_pPrevByClass: usize = 0x68; // CEntityIdentity*
                pub const m_pNextByClass: usize = 0x70; // CEntityIdentity*
            }
            // Parent: None
            // Fields count: 4
            pub mod CEntityInstance {
                pub const m_iszPrivateVScripts: usize = 0x8; // CUtlSymbolLarge
                pub const m_pEntity: usize = 0x10; // CEntityIdentity*
                pub const m_CScriptComponent: usize = 0x28; // CScriptComponent*
                pub const m_bVisibleinPVS: usize = 0x30; // bool
            }
            // Parent: CEntityComponent
            // Fields count: 1
            pub mod CScriptComponent {
                pub const m_scriptClassName: usize = 0x30; // CUtlSymbolLarge
            }
        }
    }
}
