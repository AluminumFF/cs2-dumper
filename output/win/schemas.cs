// Generated using https://github.com/a2x/cs2-dumper
// 2024-03-29 13:45:50.255705100 UTC

namespace CS2Dumper.Schemas {
    // Module: animationsystem.dll
    // Classes count: 362
    // Enums count: 70
    public static class Animationsystem {
        // Alignment: 4
        // Members count: 2
        public enum MoodType_t : uint {
            eMoodType_Head = 0x0,
            eMoodType_Body = 0x1
        }
        // Alignment: 4
        // Members count: 6
        public enum AnimationProcessingType_t : uint {
            ANIMATION_PROCESSING_SERVER_SIMULATION = 0x0,
            ANIMATION_PROCESSING_CLIENT_SIMULATION = 0x1,
            ANIMATION_PROCESSING_CLIENT_PREDICTION = 0x2,
            ANIMATION_PROCESSING_CLIENT_INTERPOLATION = 0x3,
            ANIMATION_PROCESSING_CLIENT_RENDER = 0x4,
            ANIMATION_PROCESSING_MAX = 0x5
        }
        // Alignment: 4
        // Members count: 7
        public enum AnimationSnapshotType_t : uint {
            ANIMATION_SNAPSHOT_SERVER_SIMULATION = 0x0,
            ANIMATION_SNAPSHOT_CLIENT_SIMULATION = 0x1,
            ANIMATION_SNAPSHOT_CLIENT_PREDICTION = 0x2,
            ANIMATION_SNAPSHOT_CLIENT_INTERPOLATION = 0x3,
            ANIMATION_SNAPSHOT_CLIENT_RENDER = 0x4,
            ANIMATION_SNAPSHOT_FINAL_COMPOSITE = 0x5,
            ANIMATION_SNAPSHOT_MAX = 0x6
        }
        // Alignment: 4
        // Members count: 17
        public enum SeqCmd_t : uint {
            SeqCmd_Nop = 0x0,
            SeqCmd_LinearDelta = 0x1,
            SeqCmd_FetchFrameRange = 0x2,
            SeqCmd_Slerp = 0x3,
            SeqCmd_Add = 0x4,
            SeqCmd_Subtract = 0x5,
            SeqCmd_Scale = 0x6,
            SeqCmd_Copy = 0x7,
            SeqCmd_Blend = 0x8,
            SeqCmd_Worldspace = 0x9,
            SeqCmd_Sequence = 0xA,
            SeqCmd_FetchCycle = 0xB,
            SeqCmd_FetchFrame = 0xC,
            SeqCmd_IKLockInPlace = 0xD,
            SeqCmd_IKRestoreAll = 0xE,
            SeqCmd_ReverseSequence = 0xF,
            SeqCmd_Transform = 0x10
        }
        // Alignment: 4
        // Members count: 4
        public enum SeqPoseSetting_t : uint {
            SEQ_POSE_SETTING_CONSTANT = 0x0,
            SEQ_POSE_SETTING_ROTATION = 0x1,
            SEQ_POSE_SETTING_POSITION = 0x2,
            SEQ_POSE_SETTING_VELOCITY = 0x3
        }
        // Alignment: 4
        // Members count: 18
        public enum ParticleAttachment_t : uint {
            PATTACH_INVALID = 0xFFFFFFFFFFFFFFFF,
            PATTACH_ABSORIGIN = 0x0,
            PATTACH_ABSORIGIN_FOLLOW = 0x1,
            PATTACH_CUSTOMORIGIN = 0x2,
            PATTACH_CUSTOMORIGIN_FOLLOW = 0x3,
            PATTACH_POINT = 0x4,
            PATTACH_POINT_FOLLOW = 0x5,
            PATTACH_EYES_FOLLOW = 0x6,
            PATTACH_OVERHEAD_FOLLOW = 0x7,
            PATTACH_WORLDORIGIN = 0x8,
            PATTACH_ROOTBONE_FOLLOW = 0x9,
            PATTACH_RENDERORIGIN_FOLLOW = 0xA,
            PATTACH_MAIN_VIEW = 0xB,
            PATTACH_WATERWAKE = 0xC,
            PATTACH_CENTER_FOLLOW = 0xD,
            PATTACH_CUSTOM_GAME_STATE_1 = 0xE,
            PATTACH_HEALTHBAR = 0xF,
            MAX_PATTACH_TYPES = 0x10
        }
        // Alignment: 1
        // Members count: 9
        public enum AnimParamType_t : byte {
            ANIMPARAM_UNKNOWN = 0x0,
            ANIMPARAM_BOOL = 0x1,
            ANIMPARAM_ENUM = 0x2,
            ANIMPARAM_INT = 0x3,
            ANIMPARAM_FLOAT = 0x4,
            ANIMPARAM_VECTOR = 0x5,
            ANIMPARAM_QUATERNION = 0x6,
            ANIMPARAM_GLOBALSYMBOL = 0x7,
            ANIMPARAM_COUNT = 0x8
        }
        // Alignment: 4
        // Members count: 4
        public enum BoneTransformSpace_t : uint {
            BoneTransformSpace_Invalid = 0xFFFFFFFFFFFFFFFF,
            BoneTransformSpace_Parent = 0x0,
            BoneTransformSpace_Model = 0x1,
            BoneTransformSpace_World = 0x2
        }
        // Alignment: 4
        // Members count: 13
        public enum AnimParamButton_t : uint {
            ANIMPARAM_BUTTON_NONE = 0x0,
            ANIMPARAM_BUTTON_DPAD_UP = 0x1,
            ANIMPARAM_BUTTON_DPAD_RIGHT = 0x2,
            ANIMPARAM_BUTTON_DPAD_DOWN = 0x3,
            ANIMPARAM_BUTTON_DPAD_LEFT = 0x4,
            ANIMPARAM_BUTTON_A = 0x5,
            ANIMPARAM_BUTTON_B = 0x6,
            ANIMPARAM_BUTTON_X = 0x7,
            ANIMPARAM_BUTTON_Y = 0x8,
            ANIMPARAM_BUTTON_LEFT_SHOULDER = 0x9,
            ANIMPARAM_BUTTON_RIGHT_SHOULDER = 0xA,
            ANIMPARAM_BUTTON_LTRIGGER = 0xB,
            ANIMPARAM_BUTTON_RTRIGGER = 0xC
        }
        // Alignment: 4
        // Members count: 3
        public enum AnimParamNetworkSetting : uint {
            Auto = 0x0,
            AlwaysNetwork = 0x1,
            NeverNetwork = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum FootstepLandedFootSoundType_t : uint {
            FOOTSOUND_Left = 0x0,
            FOOTSOUND_Right = 0x1,
            FOOTSOUND_UseOverrideSound = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum AnimPoseControl : uint {
            NoPoseControl = 0x0,
            AbsolutePoseControl = 0x1,
            RelativePoseControl = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum RagdollPoseControl : uint {
            Absolute = 0x0,
            Relative = 0x1
        }
        // Alignment: 4
        // Members count: 5
        public enum VPhysXBodyPart_t__VPhysXFlagEnum_t : uint {
            FLAG_STATIC = 0x1,
            FLAG_KINEMATIC = 0x2,
            FLAG_JOINT = 0x4,
            FLAG_MASS = 0x8,
            FLAG_ALWAYS_DYNAMIC_ON_CLIENT = 0x10
        }
        // Alignment: 4
        // Members count: 4
        public enum VPhysXConstraintParams_t__EnumFlags0_t : uint {
            FLAG0_SHIFT_INTERPENETRATE = 0x0,
            FLAG0_SHIFT_CONSTRAIN = 0x1,
            FLAG0_SHIFT_BREAKABLE_FORCE = 0x2,
            FLAG0_SHIFT_BREAKABLE_TORQUE = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum VPhysXJoint_t__Flags_t : uint {
            JOINT_FLAGS_NONE = 0x0,
            JOINT_FLAGS_BODY1_FIXED = 0x1,
            JOINT_FLAGS_USE_BLOCK_SOLVER = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum VPhysXAggregateData_t__VPhysXFlagEnum_t : uint {
            FLAG_IS_POLYSOUP_GEOMETRY = 0x1,
            FLAG_LEVEL_COLLISION = 0x10,
            FLAG_IGNORE_SCALE_OBSOLETE_DO_NOT_USE = 0x20
        }
        // Alignment: 4
        // Members count: 8
        public enum MeshDrawPrimitiveFlags_t : uint {
            MESH_DRAW_FLAGS_NONE = 0x0,
            MESH_DRAW_FLAGS_USE_SHADOW_FAST_PATH = 0x1,
            MESH_DRAW_FLAGS_USE_COMPRESSED_NORMAL_TANGENT = 0x2,
            MESH_DRAW_INPUT_LAYOUT_IS_NOT_MATCHED_TO_MATERIAL = 0x8,
            MESH_DRAW_FLAGS_USE_COMPRESSED_PER_VERTEX_LIGHTING = 0x10,
            MESH_DRAW_FLAGS_USE_UNCOMPRESSED_PER_VERTEX_LIGHTING = 0x20,
            MESH_DRAW_FLAGS_CAN_BATCH_WITH_DYNAMIC_SHADER_CONSTANTS = 0x40,
            MESH_DRAW_FLAGS_DRAW_LAST = 0x80
        }
        // Alignment: 4
        // Members count: 22
        public enum ModelSkeletonData_t__BoneFlags_t : uint {
            FLAG_NO_BONE_FLAGS = 0x0,
            FLAG_BONEFLEXDRIVER = 0x4,
            FLAG_CLOTH = 0x8,
            FLAG_PHYSICS = 0x10,
            FLAG_ATTACHMENT = 0x20,
            FLAG_ANIMATION = 0x40,
            FLAG_MESH = 0x80,
            FLAG_HITBOX = 0x100,
            FLAG_BONE_USED_BY_VERTEX_LOD0 = 0x400,
            FLAG_BONE_USED_BY_VERTEX_LOD1 = 0x800,
            FLAG_BONE_USED_BY_VERTEX_LOD2 = 0x1000,
            FLAG_BONE_USED_BY_VERTEX_LOD3 = 0x2000,
            FLAG_BONE_USED_BY_VERTEX_LOD4 = 0x4000,
            FLAG_BONE_USED_BY_VERTEX_LOD5 = 0x8000,
            FLAG_BONE_USED_BY_VERTEX_LOD6 = 0x10000,
            FLAG_BONE_USED_BY_VERTEX_LOD7 = 0x20000,
            FLAG_BONE_MERGE_READ = 0x40000,
            FLAG_BONE_MERGE_WRITE = 0x80000,
            FLAG_ALL_BONE_FLAGS = 0xFFFFF,
            BLEND_PREALIGNED = 0x100000,
            FLAG_RIGIDLENGTH = 0x200000,
            FLAG_PROCEDURAL = 0x400000
        }
        // Alignment: 4
        // Members count: 15
        public enum PermModelInfo_t__FlagEnum : uint {
            FLAG_TRANSLUCENT = 0x1,
            FLAG_TRANSLUCENT_TWO_PASS = 0x2,
            FLAG_MODEL_IS_RUNTIME_COMBINED = 0x4,
            FLAG_SOURCE1_IMPORT = 0x8,
            FLAG_MODEL_PART_CHILD = 0x10,
            FLAG_NAV_GEN_NONE = 0x20,
            FLAG_NAV_GEN_HULL = 0x40,
            FLAG_NO_FORCED_FADE = 0x800,
            FLAG_HAS_SKINNED_MESHES = 0x400,
            FLAG_DO_NOT_CAST_SHADOWS = 0x20000,
            FLAG_FORCE_PHONEME_CROSSFADE = 0x1000,
            FLAG_NO_ANIM_EVENTS = 0x100000,
            FLAG_ANIMATION_DRIVEN_FLEXES = 0x200000,
            FLAG_IMPLICIT_BIND_POSE_SEQUENCE = 0x400000,
            FLAG_MODEL_DOC = 0x800000
        }
        // Alignment: 4
        // Members count: 4
        public enum ModelBoneFlexComponent_t : uint {
            MODEL_BONE_FLEX_INVALID = 0xFFFFFFFFFFFFFFFF,
            MODEL_BONE_FLEX_TX = 0x0,
            MODEL_BONE_FLEX_TY = 0x1,
            MODEL_BONE_FLEX_TZ = 0x2
        }
        // Alignment: 4
        // Members count: 5
        public enum ModelConfigAttachmentType_t : uint {
            MODEL_CONFIG_ATTACHMENT_INVALID = 0xFFFFFFFFFFFFFFFF,
            MODEL_CONFIG_ATTACHMENT_BONE_OR_ATTACHMENT = 0x0,
            MODEL_CONFIG_ATTACHMENT_ROOT_RELATIVE = 0x1,
            MODEL_CONFIG_ATTACHMENT_BONEMERGE = 0x2,
            MODEL_CONFIG_ATTACHMENT_COUNT = 0x3
        }
        // Alignment: 4
        // Members count: 26
        public enum FlexOpCode_t : uint {
            FLEX_OP_CONST = 0x1,
            FLEX_OP_FETCH1 = 0x2,
            FLEX_OP_FETCH2 = 0x3,
            FLEX_OP_ADD = 0x4,
            FLEX_OP_SUB = 0x5,
            FLEX_OP_MUL = 0x6,
            FLEX_OP_DIV = 0x7,
            FLEX_OP_NEG = 0x8,
            FLEX_OP_EXP = 0x9,
            FLEX_OP_OPEN = 0xA,
            FLEX_OP_CLOSE = 0xB,
            FLEX_OP_COMMA = 0xC,
            FLEX_OP_MAX = 0xD,
            FLEX_OP_MIN = 0xE,
            FLEX_OP_2WAY_0 = 0xF,
            FLEX_OP_2WAY_1 = 0x10,
            FLEX_OP_NWAY = 0x11,
            FLEX_OP_COMBO = 0x12,
            FLEX_OP_DOMINATE = 0x13,
            FLEX_OP_DME_LOWER_EYELID = 0x14,
            FLEX_OP_DME_UPPER_EYELID = 0x15,
            FLEX_OP_SQRT = 0x16,
            FLEX_OP_REMAPVALCLAMPED = 0x17,
            FLEX_OP_SIN = 0x18,
            FLEX_OP_COS = 0x19,
            FLEX_OP_ABS = 0x1A
        }
        // Alignment: 4
        // Members count: 4
        public enum MorphFlexControllerRemapType_t : uint {
            MORPH_FLEXCONTROLLER_REMAP_PASSTHRU = 0x0,
            MORPH_FLEXCONTROLLER_REMAP_2WAY = 0x1,
            MORPH_FLEXCONTROLLER_REMAP_NWAY = 0x2,
            MORPH_FLEXCONTROLLER_REMAP_EYELID = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum MorphBundleType_t : uint {
            MORPH_BUNDLE_TYPE_NONE = 0x0,
            MORPH_BUNDLE_TYPE_POSITION_SPEED = 0x1,
            MORPH_BUNDLE_TYPE_NORMAL_WRINKLE = 0x2,
            MORPH_BUNDLE_TYPE_COUNT = 0x3
        }
        // Alignment: 1
        // Members count: 5
        public enum MovementGait_t : byte {
            eInvalid = 0xFFFFFFFFFFFFFFFF,
            eWalk = 0x0,
            eJog = 0x1,
            eRun = 0x2,
            eSprint = 0x3
        }
        // Alignment: 1
        // Members count: 3
        public enum CNmBoneMask__WeightInfo_t : byte {
            Zero = 0x0,
            Mixed = 0x1,
            One = 0x2
        }
        // Alignment: 1
        // Members count: 4
        public enum NmFootPhase_t : byte {
            LeftFootDown = 0x0,
            RightFootPassing = 0x1,
            RightFootDown = 0x2,
            LeftFootPassing = 0x3
        }
        // Alignment: 1
        // Members count: 6
        public enum NmFootPhaseCondition_t : byte {
            LeftFootDown = 0x0,
            LeftFootPassing = 0x1,
            LeftPhase = 0x4,
            RightFootDown = 0x2,
            RightFootPassing = 0x3,
            RightPhase = 0x5
        }
        // Alignment: 1
        // Members count: 3
        public enum NmTransitionRule_t : byte {
            AllowTransition = 0x0,
            ConditionallyAllowTransition = 0x1,
            BlockTransition = 0x2
        }
        // Alignment: 1
        // Members count: 4
        public enum NmTransitionRuleCondition_t : byte {
            AnyAllowed = 0x0,
            FullyAllowed = 0x1,
            ConditionallyAllowed = 0x2,
            Blocked = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum NmFrameSnapEventMode_t : uint {
            Floor = 0x0,
            Round = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum IKChannelMode : uint {
            TwoBone = 0x0,
            TwoBone_Translate = 0x1,
            OneBone = 0x2,
            OneBone_Translate = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum EDemoBoneSelectionMode : uint {
            CaptureAllBones = 0x0,
            CaptureSelectedBones = 0x1
        }
        // Alignment: 4
        // Members count: 37
        public enum AnimValueSource : uint {
            MoveHeading = 0x0,
            MoveSpeed = 0x1,
            ForwardSpeed = 0x2,
            StrafeSpeed = 0x3,
            FacingHeading = 0x4,
            ManualFacingHeading = 0x5,
            LookHeading = 0x6,
            LookPitch = 0x7,
            LookDistance = 0x8,
            Parameter = 0x9,
            WayPointHeading = 0xA,
            WayPointDistance = 0xB,
            BoundaryRadius = 0xC,
            TargetMoveHeading = 0xD,
            TargetMoveSpeed = 0xE,
            AccelerationHeading = 0xF,
            AccelerationSpeed = 0x10,
            SlopeHeading = 0x11,
            SlopeAngle = 0x12,
            SlopePitch = 0x13,
            SlopeYaw = 0x14,
            GoalDistance = 0x15,
            AccelerationLeftRight = 0x16,
            AccelerationFrontBack = 0x17,
            RootMotionSpeed = 0x18,
            RootMotionTurnSpeed = 0x19,
            MoveHeadingRelativeToLookHeading = 0x1A,
            MaxMoveSpeed = 0x1B,
            FingerCurl_Thumb = 0x1C,
            FingerCurl_Index = 0x1D,
            FingerCurl_Middle = 0x1E,
            FingerCurl_Ring = 0x1F,
            FingerCurl_Pinky = 0x20,
            FingerSplay_Thumb_Index = 0x21,
            FingerSplay_Index_Middle = 0x22,
            FingerSplay_Middle_Ring = 0x23,
            FingerSplay_Ring_Pinky = 0x24
        }
        // Alignment: 4
        // Members count: 13
        public enum AnimVectorSource : uint {
            MoveDirection = 0x0,
            FacingDirection = 0x1,
            LookDirection = 0x2,
            VectorParameter = 0x3,
            WayPointDirection = 0x4,
            Acceleration = 0x5,
            SlopeNormal = 0x6,
            SlopeNormal_WorldSpace = 0x7,
            LookTarget = 0x8,
            LookTarget_WorldSpace = 0x9,
            WayPointPosition = 0xA,
            GoalPosition = 0xB,
            RootMotionVelocity = 0xC
        }
        // Alignment: 4
        // Members count: 3
        public enum DampingSpeedFunction : uint {
            NoDamping = 0x0,
            Constant = 0x1,
            Spring = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum AnimNodeNetworkMode : uint {
            ServerAuthoritative = 0x0,
            ClientSimulate = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum StateActionBehavior : uint {
            STATETAGBEHAVIOR_ACTIVE_WHILE_CURRENT = 0x0,
            STATETAGBEHAVIOR_FIRE_ON_ENTER = 0x1,
            STATETAGBEHAVIOR_FIRE_ON_EXIT = 0x2,
            STATETAGBEHAVIOR_FIRE_ON_ENTER_AND_EXIT = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum FieldNetworkOption : uint {
            Auto = 0x0,
            ForceEnable = 0x1,
            ForceDisable = 0x2
        }
        // Alignment: 4
        // Members count: 8
        public enum FootFallTagFoot_t : uint {
            FOOT1 = 0x0,
            FOOT2 = 0x1,
            FOOT3 = 0x2,
            FOOT4 = 0x3,
            FOOT5 = 0x4,
            FOOT6 = 0x5,
            FOOT7 = 0x6,
            FOOT8 = 0x7
        }
        // Alignment: 4
        // Members count: 2
        public enum MatterialAttributeTagType_t : uint {
            MATERIAL_ATTRIBUTE_TAG_VALUE = 0x0,
            MATERIAL_ATTRIBUTE_TAG_COLOR = 0x1
        }
        // Alignment: 1
        // Members count: 3
        public enum VelocityMetricMode : byte {
            DirectionOnly = 0x0,
            MagnitudeOnly = 0x1,
            DirectionAndMagnitude = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum AimMatrixBlendMode : uint {
            AimMatrixBlendMode_None = 0x0,
            AimMatrixBlendMode_Additive = 0x1,
            AimMatrixBlendMode_ModelSpaceAdditive = 0x2,
            AimMatrixBlendMode_BoneMask = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum BoneMaskBlendSpace : uint {
            BlendSpace_Parent = 0x0,
            BlendSpace_Model = 0x1,
            BlendSpace_Model_RotationOnly = 0x2,
            BlendSpace_Model_TranslationOnly = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum JiggleBoneSimSpace : uint {
            SimSpace_Local = 0x0,
            SimSpace_Model = 0x1,
            SimSpace_World = 0x2
        }
        // Alignment: 4
        // Members count: 7
        public enum SolveIKChainAnimNodeDebugSetting : uint {
            SOLVEIKCHAINANIMNODEDEBUGSETTING_None = 0x0,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_X_Axis_Circle = 0x1,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_Y_Axis_Circle = 0x2,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_Z_Axis_Circle = 0x3,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_Forward = 0x4,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_Up = 0x5,
            SOLVEIKCHAINANIMNODEDEBUGSETTING_Left = 0x6
        }
        // Alignment: 2
        // Members count: 3
        public enum AnimScriptType : ushort {
            ANIMSCRIPT_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
            ANIMSCRIPT_FUSE_GENERAL = 0x0,
            ANIMSCRIPT_FUSE_STATEMACHINE = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum BinaryNodeTiming : uint {
            UseChild1 = 0x0,
            UseChild2 = 0x1,
            SyncChildren = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum BinaryNodeChildOption : uint {
            Child1 = 0x0,
            Child2 = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum BlendKeyType : uint {
            BlendKey_UserValue = 0x0,
            BlendKey_Velocity = 0x1,
            BlendKey_Distance = 0x2,
            BlendKey_RemainingDistance = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum Blend2DMode : uint {
            Blend2DMode_General = 0x0,
            Blend2DMode_Directional = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum ChoiceMethod : uint {
            WeightedRandom = 0x0,
            WeightedRandomNoRepeat = 0x1,
            Iterate = 0x2,
            IterateRandom = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum ChoiceChangeMethod : uint {
            OnReset = 0x0,
            OnCycleEnd = 0x1,
            OnResetOrCycleEnd = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum ChoiceBlendMethod : uint {
            SingleBlendTime = 0x0,
            PerChoiceBlendTimes = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum FootLockSubVisualization : uint {
            FOOTLOCKSUBVISUALIZATION_ReachabilityAnalysis = 0x0,
            FOOTLOCKSUBVISUALIZATION_IKSolve = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum FootPinningTimingSource : uint {
            FootMotion = 0x0,
            Tag = 0x1,
            Parameter = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum StepPhase : uint {
            StepPhase_OnGround = 0x0,
            StepPhase_InAir = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum JumpCorrectionMethod : uint {
            ScaleMotion = 0x0,
            AddCorrectionDelta = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum SelectorTagBehavior_t : uint {
            SelectorTagBehavior_OnWhileCurrent = 0x0,
            SelectorTagBehavior_OffWhenFinished = 0x1,
            SelectorTagBehavior_OffBeforeFinished = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum StanceOverrideMode : uint {
            Sequence = 0x0,
            Node = 0x1
        }
        // Alignment: 4
        // Members count: 5
        public enum ResetCycleOption : uint {
            Beginning = 0x0,
            SameCycleAsSource = 0x1,
            InverseSourceCycle = 0x2,
            FixedValue = 0x3,
            SameTimeAsSource = 0x4
        }
        // Alignment: 4
        // Members count: 2
        public enum IkEndEffectorType : uint {
            IkEndEffector_Attachment = 0x0,
            IkEndEffector_Bone = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum IkTargetType : uint {
            IkTarget_Attachment = 0x0,
            IkTarget_Bone = 0x1,
            IkTarget_Parameter_ModelSpace = 0x2,
            IkTarget_Parameter_WorldSpace = 0x3
        }
        // Alignment: 1
        // Members count: 3
        public enum PoseType_t : byte {
            POSETYPE_STATIC = 0x0,
            POSETYPE_DYNAMIC = 0x1,
            POSETYPE_INVALID = 0xFF
        }
        // Alignment: 4
        // Members count: 5
        public enum CAnimationGraphVisualizerPrimitiveType : uint {
            ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Text = 0x0,
            ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Sphere = 0x1,
            ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Line = 0x2,
            ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Pie = 0x3,
            ANIMATIONGRAPHVISUALIZERPRIMITIVETYPE_Axis = 0x4
        }
        // Alignment: 4
        // Members count: 3
        public enum FacingMode : uint {
            FacingMode_Manual = 0x0,
            FacingMode_Path = 0x1,
            FacingMode_LookTarget = 0x2
        }
        // Alignment: 4
        // Members count: 6
        public enum IKSolverType : uint {
            IKSOLVER_Perlin = 0x0,
            IKSOLVER_TwoBone = 0x1,
            IKSOLVER_Fabrik = 0x2,
            IKSOLVER_DogLeg3Bone = 0x3,
            IKSOLVER_CCD = 0x4,
            IKSOLVER_COUNT = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum IKTargetSource : uint {
            IKTARGETSOURCE_Bone = 0x0,
            IKTARGETSOURCE_AnimgraphParameter = 0x1,
            IKTARGETSOURCE_COUNT = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum IKTargetCoordinateSystem : uint {
            IKTARGETCOORDINATESYSTEM_WorldSpace = 0x0,
            IKTARGETCOORDINATESYSTEM_ModelSpace = 0x1,
            IKTARGETCOORDINATESYSTEM_COUNT = 0x2
        }
        // Parent: None
        // Fields count: 2
        public static class MoodAnimation_t {
            public const nint m_sName = 0x0; // CUtlString
            public const nint m_flWeight = 0x8; // float32
        }
        // Parent: None
        // Fields count: 12
        public static class MoodAnimationLayer_t {
            public const nint m_sName = 0x0; // CUtlString
            public const nint m_bActiveListening = 0x8; // bool
            public const nint m_bActiveTalking = 0x9; // bool
            public const nint m_layerAnimations = 0x10; // CUtlVector<MoodAnimation_t>
            public const nint m_flIntensity = 0x28; // CRangeFloat
            public const nint m_flDurationScale = 0x30; // CRangeFloat
            public const nint m_bScaleWithInts = 0x38; // bool
            public const nint m_flNextStart = 0x3C; // CRangeFloat
            public const nint m_flStartOffset = 0x44; // CRangeFloat
            public const nint m_flEndOffset = 0x4C; // CRangeFloat
            public const nint m_flFadeIn = 0x54; // float32
            public const nint m_flFadeOut = 0x58; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CMoodVData {
            public const nint m_sModelName = 0x0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_nMoodType = 0xE0; // MoodType_t
            public const nint m_animationLayers = 0xE8; // CUtlVector<MoodAnimationLayer_t>
        }
        // Parent: None
        // Fields count: 6
        public static class AnimationDecodeDebugDumpElement_t {
            public const nint m_nEntityIndex = 0x0; // int32
            public const nint m_modelName = 0x8; // CUtlString
            public const nint m_poseParams = 0x10; // CUtlVector<CUtlString>
            public const nint m_decodeOps = 0x28; // CUtlVector<CUtlString>
            public const nint m_internalOps = 0x40; // CUtlVector<CUtlString>
            public const nint m_decodedAnims = 0x58; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Fields count: 2
        public static class AnimationDecodeDebugDump_t {
            public const nint m_processingType = 0x0; // AnimationProcessingType_t
            public const nint m_elems = 0x8; // CUtlVector<AnimationDecodeDebugDumpElement_t>
        }
        // Parent: None
        // Fields count: 9
        public static class AnimationSnapshotBase_t {
            public const nint m_flRealTime = 0x0; // float32
            public const nint m_rootToWorld = 0x10; // matrix3x4a_t
            public const nint m_bBonesInWorldSpace = 0x40; // bool
            public const nint m_boneSetupMask = 0x48; // CUtlVector<uint32>
            public const nint m_boneTransforms = 0x60; // CUtlVector<matrix3x4a_t>
            public const nint m_flexControllers = 0x78; // CUtlVector<float32>
            public const nint m_SnapshotType = 0x90; // AnimationSnapshotType_t
            public const nint m_bHasDecodeDump = 0x94; // bool
            public const nint m_DecodeDump = 0x98; // AnimationDecodeDebugDumpElement_t
        }
        // Parent: AnimationSnapshotBase_t
        // Fields count: 2
        public static class AnimationSnapshot_t {
            public const nint m_nEntIndex = 0x110; // int32
            public const nint m_modelName = 0x118; // CUtlString
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimBoneDifference {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_parent = 0x10; // CBufferString
            public const nint m_posError = 0x20; // 
            public const nint m_bHasRotation = 0x2C; // bool
            public const nint m_bHasMovement = 0x2D; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimMorphDifference {
            public const nint m_name = 0x0; // CBufferString
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimUserDifference {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_nType = 0x10; // int32
        }
        // Parent: None
        // Fields count: 7
        public static class CAnimEncodeDifference {
            public const nint m_boneArray = 0x0; // CUtlVector<CAnimBoneDifference>
            public const nint m_morphArray = 0x18; // CUtlVector<CAnimMorphDifference>
            public const nint m_userArray = 0x30; // CUtlVector<CAnimUserDifference>
            public const nint m_bHasRotationBitArray = 0x48; // CUtlVector<uint8>
            public const nint m_bHasMovementBitArray = 0x60; // CUtlVector<uint8>
            public const nint m_bHasMorphBitArray = 0x78; // CUtlVector<uint8>
            public const nint m_bHasUserBitArray = 0x90; // CUtlVector<uint8>
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimEventDefinition {
            public const nint m_nFrame = 0x8; // int32
            public const nint m_flCycle = 0xC; // float32
            public const nint m_EventData = 0x10; // KeyValues3
            public const nint m_sLegacyOptions = 0x20; // CBufferString
            public const nint m_sEventName = 0x30; // CGlobalSymbol
        }
        // Parent: None
        // Fields count: 7
        public static class CAnimMovement {
            public const nint endframe = 0x0; // int32
            public const nint motionflags = 0x4; // int32
            public const nint v0 = 0x8; // float32
            public const nint v1 = 0xC; // float32
            public const nint angle = 0x10; // float32
            public const nint vector = 0x14; // 
            public const nint position = 0x20; // 
        }
        // Parent: None
        // Fields count: 6
        public static class CAnimLocalHierarchy {
            public const nint m_sBone = 0x0; // CBufferString
            public const nint m_sNewParent = 0x10; // CBufferString
            public const nint m_nStartFrame = 0x20; // int32
            public const nint m_nPeakFrame = 0x24; // int32
            public const nint m_nTailFrame = 0x28; // int32
            public const nint m_nEndFrame = 0x2C; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class CAnimDecoder {
            public const nint m_szName = 0x0; // CBufferString
            public const nint m_nVersion = 0x10; // int32
            public const nint m_nType = 0x14; // int32
        }
        // Parent: None
        // Fields count: 4
        public static class CAnimFrameSegment {
            public const nint m_nUniqueFrameIndex = 0x0; // int32
            public const nint m_nLocalElementMasks = 0x4; // uint32
            public const nint m_nLocalChannel = 0x8; // int32
            public const nint m_container = 0x10; // CUtlBinaryBlock
        }
        // Parent: None
        // Fields count: 3
        public static class CAnimFrameBlockAnim {
            public const nint m_nStartFrame = 0x0; // int32
            public const nint m_nEndFrame = 0x4; // int32
            public const nint m_segmentIndexArray = 0x8; // CUtlVector<int32>
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimEncodedFrames {
            public const nint m_fileName = 0x0; // CBufferString
            public const nint m_nFrames = 0x10; // int32
            public const nint m_nFramesPerBlock = 0x14; // int32
            public const nint m_frameblockArray = 0x18; // CUtlVector<CAnimFrameBlockAnim>
            public const nint m_usageDifferences = 0x30; // CAnimEncodeDifference
        }
        // Parent: None
        // Fields count: 8
        public static class CAnimDesc_Flag {
            public const nint m_bLooping = 0x0; // bool
            public const nint m_bAllZeros = 0x1; // bool
            public const nint m_bHidden = 0x2; // bool
            public const nint m_bDelta = 0x3; // bool
            public const nint m_bLegacyWorldspace = 0x4; // bool
            public const nint m_bModelDoc = 0x5; // bool
            public const nint m_bImplicitSeqIgnoreDelta = 0x6; // bool
            public const nint m_bAnimGraphAdditive = 0x7; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimSequenceParams {
            public const nint m_flFadeInTime = 0x0; // float32
            public const nint m_flFadeOutTime = 0x4; // float32
        }
        // Parent: None
        // Fields count: 14
        public static class CAnimDesc {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_flags = 0x10; // CAnimDesc_Flag
            public const nint fps = 0x18; // float32
            public const nint m_Data = 0x20; // CAnimEncodedFrames
            public const nint m_movementArray = 0xF8; // CUtlVector<CAnimMovement>
            public const nint m_eventArray = 0x110; // CUtlVector<CAnimEventDefinition>
            public const nint m_activityArray = 0x128; // CUtlVector<CAnimActivity>
            public const nint m_hierarchyArray = 0x140; // CUtlVector<CAnimLocalHierarchy>
            public const nint framestalltime = 0x158; // float32
            public const nint m_vecRootMin = 0x15C; // 
            public const nint m_vecRootMax = 0x168; // 
            public const nint m_vecBoneWorldMin = 0x178; // CUtlVector<Vector>
            public const nint m_vecBoneWorldMax = 0x190; // CUtlVector<Vector>
            public const nint m_sequenceParams = 0x1A8; // CAnimSequenceParams
        }
        // Parent: None
        // Fields count: 4
        public static class CAnimActivity {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_nActivity = 0x10; // int32
            public const nint m_nFlags = 0x14; // int32
            public const nint m_nWeight = 0x18; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimData {
            public const nint m_name = 0x10; // CBufferString
            public const nint m_animArray = 0x20; // CUtlVector<CAnimDesc>
            public const nint m_decoderArray = 0x38; // CUtlVector<CAnimDecoder>
            public const nint m_nMaxUniqueFrameIndex = 0x50; // int32
            public const nint m_segmentArray = 0x58; // CUtlVector<CAnimFrameSegment>
        }
        // Parent: None
        // Fields count: 7
        public static class CAnimBone {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_parent = 0x10; // int32
            public const nint m_pos = 0x14; // 
            public const nint m_quat = 0x20; // QuaternionStorage
            public const nint m_scale = 0x30; // float32
            public const nint m_qAlignment = 0x34; // QuaternionStorage
            public const nint m_flags = 0x44; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimUser {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_nType = 0x10; // int32
        }
        // Parent: None
        // Fields count: 9
        public static class CAnimDataChannelDesc {
            public const nint m_szChannelClass = 0x0; // CBufferString
            public const nint m_szVariableName = 0x10; // CBufferString
            public const nint m_nFlags = 0x20; // int32
            public const nint m_nType = 0x24; // int32
            public const nint m_szGrouping = 0x28; // CBufferString
            public const nint m_szDescription = 0x38; // CBufferString
            public const nint m_szElementNameArray = 0x48; // CUtlVector<CBufferString>
            public const nint m_nElementIndexArray = 0x60; // CUtlVector<int32>
            public const nint m_nElementMaskArray = 0x78; // CUtlVector<uint32>
        }
        // Parent: None
        // Fields count: 6
        public static class CAnimKeyData {
            public const nint m_name = 0x0; // CBufferString
            public const nint m_boneArray = 0x10; // CUtlVector<CAnimBone>
            public const nint m_userArray = 0x28; // CUtlVector<CAnimUser>
            public const nint m_morphArray = 0x40; // CUtlVector<CBufferString>
            public const nint m_nChannelElements = 0x58; // int32
            public const nint m_dataChannelArray = 0x60; // CUtlVector<CAnimDataChannelDesc>
        }
        // Parent: None
        // Fields count: 7
        public static class CAnimationGroup {
            public const nint m_nFlags = 0x10; // uint32
            public const nint m_name = 0x18; // CBufferString
            public const nint m_localHAnimArray_Handle = 0x60; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimData>>
            public const nint m_includedGroupArray_Handle = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimationGroup>>
            public const nint m_directHSeqGroup_Handle = 0x90; // CStrongHandle<InfoForResourceTypeCSequenceGroupData>
            public const nint m_decodeKey = 0x98; // CAnimKeyData
            public const nint m_szScripts = 0x110; // CUtlVector<CBufferString>
        }
        // Parent: None
        // Fields count: 8
        public static class CSeqAutoLayerFlag {
            public const nint m_bPost = 0x0; // bool
            public const nint m_bSpline = 0x1; // bool
            public const nint m_bXFade = 0x2; // bool
            public const nint m_bNoBlend = 0x3; // bool
            public const nint m_bLocal = 0x4; // bool
            public const nint m_bPose = 0x5; // bool
            public const nint m_bFetchFrame = 0x6; // bool
            public const nint m_bSubtract = 0x7; // bool
        }
        // Parent: None
        // Fields count: 7
        public static class CSeqAutoLayer {
            public const nint m_nLocalReference = 0x0; // int16
            public const nint m_nLocalPose = 0x2; // int16
            public const nint m_flags = 0x4; // CSeqAutoLayerFlag
            public const nint m_start = 0xC; // float32
            public const nint m_peak = 0x10; // float32
            public const nint m_tail = 0x14; // float32
            public const nint m_end = 0x18; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class CSeqIKLock {
            public const nint m_flPosWeight = 0x0; // float32
            public const nint m_flAngleWeight = 0x4; // float32
            public const nint m_nLocalBone = 0x8; // int16
            public const nint m_bBonesOrientedAlongPositiveX = 0xA; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class CSeqBoneMaskList {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_nLocalBoneArray = 0x10; // CUtlVector<int16>
            public const nint m_flBoneWeightArray = 0x28; // CUtlVector<float32>
            public const nint m_flDefaultMorphCtrlWeight = 0x40; // float32
            public const nint m_morphCtrlWeightArray = 0x48; // CUtlVector<CUtlPair<CBufferString,float32>>
        }
        // Parent: None
        // Fields count: 5
        public static class CSeqScaleSet {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_bRootOffset = 0x10; // bool
            public const nint m_vRootOffset = 0x14; // 
            public const nint m_nLocalBoneArray = 0x20; // CUtlVector<int16>
            public const nint m_flBoneScaleArray = 0x38; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 6
        public static class CSeqMultiFetchFlag {
            public const nint m_bRealtime = 0x0; // bool
            public const nint m_bCylepose = 0x1; // bool
            public const nint m_b0D = 0x2; // bool
            public const nint m_b1D = 0x3; // bool
            public const nint m_b2D = 0x4; // bool
            public const nint m_b2D_TRI = 0x5; // bool
        }
        // Parent: None
        // Fields count: 10
        public static class CSeqMultiFetch {
            public const nint m_flags = 0x0; // CSeqMultiFetchFlag
            public const nint m_localReferenceArray = 0x8; // CUtlVector<int16>
            public const nint m_nGroupSize = 0x20; // int32[2]
            public const nint m_nLocalPose = 0x28; // int32[2]
            public const nint m_poseKeyArray0 = 0x30; // CUtlVector<float32>
            public const nint m_poseKeyArray1 = 0x48; // CUtlVector<float32>
            public const nint m_nLocalCyclePoseParameter = 0x60; // int32
            public const nint m_bCalculatePoseParameters = 0x64; // bool
            public const nint m_bFixedBlendWeight = 0x65; // bool
            public const nint m_flFixedBlendWeightVals = 0x68; // float32[2]
        }
        // Parent: None
        // Fields count: 11
        public static class CSeqSeqDescFlag {
            public const nint m_bLooping = 0x0; // bool
            public const nint m_bSnap = 0x1; // bool
            public const nint m_bAutoplay = 0x2; // bool
            public const nint m_bPost = 0x3; // bool
            public const nint m_bHidden = 0x4; // bool
            public const nint m_bMulti = 0x5; // bool
            public const nint m_bLegacyDelta = 0x6; // bool
            public const nint m_bLegacyWorldspace = 0x7; // bool
            public const nint m_bLegacyCyclepose = 0x8; // bool
            public const nint m_bLegacyRealtime = 0x9; // bool
            public const nint m_bModelDoc = 0xA; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CSeqTransition {
            public const nint m_flFadeInTime = 0x0; // float32
            public const nint m_flFadeOutTime = 0x4; // float32
        }
        // Parent: None
        // Fields count: 11
        public static class CSeqS1SeqDesc {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_flags = 0x10; // CSeqSeqDescFlag
            public const nint m_fetch = 0x20; // CSeqMultiFetch
            public const nint m_nLocalWeightlist = 0x90; // int32
            public const nint m_autoLayerArray = 0x98; // CUtlVector<CSeqAutoLayer>
            public const nint m_IKLockArray = 0xB0; // CUtlVector<CSeqIKLock>
            public const nint m_transition = 0xC8; // CSeqTransition
            public const nint m_SequenceKeys = 0xD0; // KeyValues3
            public const nint m_LegacyKeyValueText = 0xE0; // CBufferString
            public const nint m_activityArray = 0xF0; // CUtlVector<CAnimActivity>
            public const nint m_footMotion = 0x108; // CUtlVector<CFootMotion>
        }
        // Parent: None
        // Fields count: 6
        public static class CSeqSynthAnimDesc {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_flags = 0x10; // CSeqSeqDescFlag
            public const nint m_transition = 0x1C; // CSeqTransition
            public const nint m_nLocalBaseReference = 0x24; // int16
            public const nint m_nLocalBoneMask = 0x26; // int16
            public const nint m_activityArray = 0x28; // CUtlVector<CAnimActivity>
        }
        // Parent: None
        // Fields count: 9
        public static class CSeqCmdLayer {
            public const nint m_cmd = 0x0; // int16
            public const nint m_nLocalReference = 0x2; // int16
            public const nint m_nLocalBonemask = 0x4; // int16
            public const nint m_nDstResult = 0x6; // int16
            public const nint m_nSrcResult = 0x8; // int16
            public const nint m_bSpline = 0xA; // bool
            public const nint m_flVar1 = 0xC; // float32
            public const nint m_flVar2 = 0x10; // float32
            public const nint m_nLineNumber = 0x14; // int16
        }
        // Parent: None
        // Fields count: 8
        public static class CSeqPoseSetting {
            public const nint m_sPoseParameter = 0x0; // CBufferString
            public const nint m_sAttachment = 0x10; // CBufferString
            public const nint m_sReferenceSequence = 0x20; // CBufferString
            public const nint m_flValue = 0x30; // float32
            public const nint m_bX = 0x34; // bool
            public const nint m_bY = 0x35; // bool
            public const nint m_bZ = 0x36; // bool
            public const nint m_eType = 0x38; // int32
        }
        // Parent: None
        // Fields count: 12
        public static class CSeqCmdSeqDesc {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_flags = 0x10; // CSeqSeqDescFlag
            public const nint m_transition = 0x1C; // CSeqTransition
            public const nint m_nFrameRangeSequence = 0x24; // int16
            public const nint m_nFrameCount = 0x26; // int16
            public const nint m_flFPS = 0x28; // float32
            public const nint m_nSubCycles = 0x2C; // int16
            public const nint m_numLocalResults = 0x2E; // int16
            public const nint m_cmdLayerArray = 0x30; // CUtlVector<CSeqCmdLayer>
            public const nint m_eventArray = 0x48; // CUtlVector<CAnimEventDefinition>
            public const nint m_activityArray = 0x60; // CUtlVector<CAnimActivity>
            public const nint m_poseSettingArray = 0x78; // CUtlVector<CSeqPoseSetting>
        }
        // Parent: None
        // Fields count: 5
        public static class CSeqPoseParamDesc {
            public const nint m_sName = 0x0; // CBufferString
            public const nint m_flStart = 0x10; // float32
            public const nint m_flEnd = 0x14; // float32
            public const nint m_flLoop = 0x18; // float32
            public const nint m_bLooping = 0x1C; // bool
        }
        // Parent: None
        // Fields count: 14
        public static class CSequenceGroupData {
            public const nint m_sName = 0x10; // CBufferString
            public const nint m_nFlags = 0x20; // uint32
            public const nint m_localSequenceNameArray = 0x28; // CUtlVector<CBufferString>
            public const nint m_localS1SeqDescArray = 0x40; // CUtlVector<CSeqS1SeqDesc>
            public const nint m_localMultiSeqDescArray = 0x58; // CUtlVector<CSeqS1SeqDesc>
            public const nint m_localSynthAnimDescArray = 0x70; // CUtlVector<CSeqSynthAnimDesc>
            public const nint m_localCmdSeqDescArray = 0x88; // CUtlVector<CSeqCmdSeqDesc>
            public const nint m_localBoneMaskArray = 0xA0; // CUtlVector<CSeqBoneMaskList>
            public const nint m_localScaleSetArray = 0xB8; // CUtlVector<CSeqScaleSet>
            public const nint m_localBoneNameArray = 0xD0; // CUtlVector<CBufferString>
            public const nint m_localNodeName = 0xE8; // CBufferString
            public const nint m_localPoseParamArray = 0xF8; // CUtlVector<CSeqPoseParamDesc>
            public const nint m_keyValues = 0x110; // KeyValues3
            public const nint m_localIKAutoplayLockArray = 0x120; // CUtlVector<CSeqIKLock>
        }
        // Parent: None
        // Fields count: 17
        public static class CCompressorGroup {
            public const nint m_nTotalElementCount = 0x0; // int32
            public const nint m_szChannelClass = 0x8; // CUtlVector<char*>
            public const nint m_szVariableName = 0x20; // CUtlVector<char*>
            public const nint m_nType = 0x38; // CUtlVector<fieldtype_t>
            public const nint m_nFlags = 0x50; // CUtlVector<int32>
            public const nint m_szGrouping = 0x68; // CUtlVector<CUtlString>
            public const nint m_nCompressorIndex = 0x80; // CUtlVector<int32>
            public const nint m_szElementNames = 0x98; // CUtlVector<CUtlVector<char*>>
            public const nint m_nElementUniqueID = 0xB0; // CUtlVector<CUtlVector<int32>>
            public const nint m_nElementMask = 0xC8; // CUtlVector<uint32>
            public const nint m_vectorCompressor = 0xF8; // CUtlVector<CCompressor<Vector>*>
            public const nint m_quaternionCompressor = 0x110; // CUtlVector<CCompressor<QuaternionStorage>*>
            public const nint m_intCompressor = 0x128; // CUtlVector<CCompressor<int32>*>
            public const nint m_boolCompressor = 0x140; // CUtlVector<CCompressor<bool>*>
            public const nint m_colorCompressor = 0x158; // CUtlVector<CCompressor<Color>*>
            public const nint m_vector2DCompressor = 0x170; // CUtlVector<CCompressor<Vector2D>*>
            public const nint m_vector4DCompressor = 0x188; // CUtlVector<CCompressor<Vector4D>*>
        }
        // Parent: None
        // Fields count: 1
        public static class HSequence {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimEnum {
            public const nint m_value = 0x0; // uint8
        }
        // Parent: None
        // Fields count: 1
        public static class AnimNodeID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimNodeOutputID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimStateID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimParamID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimTagID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimComponentID {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class AnimScriptHandle {
            public const nint m_id = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimAttachment {
            public const nint m_influenceRotations = 0x0; // Quaternion[3]
            public const nint m_influenceOffsets = 0x30; // VectorAligned[3]
            public const nint m_influenceIndices = 0x60; // int32[3]
            public const nint m_influenceWeights = 0x6C; // float32[3]
            public const nint m_numInfluences = 0x78; // uint8
        }
        // Parent: None
        // Fields count: 5
        public static class VPhysics2ShapeDef_t {
            public const nint m_spheres = 0x0; // CUtlVector<RnSphereDesc_t>
            public const nint m_capsules = 0x18; // CUtlVector<RnCapsuleDesc_t>
            public const nint m_hulls = 0x30; // CUtlVector<RnHullDesc_t>
            public const nint m_meshes = 0x48; // CUtlVector<RnMeshDesc_t>
            public const nint m_CollisionAttributeIndices = 0x60; // CUtlVector<uint16>
        }
        // Parent: None
        // Fields count: 10
        public static class VPhysXBodyPart_t {
            public const nint m_nFlags = 0x0; // uint32
            public const nint m_flMass = 0x4; // float32
            public const nint m_rnShape = 0x8; // VPhysics2ShapeDef_t
            public const nint m_nCollisionAttributeIndex = 0x80; // uint16
            public const nint m_nReserved = 0x82; // uint16
            public const nint m_flInertiaScale = 0x84; // float32
            public const nint m_flLinearDamping = 0x88; // float32
            public const nint m_flAngularDamping = 0x8C; // float32
            public const nint m_bOverrideMassCenter = 0x90; // bool
            public const nint m_vMassCenterOverride = 0x94; // 
        }
        // Parent: None
        // Fields count: 8
        public static class VPhysXCollisionAttributes_t {
            public const nint m_CollisionGroup = 0x0; // uint32
            public const nint m_InteractAs = 0x8; // CUtlVector<uint32>
            public const nint m_InteractWith = 0x20; // CUtlVector<uint32>
            public const nint m_InteractExclude = 0x38; // CUtlVector<uint32>
            public const nint m_CollisionGroupString = 0x50; // CUtlString
            public const nint m_InteractAsStrings = 0x58; // CUtlVector<CUtlString>
            public const nint m_InteractWithStrings = 0x70; // CUtlVector<CUtlString>
            public const nint m_InteractExcludeStrings = 0x88; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Fields count: 2
        public static class VPhysXRange_t {
            public const nint m_flMin = 0x0; // float32
            public const nint m_flMax = 0x4; // float32
        }
        // Parent: None
        // Fields count: 46
        public static class VPhysXConstraintParams_t {
            public const nint m_nType = 0x0; // int8
            public const nint m_nTranslateMotion = 0x1; // int8
            public const nint m_nRotateMotion = 0x2; // int8
            public const nint m_nFlags = 0x3; // int8
            public const nint m_anchor = 0x4; // Vector[2]
            public const nint m_axes = 0x1C; // QuaternionStorage[2]
            public const nint m_maxForce = 0x3C; // float32
            public const nint m_maxTorque = 0x40; // float32
            public const nint m_linearLimitValue = 0x44; // float32
            public const nint m_linearLimitRestitution = 0x48; // float32
            public const nint m_linearLimitSpring = 0x4C; // float32
            public const nint m_linearLimitDamping = 0x50; // float32
            public const nint m_twistLowLimitValue = 0x54; // float32
            public const nint m_twistLowLimitRestitution = 0x58; // float32
            public const nint m_twistLowLimitSpring = 0x5C; // float32
            public const nint m_twistLowLimitDamping = 0x60; // float32
            public const nint m_twistHighLimitValue = 0x64; // float32
            public const nint m_twistHighLimitRestitution = 0x68; // float32
            public const nint m_twistHighLimitSpring = 0x6C; // float32
            public const nint m_twistHighLimitDamping = 0x70; // float32
            public const nint m_swing1LimitValue = 0x74; // float32
            public const nint m_swing1LimitRestitution = 0x78; // float32
            public const nint m_swing1LimitSpring = 0x7C; // float32
            public const nint m_swing1LimitDamping = 0x80; // float32
            public const nint m_swing2LimitValue = 0x84; // float32
            public const nint m_swing2LimitRestitution = 0x88; // float32
            public const nint m_swing2LimitSpring = 0x8C; // float32
            public const nint m_swing2LimitDamping = 0x90; // float32
            public const nint m_goalPosition = 0x94; // 
            public const nint m_goalOrientation = 0xA0; // QuaternionStorage
            public const nint m_goalAngularVelocity = 0xB0; // 
            public const nint m_driveSpringX = 0xBC; // float32
            public const nint m_driveSpringY = 0xC0; // float32
            public const nint m_driveSpringZ = 0xC4; // float32
            public const nint m_driveDampingX = 0xC8; // float32
            public const nint m_driveDampingY = 0xCC; // float32
            public const nint m_driveDampingZ = 0xD0; // float32
            public const nint m_driveSpringTwist = 0xD4; // float32
            public const nint m_driveSpringSwing = 0xD8; // float32
            public const nint m_driveSpringSlerp = 0xDC; // float32
            public const nint m_driveDampingTwist = 0xE0; // float32
            public const nint m_driveDampingSwing = 0xE4; // float32
            public const nint m_driveDampingSlerp = 0xE8; // float32
            public const nint m_solverIterationCount = 0xEC; // int32
            public const nint m_projectionLinearTolerance = 0xF0; // float32
            public const nint m_projectionAngularTolerance = 0xF4; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class VPhysXConstraint2_t {
            public const nint m_nFlags = 0x0; // uint32
            public const nint m_nParent = 0x4; // uint16
            public const nint m_nChild = 0x6; // uint16
            public const nint m_params = 0x8; // VPhysXConstraintParams_t
        }
        // Parent: None
        // Fields count: 24
        public static class VPhysXJoint_t {
            public const nint m_nType = 0x0; // uint16
            public const nint m_nBody1 = 0x2; // uint16
            public const nint m_nBody2 = 0x4; // uint16
            public const nint m_nFlags = 0x6; // uint16
            public const nint m_Frame1 = 0x10; // CTransform
            public const nint m_Frame2 = 0x30; // CTransform
            public const nint m_bEnableCollision = 0x50; // bool
            public const nint m_bEnableLinearLimit = 0x51; // bool
            public const nint m_LinearLimit = 0x54; // VPhysXRange_t
            public const nint m_bEnableLinearMotor = 0x5C; // bool
            public const nint m_vLinearTargetVelocity = 0x60; // 
            public const nint m_flMaxForce = 0x6C; // float32
            public const nint m_bEnableSwingLimit = 0x70; // bool
            public const nint m_SwingLimit = 0x74; // VPhysXRange_t
            public const nint m_bEnableTwistLimit = 0x7C; // bool
            public const nint m_TwistLimit = 0x80; // VPhysXRange_t
            public const nint m_bEnableAngularMotor = 0x88; // bool
            public const nint m_vAngularTargetVelocity = 0x8C; // 
            public const nint m_flMaxTorque = 0x98; // float32
            public const nint m_flLinearFrequency = 0x9C; // float32
            public const nint m_flLinearDampingRatio = 0xA0; // float32
            public const nint m_flAngularFrequency = 0xA4; // float32
            public const nint m_flAngularDampingRatio = 0xA8; // float32
            public const nint m_flFriction = 0xAC; // float32
        }
        // Parent: None
        // Fields count: 6
        public static class PhysSoftbodyDesc_t {
            public const nint m_ParticleBoneHash = 0x0; // CUtlVector<uint32>
            public const nint m_Particles = 0x18; // CUtlVector<RnSoftbodyParticle_t>
            public const nint m_Springs = 0x30; // CUtlVector<RnSoftbodySpring_t>
            public const nint m_Capsules = 0x48; // CUtlVector<RnSoftbodyCapsule_t>
            public const nint m_InitPose = 0x60; // CUtlVector<CTransform>
            public const nint m_ParticleBoneName = 0x78; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Fields count: 16
        public static class VPhysXAggregateData_t {
            public const nint m_nFlags = 0x0; // uint16
            public const nint m_nRefCounter = 0x2; // uint16
            public const nint m_bonesHash = 0x8; // CUtlVector<uint32>
            public const nint m_boneNames = 0x20; // CUtlVector<CUtlString>
            public const nint m_indexNames = 0x38; // CUtlVector<uint16>
            public const nint m_indexHash = 0x50; // CUtlVector<uint16>
            public const nint m_bindPose = 0x68; // CUtlVector<matrix3x4a_t>
            public const nint m_parts = 0x80; // CUtlVector<VPhysXBodyPart_t>
            public const nint m_constraints2 = 0x98; // CUtlVector<VPhysXConstraint2_t>
            public const nint m_joints = 0xB0; // CUtlVector<VPhysXJoint_t>
            public const nint m_pFeModel = 0xC8; // PhysFeModelDesc_t*
            public const nint m_boneParents = 0xD0; // CUtlVector<uint16>
            public const nint m_surfacePropertyHashes = 0xE8; // CUtlVector<uint32>
            public const nint m_collisionAttributes = 0x100; // CUtlVector<VPhysXCollisionAttributes_t>
            public const nint m_debugPartNames = 0x118; // CUtlVector<CUtlString>
            public const nint m_embeddedKeyvalues = 0x130; // CUtlString
        }
        // Parent: None
        // Fields count: 7
        public static class CPhysSurfacePropertiesPhysics {
            public const nint m_friction = 0x0; // float32
            public const nint m_elasticity = 0x4; // float32
            public const nint m_density = 0x8; // float32
            public const nint m_thickness = 0xC; // float32
            public const nint m_softContactFrequency = 0x10; // float32
            public const nint m_softContactDampingRatio = 0x14; // float32
            public const nint m_wheelDrag = 0x18; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class CPhysSurfacePropertiesAudio {
            public const nint m_reflectivity = 0x0; // float32
            public const nint m_hardnessFactor = 0x4; // float32
            public const nint m_roughnessFactor = 0x8; // float32
            public const nint m_roughThreshold = 0xC; // float32
            public const nint m_hardThreshold = 0x10; // float32
            public const nint m_hardVelocityThreshold = 0x14; // float32
            public const nint m_flStaticImpactVolume = 0x18; // float32
            public const nint m_flOcclusionFactor = 0x1C; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class CPhysSurfacePropertiesSoundNames {
            public const nint m_impactSoft = 0x0; // CUtlString
            public const nint m_impactHard = 0x8; // CUtlString
            public const nint m_scrapeSmooth = 0x10; // CUtlString
            public const nint m_scrapeRough = 0x18; // CUtlString
            public const nint m_bulletImpact = 0x20; // CUtlString
            public const nint m_rolling = 0x28; // CUtlString
            public const nint m_break = 0x30; // CUtlString
            public const nint m_strain = 0x38; // CUtlString
        }
        // Parent: None
        // Fields count: 8
        public static class CPhysSurfaceProperties {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nameHash = 0x8; // uint32
            public const nint m_baseNameHash = 0xC; // uint32
            public const nint m_bHidden = 0x18; // bool
            public const nint m_description = 0x20; // CUtlString
            public const nint m_physics = 0x28; // CPhysSurfacePropertiesPhysics
            public const nint m_audioSounds = 0x48; // CPhysSurfacePropertiesSoundNames
            public const nint m_audioParams = 0x88; // CPhysSurfacePropertiesAudio
        }
        // Parent: None
        // Fields count: 1
        public static class CVPhysXSurfacePropertiesList {
            public const nint m_surfacePropertiesList = 0x0; // CUtlVector<CPhysSurfaceProperties*>
        }
        // Parent: None
        // Fields count: 2
        public static class MaterialGroup_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_materials = 0x8; // CUtlVector<CStrongHandle<InfoForResourceTypeIMaterial2>>
        }
        // Parent: None
        // Fields count: 7
        public static class ModelSkeletonData_t {
            public const nint m_boneName = 0x0; // CUtlVector<CUtlString>
            public const nint m_nParent = 0x18; // CUtlVector<int16>
            public const nint m_boneSphere = 0x30; // CUtlVector<float32>
            public const nint m_nFlag = 0x48; // CUtlVector<uint32>
            public const nint m_bonePosParent = 0x60; // CUtlVector<Vector>
            public const nint m_boneRotParent = 0x78; // CUtlVector<QuaternionStorage>
            public const nint m_boneScaleParent = 0x90; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 10
        public static class PermModelInfo_t {
            public const nint m_nFlags = 0x0; // uint32
            public const nint m_vHullMin = 0x4; // 
            public const nint m_vHullMax = 0x10; // 
            public const nint m_vViewMin = 0x1C; // 
            public const nint m_vViewMax = 0x28; // 
            public const nint m_flMass = 0x34; // float32
            public const nint m_vEyePosition = 0x38; // 
            public const nint m_flMaxEyeDeflection = 0x44; // float32
            public const nint m_sSurfaceProperty = 0x48; // CUtlString
            public const nint m_keyValueText = 0x50; // CUtlString
        }
        // Parent: None
        // Fields count: 4
        public static class PermModelExtPart_t {
            public const nint m_Transform = 0x0; // CTransform
            public const nint m_Name = 0x20; // CUtlString
            public const nint m_nParent = 0x28; // int32
            public const nint m_refModel = 0x30; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: None
        // Fields count: 5
        public static class ModelBoneFlexDriverControl_t {
            public const nint m_nBoneComponent = 0x0; // ModelBoneFlexComponent_t
            public const nint m_flexController = 0x8; // CUtlString
            public const nint m_flexControllerToken = 0x10; // uint32
            public const nint m_flMin = 0x14; // float32
            public const nint m_flMax = 0x18; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class ModelBoneFlexDriver_t {
            public const nint m_boneName = 0x0; // CUtlString
            public const nint m_boneNameToken = 0x8; // uint32
            public const nint m_controls = 0x10; // CUtlVector<ModelBoneFlexDriverControl_t>
        }
        // Parent: None
        // Fields count: 2
        public static class PermModelDataAnimatedMaterialAttribute_t {
            public const nint m_AttributeName = 0x0; // CUtlString
            public const nint m_nNumChannels = 0x8; // int32
        }
        // Parent: None
        // Fields count: 23
        public static class PermModelData_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_modelInfo = 0x8; // PermModelInfo_t
            public const nint m_ExtParts = 0x60; // CUtlVector<PermModelExtPart_t>
            public const nint m_refMeshes = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCRenderMesh>>
            public const nint m_refMeshGroupMasks = 0x90; // CUtlVector<uint64>
            public const nint m_refPhysGroupMasks = 0xA8; // CUtlVector<uint64>
            public const nint m_refLODGroupMasks = 0xC0; // CUtlVector<uint8>
            public const nint m_lodGroupSwitchDistances = 0xD8; // CUtlVector<float32>
            public const nint m_refPhysicsData = 0xF0; // CUtlVector<CStrongHandle<InfoForResourceTypeCPhysAggregateData>>
            public const nint m_refPhysicsHitboxData = 0x108; // CUtlVector<CStrongHandle<InfoForResourceTypeCPhysAggregateData>>
            public const nint m_refAnimGroups = 0x120; // CUtlVector<CStrongHandle<InfoForResourceTypeCAnimationGroup>>
            public const nint m_refSequenceGroups = 0x138; // CUtlVector<CStrongHandle<InfoForResourceTypeCSequenceGroupData>>
            public const nint m_meshGroups = 0x150; // CUtlVector<CUtlString>
            public const nint m_materialGroups = 0x168; // CUtlVector<MaterialGroup_t>
            public const nint m_nDefaultMeshGroupMask = 0x180; // uint64
            public const nint m_modelSkeleton = 0x188; // ModelSkeletonData_t
            public const nint m_remappingTable = 0x230; // CUtlVector<int16>
            public const nint m_remappingTableStarts = 0x248; // CUtlVector<uint16>
            public const nint m_boneFlexDrivers = 0x260; // CUtlVector<ModelBoneFlexDriver_t>
            public const nint m_pModelConfigList = 0x278; // CModelConfigList*
            public const nint m_BodyGroupsHiddenInTools = 0x280; // CUtlVector<CUtlString>
            public const nint m_refAnimIncludeModels = 0x298; // CUtlVector<CStrongHandle<InfoForResourceTypeCModel>>
            public const nint m_AnimatedMaterialAttributes = 0x2B0; // CUtlVector<PermModelDataAnimatedMaterialAttribute_t>
        }
        // Parent: None
        // Fields count: 1
        public static class AttachmentHandle_t {
            public const nint m_Value = 0x0; // uint8
        }
        // Parent: None
        // Fields count: 2
        public static class CModelConfigElement {
            public const nint m_ElementName = 0x8; // CUtlString
            public const nint m_NestedElements = 0x10; // CUtlVector<CModelConfigElement*>
        }
        // Parent: CModelConfigElement
        // Fields count: 14
        public static class CModelConfigElement_AttachedModel {
            public const nint m_InstanceName = 0x48; // CUtlString
            public const nint m_EntityClass = 0x50; // CUtlString
            public const nint m_hModel = 0x58; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_vOffset = 0x60; // 
            public const nint m_aAngOffset = 0x6C; // QAngle
            public const nint m_AttachmentName = 0x78; // CUtlString
            public const nint m_LocalAttachmentOffsetName = 0x80; // CUtlString
            public const nint m_AttachmentType = 0x88; // ModelConfigAttachmentType_t
            public const nint m_bBoneMergeFlex = 0x8C; // bool
            public const nint m_bUserSpecifiedColor = 0x8D; // bool
            public const nint m_bUserSpecifiedMaterialGroup = 0x8E; // bool
            public const nint m_bAcceptParentMaterialDrivenDecals = 0x8F; // bool
            public const nint m_BodygroupOnOtherModels = 0x90; // CUtlString
            public const nint m_MaterialGroupOnOtherModels = 0x98; // CUtlString
        }
        // Parent: CModelConfigElement
        // Fields count: 1
        public static class CModelConfigElement_UserPick {
            public const nint m_Choices = 0x48; // CUtlVector<CUtlString>
        }
        // Parent: CModelConfigElement
        // Fields count: 2
        public static class CModelConfigElement_RandomPick {
            public const nint m_Choices = 0x48; // CUtlVector<CUtlString>
            public const nint m_ChoiceWeights = 0x60; // CUtlVector<float32>
        }
        // Parent: CModelConfigElement
        // Fields count: 1
        public static class CModelConfigElement_SetMaterialGroup {
            public const nint m_MaterialGroupName = 0x48; // CUtlString
        }
        // Parent: CModelConfigElement
        // Fields count: 1
        public static class CModelConfigElement_SetMaterialGroupOnAttachedModels {
            public const nint m_MaterialGroupName = 0x48; // CUtlString
        }
        // Parent: CModelConfigElement
        // Fields count: 1
        public static class CModelConfigElement_SetRenderColor {
            public const nint m_Color = 0x48; // Color
        }
        // Parent: CModelConfigElement
        // Fields count: 1
        public static class CModelConfigElement_RandomColor {
            public const nint m_Gradient = 0x48; // CColorGradient
        }
        // Parent: CModelConfigElement
        // Fields count: 2
        public static class CModelConfigElement_SetBodygroup {
            public const nint m_GroupName = 0x48; // CUtlString
            public const nint m_nChoice = 0x50; // int32
        }
        // Parent: CModelConfigElement
        // Fields count: 2
        public static class CModelConfigElement_SetBodygroupOnAttachedModels {
            public const nint m_GroupName = 0x48; // CUtlString
            public const nint m_nChoice = 0x50; // int32
        }
        // Parent: CModelConfigElement
        // Fields count: 2
        public static class CModelConfigElement_Command {
            public const nint m_Command = 0x48; // CUtlString
            public const nint m_Args = 0x50; // KeyValues3
        }
        // Parent: None
        // Fields count: 3
        public static class CModelConfig {
            public const nint m_ConfigName = 0x0; // CUtlString
            public const nint m_Elements = 0x8; // CUtlVector<CModelConfigElement*>
            public const nint m_bTopLevel = 0x20; // bool
        }
        // Parent: None
        // Fields count: 3
        public static class CModelConfigList {
            public const nint m_bHideMaterialGroupInTools = 0x0; // bool
            public const nint m_bHideRenderColorInTools = 0x1; // bool
            public const nint m_Configs = 0x8; // CUtlVector<CModelConfig*>
        }
        // Parent: None
        // Fields count: 2
        public static class CRenderBufferBinding {
            public const nint m_hBuffer = 0x0; // uint64
            public const nint m_nBindOffsetBytes = 0x10; // uint32
        }
        // Parent: None
        // Fields count: 2
        public static class SkeletonBoneBounds_t {
            public const nint m_vecCenter = 0x0; // 
            public const nint m_vecSize = 0xC; // 
        }
        // Parent: None
        // Fields count: 5
        public static class RenderSkeletonBone_t {
            public const nint m_boneName = 0x0; // CUtlString
            public const nint m_parentName = 0x8; // CUtlString
            public const nint m_invBindPose = 0x10; // matrix3x4_t
            public const nint m_bbox = 0x40; // SkeletonBoneBounds_t
            public const nint m_flSphereRadius = 0x58; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CRenderSkeleton {
            public const nint m_bones = 0x0; // CUtlVector<RenderSkeletonBone_t>
            public const nint m_boneParents = 0x30; // CUtlVector<int32>
            public const nint m_nBoneWeightCount = 0x48; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class CDrawCullingData {
            public const nint m_vConeApex = 0x0; // 
            public const nint m_ConeAxis = 0xC; // int8[3]
            public const nint m_ConeCutoff = 0xF; // int8
        }
        // Parent: None
        // Fields count: 12
        public static class CMaterialDrawDescriptor {
            public const nint m_nPrimitiveType = 0x0; // RenderPrimitiveType_t
            public const nint m_nBaseVertex = 0x4; // int32
            public const nint m_nVertexCount = 0x8; // int32
            public const nint m_nStartIndex = 0xC; // int32
            public const nint m_nIndexCount = 0x10; // int32
            public const nint m_flUvDensity = 0x14; // float32
            public const nint m_vTintColor = 0x18; // 
            public const nint m_flAlpha = 0x24; // float32
            public const nint m_nFirstMeshlet = 0x2C; // uint32
            public const nint m_nNumMeshlets = 0x30; // uint16
            public const nint m_indexBuffer = 0xB8; // CRenderBufferBinding
            public const nint m_material = 0xE0; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: None
        // Fields count: 2
        public static class CMeshletDescriptor {
            public const nint m_PackedAABB = 0x0; // PackedAABB_t
            public const nint m_CullingData = 0x8; // CDrawCullingData
        }
        // Parent: None
        // Fields count: 6
        public static class CSceneObjectData {
            public const nint m_vMinBounds = 0x0; // 
            public const nint m_vMaxBounds = 0xC; // 
            public const nint m_drawCalls = 0x18; // CUtlVector<CMaterialDrawDescriptor>
            public const nint m_drawBounds = 0x30; // CUtlVector<AABB_t>
            public const nint m_meshlets = 0x48; // CUtlVector<CMeshletDescriptor>
            public const nint m_vTintColor = 0x60; // Vector4D
        }
        // Parent: None
        // Fields count: 8
        public static class CAttachment {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_influenceNames = 0x8; // CUtlString[3]
            public const nint m_vInfluenceRotations = 0x20; // Quaternion[3]
            public const nint m_vInfluenceOffsets = 0x50; // Vector[3]
            public const nint m_influenceWeights = 0x74; // float32[3]
            public const nint m_bInfluenceRootTransform = 0x80; // bool[3]
            public const nint m_nInfluences = 0x83; // uint8
            public const nint m_bIgnoreRotation = 0x84; // bool
        }
        // Parent: None
        // Fields count: 13
        public static class CHitBox {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_sSurfaceProperty = 0x8; // CUtlString
            public const nint m_sBoneName = 0x10; // CUtlString
            public const nint m_vMinBounds = 0x18; // 
            public const nint m_vMaxBounds = 0x24; // 
            public const nint m_flShapeRadius = 0x30; // float32
            public const nint m_nBoneNameHash = 0x34; // uint32
            public const nint m_nGroupId = 0x38; // int32
            public const nint m_nShapeType = 0x3C; // uint8
            public const nint m_bTranslationOnly = 0x3D; // bool
            public const nint m_CRC = 0x40; // uint32
            public const nint m_cRenderColor = 0x44; // Color
            public const nint m_nHitBoxIndex = 0x48; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class CHitBoxSet {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_HitBoxes = 0x10; // CUtlVector<CHitBox>
            public const nint m_SourceFilename = 0x28; // CUtlString
        }
        // Parent: None
        // Fields count: 1
        public static class CHitBoxSetList {
            public const nint m_HitBoxSets = 0x0; // CUtlVector<CHitBoxSet>
        }
        // Parent: None
        // Fields count: 4
        public static class DynamicMeshDeformParams_t {
            public const nint m_flTensionCompressScale = 0x0; // float32
            public const nint m_flTensionStretchScale = 0x4; // float32
            public const nint m_bRecomputeSmoothNormalsAfterAnimation = 0x8; // bool
            public const nint m_bComputeDynamicMeshTensionAfterAnimation = 0x9; // bool
        }
        // Parent: None
        // Fields count: 7
        public static class RenderHairStrandInfo_t {
            public const nint m_nGuideIdx = 0x0; // uint32[3]
            public const nint m_nBaseTriIdx = 0xC; // uint32
            public const nint m_vGuideBarycentric = 0x10; // Vector2D
            public const nint m_vBaseBarycentric = 0x18; // Vector2D
            public const nint m_vRootOffset_flLengthScale = 0x20; // uint16[4]
            public const nint m_nPackedBaseMeshUv = 0x28; // uint32
            public const nint m_nPad = 0x2C; // uint32
        }
        // Parent: None
        // Fields count: 7
        public static class CRenderGroom {
            public const nint m_nSegmentsPerHairStrand = 0x0; // int32
            public const nint m_nGuideHairCount = 0x4; // int32
            public const nint m_nHairCount = 0x8; // int32
            public const nint m_nGroomGroupID = 0xC; // int32
            public const nint m_nAttachBoneIdx = 0x10; // int32
            public const nint m_hairInfoBufferData = 0x18; // CUtlBinaryBlock
            public const nint m_hairs = 0x30; // CUtlVector<RenderHairStrandInfo_t>
        }
        // Parent: None
        // Fields count: 5
        public static class CRenderMesh {
            public const nint m_sceneObjects = 0x10; // CUtlVectorFixedGrowable<CSceneObjectData>
            public const nint m_constraints = 0xA0; // CUtlVector<CBaseConstraint*>
            public const nint m_skeleton = 0xB8; // CRenderSkeleton
            public const nint m_meshDeformParams = 0x1E0; // DynamicMeshDeformParams_t
            public const nint m_pGroomData = 0x1F0; // CRenderGroom*
        }
        // Parent: None
        // Fields count: 6
        public static class CConstraintTarget {
            public const nint m_qOffset = 0x20; // Quaternion
            public const nint m_vOffset = 0x30; // 
            public const nint m_nBoneHash = 0x3C; // uint32
            public const nint m_sName = 0x40; // CUtlString
            public const nint m_flWeight = 0x48; // float32
            public const nint m_bIsAttachment = 0x59; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class CConstraintSlave {
            public const nint m_qBaseOrientation = 0x0; // Quaternion
            public const nint m_vBasePosition = 0x10; // 
            public const nint m_nBoneHash = 0x1C; // uint32
            public const nint m_flWeight = 0x20; // float32
            public const nint m_sName = 0x28; // CUtlString
        }
        // Parent: None
        // Fields count: 0
        public static class CBoneConstraintBase {
        }
        // Parent: CBoneConstraintBase
        // Fields count: 4
        public static class CBaseConstraint {
            public const nint m_name = 0x28; // CUtlString
            public const nint m_vUpVector = 0x30; // 
            public const nint m_slaves = 0x40; // CUtlVector<CConstraintSlave>
            public const nint m_targets = 0x58; // CUtlVector<CConstraintTarget>
        }
        // Parent: CBaseConstraint
        // Fields count: 0
        public static class CPointConstraint {
        }
        // Parent: CBaseConstraint
        // Fields count: 0
        public static class COrientConstraint {
        }
        // Parent: CBaseConstraint
        // Fields count: 2
        public static class CAimConstraint {
            public const nint m_qAimOffset = 0x70; // Quaternion
            public const nint m_nUpType = 0x80; // uint32
        }
        // Parent: CBaseConstraint
        // Fields count: 3
        public static class CTwistConstraint {
            public const nint m_bInverse = 0x70; // bool
            public const nint m_qParentBindRotation = 0x80; // Quaternion
            public const nint m_qChildBindRotation = 0x90; // Quaternion
        }
        // Parent: CBaseConstraint
        // Fields count: 2
        public static class CTiltTwistConstraint {
            public const nint m_nTargetAxis = 0x70; // int32
            public const nint m_nSlaveAxis = 0x74; // int32
        }
        // Parent: CBaseConstraint
        // Fields count: 4
        public static class CMorphConstraint {
            public const nint m_sTargetMorph = 0x70; // CUtlString
            public const nint m_nSlaveChannel = 0x78; // int32
            public const nint m_flMin = 0x7C; // float32
            public const nint m_flMax = 0x80; // float32
        }
        // Parent: CBaseConstraint
        // Fields count: 0
        public static class CParentConstraint {
        }
        // Parent: CBoneConstraintBase
        // Fields count: 5
        public static class CBoneConstraintPoseSpaceMorph {
            public const nint m_sBoneName = 0x28; // CUtlString
            public const nint m_sAttachmentName = 0x30; // CUtlString
            public const nint m_outputMorph = 0x38; // CUtlVector<CUtlString>
            public const nint m_inputList = 0x50; // CUtlVector<CBoneConstraintPoseSpaceMorph::Input_t>
            public const nint m_bClamp = 0x68; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CBoneConstraintPoseSpaceMorph__Input_t {
            public const nint m_inputValue = 0x0; // 
            public const nint m_outputWeightList = 0x10; // CUtlVector<float32>
        }
        // Parent: CBaseConstraint
        // Fields count: 1
        public static class CBoneConstraintPoseSpaceBone {
            public const nint m_inputList = 0x70; // CUtlVector<CBoneConstraintPoseSpaceBone::Input_t>
        }
        // Parent: None
        // Fields count: 2
        public static class CBoneConstraintPoseSpaceBone__Input_t {
            public const nint m_inputValue = 0x0; // 
            public const nint m_outputTransformList = 0x10; // CUtlVector<CTransform>
        }
        // Parent: CBoneConstraintBase
        // Fields count: 4
        public static class CBoneConstraintDotToMorph {
            public const nint m_sBoneName = 0x28; // CUtlString
            public const nint m_sTargetBoneName = 0x30; // CUtlString
            public const nint m_sMorphChannelName = 0x38; // CUtlString
            public const nint m_flRemap = 0x40; // float32[4]
        }
        // Parent: None
        // Fields count: 2
        public static class CFlexOp {
            public const nint m_OpCode = 0x0; // FlexOpCode_t
            public const nint m_Data = 0x4; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CFlexRule {
            public const nint m_nFlex = 0x0; // int32
            public const nint m_FlexOps = 0x8; // CUtlVector<CFlexOp>
        }
        // Parent: None
        // Fields count: 1
        public static class CFlexDesc {
            public const nint m_szFacs = 0x0; // CUtlString
        }
        // Parent: None
        // Fields count: 4
        public static class CFlexController {
            public const nint m_szName = 0x0; // CUtlString
            public const nint m_szType = 0x8; // CUtlString
            public const nint min = 0x10; // float32
            public const nint max = 0x14; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class CMorphBundleData {
            public const nint m_flULeftSrc = 0x0; // float32
            public const nint m_flVTopSrc = 0x4; // float32
            public const nint m_offsets = 0x8; // CUtlVector<float32>
            public const nint m_ranges = 0x20; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 5
        public static class CMorphRectData {
            public const nint m_nXLeftDst = 0x0; // int16
            public const nint m_nYTopDst = 0x2; // int16
            public const nint m_flUWidthSrc = 0x4; // float32
            public const nint m_flVHeightSrc = 0x8; // float32
            public const nint m_bundleDatas = 0x10; // CUtlVector<CMorphBundleData>
        }
        // Parent: None
        // Fields count: 2
        public static class CMorphData {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_morphRectDatas = 0x8; // CUtlVector<CMorphRectData>
        }
        // Parent: None
        // Fields count: 8
        public static class CMorphSetData {
            public const nint m_nWidth = 0x10; // int32
            public const nint m_nHeight = 0x14; // int32
            public const nint m_bundleTypes = 0x18; // CUtlVector<MorphBundleType_t>
            public const nint m_morphDatas = 0x30; // CUtlVector<CMorphData>
            public const nint m_pTextureAtlas = 0x48; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_FlexDesc = 0x50; // CUtlVector<CFlexDesc>
            public const nint m_FlexControllers = 0x68; // CUtlVector<CFlexController>
            public const nint m_FlexRules = 0x80; // CUtlVector<CFlexRule>
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimFoot {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_vBallOffset = 0x8; // 
            public const nint m_vHeelOffset = 0x14; // 
            public const nint m_ankleBoneIndex = 0x20; // int32
            public const nint m_toeBoneIndex = 0x24; // int32
        }
        // Parent: None
        // Fields count: 8
        public static class CAnimSkeleton {
            public const nint m_localSpaceTransforms = 0x10; // CUtlVector<CTransform>
            public const nint m_modelSpaceTransforms = 0x28; // CUtlVector<CTransform>
            public const nint m_boneNames = 0x40; // CUtlVector<CUtlString>
            public const nint m_children = 0x58; // CUtlVector<CUtlVector<int32>>
            public const nint m_parents = 0x70; // CUtlVector<int32>
            public const nint m_feet = 0x88; // CUtlVector<CAnimFoot>
            public const nint m_morphNames = 0xA0; // CUtlVector<CUtlString>
            public const nint m_lodBoneCounts = 0xB8; // CUtlVector<int32>
        }
        // Parent: None
        // Fields count: 9
        public static class CFootDefinition {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_ankleBoneName = 0x8; // CUtlString
            public const nint m_toeBoneName = 0x10; // CUtlString
            public const nint m_vBallOffset = 0x18; // 
            public const nint m_vHeelOffset = 0x24; // 
            public const nint m_flFootLength = 0x30; // float32
            public const nint m_flBindPoseDirectionMS = 0x34; // float32
            public const nint m_flTraceHeight = 0x38; // float32
            public const nint m_flTraceRadius = 0x3C; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CCycleBase {
            public const nint m_flCycle = 0x0; // float32
        }
        // Parent: CCycleBase
        // Fields count: 0
        public static class CAnimCycle {
        }
        // Parent: CCycleBase
        // Fields count: 0
        public static class CFootCycle {
        }
        // Parent: None
        // Fields count: 9
        public static class CFootCycleDefinition {
            public const nint m_vStancePositionMS = 0x0; // 
            public const nint m_vMidpointPositionMS = 0xC; // 
            public const nint m_flStanceDirectionMS = 0x18; // float32
            public const nint m_vToStrideStartPos = 0x1C; // 
            public const nint m_stanceCycle = 0x28; // CAnimCycle
            public const nint m_footLiftCycle = 0x2C; // CFootCycle
            public const nint m_footOffCycle = 0x30; // CFootCycle
            public const nint m_footStrikeCycle = 0x34; // CFootCycle
            public const nint m_footLandCycle = 0x38; // CFootCycle
        }
        // Parent: None
        // Fields count: 3
        public static class CFootTrajectory {
            public const nint m_vOffset = 0x0; // 
            public const nint m_flRotationOffset = 0xC; // float32
            public const nint m_flProgression = 0x10; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CFootTrajectories {
            public const nint m_trajectories = 0x0; // CUtlVector<CFootTrajectory>
        }
        // Parent: None
        // Fields count: 2
        public static class CFootStride {
            public const nint m_definition = 0x0; // CFootCycleDefinition
            public const nint m_trajectories = 0x40; // CFootTrajectories
        }
        // Parent: None
        // Fields count: 3
        public static class CFootMotion {
            public const nint m_strides = 0x0; // CUtlVector<CFootStride>
            public const nint m_name = 0x18; // CUtlString
            public const nint m_bAdditive = 0x20; // bool
        }
        // Parent: None
        // Fields count: 10
        public static class SkeletonAnimCapture_t {
            public const nint m_nEntIndex = 0x0; // CEntityIndex
            public const nint m_nEntParent = 0x4; // CEntityIndex
            public const nint m_ImportedCollision = 0x8; // CUtlVector<CEntityIndex>
            public const nint m_ModelName = 0x20; // CUtlString
            public const nint m_CaptureName = 0x28; // CUtlString
            public const nint m_ModelBindPose = 0x30; // CUtlVector<SkeletonAnimCapture_t::Bone_t>
            public const nint m_FeModelInitPose = 0x48; // CUtlVector<SkeletonAnimCapture_t::Bone_t>
            public const nint m_nFlexControllers = 0x60; // int32
            public const nint m_bPredicted = 0x64; // bool
            public const nint m_Frames = 0xA8; // CUtlVector<SkeletonAnimCapture_t::Frame_t>
        }
        // Parent: None
        // Fields count: 3
        public static class SkeletonAnimCapture_t__Bone_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_BindPose = 0x10; // CTransform
            public const nint m_nParent = 0x30; // int32
        }
        // Parent: None
        // Fields count: 8
        public static class SkeletonAnimCapture_t__FrameStamp_t {
            public const nint m_flTime = 0x0; // float32
            public const nint m_flEntitySimTime = 0x4; // float32
            public const nint m_bTeleportTick = 0x8; // bool
            public const nint m_bPredicted = 0x9; // bool
            public const nint m_flCurTime = 0xC; // float32
            public const nint m_flRealTime = 0x10; // float32
            public const nint m_nFrameCount = 0x14; // int32
            public const nint m_nTickCount = 0x18; // int32
        }
        // Parent: None
        // Fields count: 9
        public static class SkeletonAnimCapture_t__Frame_t {
            public const nint m_flTime = 0x0; // float32
            public const nint m_Stamp = 0x4; // SkeletonAnimCapture_t::FrameStamp_t
            public const nint m_Transform = 0x20; // CTransform
            public const nint m_bTeleport = 0x40; // bool
            public const nint m_CompositeBones = 0x48; // CUtlVector<CTransform>
            public const nint m_SimStateBones = 0x60; // CUtlVector<CTransform>
            public const nint m_FeModelAnims = 0x78; // CUtlVector<CTransform>
            public const nint m_FeModelPos = 0x90; // CUtlVector<VectorAligned>
            public const nint m_FlexControllerWeights = 0xA8; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 2
        public static class SkeletonAnimCapture_t__Camera_t {
            public const nint m_tmCamera = 0x0; // CTransform
            public const nint m_flTime = 0x20; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class SkeletonDemoDb_t {
            public const nint m_AnimCaptures = 0x0; // CUtlVector<SkeletonAnimCapture_t*>
            public const nint m_CameraTrack = 0x18; // CUtlVector<SkeletonAnimCapture_t::Camera_t>
            public const nint m_flRecordingTime = 0x30; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CNmBoneMask {
            public const nint m_ID = 0x0; // CGlobalSymbol
            public const nint m_weightInfo = 0x8; // CNmBoneMask::WeightInfo_t
            public const nint m_weights = 0x18; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 9
        public static class CNmClip {
            public const nint m_skeleton = 0x0; // CStrongHandle<InfoForResourceTypeCNmSkeleton>
            public const nint m_nNumFrames = 0x8; // uint32
            public const nint m_flDuration = 0xC; // float32
            public const nint m_compressedPoseData = 0x10; // CUtlBinaryBlock
            public const nint m_trackCompressionSettings = 0x28; // CUtlVector<NmCompressionSettings_t>
            public const nint m_compressedPoseOffsets = 0x40; // CUtlVector<uint32>
            public const nint m_syncTrack = 0xA0; // CNmSyncTrack
            public const nint m_rootMotion = 0x150; // CNmRootMotionData
            public const nint m_bIsAdditive = 0x1A0; // bool
        }
        // Parent: None
        // Fields count: 8
        public static class NmCompressionSettings_t {
            public const nint m_translationRangeX = 0x0; // NmCompressionSettings_t::QuantizationRange_t
            public const nint m_translationRangeY = 0x8; // NmCompressionSettings_t::QuantizationRange_t
            public const nint m_translationRangeZ = 0x10; // NmCompressionSettings_t::QuantizationRange_t
            public const nint m_scaleRange = 0x18; // NmCompressionSettings_t::QuantizationRange_t
            public const nint m_constantRotation = 0x20; // Quaternion
            public const nint m_bIsRotationStatic = 0x30; // bool
            public const nint m_bIsTranslationStatic = 0x31; // bool
            public const nint m_bIsScaleStatic = 0x32; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class NmCompressionSettings_t__QuantizationRange_t {
            public const nint m_flRangeStart = 0x0; // float32
            public const nint m_flRangeLength = 0x4; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CNmEvent {
            public const nint m_flStartTime = 0x8; // float32
            public const nint m_flDuration = 0xC; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class CNmRootMotionData {
            public const nint m_transforms = 0x0; // CUtlVector<CTransform>
            public const nint m_nNumFrames = 0x18; // int32
            public const nint m_flAverageLinearVelocity = 0x1C; // float32
            public const nint m_flAverageAngularVelocityRadians = 0x20; // float32
            public const nint m_totalDelta = 0x30; // CTransform
        }
        // Parent: None
        // Fields count: 7
        public static class CNmSkeleton {
            public const nint m_ID = 0x0; // CGlobalSymbol
            public const nint m_boneIDs = 0x8; // CUtlLeanVector<CGlobalSymbol>
            public const nint m_parentIndices = 0x18; // CUtlVector<int32>
            public const nint m_parentSpaceReferencePose = 0x30; // CUtlVector<CTransform>
            public const nint m_modelSpaceReferencePose = 0x48; // CUtlVector<CTransform>
            public const nint m_numBonesToSampleAtLowLOD = 0x60; // int32
            public const nint m_boneMasks = 0x68; // CUtlLeanVector<CNmBoneMask>
        }
        // Parent: None
        // Fields count: 2
        public static class NmSyncTrackTime_t {
            public const nint m_nEventIdx = 0x0; // int32
            public const nint m_percentageThrough = 0x4; // NmPercent_t
        }
        // Parent: None
        // Fields count: 2
        public static class NmSyncTrackTimeRange_t {
            public const nint m_startTime = 0x0; // NmSyncTrackTime_t
            public const nint m_endTime = 0x8; // NmSyncTrackTime_t
        }
        // Parent: None
        // Fields count: 2
        public static class CNmSyncTrack {
            public const nint m_syncEvents = 0x0; // CUtlLeanVectorFixedGrowable<CNmSyncTrack::Event_t>
            public const nint m_nStartEventOffset = 0xA8; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CNmSyncTrack__EventMarker_t {
            public const nint m_startTime = 0x0; // NmPercent_t
            public const nint m_ID = 0x8; // CGlobalSymbol
        }
        // Parent: None
        // Fields count: 3
        public static class CNmSyncTrack__Event_t {
            public const nint m_ID = 0x0; // CGlobalSymbol
            public const nint m_startTime = 0x8; // NmPercent_t
            public const nint m_duration = 0xC; // NmPercent_t
        }
        // Parent: None
        // Fields count: 1
        public static class NmPercent_t {
            public const nint m_flValue = 0x0; // float32
        }
        // Parent: CNmEvent
        // Fields count: 0
        public static class CNmLegacyEvent {
        }
        // Parent: CNmEvent
        // Fields count: 1
        public static class CNmFootEvent {
            public const nint m_phase = 0x10; // NmFootPhase_t
        }
        // Parent: CNmEvent
        // Fields count: 1
        public static class CNmIDEvent {
            public const nint m_ID = 0x10; // CGlobalSymbol
        }
        // Parent: CNmEvent
        // Fields count: 2
        public static class CNmTransitionEvent {
            public const nint m_rule = 0x10; // NmTransitionRule_t
            public const nint m_ID = 0x18; // CGlobalSymbol
        }
        // Parent: CNmEvent
        // Fields count: 1
        public static class CNmFrameSnapEvent {
            public const nint m_frameSnapMode = 0x10; // NmFrameSnapEventMode_t
        }
        // Parent: None
        // Fields count: 3
        public static class CNmGraphDataSet {
            public const nint m_variationID = 0x0; // CGlobalSymbol
            public const nint m_skeleton = 0x8; // CStrongHandle<InfoForResourceTypeCNmSkeleton>
            public const nint m_resources = 0x10; // CUtlVector<CStrongHandleVoid>
        }
        // Parent: None
        // Fields count: 10
        public static class CNmGraph {
            public const nint m_persistentNodeIndices = 0x0; // CUtlVector<int16>
            public const nint m_instanceNodeStartOffsets = 0x18; // CUtlVector<uint32>
            public const nint m_instanceRequiredMemory = 0x30; // uint32
            public const nint m_instanceRequiredAlignment = 0x34; // uint32
            public const nint m_rootNodeIdx = 0x38; // int16
            public const nint m_controlParameterIDs = 0x40; // CUtlVector<CGlobalSymbol>
            public const nint m_virtualParameterIDs = 0x58; // CUtlVector<CGlobalSymbol>
            public const nint m_virtualParameterNodeIndices = 0x70; // CUtlVector<int16>
            public const nint m_childGraphSlots = 0x88; // CUtlVector<CNmGraph::ChildGraphSlot_t>
            public const nint m_externalGraphSlots = 0xA0; // CUtlVector<CNmGraph::ExternalGraphSlot_t>
        }
        // Parent: None
        // Fields count: 2
        public static class CNmGraph__ExternalGraphSlot_t {
            public const nint m_nNodeIdx = 0x0; // int16
            public const nint m_slotID = 0x8; // CGlobalSymbol
        }
        // Parent: None
        // Fields count: 2
        public static class CNmGraph__ChildGraphSlot_t {
            public const nint m_nNodeIdx = 0x0; // int16
            public const nint m_dataSlotIdx = 0x2; // int16
        }
        // Parent: None
        // Fields count: 2
        public static class CNmGraphVariation {
            public const nint m_graph = 0x0; // CStrongHandle<InfoForResourceTypeCNmGraph>
            public const nint m_dataSet = 0x8; // CStrongHandle<InfoForResourceTypeCNmGraphDataSet>
        }
        // Parent: None
        // Fields count: 2
        public static class BoneDemoCaptureSettings_t {
            public const nint m_boneName = 0x0; // CUtlString
            public const nint m_flChainLength = 0x8; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class IKDemoCaptureSettings_t {
            public const nint m_parentBoneName = 0x0; // CUtlString
            public const nint m_eMode = 0x8; // IKChannelMode
            public const nint m_ikChainName = 0x10; // CUtlString
            public const nint m_oneBoneStart = 0x18; // CUtlString
            public const nint m_oneBoneEnd = 0x20; // CUtlString
        }
        // Parent: None
        // Fields count: 16
        public static class CAnimDemoCaptureSettings {
            public const nint m_rangeBoneChainLength = 0x0; // Vector2D
            public const nint m_rangeMaxSplineErrorRotation = 0x8; // Vector2D
            public const nint m_flMaxSplineErrorTranslation = 0x10; // float32
            public const nint m_flMaxSplineErrorScale = 0x14; // float32
            public const nint m_flIkRotation_MaxSplineError = 0x18; // float32
            public const nint m_flIkTranslation_MaxSplineError = 0x1C; // float32
            public const nint m_flMaxQuantizationErrorRotation = 0x20; // float32
            public const nint m_flMaxQuantizationErrorTranslation = 0x24; // float32
            public const nint m_flMaxQuantizationErrorScale = 0x28; // float32
            public const nint m_flIkRotation_MaxQuantizationError = 0x2C; // float32
            public const nint m_flIkTranslation_MaxQuantizationError = 0x30; // float32
            public const nint m_baseSequence = 0x38; // CUtlString
            public const nint m_nBaseSequenceFrame = 0x40; // int32
            public const nint m_boneSelectionMode = 0x44; // EDemoBoneSelectionMode
            public const nint m_bones = 0x48; // CUtlVector<BoneDemoCaptureSettings_t>
            public const nint m_ikChains = 0x60; // CUtlVector<IKDemoCaptureSettings_t>
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimReplayFrame {
            public const nint m_inputDataBlocks = 0x10; // CUtlVector<CUtlBinaryBlock>
            public const nint m_instanceData = 0x28; // CUtlBinaryBlock
            public const nint m_startingLocalToWorldTransform = 0x40; // CTransform
            public const nint m_localToWorldTransform = 0x60; // CTransform
            public const nint m_timeStamp = 0x80; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class CAnimGraphDebugReplay {
            public const nint m_animGraphFileName = 0x40; // CUtlString
            public const nint m_frameList = 0x48; // CUtlVector<CSmartPtr<CAnimReplayFrame>>
            public const nint m_startIndex = 0x60; // int32
            public const nint m_writeIndex = 0x64; // int32
            public const nint m_frameCount = 0x68; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimGraphModelBinding {
            public const nint m_modelName = 0x8; // CUtlString
            public const nint m_pSharedData = 0x10; // CSmartPtr<CAnimUpdateSharedData>
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimInputDamping {
            public const nint m_speedFunction = 0x8; // DampingSpeedFunction
            public const nint m_fSpeedScale = 0xC; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimParamHandle {
            public const nint m_type = 0x0; // AnimParamType_t
            public const nint m_index = 0x1; // uint8
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimParamHandleMap {
            public const nint m_list = 0x0; // CUtlHashtable<uint16,int16>
        }
        // Parent: None
        // Fields count: 6
        public static class CAnimParameterManagerUpdater {
            public const nint m_parameters = 0x18; // CUtlVector<CSmartPtr<CAnimParameterBase>>
            public const nint m_idToIndexMap = 0x30; // CUtlHashtable<AnimParamID,int32>
            public const nint m_nameToIndexMap = 0x50; // CUtlHashtable<CUtlString,int32>
            public const nint m_indexToHandle = 0x70; // CUtlVector<CAnimParamHandle>
            public const nint m_autoResetParams = 0x88; // CUtlVector<CUtlPair<CAnimParamHandle,CAnimVariant>>
            public const nint m_autoResetMap = 0xA0; // CUtlHashtable<CAnimParamHandle,int16>
        }
        // Parent: None
        // Fields count: 10
        public static class CAnimUpdateSharedData {
            public const nint m_nodes = 0x10; // CUtlVector<CSmartPtr<CAnimUpdateNodeBase>>
            public const nint m_nodeIndexMap = 0x28; // CUtlHashtable<CAnimNodePath,int32>
            public const nint m_components = 0x48; // CUtlVector<CSmartPtr<CAnimComponentUpdater>>
            public const nint m_pParamListUpdater = 0x60; // CSmartPtr<CAnimParameterManagerUpdater>
            public const nint m_pTagManagerUpdater = 0x68; // CSmartPtr<CAnimTagManagerUpdater>
            public const nint m_scriptManager = 0x70; // CSmartPtr<CAnimScriptManager>
            public const nint m_settings = 0x78; // CAnimGraphSettingsManager
            public const nint m_pStaticPoseCache = 0xA8; // CSmartPtr<CStaticPoseCacheBuilder>
            public const nint m_pSkeleton = 0xB0; // CSmartPtr<CAnimSkeleton>
            public const nint m_rootNodePath = 0xB8; // CAnimNodePath
        }
        // Parent: None
        // Fields count: 2
        public static class CBlendCurve {
            public const nint m_flControlPoint1 = 0x0; // float32
            public const nint m_flControlPoint2 = 0x4; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class ParamSpanSample_t {
            public const nint m_value = 0x0; // CAnimVariant
            public const nint m_flCycle = 0x14; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class ParamSpan_t {
            public const nint m_samples = 0x0; // CUtlVector<ParamSpanSample_t>
            public const nint m_hParam = 0x18; // CAnimParamHandle
            public const nint m_eParamType = 0x1A; // AnimParamType_t
            public const nint m_flStartCycle = 0x1C; // float32
            public const nint m_flEndCycle = 0x20; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CParamSpanUpdater {
            public const nint m_spans = 0x0; // CUtlVector<ParamSpan_t>
        }
        // Parent: None
        // Fields count: 0
        public static class CAnimGraphSettingsGroup {
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimGraphSettingsManager {
            public const nint m_settingsGroups = 0x18; // CUtlVector<CSmartPtr<CAnimGraphSettingsGroup>>
        }
        // Parent: None
        // Fields count: 4
        public static class CCachedPose {
            public const nint m_transforms = 0x8; // CUtlVector<CTransform>
            public const nint m_morphWeights = 0x20; // CUtlVector<float32>
            public const nint m_hSequence = 0x38; // HSequence
            public const nint m_flCycle = 0x3C; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CStaticPoseCache {
            public const nint m_poses = 0x10; // CUtlVector<CCachedPose>
            public const nint m_nBoneCount = 0x28; // int32
            public const nint m_nMorphCount = 0x2C; // int32
        }
        // Parent: CStaticPoseCache
        // Fields count: 0
        public static class CStaticPoseCacheBuilder {
        }
        // Parent: None
        // Fields count: 0
        public static class CAnimActionUpdater {
        }
        // Parent: CAnimActionUpdater
        // Fields count: 2
        public static class CEmitTagActionUpdater {
            public const nint m_nTagIndex = 0x18; // int32
            public const nint m_bIsZeroDuration = 0x1C; // bool
        }
        // Parent: CAnimActionUpdater
        // Fields count: 2
        public static class CSetParameterActionUpdater {
            public const nint m_hParam = 0x18; // CAnimParamHandle
            public const nint m_value = 0x1A; // CAnimVariant
        }
        // Parent: CAnimActionUpdater
        // Fields count: 2
        public static class CToggleComponentActionUpdater {
            public const nint m_componentID = 0x18; // AnimComponentID
            public const nint m_bSetEnabled = 0x1C; // bool
        }
        // Parent: CAnimActionUpdater
        // Fields count: 3
        public static class CExpressionActionUpdater {
            public const nint m_hParam = 0x18; // CAnimParamHandle
            public const nint m_eParamType = 0x1A; // AnimParamType_t
            public const nint m_hScript = 0x1C; // AnimScriptHandle
        }
        // Parent: None
        // Fields count: 4
        public static class CAnimTagBase {
            public const nint m_name = 0x18; // CGlobalSymbol
            public const nint m_group = 0x20; // CGlobalSymbol
            public const nint m_tagID = 0x28; // AnimTagID
            public const nint m_bIsReferenced = 0x40; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimTagManagerUpdater {
            public const nint m_tags = 0x18; // CUtlVector<CSmartPtr<CAnimTagBase>>
        }
        // Parent: CAnimTagBase
        // Fields count: 7
        public static class CAudioAnimTag {
            public const nint m_clipName = 0x50; // CUtlString
            public const nint m_attachmentName = 0x58; // CUtlString
            public const nint m_flVolume = 0x60; // float32
            public const nint m_bStopWhenTagEnds = 0x64; // bool
            public const nint m_bStopWhenGraphEnds = 0x65; // bool
            public const nint m_bPlayOnServer = 0x66; // bool
            public const nint m_bPlayOnClient = 0x67; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CBodyGroupSetting {
            public const nint m_BodyGroupName = 0x0; // CUtlString
            public const nint m_nBodyGroupOption = 0x8; // int32
        }
        // Parent: CAnimTagBase
        // Fields count: 2
        public static class CBodyGroupAnimTag {
            public const nint m_nPriority = 0x50; // int32
            public const nint m_bodyGroupSettings = 0x58; // CUtlVector<CBodyGroupSetting>
        }
        // Parent: CAnimTagBase
        // Fields count: 4
        public static class CClothSettingsAnimTag {
            public const nint m_flStiffness = 0x50; // float32
            public const nint m_flEaseIn = 0x54; // float32
            public const nint m_flEaseOut = 0x58; // float32
            public const nint m_nVertexSet = 0x60; // CUtlString
        }
        // Parent: CAnimTagBase
        // Fields count: 1
        public static class CFootFallAnimTag {
            public const nint m_foot = 0x50; // FootFallTagFoot_t
        }
        // Parent: CAnimTagBase
        // Fields count: 4
        public static class CFootstepLandedAnimTag {
            public const nint m_FootstepType = 0x50; // FootstepLandedFootSoundType_t
            public const nint m_OverrideSoundName = 0x58; // CUtlString
            public const nint m_DebugAnimSourceString = 0x60; // CUtlString
            public const nint m_BoneName = 0x68; // CUtlString
        }
        // Parent: CAnimTagBase
        // Fields count: 4
        public static class CMaterialAttributeAnimTag {
            public const nint m_AttributeName = 0x50; // CUtlString
            public const nint m_AttributeType = 0x58; // MatterialAttributeTagType_t
            public const nint m_flValue = 0x5C; // float32
            public const nint m_Color = 0x60; // Color
        }
        // Parent: CAnimTagBase
        // Fields count: 10
        public static class CParticleAnimTag {
            public const nint m_hParticleSystem = 0x50; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_particleSystemName = 0x58; // CUtlString
            public const nint m_configName = 0x60; // CUtlString
            public const nint m_bDetachFromOwner = 0x68; // bool
            public const nint m_bStopWhenTagEnds = 0x69; // bool
            public const nint m_bTagEndStopIsInstant = 0x6A; // bool
            public const nint m_attachmentName = 0x70; // CUtlString
            public const nint m_attachmentType = 0x78; // ParticleAttachment_t
            public const nint m_attachmentCP1Name = 0x80; // CUtlString
            public const nint m_attachmentCP1Type = 0x88; // ParticleAttachment_t
        }
        // Parent: CAnimTagBase
        // Fields count: 6
        public static class CRagdollAnimTag {
            public const nint m_nPoseControl = 0x50; // AnimPoseControl
            public const nint m_flFrequency = 0x54; // float32
            public const nint m_flDampingRatio = 0x58; // float32
            public const nint m_flDecayDuration = 0x5C; // float32
            public const nint m_flDecayBias = 0x60; // float32
            public const nint m_bDestroy = 0x64; // bool
        }
        // Parent: CAnimTagBase
        // Fields count: 1
        public static class CSequenceFinishedAnimTag {
            public const nint m_sequenceName = 0x50; // CUtlString
        }
        // Parent: CAnimTagBase
        // Fields count: 0
        public static class CStringAnimTag {
        }
        // Parent: CAnimTagBase
        // Fields count: 0
        public static class CTaskStatusAnimTag {
        }
        // Parent: None
        // Fields count: 4
        public static class CAnimComponentUpdater {
            public const nint m_name = 0x18; // CUtlString
            public const nint m_id = 0x20; // AnimComponentID
            public const nint m_networkMode = 0x24; // AnimNodeNetworkMode
            public const nint m_bStartEnabled = 0x28; // bool
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CAnimScriptComponentUpdater {
            public const nint m_hScript = 0x30; // AnimScriptHandle
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CCPPScriptComponentUpdater {
            public const nint m_scriptsToRun = 0x30; // CUtlVector<CGlobalSymbol>
        }
        // Parent: None
        // Fields count: 3
        public static class CDampedValueUpdateItem {
            public const nint m_damping = 0x0; // CAnimInputDamping
            public const nint m_hParamIn = 0x18; // CAnimParamHandle
            public const nint m_hParamOut = 0x1A; // CAnimParamHandle
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CDampedValueComponentUpdater {
            public const nint m_items = 0x30; // CUtlVector<CDampedValueUpdateItem>
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CDemoSettingsComponentUpdater {
            public const nint m_settings = 0x30; // CAnimDemoCaptureSettings
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CLODComponentUpdater {
            public const nint m_nServerLOD = 0x30; // int32
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 8
        public static class CLookComponentUpdater {
            public const nint m_hLookHeading = 0x34; // CAnimParamHandle
            public const nint m_hLookHeadingVelocity = 0x36; // CAnimParamHandle
            public const nint m_hLookPitch = 0x38; // CAnimParamHandle
            public const nint m_hLookDistance = 0x3A; // CAnimParamHandle
            public const nint m_hLookDirection = 0x3C; // CAnimParamHandle
            public const nint m_hLookTarget = 0x3E; // CAnimParamHandle
            public const nint m_hLookTargetWorldSpace = 0x40; // CAnimParamHandle
            public const nint m_bNetworkLookTarget = 0x42; // bool
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 9
        public static class CMovementComponentUpdater {
            public const nint m_motors = 0x30; // CUtlVector<CSmartPtr<CAnimMotorUpdaterBase>>
            public const nint m_facingDamping = 0x48; // CAnimInputDamping
            public const nint m_eDefaultFacingMode = 0x58; // FacingMode
            public const nint m_nDefaultMotorIndex = 0x64; // int32
            public const nint m_flDefaultRunSpeed = 0x68; // float32
            public const nint m_bMoveVarsDisabled = 0x6C; // bool
            public const nint m_bNetworkPath = 0x6D; // bool
            public const nint m_bNetworkFacing = 0x6E; // bool
            public const nint m_paramHandles = 0x6F; // CAnimParamHandle[30]
        }
        // Parent: None
        // Fields count: 2
        public static class WeightList {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_weights = 0x8; // CUtlVector<float32>
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 8
        public static class CRagdollComponentUpdater {
            public const nint m_ragdollNodePaths = 0x30; // CUtlVector<CAnimNodePath>
            public const nint m_boneIndices = 0x48; // CUtlVector<int32>
            public const nint m_boneNames = 0x60; // CUtlVector<CUtlString>
            public const nint m_weightLists = 0x78; // CUtlVector<WeightList>
            public const nint m_flSpringFrequencyMin = 0x90; // float32
            public const nint m_flSpringFrequencyMax = 0x94; // float32
            public const nint m_flMaxStretch = 0x98; // float32
            public const nint m_bSolidCollisionAtZeroWeight = 0x9C; // bool
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 7
        public static class CSlopeComponentUpdater {
            public const nint m_flTraceDistance = 0x34; // float32
            public const nint m_hSlopeAngle = 0x38; // CAnimParamHandle
            public const nint m_hSlopeAngleFront = 0x3A; // CAnimParamHandle
            public const nint m_hSlopeAngleSide = 0x3C; // CAnimParamHandle
            public const nint m_hSlopeHeading = 0x3E; // CAnimParamHandle
            public const nint m_hSlopeNormal = 0x40; // CAnimParamHandle
            public const nint m_hSlopeNormal_WorldSpace = 0x42; // CAnimParamHandle
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CStateMachineComponentUpdater {
            public const nint m_stateMachine = 0x30; // CAnimStateMachineUpdater
        }
        // Parent: None
        // Fields count: 2
        public static class CMotionDataSet {
            public const nint m_groups = 0x0; // CUtlVector<CMotionGraphGroup>
            public const nint m_nDimensionCount = 0x18; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class CMotionGraphGroup {
            public const nint m_searchDB = 0x0; // CMotionSearchDB
            public const nint m_motionGraphs = 0xB8; // CUtlVector<CSmartPtr<CMotionGraph>>
            public const nint m_motionGraphConfigs = 0xD0; // CUtlVector<CMotionGraphConfig>
            public const nint m_sampleToConfig = 0xE8; // CUtlVector<int32>
            public const nint m_hIsActiveScript = 0x100; // AnimScriptHandle
        }
        // Parent: None
        // Fields count: 1
        public static class SampleCode {
            public const nint m_subCode = 0x0; // uint8[8]
        }
        // Parent: None
        // Fields count: 1
        public static class MotionDBIndex {
            public const nint m_nIndex = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 3
        public static class CVectorQuantizer {
            public const nint m_centroidVectors = 0x0; // CUtlVector<float32>
            public const nint m_nCentroids = 0x18; // int32
            public const nint m_nDimensions = 0x1C; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CProductQuantizer {
            public const nint m_subQuantizers = 0x0; // CUtlVector<CVectorQuantizer>
            public const nint m_nDimensions = 0x18; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class CMotionSearchNode {
            public const nint m_children = 0x0; // CUtlVector<CMotionSearchNode*>
            public const nint m_quantizer = 0x18; // CVectorQuantizer
            public const nint m_sampleCodes = 0x38; // CUtlVector<CUtlVector<SampleCode>>
            public const nint m_sampleIndices = 0x50; // CUtlVector<CUtlVector<int32>>
            public const nint m_selectableSamples = 0x68; // CUtlVector<int32>
        }
        // Parent: None
        // Fields count: 3
        public static class CMotionSearchDB {
            public const nint m_rootNode = 0x0; // CMotionSearchNode
            public const nint m_residualQuantizer = 0x80; // CProductQuantizer
            public const nint m_codeIndices = 0xA0; // CUtlVector<MotionDBIndex>
        }
        // Parent: None
        // Fields count: 7
        public static class CMotionGraph {
            public const nint m_paramSpans = 0x10; // CParamSpanUpdater
            public const nint m_tags = 0x28; // CUtlVector<TagSpan_t>
            public const nint m_pRootNode = 0x40; // CSmartPtr<CMotionNode>
            public const nint m_nParameterCount = 0x48; // int32
            public const nint m_nConfigStartIndex = 0x4C; // int32
            public const nint m_nConfigCount = 0x50; // int32
            public const nint m_bLoop = 0x54; // bool
        }
        // Parent: CMotionGraph
        // Fields count: 0
        public static class CEditableMotionGraph {
        }
        // Parent: None
        // Fields count: 2
        public static class CMotionNode {
            public const nint m_name = 0x18; // CUtlString
            public const nint m_id = 0x20; // AnimNodeID
        }
        // Parent: CMotionNode
        // Fields count: 3
        public static class CMotionNodeSequence {
            public const nint m_tags = 0x28; // CUtlVector<TagSpan_t>
            public const nint m_hSequence = 0x40; // HSequence
            public const nint m_flPlaybackSpeed = 0x44; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class MotionBlendItem {
            public const nint m_pChild = 0x0; // CSmartPtr<CMotionNode>
            public const nint m_flKeyValue = 0x8; // float32
        }
        // Parent: CMotionNode
        // Fields count: 2
        public static class CMotionNodeBlend1D {
            public const nint m_blendItems = 0x28; // CUtlVector<MotionBlendItem>
            public const nint m_nParamIndex = 0x40; // int32
        }
        // Parent: None
        // Fields count: 4
        public static class CMotionMetricEvaluator {
            public const nint m_means = 0x18; // CUtlVector<float32>
            public const nint m_standardDeviations = 0x30; // CUtlVector<float32>
            public const nint m_flWeight = 0x48; // float32
            public const nint m_nDimensionStartIndex = 0x4C; // int32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 0
        public static class CBlockSelectionMetricEvaluator {
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 1
        public static class CBonePositionMetricEvaluator {
            public const nint m_nBoneIndex = 0x50; // int32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 1
        public static class CBoneVelocityMetricEvaluator {
            public const nint m_nBoneIndex = 0x50; // int32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 0
        public static class CCurrentRotationVelocityMetricEvaluator {
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 0
        public static class CCurrentVelocityMetricEvaluator {
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 7
        public static class CDistanceRemainingMetricEvaluator {
            public const nint m_flMaxDistance = 0x50; // float32
            public const nint m_flMinDistance = 0x54; // float32
            public const nint m_flStartGoalFilterDistance = 0x58; // float32
            public const nint m_flMaxGoalOvershootScale = 0x5C; // float32
            public const nint m_bFilterFixedMinDistance = 0x60; // bool
            public const nint m_bFilterGoalDistance = 0x61; // bool
            public const nint m_bFilterGoalOvershoot = 0x62; // bool
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 1
        public static class CFootCycleMetricEvaluator {
            public const nint m_footIndices = 0x50; // CUtlVector<int32>
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 2
        public static class CFootPositionMetricEvaluator {
            public const nint m_footIndices = 0x50; // CUtlVector<int32>
            public const nint m_bIgnoreSlope = 0x68; // bool
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 2
        public static class CFutureFacingMetricEvaluator {
            public const nint m_flDistance = 0x50; // float32
            public const nint m_flTime = 0x54; // float32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 4
        public static class CFutureVelocityMetricEvaluator {
            public const nint m_flDistance = 0x50; // float32
            public const nint m_flStoppingDistance = 0x54; // float32
            public const nint m_flTargetSpeed = 0x58; // float32
            public const nint m_eMode = 0x5C; // VelocityMetricMode
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 4
        public static class CPathMetricEvaluator {
            public const nint m_pathTimeSamples = 0x50; // CUtlVector<float32>
            public const nint m_flDistance = 0x68; // float32
            public const nint m_bExtrapolateMovement = 0x6C; // bool
            public const nint m_flMinExtrapolationSpeed = 0x70; // float32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 2
        public static class CStepsRemainingMetricEvaluator {
            public const nint m_footIndices = 0x50; // CUtlVector<int32>
            public const nint m_flMinStepsRemaining = 0x68; // float32
        }
        // Parent: CMotionMetricEvaluator
        // Fields count: 4
        public static class CTimeRemainingMetricEvaluator {
            public const nint m_bMatchByTimeRemaining = 0x50; // bool
            public const nint m_flMaxTimeRemaining = 0x54; // float32
            public const nint m_bFilterByTimeRemaining = 0x58; // bool
            public const nint m_flMinTimeRemaining = 0x5C; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimMotorUpdaterBase {
            public const nint m_name = 0x10; // CUtlString
            public const nint m_bDefault = 0x18; // bool
        }
        // Parent: CAnimMotorUpdaterBase
        // Fields count: 1
        public static class CPathAnimMotorUpdaterBase {
            public const nint m_bLockToPath = 0x20; // bool
        }
        // Parent: CPathAnimMotorUpdaterBase
        // Fields count: 7
        public static class CDampedPathAnimMotorUpdater {
            public const nint m_flAnticipationTime = 0x2C; // float32
            public const nint m_flMinSpeedScale = 0x30; // float32
            public const nint m_hAnticipationPosParam = 0x34; // CAnimParamHandle
            public const nint m_hAnticipationHeadingParam = 0x36; // CAnimParamHandle
            public const nint m_flSpringConstant = 0x38; // float32
            public const nint m_flMinSpringTension = 0x3C; // float32
            public const nint m_flMaxSpringTension = 0x40; // float32
        }
        // Parent: CPathAnimMotorUpdaterBase
        // Fields count: 0
        public static class CPathAnimMotorUpdater {
        }
        // Parent: CAnimMotorUpdaterBase
        // Fields count: 6
        public static class CPlayerInputAnimMotorUpdater {
            public const nint m_sampleTimes = 0x20; // CUtlVector<float32>
            public const nint m_flSpringConstant = 0x3C; // float32
            public const nint m_flAnticipationDistance = 0x40; // float32
            public const nint m_hAnticipationPosParam = 0x44; // CAnimParamHandle
            public const nint m_hAnticipationHeadingParam = 0x46; // CAnimParamHandle
            public const nint m_bUseAcceleration = 0x48; // bool
        }
        // Parent: None
        // Fields count: 8
        public static class AimMatrixOpFixedSettings_t {
            public const nint m_attachment = 0x0; // CAnimAttachment
            public const nint m_damping = 0x80; // CAnimInputDamping
            public const nint m_poseCacheHandles = 0x90; // CPoseHandle[10]
            public const nint m_eBlendMode = 0xB8; // AimMatrixBlendMode
            public const nint m_fAngleIncrement = 0xBC; // float32
            public const nint m_nSequenceMaxFrame = 0xC0; // int32
            public const nint m_nBoneMaskIndex = 0xC4; // int32
            public const nint m_bTargetIsPosition = 0xC8; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class FollowAttachmentSettings_t {
            public const nint m_attachment = 0x0; // CAnimAttachment
            public const nint m_boneIndex = 0x80; // int32
            public const nint m_bMatchTranslation = 0x84; // bool
            public const nint m_bMatchRotation = 0x85; // bool
        }
        // Parent: None
        // Fields count: 18
        public static class FootLockPoseOpFixedSettings {
            public const nint m_footInfo = 0x0; // CUtlVector<FootFixedData_t>
            public const nint m_hipDampingSettings = 0x18; // CAnimInputDamping
            public const nint m_nHipBoneIndex = 0x28; // int32
            public const nint m_ikSolverType = 0x2C; // IKSolverType
            public const nint m_bApplyTilt = 0x30; // bool
            public const nint m_bApplyHipDrop = 0x31; // bool
            public const nint m_bAlwaysUseFallbackHinge = 0x32; // bool
            public const nint m_bApplyFootRotationLimits = 0x33; // bool
            public const nint m_bApplyLegTwistLimits = 0x34; // bool
            public const nint m_flMaxFootHeight = 0x38; // float32
            public const nint m_flExtensionScale = 0x3C; // float32
            public const nint m_flMaxLegTwist = 0x40; // float32
            public const nint m_bEnableLockBreaking = 0x44; // bool
            public const nint m_flLockBreakTolerance = 0x48; // float32
            public const nint m_flLockBlendTime = 0x4C; // float32
            public const nint m_bEnableStretching = 0x50; // bool
            public const nint m_flMaxStretchAmount = 0x54; // float32
            public const nint m_flStretchExtensionScale = 0x58; // float32
        }
        // Parent: None
        // Fields count: 7
        public static class FootPinningPoseOpFixedData_t {
            public const nint m_footInfo = 0x0; // CUtlVector<FootFixedData_t>
            public const nint m_flBlendTime = 0x18; // float32
            public const nint m_flLockBreakDistance = 0x1C; // float32
            public const nint m_flMaxLegTwist = 0x20; // float32
            public const nint m_nHipBoneIndex = 0x24; // int32
            public const nint m_bApplyLegTwistLimits = 0x28; // bool
            public const nint m_bApplyFootRotationLimits = 0x29; // bool
        }
        // Parent: None
        // Fields count: 17
        public static class HitReactFixedSettings_t {
            public const nint m_nWeightListIndex = 0x0; // int32
            public const nint m_nEffectedBoneCount = 0x4; // int32
            public const nint m_flMaxImpactForce = 0x8; // float32
            public const nint m_flMinImpactForce = 0xC; // float32
            public const nint m_flWhipImpactScale = 0x10; // float32
            public const nint m_flCounterRotationScale = 0x14; // float32
            public const nint m_flDistanceFadeScale = 0x18; // float32
            public const nint m_flPropagationScale = 0x1C; // float32
            public const nint m_flWhipDelay = 0x20; // float32
            public const nint m_flSpringStrength = 0x24; // float32
            public const nint m_flWhipSpringStrength = 0x28; // float32
            public const nint m_flMaxAngleRadians = 0x2C; // float32
            public const nint m_nHipBoneIndex = 0x30; // int32
            public const nint m_flHipBoneTranslationScale = 0x34; // float32
            public const nint m_flHipDipSpringStrength = 0x38; // float32
            public const nint m_flHipDipImpactScale = 0x3C; // float32
            public const nint m_flHipDipDelay = 0x40; // float32
        }
        // Parent: None
        // Fields count: 7
        public static class JiggleBoneSettings_t {
            public const nint m_nBoneIndex = 0x0; // int32
            public const nint m_flSpringStrength = 0x4; // float32
            public const nint m_flMaxTimeStep = 0x8; // float32
            public const nint m_flDamping = 0xC; // float32
            public const nint m_vBoundsMaxLS = 0x10; // 
            public const nint m_vBoundsMinLS = 0x1C; // 
            public const nint m_eSimSpace = 0x28; // JiggleBoneSimSpace
        }
        // Parent: None
        // Fields count: 1
        public static class JiggleBoneSettingsList_t {
            public const nint m_boneSettings = 0x0; // CUtlVector<JiggleBoneSettings_t>
        }
        // Parent: None
        // Fields count: 2
        public static class LookAtBone_t {
            public const nint m_index = 0x0; // int32
            public const nint m_weight = 0x4; // float32
        }
        // Parent: None
        // Fields count: 11
        public static class LookAtOpFixedSettings_t {
            public const nint m_attachment = 0x0; // CAnimAttachment
            public const nint m_damping = 0x80; // CAnimInputDamping
            public const nint m_bones = 0x90; // CUtlVector<LookAtBone_t>
            public const nint m_flYawLimit = 0xA8; // float32
            public const nint m_flPitchLimit = 0xAC; // float32
            public const nint m_flHysteresisInnerAngle = 0xB0; // float32
            public const nint m_flHysteresisOuterAngle = 0xB4; // float32
            public const nint m_bRotateYawForward = 0xB8; // bool
            public const nint m_bMaintainUpDirection = 0xB9; // bool
            public const nint m_bTargetIsPosition = 0xBA; // bool
            public const nint m_bUseHysteresis = 0xBB; // bool
        }
        // Parent: None
        // Fields count: 6
        public static class ChainToSolveData_t {
            public const nint m_nChainIndex = 0x0; // int32
            public const nint m_SolverSettings = 0x4; // IKSolverSettings_t
            public const nint m_TargetSettings = 0x10; // IKTargetSettings_t
            public const nint m_DebugSetting = 0x38; // SolveIKChainAnimNodeDebugSetting
            public const nint m_flDebugNormalizedValue = 0x3C; // float32
            public const nint m_vDebugOffset = 0x40; // VectorAligned
        }
        // Parent: None
        // Fields count: 2
        public static class SolveIKChainPoseOpFixedSettings_t {
            public const nint m_ChainsToSolveData = 0x0; // CUtlVector<ChainToSolveData_t>
            public const nint m_bMatchTargetOrientation = 0x18; // bool
        }
        // Parent: None
        // Fields count: 6
        public static class CAnimParameterBase {
            public const nint m_name = 0x18; // CGlobalSymbol
            public const nint m_group = 0x20; // CUtlString
            public const nint m_id = 0x28; // AnimParamID
            public const nint m_componentName = 0x40; // CUtlString
            public const nint m_bNetworkingRequested = 0x60; // bool
            public const nint m_bIsReferenced = 0x61; // bool
        }
        // Parent: CAnimParameterBase
        // Fields count: 6
        public static class CConcreteAnimParameter {
            public const nint m_previewButton = 0x68; // AnimParamButton_t
            public const nint m_eNetworkSetting = 0x6C; // AnimParamNetworkSetting
            public const nint m_bUseMostRecentValue = 0x70; // bool
            public const nint m_bAutoReset = 0x71; // bool
            public const nint m_bGameWritable = 0x72; // bool
            public const nint m_bGraphWritable = 0x73; // bool
        }
        // Parent: CAnimParameterBase
        // Fields count: 2
        public static class CVirtualAnimParameter {
            public const nint m_expressionString = 0x68; // CUtlString
            public const nint m_eParamType = 0x70; // AnimParamType_t
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 1
        public static class CBoolAnimParameter {
            public const nint m_bDefaultValue = 0x78; // bool
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 2
        public static class CEnumAnimParameter {
            public const nint m_defaultValue = 0x80; // uint8
            public const nint m_enumOptions = 0x88; // CUtlVector<CUtlString>
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 3
        public static class CIntAnimParameter {
            public const nint m_defaultValue = 0x78; // int32
            public const nint m_minValue = 0x7C; // int32
            public const nint m_maxValue = 0x80; // int32
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 4
        public static class CFloatAnimParameter {
            public const nint m_fDefaultValue = 0x78; // float32
            public const nint m_fMinValue = 0x7C; // float32
            public const nint m_fMaxValue = 0x80; // float32
            public const nint m_bInterpolate = 0x84; // bool
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 2
        public static class CVectorAnimParameter {
            public const nint m_defaultValue = 0x78; // 
            public const nint m_bInterpolate = 0x84; // bool
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 2
        public static class CQuaternionAnimParameter {
            public const nint m_defaultValue = 0x80; // Quaternion
            public const nint m_bInterpolate = 0x90; // bool
        }
        // Parent: CConcreteAnimParameter
        // Fields count: 1
        public static class CSymbolAnimParameter {
            public const nint m_defaultValue = 0x78; // CGlobalSymbol
        }
        // Parent: None
        // Fields count: 5
        public static class ScriptInfo_t {
            public const nint m_code = 0x0; // CUtlString
            public const nint m_paramsModified = 0x8; // CUtlVector<CAnimParamHandle>
            public const nint m_proxyReadParams = 0x20; // CUtlVector<int32>
            public const nint m_proxyWriteParams = 0x38; // CUtlVector<int32>
            public const nint m_eScriptType = 0x50; // AnimScriptType
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimScriptManager {
            public const nint m_scriptInfo = 0x10; // CUtlVector<ScriptInfo_t>
        }
        // Parent: None
        // Fields count: 2
        public static class CStateActionUpdater {
            public const nint m_pAction = 0x0; // CSmartPtr<CAnimActionUpdater>
            public const nint m_eBehavior = 0x8; // StateActionBehavior
        }
        // Parent: None
        // Fields count: 3
        public static class CTransitionUpdateData {
            public const nint m_srcStateIndex = 0x0; // uint8
            public const nint m_destStateIndex = 0x1; // uint8
            public const nint m_bDisabled = 0x0; // bitfield:1
        }
        // Parent: None
        // Fields count: 8
        public static class CStateUpdateData {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_hScript = 0x8; // AnimScriptHandle
            public const nint m_transitionIndices = 0x10; // CUtlVector<int32>
            public const nint m_actions = 0x28; // CUtlVector<CStateActionUpdater>
            public const nint m_stateID = 0x40; // AnimStateID
            public const nint m_bIsStartState = 0x0; // bitfield:1
            public const nint m_bIsEndState = 0x0; // bitfield:1
            public const nint m_bIsPassthrough = 0x0; // bitfield:1
        }
        // Parent: None
        // Fields count: 3
        public static class CAnimStateMachineUpdater {
            public const nint m_states = 0x8; // CUtlVector<CStateUpdateData>
            public const nint m_transitions = 0x20; // CUtlVector<CTransitionUpdateData>
            public const nint m_startStateIndex = 0x50; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class CAnimUpdateNodeRef {
            public const nint m_nodeIndex = 0x8; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class CAnimUpdateNodeBase {
            public const nint m_nodePath = 0x18; // CAnimNodePath
            public const nint m_networkMode = 0x48; // AnimNodeNetworkMode
            public const nint m_name = 0x50; // CUtlString
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 6
        public static class CBinaryUpdateNode {
            public const nint m_pChild1 = 0x58; // CAnimUpdateNodeRef
            public const nint m_pChild2 = 0x68; // CAnimUpdateNodeRef
            public const nint m_timingBehavior = 0x78; // BinaryNodeTiming
            public const nint m_flTimingBlend = 0x7C; // float32
            public const nint m_bResetChild1 = 0x80; // bool
            public const nint m_bResetChild2 = 0x81; // bool
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 11
        public static class CBlendUpdateNode {
            public const nint m_children = 0x60; // CUtlVector<CAnimUpdateNodeRef>
            public const nint m_sortedOrder = 0x78; // CUtlVector<uint8>
            public const nint m_targetValues = 0x90; // CUtlVector<float32>
            public const nint m_blendValueSource = 0xAC; // AnimValueSource
            public const nint m_paramIndex = 0xB0; // CAnimParamHandle
            public const nint m_damping = 0xB8; // CAnimInputDamping
            public const nint m_blendKeyType = 0xC8; // BlendKeyType
            public const nint m_bLockBlendOnReset = 0xCC; // bool
            public const nint m_bSyncCycles = 0xCD; // bool
            public const nint m_bLoop = 0xCE; // bool
            public const nint m_bLockWhenWaning = 0xCF; // bool
        }
        // Parent: None
        // Fields count: 6
        public static class BlendItem_t {
            public const nint m_tags = 0x0; // CUtlVector<TagSpan_t>
            public const nint m_pChild = 0x18; // CAnimUpdateNodeRef
            public const nint m_hSequence = 0x28; // HSequence
            public const nint m_vPos = 0x2C; // Vector2D
            public const nint m_flDuration = 0x34; // float32
            public const nint m_bUseCustomDuration = 0x38; // bool
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 15
        public static class CBlend2DUpdateNode {
            public const nint m_items = 0x60; // CUtlVector<BlendItem_t>
            public const nint m_tags = 0x78; // CUtlVector<TagSpan_t>
            public const nint m_paramSpans = 0x90; // CParamSpanUpdater
            public const nint m_nodeItemIndices = 0xA8; // CUtlVector<int32>
            public const nint m_damping = 0xC0; // CAnimInputDamping
            public const nint m_blendSourceX = 0xD0; // AnimValueSource
            public const nint m_paramX = 0xD4; // CAnimParamHandle
            public const nint m_blendSourceY = 0xD8; // AnimValueSource
            public const nint m_paramY = 0xDC; // CAnimParamHandle
            public const nint m_eBlendMode = 0xE0; // Blend2DMode
            public const nint m_playbackSpeed = 0xE4; // float32
            public const nint m_bLoop = 0xE8; // bool
            public const nint m_bLockBlendOnReset = 0xE9; // bool
            public const nint m_bLockWhenWaning = 0xEA; // bool
            public const nint m_bAnimEventsAndTagsOnMostWeightedOnly = 0xEB; // bool
        }
        // Parent: CBinaryUpdateNode
        // Fields count: 7
        public static class CBoneMaskUpdateNode {
            public const nint m_nWeightListIndex = 0x8C; // int32
            public const nint m_flRootMotionBlend = 0x90; // float32
            public const nint m_blendSpace = 0x94; // BoneMaskBlendSpace
            public const nint m_footMotionTiming = 0x98; // BinaryNodeChildOption
            public const nint m_bUseBlendScale = 0x9C; // bool
            public const nint m_blendValueSource = 0xA0; // AnimValueSource
            public const nint m_hBlendParameter = 0xA4; // CAnimParamHandle
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 10
        public static class CChoiceUpdateNode {
            public const nint m_children = 0x58; // CUtlVector<CAnimUpdateNodeRef>
            public const nint m_weights = 0x70; // CUtlVector<float32>
            public const nint m_blendTimes = 0x88; // CUtlVector<float32>
            public const nint m_choiceMethod = 0xA0; // ChoiceMethod
            public const nint m_choiceChangeMethod = 0xA4; // ChoiceChangeMethod
            public const nint m_blendMethod = 0xA8; // ChoiceBlendMethod
            public const nint m_blendTime = 0xAC; // float32
            public const nint m_bCrossFade = 0xB0; // bool
            public const nint m_bResetChosen = 0xB1; // bool
            public const nint m_bDontResetSameSelection = 0xB2; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CDirectPlaybackTagData {
            public const nint m_sequenceName = 0x0; // CUtlString
            public const nint m_tags = 0x8; // CUtlVector<TagSpan_t>
        }
        // Parent: None
        // Fields count: 11
        public static class FootFixedData_t {
            public const nint m_vToeOffset = 0x0; // VectorAligned
            public const nint m_vHeelOffset = 0x10; // VectorAligned
            public const nint m_nTargetBoneIndex = 0x20; // int32
            public const nint m_nAnkleBoneIndex = 0x24; // int32
            public const nint m_nIKAnchorBoneIndex = 0x28; // int32
            public const nint m_ikChainIndex = 0x2C; // int32
            public const nint m_flMaxIKLength = 0x30; // float32
            public const nint m_nFootIndex = 0x34; // int32
            public const nint m_nTagIndex = 0x38; // int32
            public const nint m_flMaxRotationLeft = 0x3C; // float32
            public const nint m_flMaxRotationRight = 0x40; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class TraceSettings_t {
            public const nint m_flTraceHeight = 0x0; // float32
            public const nint m_flTraceRadius = 0x4; // float32
        }
        // Parent: None
        // Fields count: 10
        public static class FootFixedSettings {
            public const nint m_traceSettings = 0x0; // TraceSettings_t
            public const nint m_vFootBaseBindPosePositionMS = 0x10; // VectorAligned
            public const nint m_flFootBaseLength = 0x20; // float32
            public const nint m_flMaxRotationLeft = 0x24; // float32
            public const nint m_flMaxRotationRight = 0x28; // float32
            public const nint m_footstepLandedTagIndex = 0x2C; // int32
            public const nint m_bEnableTracing = 0x30; // bool
            public const nint m_flTraceAngleBlend = 0x34; // float32
            public const nint m_nDisableTagIndex = 0x38; // int32
            public const nint m_nFootIndex = 0x3C; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class FootStepTrigger {
            public const nint m_tags = 0x0; // CUtlVector<int32>
            public const nint m_nFootIndex = 0x18; // int32
            public const nint m_triggerPhase = 0x1C; // StepPhase
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 0
        public static class CLeafUpdateNode {
        }
        // Parent: CLeafUpdateNode
        // Fields count: 10
        public static class CLeanMatrixUpdateNode {
            public const nint m_frameCorners = 0x5C; // int32[3][3]
            public const nint m_poses = 0x80; // CPoseHandle[9]
            public const nint m_damping = 0xA8; // CAnimInputDamping
            public const nint m_blendSource = 0xB8; // AnimVectorSource
            public const nint m_paramIndex = 0xBC; // CAnimParamHandle
            public const nint m_verticalAxis = 0xC0; // 
            public const nint m_horizontalAxis = 0xCC; // 
            public const nint m_hSequence = 0xD8; // HSequence
            public const nint m_flMaxValue = 0xDC; // float32
            public const nint m_nSequenceMaxFrame = 0xE0; // int32
        }
        // Parent: CLeafUpdateNode
        // Fields count: 1
        public static class CMotionGraphUpdateNode {
            public const nint m_pMotionGraph = 0x58; // CSmartPtr<CMotionGraph>
        }
        // Parent: CLeafUpdateNode
        // Fields count: 23
        public static class CMotionMatchingUpdateNode {
            public const nint m_dataSet = 0x58; // CMotionDataSet
            public const nint m_metrics = 0x78; // CUtlVector<CSmartPtr<CMotionMetricEvaluator>>
            public const nint m_weights = 0x90; // CUtlVector<float32>
            public const nint m_bSearchEveryTick = 0xE0; // bool
            public const nint m_flSearchInterval = 0xE4; // float32
            public const nint m_bSearchWhenClipEnds = 0xE8; // bool
            public const nint m_bSearchWhenGoalChanges = 0xE9; // bool
            public const nint m_blendCurve = 0xEC; // CBlendCurve
            public const nint m_flSampleRate = 0xF4; // float32
            public const nint m_flBlendTime = 0xF8; // float32
            public const nint m_bLockClipWhenWaning = 0xFC; // bool
            public const nint m_flSelectionThreshold = 0x100; // float32
            public const nint m_flReselectionTimeWindow = 0x104; // float32
            public const nint m_bEnableRotationCorrection = 0x108; // bool
            public const nint m_bGoalAssist = 0x109; // bool
            public const nint m_flGoalAssistDistance = 0x10C; // float32
            public const nint m_flGoalAssistTolerance = 0x110; // float32
            public const nint m_distanceScale_Damping = 0x118; // CAnimInputDamping
            public const nint m_flDistanceScale_OuterRadius = 0x128; // float32
            public const nint m_flDistanceScale_InnerRadius = 0x12C; // float32
            public const nint m_flDistanceScale_MaxScale = 0x130; // float32
            public const nint m_flDistanceScale_MinScale = 0x134; // float32
            public const nint m_bEnableDistanceScaling = 0x138; // bool
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 8
        public static class CSelectorUpdateNode {
            public const nint m_children = 0x58; // CUtlVector<CAnimUpdateNodeRef>
            public const nint m_tags = 0x70; // CUtlVector<int8>
            public const nint m_blendCurve = 0x8C; // CBlendCurve
            public const nint m_flBlendTime = 0x94; // CAnimValue<float32>
            public const nint m_hParameter = 0x9C; // CAnimParamHandle
            public const nint m_eTagBehavior = 0xA0; // SelectorTagBehavior_t
            public const nint m_bResetOnChange = 0xA4; // bool
            public const nint m_bSyncCyclesOnChange = 0xA5; // bool
        }
        // Parent: CLeafUpdateNode
        // Fields count: 6
        public static class CSequenceUpdateNode {
            public const nint m_paramSpans = 0x60; // CParamSpanUpdater
            public const nint m_tags = 0x78; // CUtlVector<TagSpan_t>
            public const nint m_hSequence = 0x94; // HSequence
            public const nint m_playbackSpeed = 0x98; // float32
            public const nint m_duration = 0x9C; // float32
            public const nint m_bLoop = 0xA0; // bool
        }
        // Parent: CLeafUpdateNode
        // Fields count: 4
        public static class CSingleFrameUpdateNode {
            public const nint m_actions = 0x58; // CUtlVector<CSmartPtr<CAnimActionUpdater>>
            public const nint m_hPoseCacheHandle = 0x70; // CPoseHandle
            public const nint m_hSequence = 0x74; // HSequence
            public const nint m_flCycle = 0x78; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CSolveIKTargetHandle_t {
            public const nint m_positionHandle = 0x0; // CAnimParamHandle
            public const nint m_orientationHandle = 0x2; // CAnimParamHandle
        }
        // Parent: None
        // Fields count: 2
        public static class StanceInfo_t {
            public const nint m_vPosition = 0x0; // 
            public const nint m_flDirection = 0xC; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class CStateNodeTransitionData {
            public const nint m_curve = 0x0; // CBlendCurve
            public const nint m_blendDuration = 0x8; // CAnimValue<float32>
            public const nint m_resetCycleValue = 0x10; // CAnimValue<float32>
            public const nint m_bReset = 0x0; // bitfield:1
            public const nint m_resetCycleOption = 0x0; // bitfield:3
        }
        // Parent: None
        // Fields count: 2
        public static class CStateNodeStateData {
            public const nint m_pChild = 0x0; // CAnimUpdateNodeRef
            public const nint m_bExclusiveRootMotion = 0x0; // bitfield:1
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 5
        public static class CStateMachineUpdateNode {
            public const nint m_stateMachine = 0x68; // CAnimStateMachineUpdater
            public const nint m_stateData = 0xC0; // CUtlVector<CStateNodeStateData>
            public const nint m_transitionData = 0xD8; // CUtlVector<CStateNodeTransitionData>
            public const nint m_bBlockWaningTags = 0xF4; // bool
            public const nint m_bLockStateWhenWaning = 0xF5; // bool
        }
        // Parent: CBinaryUpdateNode
        // Fields count: 4
        public static class CSubtractUpdateNode {
            public const nint m_footMotionTiming = 0x8C; // BinaryNodeChildOption
            public const nint m_bApplyToFootMotion = 0x90; // bool
            public const nint m_bApplyChannelsSeparately = 0x91; // bool
            public const nint m_bUseModelSpace = 0x92; // bool
        }
        // Parent: None
        // Fields count: 15
        public static class TwoBoneIKSettings_t {
            public const nint m_endEffectorType = 0x0; // IkEndEffectorType
            public const nint m_endEffectorAttachment = 0x10; // CAnimAttachment
            public const nint m_targetType = 0x90; // IkTargetType
            public const nint m_targetAttachment = 0xA0; // CAnimAttachment
            public const nint m_targetBoneIndex = 0x120; // int32
            public const nint m_hPositionParam = 0x124; // CAnimParamHandle
            public const nint m_hRotationParam = 0x126; // CAnimParamHandle
            public const nint m_bAlwaysUseFallbackHinge = 0x128; // bool
            public const nint m_vLsFallbackHingeAxis = 0x130; // VectorAligned
            public const nint m_nFixedBoneIndex = 0x140; // int32
            public const nint m_nMiddleBoneIndex = 0x144; // int32
            public const nint m_nEndBoneIndex = 0x148; // int32
            public const nint m_bMatchTargetOrientation = 0x14C; // bool
            public const nint m_bConstrainTwist = 0x14D; // bool
            public const nint m_flMaxTwist = 0x150; // float32
        }
        // Parent: CAnimUpdateNodeBase
        // Fields count: 1
        public static class CUnaryUpdateNode {
            public const nint m_pChildNode = 0x58; // CAnimUpdateNodeRef
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 5
        public static class CWayPointHelperUpdateNode {
            public const nint m_flStartCycle = 0x6C; // float32
            public const nint m_flEndCycle = 0x70; // float32
            public const nint m_bOnlyGoals = 0x74; // bool
            public const nint m_bPreventOvershoot = 0x75; // bool
            public const nint m_bPreventUndershoot = 0x76; // bool
        }
        // Parent: CLeafUpdateNode
        // Fields count: 0
        public static class CZeroPoseUpdateNode {
        }
        // Parent: None
        // Fields count: 3
        public static class TagSpan_t {
            public const nint m_tagIndex = 0x0; // int32
            public const nint m_startCycle = 0x4; // float32
            public const nint m_endCycle = 0x8; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CAnimNodePath {
            public const nint m_path = 0x0; // AnimNodeID[11]
            public const nint m_nCount = 0x2C; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class ConfigIndex {
            public const nint m_nGroup = 0x0; // uint16
            public const nint m_nConfig = 0x2; // uint16
        }
        // Parent: None
        // Fields count: 2
        public static class MotionIndex {
            public const nint m_nGroup = 0x0; // uint16
            public const nint m_nMotion = 0x2; // uint16
        }
        // Parent: None
        // Fields count: 5
        public static class CMotionGraphConfig {
            public const nint m_paramValues = 0x0; // float32[4]
            public const nint m_flDuration = 0x10; // float32
            public const nint m_nMotionIndex = 0x14; // MotionIndex
            public const nint m_nSampleStart = 0x18; // int32
            public const nint m_nSampleCount = 0x1C; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CPoseHandle {
            public const nint m_nIndex = 0x0; // uint16
            public const nint m_eType = 0x2; // PoseType_t
        }
        // Parent: None
        // Fields count: 3
        public static class CAnimationGraphVisualizerPrimitiveBase {
            public const nint m_Type = 0x8; // CAnimationGraphVisualizerPrimitiveType
            public const nint m_OwningAnimNodePaths = 0xC; // AnimNodeID[11]
            public const nint m_nOwningAnimNodePathCount = 0x38; // int32
        }
        // Parent: CAnimationGraphVisualizerPrimitiveBase
        // Fields count: 3
        public static class CAnimationGraphVisualizerText {
            public const nint m_vWsPosition = 0x40; // VectorAligned
            public const nint m_Color = 0x50; // Color
            public const nint m_Text = 0x58; // CUtlString
        }
        // Parent: CAnimationGraphVisualizerPrimitiveBase
        // Fields count: 3
        public static class CAnimationGraphVisualizerSphere {
            public const nint m_vWsPosition = 0x40; // VectorAligned
            public const nint m_flRadius = 0x50; // float32
            public const nint m_Color = 0x54; // Color
        }
        // Parent: CAnimationGraphVisualizerPrimitiveBase
        // Fields count: 3
        public static class CAnimationGraphVisualizerLine {
            public const nint m_vWsPositionStart = 0x40; // VectorAligned
            public const nint m_vWsPositionEnd = 0x50; // VectorAligned
            public const nint m_Color = 0x60; // Color
        }
        // Parent: CAnimationGraphVisualizerPrimitiveBase
        // Fields count: 4
        public static class CAnimationGraphVisualizerPie {
            public const nint m_vWsCenter = 0x40; // VectorAligned
            public const nint m_vWsStart = 0x50; // VectorAligned
            public const nint m_vWsEnd = 0x60; // VectorAligned
            public const nint m_Color = 0x70; // Color
        }
        // Parent: CAnimationGraphVisualizerPrimitiveBase
        // Fields count: 2
        public static class CAnimationGraphVisualizerAxis {
            public const nint m_xWsTransform = 0x40; // CTransform
            public const nint m_flAxisSize = 0x60; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class IKBoneNameAndIndex_t {
            public const nint m_Name = 0x0; // CUtlString
        }
        // Parent: None
        // Fields count: 2
        public static class IKSolverSettings_t {
            public const nint m_SolverType = 0x0; // IKSolverType
            public const nint m_nNumIterations = 0x4; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class IKTargetSettings_t {
            public const nint m_TargetSource = 0x0; // IKTargetSource
            public const nint m_Bone = 0x8; // IKBoneNameAndIndex_t
            public const nint m_AnimgraphParameterNamePosition = 0x18; // AnimParamID
            public const nint m_AnimgraphParameterNameOrientation = 0x1C; // AnimParamID
            public const nint m_TargetCoordSystem = 0x20; // IKTargetCoordinateSystem
        }
        // Parent: CAnimGraphSettingsGroup
        // Fields count: 1
        public static class CAnimGraphNetworkSettings {
            public const nint m_bNetworkingEnabled = 0x20; // bool
        }
        // Parent: CAnimComponentUpdater
        // Fields count: 1
        public static class CActionComponentUpdater {
            public const nint m_actions = 0x30; // CUtlVector<CSmartPtr<CAnimActionUpdater>>
        }
        // Parent: CBinaryUpdateNode
        // Fields count: 4
        public static class CAddUpdateNode {
            public const nint m_footMotionTiming = 0x8C; // BinaryNodeChildOption
            public const nint m_bApplyToFootMotion = 0x90; // bool
            public const nint m_bApplyChannelsSeparately = 0x91; // bool
            public const nint m_bUseModelSpace = 0x92; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 6
        public static class CAimMatrixUpdateNode {
            public const nint m_opFixedSettings = 0x70; // AimMatrixOpFixedSettings_t
            public const nint m_target = 0x148; // AnimVectorSource
            public const nint m_paramIndex = 0x14C; // CAnimParamHandle
            public const nint m_hSequence = 0x150; // HSequence
            public const nint m_bResetChild = 0x154; // bool
            public const nint m_bLockWhenWaning = 0x155; // bool
        }
        // Parent: CLeafUpdateNode
        // Fields count: 0
        public static class CBindPoseUpdateNode {
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 0
        public static class CChoreoUpdateNode {
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CCycleControlUpdateNode {
            public const nint m_valueSource = 0x68; // AnimValueSource
            public const nint m_paramIndex = 0x6C; // CAnimParamHandle
        }
        // Parent: CLeafUpdateNode
        // Fields count: 5
        public static class CCycleControlClipUpdateNode {
            public const nint m_tags = 0x60; // CUtlVector<TagSpan_t>
            public const nint m_hSequence = 0x7C; // HSequence
            public const nint m_duration = 0x80; // float32
            public const nint m_valueSource = 0x84; // AnimValueSource
            public const nint m_paramIndex = 0x88; // CAnimParamHandle
        }
        // Parent: CLeafUpdateNode
        // Fields count: 8
        public static class CDirectionalBlendUpdateNode {
            public const nint m_hSequences = 0x5C; // HSequence[8]
            public const nint m_damping = 0x80; // CAnimInputDamping
            public const nint m_blendValueSource = 0x90; // AnimValueSource
            public const nint m_paramIndex = 0x94; // CAnimParamHandle
            public const nint m_playbackSpeed = 0x98; // float32
            public const nint m_duration = 0x9C; // float32
            public const nint m_bLoop = 0xA0; // bool
            public const nint m_bLockBlendOnReset = 0xA1; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 3
        public static class CDirectPlaybackUpdateNode {
            public const nint m_bFinishEarly = 0x6C; // bool
            public const nint m_bResetOnFinish = 0x6D; // bool
            public const nint m_allTags = 0x70; // CUtlVector<CDirectPlaybackTagData>
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 13
        public static class CFollowPathUpdateNode {
            public const nint m_flBlendOutTime = 0x6C; // float32
            public const nint m_bBlockNonPathMovement = 0x70; // bool
            public const nint m_bStopFeetAtGoal = 0x71; // bool
            public const nint m_bScaleSpeed = 0x72; // bool
            public const nint m_flScale = 0x74; // float32
            public const nint m_flMinAngle = 0x78; // float32
            public const nint m_flMaxAngle = 0x7C; // float32
            public const nint m_flSpeedScaleBlending = 0x80; // float32
            public const nint m_turnDamping = 0x88; // CAnimInputDamping
            public const nint m_facingTarget = 0x98; // AnimValueSource
            public const nint m_hParam = 0x9C; // CAnimParamHandle
            public const nint m_flTurnToFaceOffset = 0xA0; // float32
            public const nint m_bTurnToFace = 0xA4; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CFollowAttachmentUpdateNode {
            public const nint m_opFixedData = 0x70; // FollowAttachmentSettings_t
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 9
        public static class CFootAdjustmentUpdateNode {
            public const nint m_clips = 0x70; // CUtlVector<HSequence>
            public const nint m_hBasePoseCacheHandle = 0x88; // CPoseHandle
            public const nint m_facingTarget = 0x8C; // CAnimParamHandle
            public const nint m_flTurnTimeMin = 0x90; // float32
            public const nint m_flTurnTimeMax = 0x94; // float32
            public const nint m_flStepHeightMax = 0x98; // float32
            public const nint m_flStepHeightMaxAngle = 0x9C; // float32
            public const nint m_bResetChild = 0xA0; // bool
            public const nint m_bAnimationDriven = 0xA1; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 20
        public static class CFootLockUpdateNode {
            public const nint m_opFixedSettings = 0x68; // FootLockPoseOpFixedSettings
            public const nint m_footSettings = 0xD0; // CUtlVector<FootFixedSettings>
            public const nint m_hipShiftDamping = 0xE8; // CAnimInputDamping
            public const nint m_rootHeightDamping = 0xF8; // CAnimInputDamping
            public const nint m_flStrideCurveScale = 0x108; // float32
            public const nint m_flStrideCurveLimitScale = 0x10C; // float32
            public const nint m_flStepHeightIncreaseScale = 0x110; // float32
            public const nint m_flStepHeightDecreaseScale = 0x114; // float32
            public const nint m_flHipShiftScale = 0x118; // float32
            public const nint m_flBlendTime = 0x11C; // float32
            public const nint m_flMaxRootHeightOffset = 0x120; // float32
            public const nint m_flMinRootHeightOffset = 0x124; // float32
            public const nint m_flTiltPlanePitchSpringStrength = 0x128; // float32
            public const nint m_flTiltPlaneRollSpringStrength = 0x12C; // float32
            public const nint m_bApplyFootRotationLimits = 0x130; // bool
            public const nint m_bApplyHipShift = 0x131; // bool
            public const nint m_bModulateStepHeight = 0x132; // bool
            public const nint m_bResetChild = 0x133; // bool
            public const nint m_bEnableVerticalCurvedPaths = 0x134; // bool
            public const nint m_bEnableRootHeightDamping = 0x135; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 4
        public static class CFootPinningUpdateNode {
            public const nint m_poseOpFixedData = 0x70; // FootPinningPoseOpFixedData_t
            public const nint m_eTimingSource = 0xA0; // FootPinningTimingSource
            public const nint m_params = 0xA8; // CUtlVector<CAnimParamHandle>
            public const nint m_bResetChild = 0xC0; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CFootStepTriggerUpdateNode {
            public const nint m_triggers = 0x68; // CUtlVector<FootStepTrigger>
            public const nint m_flTolerance = 0x84; // float32
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 8
        public static class CHitReactUpdateNode {
            public const nint m_opFixedSettings = 0x68; // HitReactFixedSettings_t
            public const nint m_triggerParam = 0xB4; // CAnimParamHandle
            public const nint m_hitBoneParam = 0xB6; // CAnimParamHandle
            public const nint m_hitOffsetParam = 0xB8; // CAnimParamHandle
            public const nint m_hitDirectionParam = 0xBA; // CAnimParamHandle
            public const nint m_hitStrengthParam = 0xBC; // CAnimParamHandle
            public const nint m_flMinDelayBetweenHits = 0xC0; // float32
            public const nint m_bResetChild = 0xC4; // bool
        }
        // Parent: CLeafUpdateNode
        // Fields count: 0
        public static class CInputStreamUpdateNode {
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CJiggleBoneUpdateNode {
            public const nint m_opFixedData = 0x68; // JiggleBoneSettingsList_t
        }
        // Parent: CSequenceUpdateNode
        // Fields count: 8
        public static class CJumpHelperUpdateNode {
            public const nint m_hTargetParam = 0xA8; // CAnimParamHandle
            public const nint m_flOriginalJumpMovement = 0xAC; // 
            public const nint m_flOriginalJumpDuration = 0xB8; // float32
            public const nint m_flJumpStartCycle = 0xBC; // float32
            public const nint m_flJumpEndCycle = 0xC0; // float32
            public const nint m_eCorrectionMethod = 0xC4; // JumpCorrectionMethod
            public const nint m_bTranslationAxis = 0xC8; // bool[3]
            public const nint m_bScaleSpeed = 0xCB; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 6
        public static class CLookAtUpdateNode {
            public const nint m_opFixedSettings = 0x70; // LookAtOpFixedSettings_t
            public const nint m_target = 0x138; // AnimVectorSource
            public const nint m_paramIndex = 0x13C; // CAnimParamHandle
            public const nint m_weightParamIndex = 0x13E; // CAnimParamHandle
            public const nint m_bResetChild = 0x140; // bool
            public const nint m_bLockWhenWaning = 0x141; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 12
        public static class CMoverUpdateNode {
            public const nint m_damping = 0x70; // CAnimInputDamping
            public const nint m_facingTarget = 0x80; // AnimValueSource
            public const nint m_hMoveVecParam = 0x84; // CAnimParamHandle
            public const nint m_hMoveHeadingParam = 0x86; // CAnimParamHandle
            public const nint m_hTurnToFaceParam = 0x88; // CAnimParamHandle
            public const nint m_flTurnToFaceOffset = 0x8C; // float32
            public const nint m_flTurnToFaceLimit = 0x90; // float32
            public const nint m_bAdditive = 0x94; // bool
            public const nint m_bApplyMovement = 0x95; // bool
            public const nint m_bOrientMovement = 0x96; // bool
            public const nint m_bApplyRotation = 0x97; // bool
            public const nint m_bLimitOnly = 0x98; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CPathHelperUpdateNode {
            public const nint m_flStoppingRadius = 0x68; // float32
            public const nint m_flStoppingSpeedScale = 0x6C; // float32
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CRagdollUpdateNode {
            public const nint m_nWeightListIndex = 0x68; // int32
            public const nint m_poseControlMethod = 0x6C; // RagdollPoseControl
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 0
        public static class CRootUpdateNode {
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CSetFacingUpdateNode {
            public const nint m_facingMode = 0x68; // FacingMode
            public const nint m_bResetChild = 0x6C; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CSlowDownOnSlopesUpdateNode {
            public const nint m_flSlowDownStrength = 0x68; // float32
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 2
        public static class CSolveIKChainUpdateNode {
            public const nint m_targetHandles = 0x68; // CUtlVector<CSolveIKTargetHandle_t>
            public const nint m_opFixedData = 0x80; // SolveIKChainPoseOpFixedSettings_t
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CSpeedScaleUpdateNode {
            public const nint m_paramIndex = 0x68; // CAnimParamHandle
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 4
        public static class CStanceOverrideUpdateNode {
            public const nint m_footStanceInfo = 0x68; // CUtlVector<StanceInfo_t>
            public const nint m_pStanceSourceNode = 0x80; // CAnimUpdateNodeRef
            public const nint m_hParameter = 0x90; // CAnimParamHandle
            public const nint m_eMode = 0x94; // StanceOverrideMode
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CStanceScaleUpdateNode {
            public const nint m_hParam = 0x68; // CAnimParamHandle
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 5
        public static class CStopAtGoalUpdateNode {
            public const nint m_flOuterRadius = 0x6C; // float32
            public const nint m_flInnerRadius = 0x70; // float32
            public const nint m_flMaxScale = 0x74; // float32
            public const nint m_flMinScale = 0x78; // float32
            public const nint m_damping = 0x80; // CAnimInputDamping
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 6
        public static class CTurnHelperUpdateNode {
            public const nint m_facingTarget = 0x6C; // AnimValueSource
            public const nint m_turnStartTimeOffset = 0x70; // float32
            public const nint m_turnDuration = 0x74; // float32
            public const nint m_bMatchChildDuration = 0x78; // bool
            public const nint m_manualTurnOffset = 0x7C; // float32
            public const nint m_bUseManualTurnOffset = 0x80; // bool
        }
        // Parent: CUnaryUpdateNode
        // Fields count: 1
        public static class CTwoBoneIKUpdateNode {
            public const nint m_opFixedData = 0x70; // TwoBoneIKSettings_t
        }
    }
    // Module: client.dll
    // Classes count: 434
    // Enums count: 8
    public static class Client {
        // Alignment: 4
        // Members count: 5
        public enum C_BaseCombatCharacter__WaterWakeMode_t : uint {
            WATER_WAKE_NONE = 0x0,
            WATER_WAKE_IDLE = 0x1,
            WATER_WAKE_WALKING = 0x2,
            WATER_WAKE_RUNNING = 0x3,
            WATER_WAKE_WATER_OVERHEAD = 0x4
        }
        // Alignment: 4
        // Members count: 6
        public enum CompositeMaterialMatchFilterType_t : uint {
            MATCH_FILTER_MATERIAL_ATTRIBUTE_EXISTS = 0x0,
            MATCH_FILTER_MATERIAL_SHADER = 0x1,
            MATCH_FILTER_MATERIAL_NAME_SUBSTR = 0x2,
            MATCH_FILTER_MATERIAL_ATTRIBUTE_EQUALS = 0x3,
            MATCH_FILTER_MATERIAL_PROPERTY_EXISTS = 0x4,
            MATCH_FILTER_MATERIAL_PROPERTY_EQUALS = 0x5
        }
        // Alignment: 4
        // Members count: 2
        public enum CompositeMaterialVarSystemVar_t : uint {
            COMPMATSYSVAR_COMPOSITETIME = 0x0,
            COMPMATSYSVAR_EMPTY_RESOURCE_SPACER = 0x1
        }
        // Alignment: 4
        // Members count: 14
        public enum CompositeMaterialInputLooseVariableType_t : uint {
            LOOSE_VARIABLE_TYPE_BOOLEAN = 0x0,
            LOOSE_VARIABLE_TYPE_INTEGER1 = 0x1,
            LOOSE_VARIABLE_TYPE_INTEGER2 = 0x2,
            LOOSE_VARIABLE_TYPE_INTEGER3 = 0x3,
            LOOSE_VARIABLE_TYPE_INTEGER4 = 0x4,
            LOOSE_VARIABLE_TYPE_FLOAT1 = 0x5,
            LOOSE_VARIABLE_TYPE_FLOAT2 = 0x6,
            LOOSE_VARIABLE_TYPE_FLOAT3 = 0x7,
            LOOSE_VARIABLE_TYPE_FLOAT4 = 0x8,
            LOOSE_VARIABLE_TYPE_COLOR4 = 0x9,
            LOOSE_VARIABLE_TYPE_STRING = 0xA,
            LOOSE_VARIABLE_TYPE_SYSTEMVAR = 0xB,
            LOOSE_VARIABLE_TYPE_RESOURCE_MATERIAL = 0xC,
            LOOSE_VARIABLE_TYPE_RESOURCE_TEXTURE = 0xD
        }
        // Alignment: 4
        // Members count: 7
        public enum CompositeMaterialInputTextureType_t : uint {
            INPUT_TEXTURE_TYPE_DEFAULT = 0x0,
            INPUT_TEXTURE_TYPE_NORMALMAP = 0x1,
            INPUT_TEXTURE_TYPE_COLOR = 0x2,
            INPUT_TEXTURE_TYPE_MASKS = 0x3,
            INPUT_TEXTURE_TYPE_ROUGHNESS = 0x4,
            INPUT_TEXTURE_TYPE_PEARLESCENCE_MASK = 0x5,
            INPUT_TEXTURE_TYPE_AO = 0x6
        }
        // Alignment: 4
        // Members count: 10
        public enum CompMatPropertyMutatorType_t : uint {
            COMP_MAT_PROPERTY_MUTATOR_INIT = 0x0,
            COMP_MAT_PROPERTY_MUTATOR_COPY_MATCHING_KEYS = 0x1,
            COMP_MAT_PROPERTY_MUTATOR_COPY_KEYS_WITH_SUFFIX = 0x2,
            COMP_MAT_PROPERTY_MUTATOR_COPY_PROPERTY = 0x3,
            COMP_MAT_PROPERTY_MUTATOR_SET_VALUE = 0x4,
            COMP_MAT_PROPERTY_MUTATOR_GENERATE_TEXTURE = 0x5,
            COMP_MAT_PROPERTY_MUTATOR_CONDITIONAL_MUTATORS = 0x6,
            COMP_MAT_PROPERTY_MUTATOR_POP_INPUT_QUEUE = 0x7,
            COMP_MAT_PROPERTY_MUTATOR_DRAW_TEXT = 0x8,
            COMP_MAT_PROPERTY_MUTATOR_RANDOM_ROLL_INPUT_VARIABLES = 0x9
        }
        // Alignment: 4
        // Members count: 3
        public enum CompMatPropertyMutatorConditionType_t : uint {
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_EXISTS = 0x0,
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EXISTS = 0x1,
            COMP_MAT_MUTATOR_CONDITION_INPUT_CONTAINER_VALUE_EQUALS = 0x2
        }
        // Alignment: 4
        // Members count: 6
        public enum CompositeMaterialInputContainerSourceType_t : uint {
            CONTAINER_SOURCE_TYPE_TARGET_MATERIAL = 0x0,
            CONTAINER_SOURCE_TYPE_MATERIAL_FROM_TARGET_ATTR = 0x1,
            CONTAINER_SOURCE_TYPE_SPECIFIC_MATERIAL = 0x2,
            CONTAINER_SOURCE_TYPE_LOOSE_VARIABLES = 0x3,
            CONTAINER_SOURCE_TYPE_VARIABLE_FROM_TARGET_ATTR = 0x4,
            CONTAINER_SOURCE_TYPE_TARGET_INSTANCE_MATERIAL = 0x5
        }
        // Parent: None
        // Fields count: 0
        public static class CEntityComponent {
        }
        // Parent: None
        // Fields count: 11
        public static class CEntityIdentity {
            public const nint m_nameStringableIndex = 0x14; // int32
            public const nint m_name = 0x18; // CUtlSymbolLarge
            public const nint m_designerName = 0x20; // CUtlSymbolLarge
            public const nint m_flags = 0x30; // uint32
            public const nint m_worldGroupId = 0x38; // WorldGroupId_t
            public const nint m_fDataObjectTypes = 0x3C; // uint32
            public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
            public const nint m_pPrev = 0x58; // CEntityIdentity*
            public const nint m_pNext = 0x60; // CEntityIdentity*
            public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
            public const nint m_pNextByClass = 0x70; // CEntityIdentity*
        }
        // Parent: None
        // Fields count: 4
        public static class CEntityInstance {
            public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
            public const nint m_pEntity = 0x10; // CEntityIdentity*
            public const nint m_CScriptComponent = 0x28; // CScriptComponent*
            public const nint m_bVisibleinPVS = 0x30; // bool
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CScriptComponent {
            public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
        }
        // Parent: CEntityComponent
        // Fields count: 2
        public static class CBodyComponent {
            public const nint m_pSceneNode = 0x8; // CGameSceneNode*
            public const nint __m_pChainEntity = 0x20; // CNetworkVarChainer
        }
        // Parent: CBodyComponent
        // Fields count: 2
        public static class CBodyComponentPoint {
            public const nint m_sceneNode = 0x50; // CGameSceneNode
            public const nint __m_pChainEntity = 0x1A0; // CNetworkVarChainer
        }
        // Parent: CBodyComponent
        // Fields count: 2
        public static class CBodyComponentSkeletonInstance {
            public const nint m_skeletonInstance = 0x50; // CSkeletonInstance
            public const nint __m_pChainEntity = 0x430; // CNetworkVarChainer
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CHitboxComponent {
            public const nint m_bvDisabledHitGroups = 0x24; // uint32[1]
        }
        // Parent: CEntityComponent
        // Fields count: 66
        public static class CLightComponent {
            public const nint __m_pChainEntity = 0x48; // CNetworkVarChainer
            public const nint m_Color = 0x85; // Color
            public const nint m_SecondaryColor = 0x89; // Color
            public const nint m_flBrightness = 0x90; // float32
            public const nint m_flBrightnessScale = 0x94; // float32
            public const nint m_flBrightnessMult = 0x98; // float32
            public const nint m_flRange = 0x9C; // float32
            public const nint m_flFalloff = 0xA0; // float32
            public const nint m_flAttenuation0 = 0xA4; // float32
            public const nint m_flAttenuation1 = 0xA8; // float32
            public const nint m_flAttenuation2 = 0xAC; // float32
            public const nint m_flTheta = 0xB0; // float32
            public const nint m_flPhi = 0xB4; // float32
            public const nint m_hLightCookie = 0xB8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_nCascades = 0xC0; // int32
            public const nint m_nCastShadows = 0xC4; // int32
            public const nint m_nShadowWidth = 0xC8; // int32
            public const nint m_nShadowHeight = 0xCC; // int32
            public const nint m_bRenderDiffuse = 0xD0; // bool
            public const nint m_nRenderSpecular = 0xD4; // int32
            public const nint m_bRenderTransmissive = 0xD8; // bool
            public const nint m_flOrthoLightWidth = 0xDC; // float32
            public const nint m_flOrthoLightHeight = 0xE0; // float32
            public const nint m_nStyle = 0xE4; // int32
            public const nint m_Pattern = 0xE8; // CUtlString
            public const nint m_nCascadeRenderStaticObjects = 0xF0; // int32
            public const nint m_flShadowCascadeCrossFade = 0xF4; // float32
            public const nint m_flShadowCascadeDistanceFade = 0xF8; // float32
            public const nint m_flShadowCascadeDistance0 = 0xFC; // float32
            public const nint m_flShadowCascadeDistance1 = 0x100; // float32
            public const nint m_flShadowCascadeDistance2 = 0x104; // float32
            public const nint m_flShadowCascadeDistance3 = 0x108; // float32
            public const nint m_nShadowCascadeResolution0 = 0x10C; // int32
            public const nint m_nShadowCascadeResolution1 = 0x110; // int32
            public const nint m_nShadowCascadeResolution2 = 0x114; // int32
            public const nint m_nShadowCascadeResolution3 = 0x118; // int32
            public const nint m_bUsesBakedShadowing = 0x11C; // bool
            public const nint m_nShadowPriority = 0x120; // int32
            public const nint m_nBakedShadowIndex = 0x124; // int32
            public const nint m_bRenderToCubemaps = 0x128; // bool
            public const nint m_nDirectLight = 0x12C; // int32
            public const nint m_nIndirectLight = 0x130; // int32
            public const nint m_flFadeMinDist = 0x134; // float32
            public const nint m_flFadeMaxDist = 0x138; // float32
            public const nint m_flShadowFadeMinDist = 0x13C; // float32
            public const nint m_flShadowFadeMaxDist = 0x140; // float32
            public const nint m_bEnabled = 0x144; // bool
            public const nint m_bFlicker = 0x145; // bool
            public const nint m_bPrecomputedFieldsValid = 0x146; // bool
            public const nint m_vPrecomputedBoundsMins = 0x148; // 
            public const nint m_vPrecomputedBoundsMaxs = 0x154; // 
            public const nint m_vPrecomputedOBBOrigin = 0x160; // 
            public const nint m_vPrecomputedOBBAngles = 0x16C; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0x178; // 
            public const nint m_flPrecomputedMaxRange = 0x184; // float32
            public const nint m_nFogLightingMode = 0x188; // int32
            public const nint m_flFogContributionStength = 0x18C; // float32
            public const nint m_flNearClipPlane = 0x190; // float32
            public const nint m_SkyColor = 0x194; // Color
            public const nint m_flSkyIntensity = 0x198; // float32
            public const nint m_SkyAmbientBounce = 0x19C; // Color
            public const nint m_bUseSecondaryColor = 0x1A0; // bool
            public const nint m_bMixedShadows = 0x1A1; // bool
            public const nint m_flLightStyleStartTime = 0x1A4; // GameTime_t
            public const nint m_flCapsuleLength = 0x1A8; // float32
            public const nint m_flMinRoughness = 0x1AC; // float32
        }
        // Parent: CEntityComponent
        // Fields count: 5
        public static class CRenderComponent {
            public const nint __m_pChainEntity = 0x10; // CNetworkVarChainer
            public const nint m_bIsRenderingWithViewModels = 0x50; // bool
            public const nint m_nSplitscreenFlags = 0x54; // uint32
            public const nint m_bEnableRendering = 0x60; // bool
            public const nint m_bInterpolationReadyToDraw = 0xB0; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class CBuoyancyHelper {
            public const nint m_flFluidDensity = 0x18; // float32
        }
        // Parent: None
        // Fields count: 0
        public static class CBasePlayerControllerAPI {
        }
        // Parent: None
        // Fields count: 2
        public static class C_CommandContext {
            public const nint needsprocessing = 0x0; // bool
            public const nint command_number = 0x90; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class ViewAngleServerChange_t {
            public const nint nType = 0x30; // FixAngleSet_t
            public const nint qAngle = 0x34; // QAngle
            public const nint nIndex = 0x40; // uint32
        }
        // Parent: None
        // Fields count: 0
        public static class CDynamicPropAPI {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_AutoaimServices {
        }
        // Parent: None
        // Fields count: 5
        public static class audioparams_t {
            public const nint localSound = 0x8; // Vector[8]
            public const nint soundscapeIndex = 0x68; // int32
            public const nint localBits = 0x6C; // uint8
            public const nint soundscapeEntityListIndex = 0x70; // int32
            public const nint soundEventHash = 0x74; // uint32
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 20
        public static class CPlayer_CameraServices {
            public const nint m_vecCsViewPunchAngle = 0x40; // QAngle
            public const nint m_nCsViewPunchAngleTick = 0x4C; // GameTick_t
            public const nint m_flCsViewPunchAngleTickRatio = 0x50; // float32
            public const nint m_PlayerFog = 0x58; // C_fogplayerparams_t
            public const nint m_hColorCorrectionCtrl = 0x98; // CHandle<C_ColorCorrection>
            public const nint m_hViewEntity = 0x9C; // CHandle<C_BaseEntity>
            public const nint m_hTonemapController = 0xA0; // CHandle<C_TonemapController2>
            public const nint m_audio = 0xA8; // audioparams_t
            public const nint m_PostProcessingVolumes = 0x120; // C_NetworkUtlVectorBase<CHandle<C_PostProcessingVolume>>
            public const nint m_flOldPlayerZ = 0x138; // float32
            public const nint m_flOldPlayerViewOffsetZ = 0x13C; // float32
            public const nint m_CurrentFog = 0x140; // fogparams_t
            public const nint m_hOldFogController = 0x1A8; // CHandle<C_FogController>
            public const nint m_bOverrideFogColor = 0x1AC; // bool[5]
            public const nint m_OverrideFogColor = 0x1B1; // Color[5]
            public const nint m_bOverrideFogStartEnd = 0x1C5; // bool[5]
            public const nint m_fOverrideFogStart = 0x1CC; // float32[5]
            public const nint m_fOverrideFogEnd = 0x1E0; // float32[5]
            public const nint m_hActivePostProcessingVolume = 0x1F4; // CHandle<C_PostProcessingVolume>
            public const nint m_angDemoViewAngles = 0x1F8; // QAngle
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_FlashlightServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_ItemServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 15
        public static class CPlayer_MovementServices {
            public const nint m_nImpulse = 0x40; // int32
            public const nint m_nButtons = 0x48; // CInButtonState
            public const nint m_nQueuedButtonDownMask = 0x68; // uint64
            public const nint m_nQueuedButtonChangeMask = 0x70; // uint64
            public const nint m_nButtonDoublePressed = 0x78; // uint64
            public const nint m_pButtonPressedCmdNumber = 0x80; // uint32[64]
            public const nint m_nLastCommandNumberProcessed = 0x180; // uint32
            public const nint m_nToggleButtonDownMask = 0x188; // uint64
            public const nint m_flMaxspeed = 0x198; // float32
            public const nint m_arrForceSubtickMoveWhen = 0x19C; // float32[4]
            public const nint m_flForwardMove = 0x1AC; // float32
            public const nint m_flLeftMove = 0x1B0; // float32
            public const nint m_flUpMove = 0x1B4; // float32
            public const nint m_vecLastMovementImpulses = 0x1B8; // 
            public const nint m_vecOldViewAngles = 0x1C4; // QAngle
        }
        // Parent: CPlayer_MovementServices
        // Fields count: 12
        public static class CPlayer_MovementServices_Humanoid {
            public const nint m_flStepSoundTime = 0x1D8; // float32
            public const nint m_flFallVelocity = 0x1DC; // float32
            public const nint m_bInCrouch = 0x1E0; // bool
            public const nint m_nCrouchState = 0x1E4; // uint32
            public const nint m_flCrouchTransitionStartTime = 0x1E8; // GameTime_t
            public const nint m_bDucked = 0x1EC; // bool
            public const nint m_bDucking = 0x1ED; // bool
            public const nint m_bInDuckJump = 0x1EE; // bool
            public const nint m_groundNormal = 0x1F0; // 
            public const nint m_flSurfaceFriction = 0x1FC; // float32
            public const nint m_surfaceProps = 0x200; // CUtlStringToken
            public const nint m_nStepside = 0x210; // int32
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 6
        public static class CPlayer_ObserverServices {
            public const nint m_iObserverMode = 0x40; // uint8
            public const nint m_hObserverTarget = 0x44; // CHandle<C_BaseEntity>
            public const nint m_iObserverLastMode = 0x48; // ObserverMode_t
            public const nint m_bForcedObserverMode = 0x4C; // bool
            public const nint m_flObserverChaseDistance = 0x50; // float32
            public const nint m_flObserverChaseDistanceCalcTime = 0x54; // GameTime_t
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_UseServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_WaterServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 4
        public static class CPlayer_WeaponServices {
            public const nint m_hMyWeapons = 0x40; // C_NetworkUtlVectorBase<CHandle<C_BasePlayerWeapon>>
            public const nint m_hActiveWeapon = 0x58; // CHandle<C_BasePlayerWeapon>
            public const nint m_hLastWeapon = 0x5C; // CHandle<C_BasePlayerWeapon>
            public const nint m_iAmmo = 0x60; // uint16[32]
        }
        // Parent: CBodyComponentSkeletonInstance
        // Fields count: 2
        public static class CBodyComponentBaseAnimGraph {
            public const nint m_animationController = 0x460; // CBaseAnimGraphController
            public const nint __m_pChainEntity = 0x1C28; // CNetworkVarChainer
        }
        // Parent: None
        // Fields count: 2
        public static class EntityRenderAttribute_t {
            public const nint m_ID = 0x30; // CUtlStringToken
            public const nint m_Values = 0x34; // Vector4D
        }
        // Parent: None
        // Fields count: 4
        public static class ActiveModelConfig_t {
            public const nint m_Handle = 0x28; // ModelConfigHandle_t
            public const nint m_Name = 0x30; // CUtlSymbolLarge
            public const nint m_AssociatedEntities = 0x38; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_AssociatedEntityNames = 0x50; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
        }
        // Parent: CBodyComponentSkeletonInstance
        // Fields count: 1
        public static class CBodyComponentBaseModelEntity {
            public const nint __m_pChainEntity = 0x460; // CNetworkVarChainer
        }
        // Parent: None
        // Fields count: 2
        public static class CGameSceneNodeHandle {
            public const nint m_hOwner = 0x8; // CEntityHandle
            public const nint m_name = 0xC; // CUtlStringToken
        }
        // Parent: None
        // Fields count: 32
        public static class CGameSceneNode {
            public const nint m_nodeToWorld = 0x10; // CTransform
            public const nint m_pOwner = 0x30; // CEntityInstance*
            public const nint m_pParent = 0x38; // CGameSceneNode*
            public const nint m_pChild = 0x40; // CGameSceneNode*
            public const nint m_pNextSibling = 0x48; // CGameSceneNode*
            public const nint m_hParent = 0x70; // CGameSceneNodeHandle
            public const nint m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
            public const nint m_angRotation = 0xB8; // QAngle
            public const nint m_flScale = 0xC4; // float32
            public const nint m_vecAbsOrigin = 0xC8; // 
            public const nint m_angAbsRotation = 0xD4; // QAngle
            public const nint m_flAbsScale = 0xE0; // float32
            public const nint m_nParentAttachmentOrBone = 0xE4; // int16
            public const nint m_bDebugAbsOriginChanges = 0xE6; // bool
            public const nint m_bDormant = 0xE7; // bool
            public const nint m_bForceParentToBeNetworked = 0xE8; // bool
            public const nint m_bDirtyHierarchy = 0x0; // bitfield:1
            public const nint m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
            public const nint m_bNetworkedPositionChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedAnglesChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedScaleChanged = 0x0; // bitfield:1
            public const nint m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
            public const nint m_bBoneMergeFlex = 0x0; // bitfield:1
            public const nint m_nLatchAbsOrigin = 0x0; // bitfield:2
            public const nint m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
            public const nint m_nHierarchicalDepth = 0xEB; // uint8
            public const nint m_nHierarchyType = 0xEC; // uint8
            public const nint m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xED; // uint8
            public const nint m_name = 0xF0; // CUtlStringToken
            public const nint m_hierarchyAttachName = 0x130; // CUtlStringToken
            public const nint m_flZOffset = 0x134; // float32
            public const nint m_vRenderOrigin = 0x138; // 
        }
        // Parent: None
        // Fields count: 6
        public static class SequenceHistory_t {
            public const nint m_hSequence = 0x0; // HSequence
            public const nint m_flSeqStartTime = 0x4; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x8; // float32
            public const nint m_nSeqLoopMode = 0xC; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x10; // float32
            public const nint m_flCyclesPerSecond = 0x14; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class CNetworkedSequenceOperation {
            public const nint m_hSequence = 0x8; // HSequence
            public const nint m_flPrevCycle = 0xC; // float32
            public const nint m_flCycle = 0x10; // float32
            public const nint m_flWeight = 0x14; // CNetworkedQuantizedFloat
            public const nint m_bSequenceChangeNetworked = 0x1C; // bool
            public const nint m_bDiscontinuity = 0x1D; // bool
            public const nint m_flPrevCycleFromDiscontinuity = 0x20; // float32
            public const nint m_flPrevCycleForAnimEventDetection = 0x24; // float32
        }
        // Parent: None
        // Fields count: 7
        public static class CModelState {
            public const nint m_hModel = 0xA0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_ModelName = 0xA8; // CUtlSymbolLarge
            public const nint m_bClientClothCreationSuppressed = 0xE8; // bool
            public const nint m_MeshGroupMask = 0x180; // uint64
            public const nint m_nIdealMotionType = 0x202; // int8
            public const nint m_nForceLOD = 0x203; // int8
            public const nint m_nClothUpdateFlags = 0x204; // int8
        }
        // Parent: CGameSceneNode
        // Fields count: 8
        public static class CSkeletonInstance {
            public const nint m_modelState = 0x160; // CModelState
            public const nint m_bIsAnimationEnabled = 0x370; // bool
            public const nint m_bUseParentRenderBounds = 0x371; // bool
            public const nint m_bDisableSolidCollisionsForHierarchy = 0x372; // bool
            public const nint m_bDirtyMotionType = 0x0; // bitfield:1
            public const nint m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
            public const nint m_materialGroup = 0x374; // CUtlStringToken
            public const nint m_nHitboxSet = 0x378; // uint8
        }
        // Parent: None
        // Fields count: 2
        public static class IntervalTimer {
            public const nint m_timestamp = 0x8; // GameTime_t
            public const nint m_nWorldGroupId = 0xC; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 4
        public static class CountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // GameTime_t
            public const nint m_timescale = 0x10; // float32
            public const nint m_nWorldGroupId = 0x14; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 3
        public static class EngineCountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // float32
            public const nint m_timescale = 0x10; // float32
        }
        // Parent: IntervalTimer
        // Fields count: 7
        public static class CTimeline {
            public const nint m_flValues = 0x10; // float32[64]
            public const nint m_nValueCounts = 0x110; // int32[64]
            public const nint m_nBucketCount = 0x210; // int32
            public const nint m_flInterval = 0x214; // float32
            public const nint m_flFinalValue = 0x218; // float32
            public const nint m_nCompressionType = 0x21C; // TimelineCompression_t
            public const nint m_bStopped = 0x220; // bool
        }
        // Parent: None
        // Fields count: 24
        public static class CAnimGraphNetworkedVariables {
            public const nint m_PredNetBoolVariables = 0x8; // C_NetworkUtlVectorBase<uint32>
            public const nint m_PredNetByteVariables = 0x20; // C_NetworkUtlVectorBase<uint8>
            public const nint m_PredNetUInt16Variables = 0x38; // C_NetworkUtlVectorBase<uint16>
            public const nint m_PredNetIntVariables = 0x50; // C_NetworkUtlVectorBase<int32>
            public const nint m_PredNetUInt32Variables = 0x68; // C_NetworkUtlVectorBase<uint32>
            public const nint m_PredNetUInt64Variables = 0x80; // C_NetworkUtlVectorBase<uint64>
            public const nint m_PredNetFloatVariables = 0x98; // C_NetworkUtlVectorBase<float32>
            public const nint m_PredNetVectorVariables = 0xB0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PredNetQuaternionVariables = 0xC8; // C_NetworkUtlVectorBase<Quaternion>
            public const nint m_PredNetGlobalSymbolVariables = 0xE0; // C_NetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_OwnerOnlyPredNetBoolVariables = 0xF8; // C_NetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetByteVariables = 0x110; // C_NetworkUtlVectorBase<uint8>
            public const nint m_OwnerOnlyPredNetUInt16Variables = 0x128; // C_NetworkUtlVectorBase<uint16>
            public const nint m_OwnerOnlyPredNetIntVariables = 0x140; // C_NetworkUtlVectorBase<int32>
            public const nint m_OwnerOnlyPredNetUInt32Variables = 0x158; // C_NetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetUInt64Variables = 0x170; // C_NetworkUtlVectorBase<uint64>
            public const nint m_OwnerOnlyPredNetFloatVariables = 0x188; // C_NetworkUtlVectorBase<float32>
            public const nint m_OwnerOnlyPredNetVectorVariables = 0x1A0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_OwnerOnlyPredNetQuaternionVariables = 0x1B8; // C_NetworkUtlVectorBase<Quaternion>
            public const nint m_OwnerOnlyPredNetGlobalSymbolVariables = 0x1D0; // C_NetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_nBoolVariablesCount = 0x1E8; // int32
            public const nint m_nOwnerOnlyBoolVariablesCount = 0x1EC; // int32
            public const nint m_nRandomSeedOffset = 0x1F0; // int32
            public const nint m_flLastTeleportTime = 0x1F4; // float32
        }
        // Parent: None
        // Fields count: 0
        public static class C_BaseEntityAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CTakeDamageInfoAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CClientPointEntityAPI {
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 1
        public static class CPulseGraphInstance_ClientEntity {
            public const nint m_pParent = 0xD8; // CClientScriptEntity*
        }
        // Parent: CEntityInstance
        // Fields count: 80
        public static class C_BaseEntity {
            public const nint m_CBodyComponent = 0x38; // CBodyComponent*
            public const nint m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
            public const nint m_nLastThinkTick = 0x310; // GameTick_t
            public const nint m_pGameSceneNode = 0x318; // CGameSceneNode*
            public const nint m_pRenderComponent = 0x320; // CRenderComponent*
            public const nint m_pCollision = 0x328; // CCollisionProperty*
            public const nint m_iMaxHealth = 0x330; // int32
            public const nint m_iHealth = 0x334; // int32
            public const nint m_lifeState = 0x338; // uint8
            public const nint m_bTakesDamage = 0x339; // bool
            public const nint m_nTakeDamageFlags = 0x33C; // TakeDamageFlags_t
            public const nint m_bIsPlatform = 0x340; // bool
            public const nint m_ubInterpolationFrame = 0x341; // uint8
            public const nint m_hSceneObjectController = 0x344; // CHandle<C_BaseEntity>
            public const nint m_nNoInterpolationTick = 0x348; // int32
            public const nint m_nVisibilityNoInterpolationTick = 0x34C; // int32
            public const nint m_flProxyRandomValue = 0x350; // float32
            public const nint m_iEFlags = 0x354; // int32
            public const nint m_nWaterType = 0x358; // uint8
            public const nint m_bInterpolateEvenWithNoModel = 0x359; // bool
            public const nint m_bPredictionEligible = 0x35A; // bool
            public const nint m_bApplyLayerMatchIDToModel = 0x35B; // bool
            public const nint m_tokLayerMatchID = 0x35C; // CUtlStringToken
            public const nint m_nSubclassID = 0x360; // CUtlStringToken
            public const nint m_nSimulationTick = 0x370; // int32
            public const nint m_iCurrentThinkContext = 0x374; // int32
            public const nint m_aThinkFunctions = 0x378; // CUtlVector<thinkfunc_t>
            public const nint m_nDisableContextThinkStartTick = 0x390; // GameTick_t
            public const nint m_flAnimTime = 0x394; // float32
            public const nint m_flSimulationTime = 0x398; // float32
            public const nint m_nSceneObjectOverrideFlags = 0x39C; // uint8
            public const nint m_bHasSuccessfullyInterpolated = 0x39D; // bool
            public const nint m_bHasAddedVarsToInterpolation = 0x39E; // bool
            public const nint m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x39F; // bool
            public const nint m_nInterpolationLatchDirtyFlags = 0x3A0; // int32[2]
            public const nint m_ListEntry = 0x3A8; // uint16[11]
            public const nint m_flCreateTime = 0x3C0; // GameTime_t
            public const nint m_flSpeed = 0x3C4; // float32
            public const nint m_EntClientFlags = 0x3C8; // uint16
            public const nint m_bClientSideRagdoll = 0x3CA; // bool
            public const nint m_iTeamNum = 0x3CB; // uint8
            public const nint m_spawnflags = 0x3CC; // uint32
            public const nint m_nNextThinkTick = 0x3D0; // GameTick_t
            public const nint m_fFlags = 0x3D4; // uint32
            public const nint m_vecAbsVelocity = 0x3D8; // 
            public const nint m_vecVelocity = 0x3E8; // CNetworkVelocityVector
            public const nint m_vecBaseVelocity = 0x418; // 
            public const nint m_hEffectEntity = 0x424; // CHandle<C_BaseEntity>
            public const nint m_hOwnerEntity = 0x428; // CHandle<C_BaseEntity>
            public const nint m_MoveCollide = 0x42C; // MoveCollide_t
            public const nint m_MoveType = 0x42D; // MoveType_t
            public const nint m_nActualMoveType = 0x42E; // MoveType_t
            public const nint m_flWaterLevel = 0x430; // float32
            public const nint m_fEffects = 0x434; // uint32
            public const nint m_hGroundEntity = 0x438; // CHandle<C_BaseEntity>
            public const nint m_flFriction = 0x43C; // float32
            public const nint m_flElasticity = 0x440; // float32
            public const nint m_flGravityScale = 0x444; // float32
            public const nint m_flTimeScale = 0x448; // float32
            public const nint m_bAnimatedEveryTick = 0x44C; // bool
            public const nint m_flNavIgnoreUntilTime = 0x450; // GameTime_t
            public const nint m_hThink = 0x454; // uint16
            public const nint m_fBBoxVisFlags = 0x460; // uint8
            public const nint m_bPredictable = 0x461; // bool
            public const nint m_bRenderWithViewModels = 0x462; // bool
            public const nint m_nSplitUserPlayerPredictionSlot = 0x464; // CSplitScreenSlot
            public const nint m_nFirstPredictableCommand = 0x468; // int32
            public const nint m_nLastPredictableCommand = 0x46C; // int32
            public const nint m_hOldMoveParent = 0x470; // CHandle<C_BaseEntity>
            public const nint m_Particles = 0x478; // CParticleProperty
            public const nint m_vecPredictedScriptFloats = 0x4A0; // CUtlVector<float32>
            public const nint m_vecPredictedScriptFloatIDs = 0x4B8; // CUtlVector<int32>
            public const nint m_nNextScriptVarRecordID = 0x4E8; // int32
            public const nint m_vecAngVelocity = 0x4F8; // QAngle
            public const nint m_DataChangeEventRef = 0x504; // int32
            public const nint m_dependencies = 0x508; // CUtlVector<CEntityHandle>
            public const nint m_nCreationTick = 0x520; // int32
            public const nint m_bAnimTimeChanged = 0x539; // bool
            public const nint m_bSimulationTimeChanged = 0x53A; // bool
            public const nint m_sUniqueHammerID = 0x548; // CUtlString
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class CLogicalEntity {
        }
        // Parent: None
        // Fields count: 5
        public static class C_BaseFlex__Emphasized_Phoneme {
            public const nint m_sClassName = 0x0; // CUtlString
            public const nint m_flAmount = 0x18; // float32
            public const nint m_bRequired = 0x1C; // bool
            public const nint m_bBasechecked = 0x1D; // bool
            public const nint m_bValid = 0x1E; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 18
        public static class C_ColorCorrection {
            public const nint m_vecOrigin = 0x550; // 
            public const nint m_MinFalloff = 0x55C; // float32
            public const nint m_MaxFalloff = 0x560; // float32
            public const nint m_flFadeInDuration = 0x564; // float32
            public const nint m_flFadeOutDuration = 0x568; // float32
            public const nint m_flMaxWeight = 0x56C; // float32
            public const nint m_flCurWeight = 0x570; // float32
            public const nint m_netlookupFilename = 0x574; // char[512]
            public const nint m_bEnabled = 0x774; // bool
            public const nint m_bMaster = 0x775; // bool
            public const nint m_bClientSide = 0x776; // bool
            public const nint m_bExclusive = 0x777; // bool
            public const nint m_bEnabledOnClient = 0x778; // bool[1]
            public const nint m_flCurWeightOnClient = 0x77C; // float32[1]
            public const nint m_bFadingIn = 0x780; // bool[1]
            public const nint m_flFadeStartWeight = 0x784; // float32[1]
            public const nint m_flFadeStartTime = 0x788; // float32[1]
            public const nint m_flFadeDuration = 0x78C; // float32[1]
        }
        // Parent: C_BaseEntity
        // Fields count: 1
        public static class C_EnvWindClientside {
            public const nint m_EnvWindShared = 0x550; // C_EnvWindShared
        }
        // Parent: C_BaseEntity
        // Fields count: 3
        public static class C_EntityFlame {
            public const nint m_hEntAttached = 0x550; // CHandle<C_BaseEntity>
            public const nint m_hOldAttached = 0x578; // CHandle<C_BaseEntity>
            public const nint m_bCheapEffect = 0x57C; // bool
        }
        // Parent: None
        // Fields count: 30
        public static class CProjectedTextureBase {
            public const nint m_hTargetEntity = 0xC; // CHandle<C_BaseEntity>
            public const nint m_bState = 0x10; // bool
            public const nint m_bAlwaysUpdate = 0x11; // bool
            public const nint m_flLightFOV = 0x14; // float32
            public const nint m_bEnableShadows = 0x18; // bool
            public const nint m_bSimpleProjection = 0x19; // bool
            public const nint m_bLightOnlyTarget = 0x1A; // bool
            public const nint m_bLightWorld = 0x1B; // bool
            public const nint m_bCameraSpace = 0x1C; // bool
            public const nint m_flBrightnessScale = 0x20; // float32
            public const nint m_LightColor = 0x24; // Color
            public const nint m_flIntensity = 0x28; // float32
            public const nint m_flLinearAttenuation = 0x2C; // float32
            public const nint m_flQuadraticAttenuation = 0x30; // float32
            public const nint m_bVolumetric = 0x34; // bool
            public const nint m_flVolumetricIntensity = 0x38; // float32
            public const nint m_flNoiseStrength = 0x3C; // float32
            public const nint m_flFlashlightTime = 0x40; // float32
            public const nint m_nNumPlanes = 0x44; // uint32
            public const nint m_flPlaneOffset = 0x48; // float32
            public const nint m_flColorTransitionTime = 0x4C; // float32
            public const nint m_flAmbient = 0x50; // float32
            public const nint m_SpotlightTextureName = 0x54; // char[512]
            public const nint m_nSpotlightTextureFrame = 0x254; // int32
            public const nint m_nShadowQuality = 0x258; // uint32
            public const nint m_flNearZ = 0x25C; // float32
            public const nint m_flFarZ = 0x260; // float32
            public const nint m_flProjectionSize = 0x264; // float32
            public const nint m_flRotation = 0x268; // float32
            public const nint m_bFlipHorizontal = 0x26C; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 4
        public static class C_BaseFire {
            public const nint m_flScale = 0x550; // float32
            public const nint m_flStartScale = 0x554; // float32
            public const nint m_flScaleTime = 0x558; // float32
            public const nint m_nFlags = 0x55C; // uint32
        }
        // Parent: C_BaseFire
        // Fields count: 13
        public static class C_FireSmoke {
            public const nint m_nFlameModelIndex = 0x560; // int32
            public const nint m_nFlameFromAboveModelIndex = 0x564; // int32
            public const nint m_flScaleRegister = 0x568; // float32
            public const nint m_flScaleStart = 0x56C; // float32
            public const nint m_flScaleEnd = 0x570; // float32
            public const nint m_flScaleTimeStart = 0x574; // GameTime_t
            public const nint m_flScaleTimeEnd = 0x578; // GameTime_t
            public const nint m_flChildFlameSpread = 0x57C; // float32
            public const nint m_flClipPerc = 0x590; // float32
            public const nint m_bClipTested = 0x594; // bool
            public const nint m_bFadingOut = 0x595; // bool
            public const nint m_tParticleSpawn = 0x598; // TimedEvent
            public const nint m_pFireOverlay = 0x5A0; // CFireOverlay*
        }
        // Parent: None
        // Fields count: 1
        public static class C_RopeKeyframe__CPhysicsDelegate {
            public const nint m_pKeyframe = 0x8; // C_RopeKeyframe*
        }
        // Parent: None
        // Fields count: 1
        public static class C_SceneEntity__QueuedEvents_t {
            public const nint starttime = 0x0; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_TintController {
        }
        // Parent: None
        // Fields count: 13
        public static class CFlashlightEffect {
            public const nint m_bIsOn = 0x10; // bool
            public const nint m_bMuzzleFlashEnabled = 0x20; // bool
            public const nint m_flMuzzleFlashBrightness = 0x24; // float32
            public const nint m_quatMuzzleFlashOrientation = 0x30; // Quaternion
            public const nint m_vecMuzzleFlashOrigin = 0x40; // 
            public const nint m_flFov = 0x4C; // float32
            public const nint m_flFarZ = 0x50; // float32
            public const nint m_flLinearAtten = 0x54; // float32
            public const nint m_bCastsShadows = 0x58; // bool
            public const nint m_flCurrentPullBackDist = 0x5C; // float32
            public const nint m_FlashlightTexture = 0x60; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_MuzzleFlashTexture = 0x68; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_textureName = 0x70; // char[64]
        }
        // Parent: None
        // Fields count: 5
        public static class CInterpolatedValue {
            public const nint m_flStartTime = 0x0; // float32
            public const nint m_flEndTime = 0x4; // float32
            public const nint m_flStartValue = 0x8; // float32
            public const nint m_flEndValue = 0xC; // float32
            public const nint m_nInterpType = 0x10; // int32
        }
        // Parent: None
        // Fields count: 4
        public static class CGlowSprite {
            public const nint m_vColor = 0x0; // 
            public const nint m_flHorzSize = 0xC; // float32
            public const nint m_flVertSize = 0x10; // float32
            public const nint m_hMaterial = 0x18; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: None
        // Fields count: 15
        public static class CGlowOverlay {
            public const nint m_vPos = 0x8; // 
            public const nint m_bDirectional = 0x14; // bool
            public const nint m_vDirection = 0x18; // 
            public const nint m_bInSky = 0x24; // bool
            public const nint m_skyObstructionScale = 0x28; // float32
            public const nint m_Sprites = 0x30; // CGlowSprite[4]
            public const nint m_nSprites = 0xB0; // int32
            public const nint m_flProxyRadius = 0xB4; // float32
            public const nint m_flHDRColorScale = 0xB8; // float32
            public const nint m_flGlowObstructionScale = 0xBC; // float32
            public const nint m_bCacheGlowObstruction = 0xC0; // bool
            public const nint m_bCacheSkyObstruction = 0xC1; // bool
            public const nint m_bActivated = 0xC2; // int16
            public const nint m_ListIndex = 0xC4; // uint16
            public const nint m_queryHandle = 0xC8; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class IClientAlphaProperty {
        }
        // Parent: C_BaseEntity
        // Fields count: 2
        public static class CSkyboxReference {
            public const nint m_worldGroupId = 0x550; // WorldGroupId_t
            public const nint m_hSkyCamera = 0x554; // CHandle<C_SkyCamera>
        }
        // Parent: C_BaseEntity
        // Fields count: 4
        public static class C_SkyCamera {
            public const nint m_skyboxData = 0x550; // sky3dparams_t
            public const nint m_skyboxSlotToken = 0x5E0; // CUtlStringToken
            public const nint m_bUseAngles = 0x5E4; // bool
            public const nint m_pNext = 0x5E8; // C_SkyCamera*
        }
        // Parent: None
        // Fields count: 2
        public static class TimedEvent {
            public const nint m_TimeBetweenEvents = 0x0; // float32
            public const nint m_fNextEvent = 0x4; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class VPhysicsCollisionAttribute_t {
            public const nint m_nInteractsAs = 0x8; // uint64
            public const nint m_nInteractsWith = 0x10; // uint64
            public const nint m_nInteractsExclude = 0x18; // uint64
            public const nint m_nEntityId = 0x20; // uint32
            public const nint m_nOwnerId = 0x24; // uint32
            public const nint m_nHierarchyId = 0x28; // uint16
            public const nint m_nCollisionGroup = 0x2A; // uint8
            public const nint m_nCollisionFunctionMask = 0x2B; // uint8
        }
        // Parent: None
        // Fields count: 17
        public static class CCollisionProperty {
            public const nint m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
            public const nint m_vecMins = 0x40; // 
            public const nint m_vecMaxs = 0x4C; // 
            public const nint m_usSolidFlags = 0x5A; // uint8
            public const nint m_nSolidType = 0x5B; // SolidType_t
            public const nint m_triggerBloat = 0x5C; // uint8
            public const nint m_nSurroundType = 0x5D; // SurroundingBoundsType_t
            public const nint m_CollisionGroup = 0x5E; // uint8
            public const nint m_nEnablePhysics = 0x5F; // uint8
            public const nint m_flBoundingRadius = 0x60; // float32
            public const nint m_vecSpecifiedSurroundingMins = 0x64; // 
            public const nint m_vecSpecifiedSurroundingMaxs = 0x70; // 
            public const nint m_vecSurroundingMaxs = 0x7C; // 
            public const nint m_vecSurroundingMins = 0x88; // 
            public const nint m_vCapsuleCenter1 = 0x94; // 
            public const nint m_vCapsuleCenter2 = 0xA0; // 
            public const nint m_flCapsuleRadius = 0xAC; // float32
        }
        // Parent: None
        // Fields count: 12
        public static class CDecalInfo {
            public const nint m_flAnimationScale = 0x0; // float32
            public const nint m_flAnimationLifeSpan = 0x4; // float32
            public const nint m_flPlaceTime = 0x8; // float32
            public const nint m_flFadeStartTime = 0xC; // float32
            public const nint m_flFadeDuration = 0x10; // float32
            public const nint m_nVBSlot = 0x14; // int32
            public const nint m_nBoneIndex = 0x18; // int32
            public const nint m_vPosition = 0x28; // 
            public const nint m_flBoundingRadiusSqr = 0x34; // float32
            public const nint m_pNext = 0x40; // CDecalInfo*
            public const nint m_pPrev = 0x48; // CDecalInfo*
            public const nint m_nDecalMaterialIndex = 0xA8; // int32
        }
        // Parent: None
        // Fields count: 21
        public static class CEffectData {
            public const nint m_vOrigin = 0x8; // 
            public const nint m_vStart = 0x14; // 
            public const nint m_vNormal = 0x20; // 
            public const nint m_vAngles = 0x2C; // QAngle
            public const nint m_hEntity = 0x38; // CEntityHandle
            public const nint m_hOtherEntity = 0x3C; // CEntityHandle
            public const nint m_flScale = 0x40; // float32
            public const nint m_flMagnitude = 0x44; // float32
            public const nint m_flRadius = 0x48; // float32
            public const nint m_nSurfaceProp = 0x4C; // CUtlStringToken
            public const nint m_nEffectIndex = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nDamageType = 0x58; // uint32
            public const nint m_nPenetrate = 0x5C; // uint8
            public const nint m_nMaterial = 0x5E; // uint16
            public const nint m_nHitBox = 0x60; // uint16
            public const nint m_nColor = 0x62; // uint8
            public const nint m_fFlags = 0x63; // uint8
            public const nint m_nAttachmentIndex = 0x64; // AttachmentHandle_t
            public const nint m_nAttachmentName = 0x68; // CUtlStringToken
            public const nint m_iEffectName = 0x6C; // uint16
            public const nint m_nExplosionType = 0x6E; // uint8
        }
        // Parent: C_BaseEntity
        // Fields count: 2
        public static class C_EnvDetailController {
            public const nint m_flFadeStartDist = 0x550; // float32
            public const nint m_flFadeEndDist = 0x554; // float32
        }
        // Parent: None
        // Fields count: 29
        public static class C_EnvWindShared {
            public const nint m_flStartTime = 0x8; // GameTime_t
            public const nint m_iWindSeed = 0xC; // uint32
            public const nint m_iMinWind = 0x10; // uint16
            public const nint m_iMaxWind = 0x12; // uint16
            public const nint m_windRadius = 0x14; // int32
            public const nint m_iMinGust = 0x18; // uint16
            public const nint m_iMaxGust = 0x1A; // uint16
            public const nint m_flMinGustDelay = 0x1C; // float32
            public const nint m_flMaxGustDelay = 0x20; // float32
            public const nint m_flGustDuration = 0x24; // float32
            public const nint m_iGustDirChange = 0x28; // uint16
            public const nint m_location = 0x2C; // 
            public const nint m_iszGustSound = 0x38; // int32
            public const nint m_iWindDir = 0x3C; // int32
            public const nint m_flWindSpeed = 0x40; // float32
            public const nint m_currentWindVector = 0x44; // 
            public const nint m_CurrentSwayVector = 0x50; // 
            public const nint m_PrevSwayVector = 0x5C; // 
            public const nint m_iInitialWindDir = 0x68; // uint16
            public const nint m_flInitialWindSpeed = 0x6C; // float32
            public const nint m_flVariationTime = 0x70; // GameTime_t
            public const nint m_flSwayTime = 0x74; // GameTime_t
            public const nint m_flSimTime = 0x78; // GameTime_t
            public const nint m_flSwitchTime = 0x7C; // GameTime_t
            public const nint m_flAveWindSpeed = 0x80; // float32
            public const nint m_bGusting = 0x84; // bool
            public const nint m_flWindAngleVariation = 0x88; // float32
            public const nint m_flWindSpeedVariation = 0x8C; // float32
            public const nint m_iEntIndex = 0x90; // CEntityIndex
        }
        // Parent: None
        // Fields count: 2
        public static class C_EnvWindShared__WindAveEvent_t {
            public const nint m_flStartWindSpeed = 0x0; // float32
            public const nint m_flAveWindSpeed = 0x4; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class C_EnvWindShared__WindVariationEvent_t {
            public const nint m_flWindAngleVariation = 0x0; // float32
            public const nint m_flWindSpeedVariation = 0x4; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_InfoLadderDismount {
        }
        // Parent: None
        // Fields count: 12
        public static class shard_model_desc_t {
            public const nint m_nModelID = 0x8; // int32
            public const nint m_hMaterial = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_solid = 0x18; // ShardSolid_t
            public const nint m_ShatterPanelMode = 0x19; // ShatterPanelMode
            public const nint m_vecPanelSize = 0x1C; // Vector2D
            public const nint m_vecStressPositionA = 0x24; // Vector2D
            public const nint m_vecStressPositionB = 0x2C; // Vector2D
            public const nint m_vecPanelVertices = 0x38; // C_NetworkUtlVectorBase<Vector2D>
            public const nint m_flGlassHalfThickness = 0x50; // float32
            public const nint m_bHasParent = 0x54; // bool
            public const nint m_bParentFrozen = 0x55; // bool
            public const nint m_SurfacePropStringToken = 0x58; // CUtlStringToken
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_GameRulesProxy {
        }
        // Parent: None
        // Fields count: 0
        public static class C_GameRules {
        }
        // Parent: None
        // Fields count: 11
        public static class CGlowProperty {
            public const nint m_fGlowColor = 0x8; // 
            public const nint m_iGlowType = 0x30; // int32
            public const nint m_iGlowTeam = 0x34; // int32
            public const nint m_nGlowRange = 0x38; // int32
            public const nint m_nGlowRangeMin = 0x3C; // int32
            public const nint m_glowColorOverride = 0x40; // Color
            public const nint m_bFlashing = 0x44; // bool
            public const nint m_flGlowTime = 0x48; // float32
            public const nint m_flGlowStartTime = 0x4C; // float32
            public const nint m_bEligibleForScreenHighlight = 0x50; // bool
            public const nint m_bGlowing = 0x51; // bool
        }
        // Parent: C_GameRules
        // Fields count: 0
        public static class C_MultiplayRules {
        }
        // Parent: None
        // Fields count: 25
        public static class fogparams_t {
            public const nint dirPrimary = 0x8; // 
            public const nint colorPrimary = 0x14; // Color
            public const nint colorSecondary = 0x18; // Color
            public const nint colorPrimaryLerpTo = 0x1C; // Color
            public const nint colorSecondaryLerpTo = 0x20; // Color
            public const nint start = 0x24; // float32
            public const nint end = 0x28; // float32
            public const nint farz = 0x2C; // float32
            public const nint maxdensity = 0x30; // float32
            public const nint exponent = 0x34; // float32
            public const nint HDRColorScale = 0x38; // float32
            public const nint skyboxFogFactor = 0x3C; // float32
            public const nint skyboxFogFactorLerpTo = 0x40; // float32
            public const nint startLerpTo = 0x44; // float32
            public const nint endLerpTo = 0x48; // float32
            public const nint maxdensityLerpTo = 0x4C; // float32
            public const nint lerptime = 0x50; // GameTime_t
            public const nint duration = 0x54; // float32
            public const nint blendtobackground = 0x58; // float32
            public const nint scattering = 0x5C; // float32
            public const nint locallightscale = 0x60; // float32
            public const nint enable = 0x64; // bool
            public const nint blend = 0x65; // bool
            public const nint m_bNoReflectionFog = 0x66; // bool
            public const nint m_bPadding = 0x67; // bool
        }
        // Parent: None
        // Fields count: 14
        public static class C_fogplayerparams_t {
            public const nint m_hCtrl = 0x8; // CHandle<C_FogController>
            public const nint m_flTransitionTime = 0xC; // float32
            public const nint m_OldColor = 0x10; // Color
            public const nint m_flOldStart = 0x14; // float32
            public const nint m_flOldEnd = 0x18; // float32
            public const nint m_flOldMaxDensity = 0x1C; // float32
            public const nint m_flOldHDRColorScale = 0x20; // float32
            public const nint m_flOldFarZ = 0x24; // float32
            public const nint m_NewColor = 0x28; // Color
            public const nint m_flNewStart = 0x2C; // float32
            public const nint m_flNewEnd = 0x30; // float32
            public const nint m_flNewMaxDensity = 0x34; // float32
            public const nint m_flNewHDRColorScale = 0x38; // float32
            public const nint m_flNewFarZ = 0x3C; // float32
        }
        // Parent: None
        // Fields count: 6
        public static class sky3dparams_t {
            public const nint scale = 0x8; // int16
            public const nint origin = 0xC; // 
            public const nint bClip3DSkyBoxNearToWorldFar = 0x18; // bool
            public const nint flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
            public const nint fog = 0x20; // fogparams_t
            public const nint m_nWorldGroupID = 0x88; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 4
        public static class PhysicsRagdollPose_t {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
            public const nint m_Transforms = 0x30; // C_NetworkUtlVectorBase<CTransform>
            public const nint m_hOwner = 0x48; // CHandle<C_BaseEntity>
            public const nint m_bDirty = 0x68; // bool
        }
        // Parent: C_GameRules
        // Fields count: 0
        public static class C_SingleplayRules {
        }
        // Parent: C_BaseEntity
        // Fields count: 5
        public static class C_SoundOpvarSetPointBase {
            public const nint m_iszStackName = 0x550; // CUtlSymbolLarge
            public const nint m_iszOperatorName = 0x558; // CUtlSymbolLarge
            public const nint m_iszOpvarName = 0x560; // CUtlSymbolLarge
            public const nint m_iOpvarIndex = 0x568; // int32
            public const nint m_bUseAutoCompare = 0x56C; // bool
        }
        // Parent: C_SoundOpvarSetPointBase
        // Fields count: 0
        public static class C_SoundOpvarSetPointEntity {
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Fields count: 0
        public static class C_SoundOpvarSetAABBEntity {
        }
        // Parent: C_SoundOpvarSetAABBEntity
        // Fields count: 0
        public static class C_SoundOpvarSetOBBEntity {
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Fields count: 0
        public static class C_SoundOpvarSetPathCornerEntity {
        }
        // Parent: C_SoundOpvarSetPointEntity
        // Fields count: 0
        public static class C_SoundOpvarSetAutoRoomEntity {
        }
        // Parent: C_SoundOpvarSetPointBase
        // Fields count: 0
        public static class C_SoundOpvarSetOBBWindEntity {
        }
        // Parent: C_MultiplayRules
        // Fields count: 0
        public static class C_TeamplayRules {
        }
        // Parent: C_BaseEntity
        // Fields count: 30
        public static class C_TeamRoundTimer {
            public const nint m_bTimerPaused = 0x550; // bool
            public const nint m_flTimeRemaining = 0x554; // float32
            public const nint m_flTimerEndTime = 0x558; // GameTime_t
            public const nint m_bIsDisabled = 0x55C; // bool
            public const nint m_bShowInHUD = 0x55D; // bool
            public const nint m_nTimerLength = 0x560; // int32
            public const nint m_nTimerInitialLength = 0x564; // int32
            public const nint m_nTimerMaxLength = 0x568; // int32
            public const nint m_bAutoCountdown = 0x56C; // bool
            public const nint m_nSetupTimeLength = 0x570; // int32
            public const nint m_nState = 0x574; // int32
            public const nint m_bStartPaused = 0x578; // bool
            public const nint m_bInCaptureWatchState = 0x579; // bool
            public const nint m_flTotalTime = 0x57C; // float32
            public const nint m_bStopWatchTimer = 0x580; // bool
            public const nint m_bFireFinished = 0x581; // bool
            public const nint m_bFire5MinRemain = 0x582; // bool
            public const nint m_bFire4MinRemain = 0x583; // bool
            public const nint m_bFire3MinRemain = 0x584; // bool
            public const nint m_bFire2MinRemain = 0x585; // bool
            public const nint m_bFire1MinRemain = 0x586; // bool
            public const nint m_bFire30SecRemain = 0x587; // bool
            public const nint m_bFire10SecRemain = 0x588; // bool
            public const nint m_bFire5SecRemain = 0x589; // bool
            public const nint m_bFire4SecRemain = 0x58A; // bool
            public const nint m_bFire3SecRemain = 0x58B; // bool
            public const nint m_bFire2SecRemain = 0x58C; // bool
            public const nint m_bFire1SecRemain = 0x58D; // bool
            public const nint m_nOldTimerLength = 0x590; // int32
            public const nint m_nOldTimerState = 0x594; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CAttributeList {
            public const nint m_Attributes = 0x8; // C_UtlVectorEmbeddedNetworkVar<CEconItemAttribute>
            public const nint m_pManager = 0x58; // CAttributeManager*
        }
        // Parent: None
        // Fields count: 5
        public static class CEconItemAttribute {
            public const nint m_iAttributeDefinitionIndex = 0x30; // uint16
            public const nint m_flValue = 0x34; // float32
            public const nint m_flInitialValue = 0x38; // float32
            public const nint m_nRefundableCurrency = 0x3C; // int32
            public const nint m_bSetBonus = 0x40; // bool
        }
        // Parent: None
        // Fields count: 6
        public static class CAttributeManager {
            public const nint m_Providers = 0x8; // CUtlVector<CHandle<C_BaseEntity>>
            public const nint m_iReapplyProvisionParity = 0x20; // int32
            public const nint m_hOuter = 0x24; // CHandle<C_BaseEntity>
            public const nint m_bPreventLoopback = 0x28; // bool
            public const nint m_ProviderType = 0x2C; // attributeprovidertypes_t
            public const nint m_CachedResults = 0x30; // CUtlVector<CAttributeManager::cached_attribute_float_t>
        }
        // Parent: None
        // Fields count: 3
        public static class CAttributeManager__cached_attribute_float_t {
            public const nint flIn = 0x0; // float32
            public const nint iAttribHook = 0x8; // CUtlSymbolLarge
            public const nint flOut = 0x10; // float32
        }
        // Parent: CAttributeManager
        // Fields count: 3
        public static class C_AttributeContainer {
            public const nint m_Item = 0x50; // C_EconItemView
            public const nint m_iExternalItemProviderRegisteredToken = 0x498; // int32
            public const nint m_ullRegisteredAsItemID = 0x4A0; // uint64
        }
        // Parent: None
        // Fields count: 1
        public static class C_EconEntity__AttachedModelData_t {
            public const nint m_iModelDisplayFlags = 0x0; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class EntitySpottedState_t {
            public const nint m_bSpotted = 0x8; // bool
            public const nint m_bSpottedByMask = 0xC; // uint32[2]
        }
        // Parent: C_GameRulesProxy
        // Fields count: 1
        public static class C_CSGameRulesProxy {
            public const nint m_pGameRules = 0x550; // C_CSGameRules*
        }
        // Parent: C_TeamplayRules
        // Fields count: 117
        public static class C_CSGameRules {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
            public const nint m_bFreezePeriod = 0x30; // bool
            public const nint m_bWarmupPeriod = 0x31; // bool
            public const nint m_fWarmupPeriodEnd = 0x34; // GameTime_t
            public const nint m_fWarmupPeriodStart = 0x38; // GameTime_t
            public const nint m_nTotalPausedTicks = 0x3C; // int32
            public const nint m_nPauseStartTick = 0x40; // int32
            public const nint m_bServerPaused = 0x44; // bool
            public const nint m_bGamePaused = 0x45; // bool
            public const nint m_bTerroristTimeOutActive = 0x46; // bool
            public const nint m_bCTTimeOutActive = 0x47; // bool
            public const nint m_flTerroristTimeOutRemaining = 0x48; // float32
            public const nint m_flCTTimeOutRemaining = 0x4C; // float32
            public const nint m_nTerroristTimeOuts = 0x50; // int32
            public const nint m_nCTTimeOuts = 0x54; // int32
            public const nint m_bTechnicalTimeOut = 0x58; // bool
            public const nint m_bMatchWaitingForResume = 0x59; // bool
            public const nint m_iRoundTime = 0x5C; // int32
            public const nint m_fMatchStartTime = 0x60; // float32
            public const nint m_fRoundStartTime = 0x64; // GameTime_t
            public const nint m_flRestartRoundTime = 0x68; // GameTime_t
            public const nint m_bGameRestart = 0x6C; // bool
            public const nint m_flGameStartTime = 0x70; // float32
            public const nint m_timeUntilNextPhaseStarts = 0x74; // float32
            public const nint m_gamePhase = 0x78; // int32
            public const nint m_totalRoundsPlayed = 0x7C; // int32
            public const nint m_nRoundsPlayedThisPhase = 0x80; // int32
            public const nint m_nOvertimePlaying = 0x84; // int32
            public const nint m_iHostagesRemaining = 0x88; // int32
            public const nint m_bAnyHostageReached = 0x8C; // bool
            public const nint m_bMapHasBombTarget = 0x8D; // bool
            public const nint m_bMapHasRescueZone = 0x8E; // bool
            public const nint m_bMapHasBuyZone = 0x8F; // bool
            public const nint m_bIsQueuedMatchmaking = 0x90; // bool
            public const nint m_nQueuedMatchmakingMode = 0x94; // int32
            public const nint m_bIsValveDS = 0x98; // bool
            public const nint m_bLogoMap = 0x99; // bool
            public const nint m_bPlayAllStepSoundsOnServer = 0x9A; // bool
            public const nint m_iSpectatorSlotCount = 0x9C; // int32
            public const nint m_MatchDevice = 0xA0; // int32
            public const nint m_bHasMatchStarted = 0xA4; // bool
            public const nint m_nNextMapInMapgroup = 0xA8; // int32
            public const nint m_szTournamentEventName = 0xAC; // char[512]
            public const nint m_szTournamentEventStage = 0x2AC; // char[512]
            public const nint m_szMatchStatTxt = 0x4AC; // char[512]
            public const nint m_szTournamentPredictionsTxt = 0x6AC; // char[512]
            public const nint m_nTournamentPredictionsPct = 0x8AC; // int32
            public const nint m_flCMMItemDropRevealStartTime = 0x8B0; // GameTime_t
            public const nint m_flCMMItemDropRevealEndTime = 0x8B4; // GameTime_t
            public const nint m_bIsDroppingItems = 0x8B8; // bool
            public const nint m_bIsQuestEligible = 0x8B9; // bool
            public const nint m_bIsHltvActive = 0x8BA; // bool
            public const nint m_nGuardianModeWaveNumber = 0x8BC; // int32
            public const nint m_nGuardianModeSpecialKillsRemaining = 0x8C0; // int32
            public const nint m_nGuardianModeSpecialWeaponNeeded = 0x8C4; // int32
            public const nint m_nGuardianGrenadesToGiveBots = 0x8C8; // int32
            public const nint m_nNumHeaviesToSpawn = 0x8CC; // int32
            public const nint m_numGlobalGiftsGiven = 0x8D0; // uint32
            public const nint m_numGlobalGifters = 0x8D4; // uint32
            public const nint m_numGlobalGiftsPeriodSeconds = 0x8D8; // uint32
            public const nint m_arrFeaturedGiftersAccounts = 0x8DC; // uint32[4]
            public const nint m_arrFeaturedGiftersGifts = 0x8EC; // uint32[4]
            public const nint m_arrProhibitedItemIndices = 0x8FC; // uint16[100]
            public const nint m_arrTournamentActiveCasterAccounts = 0x9C4; // uint32[4]
            public const nint m_numBestOfMaps = 0x9D4; // int32
            public const nint m_nHalloweenMaskListSeed = 0x9D8; // int32
            public const nint m_bBombDropped = 0x9DC; // bool
            public const nint m_bBombPlanted = 0x9DD; // bool
            public const nint m_iRoundWinStatus = 0x9E0; // int32
            public const nint m_eRoundWinReason = 0x9E4; // int32
            public const nint m_bTCantBuy = 0x9E8; // bool
            public const nint m_bCTCantBuy = 0x9E9; // bool
            public const nint m_flGuardianBuyUntilTime = 0x9EC; // GameTime_t
            public const nint m_iMatchStats_RoundResults = 0x9F0; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_CT = 0xA68; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_T = 0xAE0; // int32[30]
            public const nint m_TeamRespawnWaveTimes = 0xB58; // float32[32]
            public const nint m_flNextRespawnWave = 0xBD8; // GameTime_t[32]
            public const nint m_nServerQuestID = 0xC58; // int32
            public const nint m_vMinimapMins = 0xC5C; // 
            public const nint m_vMinimapMaxs = 0xC68; // 
            public const nint m_MinimapVerticalSectionHeights = 0xC74; // float32[8]
            public const nint m_bDontIncrementCoopWave = 0xC94; // bool
            public const nint m_bSpawnedTerrorHuntHeavy = 0xC95; // bool
            public const nint m_nEndMatchMapGroupVoteTypes = 0xC98; // int32[10]
            public const nint m_nEndMatchMapGroupVoteOptions = 0xCC0; // int32[10]
            public const nint m_nEndMatchMapVoteWinner = 0xCE8; // int32
            public const nint m_iNumConsecutiveCTLoses = 0xCEC; // int32
            public const nint m_iNumConsecutiveTerroristLoses = 0xCF0; // int32
            public const nint m_bMarkClientStopRecordAtRoundEnd = 0xD10; // bool
            public const nint m_nMatchAbortedEarlyReason = 0xD68; // int32
            public const nint m_bHasTriggeredRoundStartMusic = 0xD6C; // bool
            public const nint m_bHasTriggeredCoopSpawnReset = 0xD6D; // bool
            public const nint m_bSwitchingTeamsAtRoundReset = 0xD6E; // bool
            public const nint m_pGameModeRules = 0xD88; // CCSGameModeRules*
            public const nint m_RetakeRules = 0xD90; // C_RetakeGameRules
            public const nint m_nMatchEndCount = 0xEA8; // uint8
            public const nint m_nTTeamIntroVariant = 0xEAC; // int32
            public const nint m_nCTTeamIntroVariant = 0xEB0; // int32
            public const nint m_bTeamIntroPeriod = 0xEB4; // bool
            public const nint m_iRoundEndWinnerTeam = 0xEB8; // int32
            public const nint m_eRoundEndReason = 0xEBC; // int32
            public const nint m_bRoundEndShowTimerDefend = 0xEC0; // bool
            public const nint m_iRoundEndTimerTime = 0xEC4; // int32
            public const nint m_sRoundEndFunFactToken = 0xEC8; // CUtlString
            public const nint m_iRoundEndFunFactPlayerSlot = 0xED0; // CPlayerSlot
            public const nint m_iRoundEndFunFactData1 = 0xED4; // int32
            public const nint m_iRoundEndFunFactData2 = 0xED8; // int32
            public const nint m_iRoundEndFunFactData3 = 0xEDC; // int32
            public const nint m_sRoundEndMessage = 0xEE0; // CUtlString
            public const nint m_iRoundEndPlayerCount = 0xEE8; // int32
            public const nint m_bRoundEndNoMusic = 0xEEC; // bool
            public const nint m_iRoundEndLegacy = 0xEF0; // int32
            public const nint m_nRoundEndCount = 0xEF4; // uint8
            public const nint m_iRoundStartRoundNumber = 0xEF8; // int32
            public const nint m_nRoundStartCount = 0xEFC; // uint8
            public const nint m_flLastPerfSampleTime = 0x4F08; // float64
        }
        // Parent: None
        // Fields count: 0
        public static class CCSTakeDamageInfoAPI {
        }
        // Parent: None
        // Fields count: 1
        public static class CCSGameModeRules {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
        }
        // Parent: CCSGameModeRules
        // Fields count: 0
        public static class CCSGameModeRules_Noop {
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 0
        public static class CCSGameModeScript {
        }
        // Parent: CCSGameModeRules
        // Fields count: 1
        public static class CCSGameModeRules_ArmsRace {
            public const nint m_WeaponSequence = 0x38; // C_NetworkUtlVectorBase<CUtlString>
        }
        // Parent: CCSGameModeScript
        // Fields count: 1
        public static class CCSArmsRaceScript {
            public const nint m_pOuter = 0xD8; // CCSGameModeRules_ArmsRace*
        }
        // Parent: CCSGameModeRules
        // Fields count: 3
        public static class CCSGameModeRules_Deathmatch {
            public const nint m_flDMBonusStartTime = 0x38; // GameTime_t
            public const nint m_flDMBonusTimeLength = 0x3C; // float32
            public const nint m_nDMBonusWeaponLoadoutSlot = 0x40; // int16
        }
        // Parent: CCSGameModeScript
        // Fields count: 1
        public static class CCSDeathmatchScript {
            public const nint m_pOuter = 0xD8; // CCSGameModeRules_Deathmatch*
        }
        // Parent: None
        // Fields count: 5
        public static class C_RetakeGameRules {
            public const nint m_nMatchSeed = 0xF8; // int32
            public const nint m_bBlockersPresent = 0xFC; // bool
            public const nint m_bRoundInProgress = 0xFD; // bool
            public const nint m_iFirstSecondHalfRound = 0x100; // int32
            public const nint m_iBombSite = 0x104; // int32
        }
        // Parent: None
        // Fields count: 13
        public static class CSPerRoundStats_t {
            public const nint m_iKills = 0x30; // int32
            public const nint m_iDeaths = 0x34; // int32
            public const nint m_iAssists = 0x38; // int32
            public const nint m_iDamage = 0x3C; // int32
            public const nint m_iEquipmentValue = 0x40; // int32
            public const nint m_iMoneySaved = 0x44; // int32
            public const nint m_iKillReward = 0x48; // int32
            public const nint m_iLiveTime = 0x4C; // int32
            public const nint m_iHeadShotKills = 0x50; // int32
            public const nint m_iObjective = 0x54; // int32
            public const nint m_iCashEarned = 0x58; // int32
            public const nint m_iUtilityDamage = 0x5C; // int32
            public const nint m_iEnemiesFlashed = 0x60; // int32
        }
        // Parent: CSPerRoundStats_t
        // Fields count: 5
        public static class CSMatchStats_t {
            public const nint m_iEnemy5Ks = 0x68; // int32
            public const nint m_iEnemy4Ks = 0x6C; // int32
            public const nint m_iEnemy3Ks = 0x70; // int32
            public const nint m_iEnemyKnifeKills = 0x74; // int32
            public const nint m_iEnemyTaserKills = 0x78; // int32
        }
        // Parent: C_BaseEntity
        // Fields count: 8
        public static class C_CSGO_TeamPreviewCharacterPosition {
            public const nint m_nVariant = 0x550; // int32
            public const nint m_nRandom = 0x554; // int32
            public const nint m_nOrdinal = 0x558; // int32
            public const nint m_sWeaponName = 0x560; // CUtlString
            public const nint m_xuid = 0x568; // uint64
            public const nint m_agentItem = 0x570; // C_EconItemView
            public const nint m_glovesItem = 0x9B8; // C_EconItemView
            public const nint m_weaponItem = 0xE00; // C_EconItemView
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamSelectCharacterPosition {
        }
        // Parent: C_CSGO_TeamSelectCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamSelectTerroristPosition {
        }
        // Parent: C_CSGO_TeamSelectCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamSelectCounterTerroristPosition {
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamIntroCharacterPosition {
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamIntroTerroristPosition {
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class C_CSGO_TeamIntroCounterTerroristPosition {
        }
        // Parent: C_CSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroCharacterPosition {
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroTerroristPosition {
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroCounterTerroristPosition {
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_CSMinimapBoundary {
        }
        // Parent: C_BaseEntity
        // Fields count: 5
        public static class C_PlayerPing {
            public const nint m_hPlayer = 0x580; // CHandle<C_CSPlayerPawn>
            public const nint m_hPingedEntity = 0x584; // CHandle<C_BaseEntity>
            public const nint m_iType = 0x588; // int32
            public const nint m_bUrgent = 0x58C; // bool
            public const nint m_szPlaceName = 0x58D; // char[18]
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 1
        public static class CCSPlayer_PingServices {
            public const nint m_hPlayerPing = 0x40; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseEntity
        // Fields count: 10
        public static class C_CSPlayerResource {
            public const nint m_bHostageAlive = 0x550; // bool[12]
            public const nint m_isHostageFollowingSomeone = 0x55C; // bool[12]
            public const nint m_iHostageEntityIDs = 0x568; // CEntityIndex[12]
            public const nint m_bombsiteCenterA = 0x598; // 
            public const nint m_bombsiteCenterB = 0x5A4; // 
            public const nint m_hostageRescueX = 0x5B0; // int32[4]
            public const nint m_hostageRescueY = 0x5C0; // int32[4]
            public const nint m_hostageRescueZ = 0x5D0; // int32[4]
            public const nint m_bEndMatchNextMapAllVoted = 0x5E0; // bool
            public const nint m_foundGoalPositions = 0x5E1; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CCSPlayerControllerAPI {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_ViewModelServices {
        }
        // Parent: CPlayer_CameraServices
        // Fields count: 6
        public static class CCSPlayerBase_CameraServices {
            public const nint m_iFOV = 0x210; // uint32
            public const nint m_iFOVStart = 0x214; // uint32
            public const nint m_flFOVTime = 0x218; // GameTime_t
            public const nint m_flFOVRate = 0x21C; // float32
            public const nint m_hZoomOwner = 0x220; // CHandle<C_BaseEntity>
            public const nint m_flLastShotFOV = 0x224; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class WeaponPurchaseCount_t {
            public const nint m_nItemDefIndex = 0x30; // uint16
            public const nint m_nCount = 0x32; // uint16
        }
        // Parent: None
        // Fields count: 1
        public static class WeaponPurchaseTracker_t {
            public const nint m_weaponPurchases = 0x8; // C_UtlVectorEmbeddedNetworkVar<WeaponPurchaseCount_t>
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 4
        public static class CCSPlayer_ActionTrackingServices {
            public const nint m_hLastWeaponBeforeC4AutoSwitch = 0x40; // CHandle<C_BasePlayerWeapon>
            public const nint m_bIsRescuing = 0x44; // bool
            public const nint m_weaponPurchasesThisMatch = 0x48; // WeaponPurchaseTracker_t
            public const nint m_weaponPurchasesThisRound = 0xA0; // WeaponPurchaseTracker_t
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 1
        public static class CCSPlayer_BulletServices {
            public const nint m_totalHitsOnServer = 0x40; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class SellbackPurchaseEntry_t {
            public const nint m_unDefIdx = 0x30; // uint16
            public const nint m_nCost = 0x34; // int32
            public const nint m_nPrevArmor = 0x38; // int32
            public const nint m_bPrevHelmet = 0x3C; // bool
            public const nint m_hItem = 0x40; // CEntityHandle
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 1
        public static class CCSPlayer_BuyServices {
            public const nint m_vecSellbackPurchaseEntries = 0x40; // C_UtlVectorEmbeddedNetworkVar<SellbackPurchaseEntry_t>
        }
        // Parent: CCSPlayerBase_CameraServices
        // Fields count: 1
        public static class CCSPlayer_CameraServices {
            public const nint m_flDeathCamTilt = 0x228; // float32
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 2
        public static class CCSPlayer_HostageServices {
            public const nint m_hCarriedHostage = 0x40; // CHandle<C_BaseEntity>
            public const nint m_hCarriedHostageProp = 0x44; // CHandle<C_BaseEntity>
        }
        // Parent: CPlayer_ItemServices
        // Fields count: 3
        public static class CCSPlayer_ItemServices {
            public const nint m_bHasDefuser = 0x40; // bool
            public const nint m_bHasHelmet = 0x41; // bool
            public const nint m_bHasHeavyArmor = 0x42; // bool
        }
        // Parent: CPlayer_MovementServices_Humanoid
        // Fields count: 37
        public static class CCSPlayer_MovementServices {
            public const nint m_flMaxFallVelocity = 0x218; // float32
            public const nint m_vecLadderNormal = 0x21C; // 
            public const nint m_nLadderSurfacePropIndex = 0x228; // int32
            public const nint m_flDuckAmount = 0x22C; // float32
            public const nint m_flDuckSpeed = 0x230; // float32
            public const nint m_bDuckOverride = 0x234; // bool
            public const nint m_bDesiresDuck = 0x235; // bool
            public const nint m_flDuckOffset = 0x238; // float32
            public const nint m_nDuckTimeMsecs = 0x23C; // uint32
            public const nint m_nDuckJumpTimeMsecs = 0x240; // uint32
            public const nint m_nJumpTimeMsecs = 0x244; // uint32
            public const nint m_flLastDuckTime = 0x248; // float32
            public const nint m_vecLastPositionAtFullCrouchSpeed = 0x258; // Vector2D
            public const nint m_duckUntilOnGround = 0x260; // bool
            public const nint m_bHasWalkMovedSinceLastJump = 0x261; // bool
            public const nint m_bInStuckTest = 0x262; // bool
            public const nint m_flStuckCheckTime = 0x270; // 
            public const nint m_nTraceCount = 0x470; // int32
            public const nint m_StuckLast = 0x474; // int32
            public const nint m_bSpeedCropped = 0x478; // bool
            public const nint m_nOldWaterLevel = 0x47C; // int32
            public const nint m_flWaterEntryTime = 0x480; // float32
            public const nint m_vecForward = 0x484; // 
            public const nint m_vecLeft = 0x490; // 
            public const nint m_vecUp = 0x49C; // 
            public const nint m_nGameCodeHasMovedPlayerAfterCommand = 0x4A8; // int32
            public const nint m_bOldJumpPressed = 0x4AC; // bool
            public const nint m_flJumpPressedTime = 0x4B0; // float32
            public const nint m_flJumpUntil = 0x4B4; // float32
            public const nint m_flJumpVel = 0x4B8; // float32
            public const nint m_fStashGrenadeParameterWhen = 0x4BC; // GameTime_t
            public const nint m_nButtonDownMaskPrev = 0x4C0; // uint64
            public const nint m_flOffsetTickCompleteTime = 0x4C8; // float32
            public const nint m_flOffsetTickStashedSpeed = 0x4CC; // float32
            public const nint m_flStamina = 0x4D0; // float32
            public const nint m_flHeightAtJumpStart = 0x4D4; // float32
            public const nint m_flMaxJumpHeightThisJump = 0x4D8; // float32
        }
        // Parent: CPlayer_UseServices
        // Fields count: 0
        public static class CCSPlayer_UseServices {
        }
        // Parent: CPlayer_ViewModelServices
        // Fields count: 1
        public static class CCSPlayer_ViewModelServices {
            public const nint m_hViewModel = 0x40; // CHandle<C_BaseViewModel>[3]
        }
        // Parent: CPlayer_WaterServices
        // Fields count: 3
        public static class CCSPlayer_WaterServices {
            public const nint m_flWaterJumpTime = 0x40; // float32
            public const nint m_vecWaterJumpVel = 0x44; // 
            public const nint m_flSwimSoundTime = 0x50; // float32
        }
        // Parent: CPlayer_WeaponServices
        // Fields count: 5
        public static class CCSPlayer_WeaponServices {
            public const nint m_flNextAttack = 0xB8; // GameTime_t
            public const nint m_bIsLookingAtWeapon = 0xBC; // bool
            public const nint m_bIsHoldingLookAtWeapon = 0xBD; // bool
            public const nint m_nOldShootPositionHistoryCount = 0xC0; // uint32
            public const nint m_nOldInputHistoryCount = 0x458; // uint32
        }
        // Parent: CPlayer_ObserverServices
        // Fields count: 8
        public static class CCSObserver_ObserverServices {
            public const nint m_hLastObserverTarget = 0x58; // CEntityHandle
            public const nint m_vecObserverInterpolateOffset = 0x5C; // 
            public const nint m_vecObserverInterpStartPos = 0x68; // 
            public const nint m_flObsInterp_PathLength = 0x74; // float32
            public const nint m_qObsInterp_OrientationStart = 0x80; // Quaternion
            public const nint m_qObsInterp_OrientationTravelDir = 0x90; // Quaternion
            public const nint m_obsInterpState = 0xA0; // ObserverInterpState_t
            public const nint m_bObserverInterpolationNeedsDeferredSetup = 0xA4; // bool
        }
        // Parent: CCSPlayerBase_CameraServices
        // Fields count: 0
        public static class CCSObserver_CameraServices {
        }
        // Parent: CPlayer_MovementServices
        // Fields count: 0
        public static class CCSObserver_MovementServices {
        }
        // Parent: CPlayer_UseServices
        // Fields count: 0
        public static class CCSObserver_UseServices {
        }
        // Parent: CPlayer_ViewModelServices
        // Fields count: 0
        public static class CCSObserver_ViewModelServices {
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 5
        public static class CCSPlayerController_ActionTrackingServices {
            public const nint m_perRoundStats = 0x40; // C_UtlVectorEmbeddedNetworkVar<CSPerRoundStats_t>
            public const nint m_matchStats = 0x90; // CSMatchStats_t
            public const nint m_iNumRoundKills = 0x110; // int32
            public const nint m_iNumRoundKillsHeadshots = 0x114; // int32
            public const nint m_unTotalRoundDamageDealt = 0x118; // uint32
        }
        // Parent: None
        // Fields count: 14
        public static class CDamageRecord {
            public const nint m_PlayerDamager = 0x28; // CHandle<C_CSPlayerPawnBase>
            public const nint m_PlayerRecipient = 0x2C; // CHandle<C_CSPlayerPawnBase>
            public const nint m_hPlayerControllerDamager = 0x30; // CHandle<CCSPlayerController>
            public const nint m_hPlayerControllerRecipient = 0x34; // CHandle<CCSPlayerController>
            public const nint m_szPlayerDamagerName = 0x38; // CUtlString
            public const nint m_szPlayerRecipientName = 0x40; // CUtlString
            public const nint m_DamagerXuid = 0x48; // uint64
            public const nint m_RecipientXuid = 0x50; // uint64
            public const nint m_iDamage = 0x58; // int32
            public const nint m_iActualHealthRemoved = 0x5C; // int32
            public const nint m_iNumHits = 0x60; // int32
            public const nint m_iLastBulletUpdate = 0x64; // int32
            public const nint m_bIsOtherEnemy = 0x68; // bool
            public const nint m_killType = 0x69; // EKillTypes_t
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 2
        public static class CCSPlayerController_DamageServices {
            public const nint m_nSendUpdate = 0x40; // int32
            public const nint m_DamageList = 0x48; // C_UtlVectorEmbeddedNetworkVar<CDamageRecord>
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 5
        public static class CCSPlayerController_InGameMoneyServices {
            public const nint m_iAccount = 0x40; // int32
            public const nint m_iStartAccount = 0x44; // int32
            public const nint m_iTotalCashSpent = 0x48; // int32
            public const nint m_iCashSpentThisRound = 0x4C; // int32
            public const nint m_nPreviousAccount = 0x50; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class ServerAuthoritativeWeaponSlot_t {
            public const nint unClass = 0x28; // uint16
            public const nint unSlot = 0x2A; // uint16
            public const nint unItemDefIdx = 0x2C; // uint16
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 8
        public static class CCSPlayerController_InventoryServices {
            public const nint m_unMusicID = 0x40; // uint16
            public const nint m_rank = 0x44; // MedalRank_t[6]
            public const nint m_nPersonaDataPublicLevel = 0x5C; // int32
            public const nint m_nPersonaDataPublicCommendsLeader = 0x60; // int32
            public const nint m_nPersonaDataPublicCommendsTeacher = 0x64; // int32
            public const nint m_nPersonaDataPublicCommendsFriendly = 0x68; // int32
            public const nint m_nPersonaDataXpTrailLevel = 0x6C; // int32
            public const nint m_vecServerAuthoritativeWeaponSlots = 0x70; // C_UtlVectorEmbeddedNetworkVar<ServerAuthoritativeWeaponSlot_t>
        }
        // Parent: None
        // Fields count: 0
        public static class CCSWeaponBaseVDataAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CCSWeaponBaseAPI {
        }
        // Parent: None
        // Fields count: 13
        public static class C_IronSightController {
            public const nint m_bIronSightAvailable = 0x10; // bool
            public const nint m_flIronSightAmount = 0x14; // float32
            public const nint m_flIronSightAmountGained = 0x18; // float32
            public const nint m_flIronSightAmountBiased = 0x1C; // float32
            public const nint m_flIronSightAmount_Interpolated = 0x20; // float32
            public const nint m_flIronSightAmountGained_Interpolated = 0x24; // float32
            public const nint m_flIronSightAmountBiased_Interpolated = 0x28; // float32
            public const nint m_flInterpolationLastUpdated = 0x2C; // float32
            public const nint m_angDeltaAverage = 0x30; // QAngle[8]
            public const nint m_angViewLast = 0x90; // QAngle
            public const nint m_vecDotCoords = 0x9C; // Vector2D
            public const nint m_flDotBlur = 0xA4; // float32
            public const nint m_flSpeedRatio = 0xA8; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class CompositeMaterialMatchFilter_t {
            public const nint m_nCompositeMaterialMatchFilterType = 0x0; // CompositeMaterialMatchFilterType_t
            public const nint m_strMatchFilter = 0x8; // CUtlString
            public const nint m_strMatchValue = 0x10; // CUtlString
            public const nint m_bPassWhenTrue = 0x18; // bool
        }
        // Parent: None
        // Fields count: 34
        public static class CompositeMaterialInputLooseVariable_t {
            public const nint m_strName = 0x0; // CUtlString
            public const nint m_bExposeExternally = 0x8; // bool
            public const nint m_strExposedFriendlyName = 0x10; // CUtlString
            public const nint m_strExposedFriendlyGroupName = 0x18; // CUtlString
            public const nint m_bExposedVariableIsFixedRange = 0x20; // bool
            public const nint m_strExposedVisibleWhenTrue = 0x28; // CUtlString
            public const nint m_strExposedHiddenWhenTrue = 0x30; // CUtlString
            public const nint m_nVariableType = 0x38; // CompositeMaterialInputLooseVariableType_t
            public const nint m_bValueBoolean = 0x3C; // bool
            public const nint m_nValueIntX = 0x40; // int32
            public const nint m_nValueIntY = 0x44; // int32
            public const nint m_nValueIntZ = 0x48; // int32
            public const nint m_nValueIntW = 0x4C; // int32
            public const nint m_bHasFloatBounds = 0x50; // bool
            public const nint m_flValueFloatX = 0x54; // float32
            public const nint m_flValueFloatX_Min = 0x58; // float32
            public const nint m_flValueFloatX_Max = 0x5C; // float32
            public const nint m_flValueFloatY = 0x60; // float32
            public const nint m_flValueFloatY_Min = 0x64; // float32
            public const nint m_flValueFloatY_Max = 0x68; // float32
            public const nint m_flValueFloatZ = 0x6C; // float32
            public const nint m_flValueFloatZ_Min = 0x70; // float32
            public const nint m_flValueFloatZ_Max = 0x74; // float32
            public const nint m_flValueFloatW = 0x78; // float32
            public const nint m_flValueFloatW_Min = 0x7C; // float32
            public const nint m_flValueFloatW_Max = 0x80; // float32
            public const nint m_cValueColor4 = 0x84; // Color
            public const nint m_nValueSystemVar = 0x88; // CompositeMaterialVarSystemVar_t
            public const nint m_strResourceMaterial = 0x90; // CResourceName
            public const nint m_strTextureContentAssetPath = 0x170; // CUtlString
            public const nint m_strTextureRuntimeResourcePath = 0x178; // CResourceName
            public const nint m_strTextureCompilationVtexTemplate = 0x258; // CUtlString
            public const nint m_nTextureType = 0x260; // CompositeMaterialInputTextureType_t
            public const nint m_strString = 0x268; // CUtlString
        }
        // Parent: None
        // Fields count: 5
        public static class CompMatMutatorCondition_t {
            public const nint m_nMutatorCondition = 0x0; // CompMatPropertyMutatorConditionType_t
            public const nint m_strMutatorConditionContainerName = 0x8; // CUtlString
            public const nint m_strMutatorConditionContainerVarName = 0x10; // CUtlString
            public const nint m_strMutatorConditionContainerVarValue = 0x18; // CUtlString
            public const nint m_bPassWhenTrue = 0x20; // bool
        }
        // Parent: None
        // Fields count: 28
        public static class CompMatPropertyMutator_t {
            public const nint m_bEnabled = 0x0; // bool
            public const nint m_nMutatorCommandType = 0x4; // CompMatPropertyMutatorType_t
            public const nint m_strInitWith_Container = 0x8; // CUtlString
            public const nint m_strCopyProperty_InputContainerSrc = 0x10; // CUtlString
            public const nint m_strCopyProperty_InputContainerProperty = 0x18; // CUtlString
            public const nint m_strCopyProperty_TargetProperty = 0x20; // CUtlString
            public const nint m_strRandomRollInputVars_SeedInputVar = 0x28; // CUtlString
            public const nint m_vecRandomRollInputVars_InputVarsToRoll = 0x30; // CUtlVector<CUtlString>
            public const nint m_strCopyMatchingKeys_InputContainerSrc = 0x48; // CUtlString
            public const nint m_strCopyKeysWithSuffix_InputContainerSrc = 0x50; // CUtlString
            public const nint m_strCopyKeysWithSuffix_FindSuffix = 0x58; // CUtlString
            public const nint m_strCopyKeysWithSuffix_ReplaceSuffix = 0x60; // CUtlString
            public const nint m_nSetValue_Value = 0x68; // CompositeMaterialInputLooseVariable_t
            public const nint m_strGenerateTexture_TargetParam = 0x2D8; // CUtlString
            public const nint m_strGenerateTexture_InitialContainer = 0x2E0; // CUtlString
            public const nint m_nResolution = 0x2E8; // int32
            public const nint m_bIsScratchTarget = 0x2EC; // bool
            public const nint m_bSplatDebugInfo = 0x2ED; // bool
            public const nint m_bCaptureInRenderDoc = 0x2EE; // bool
            public const nint m_vecTexGenInstructions = 0x2F0; // CUtlVector<CompMatPropertyMutator_t>
            public const nint m_vecConditionalMutators = 0x308; // CUtlVector<CompMatPropertyMutator_t>
            public const nint m_strPopInputQueue_Container = 0x320; // CUtlString
            public const nint m_strDrawText_InputContainerSrc = 0x328; // CUtlString
            public const nint m_strDrawText_InputContainerProperty = 0x330; // CUtlString
            public const nint m_vecDrawText_Position = 0x338; // Vector2D
            public const nint m_colDrawText_Color = 0x340; // Color
            public const nint m_strDrawText_Font = 0x348; // CUtlString
            public const nint m_vecConditions = 0x350; // CUtlVector<CompMatMutatorCondition_t>
        }
        // Parent: None
        // Fields count: 8
        public static class CompositeMaterialInputContainer_t {
            public const nint m_bEnabled = 0x0; // bool
            public const nint m_nCompositeMaterialInputContainerSourceType = 0x4; // CompositeMaterialInputContainerSourceType_t
            public const nint m_strSpecificContainerMaterial = 0x8; // CResourceName
            public const nint m_strAttrName = 0xE8; // CUtlString
            public const nint m_strAlias = 0xF0; // CUtlString
            public const nint m_vecLooseVariables = 0xF8; // CUtlVector<CompositeMaterialInputLooseVariable_t>
            public const nint m_strAttrNameForVar = 0x110; // CUtlString
            public const nint m_bExposeExternally = 0x118; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class CompositeMaterialAssemblyProcedure_t {
            public const nint m_vecCompMatIncludes = 0x0; // CUtlVector<CResourceName>
            public const nint m_vecMatchFilters = 0x18; // CUtlVector<CompositeMaterialMatchFilter_t>
            public const nint m_vecCompositeInputContainers = 0x30; // CUtlVector<CompositeMaterialInputContainer_t>
            public const nint m_vecPropertyMutators = 0x48; // CUtlVector<CompMatPropertyMutator_t>
        }
        // Parent: None
        // Fields count: 1
        public static class GeneratedTextureHandle_t {
            public const nint m_strBitmapName = 0x0; // CUtlString
        }
        // Parent: None
        // Fields count: 4
        public static class CompositeMaterial_t {
            public const nint m_TargetKVs = 0x8; // KeyValues3
            public const nint m_PreGenerationKVs = 0x18; // KeyValues3
            public const nint m_FinalKVs = 0x28; // KeyValues3
            public const nint m_vecGeneratedTextures = 0x40; // CUtlVector<GeneratedTextureHandle_t>
        }
        // Parent: None
        // Fields count: 8
        public static class CompositeMaterialEditorPoint_t {
            public const nint m_ModelName = 0x0; // CResourceName
            public const nint m_nSequenceIndex = 0xE0; // int32
            public const nint m_flCycle = 0xE4; // float32
            public const nint m_KVModelStateChoices = 0xE8; // KeyValues3
            public const nint m_bEnableChildModel = 0xF8; // bool
            public const nint m_ChildModelName = 0x100; // CResourceName
            public const nint m_vecCompositeMaterialAssemblyProcedures = 0x1E0; // CUtlVector<CompositeMaterialAssemblyProcedure_t>
            public const nint m_vecCompositeMaterials = 0x1F8; // CUtlVector<CompositeMaterial_t>
        }
        // Parent: None
        // Fields count: 3
        public static class CCompositeMaterialEditorDoc {
            public const nint m_nVersion = 0x8; // int32
            public const nint m_Points = 0x10; // CUtlVector<CompositeMaterialEditorPoint_t>
            public const nint m_KVthumbnail = 0x28; // KeyValues3
        }
        // Parent: None
        // Fields count: 43
        public static class CGlobalLightBase {
            public const nint m_bSpotLight = 0x10; // bool
            public const nint m_SpotLightOrigin = 0x14; // 
            public const nint m_SpotLightAngles = 0x20; // QAngle
            public const nint m_ShadowDirection = 0x2C; // 
            public const nint m_AmbientDirection = 0x38; // 
            public const nint m_SpecularDirection = 0x44; // 
            public const nint m_InspectorSpecularDirection = 0x50; // 
            public const nint m_flSpecularPower = 0x5C; // float32
            public const nint m_flSpecularIndependence = 0x60; // float32
            public const nint m_SpecularColor = 0x64; // Color
            public const nint m_bStartDisabled = 0x68; // bool
            public const nint m_bEnabled = 0x69; // bool
            public const nint m_LightColor = 0x6A; // Color
            public const nint m_AmbientColor1 = 0x6E; // Color
            public const nint m_AmbientColor2 = 0x72; // Color
            public const nint m_AmbientColor3 = 0x76; // Color
            public const nint m_flSunDistance = 0x7C; // float32
            public const nint m_flFOV = 0x80; // float32
            public const nint m_flNearZ = 0x84; // float32
            public const nint m_flFarZ = 0x88; // float32
            public const nint m_bEnableShadows = 0x8C; // bool
            public const nint m_bOldEnableShadows = 0x8D; // bool
            public const nint m_bBackgroundClearNotRequired = 0x8E; // bool
            public const nint m_flCloudScale = 0x90; // float32
            public const nint m_flCloud1Speed = 0x94; // float32
            public const nint m_flCloud1Direction = 0x98; // float32
            public const nint m_flCloud2Speed = 0x9C; // float32
            public const nint m_flCloud2Direction = 0xA0; // float32
            public const nint m_flAmbientScale1 = 0xB0; // float32
            public const nint m_flAmbientScale2 = 0xB4; // float32
            public const nint m_flGroundScale = 0xB8; // float32
            public const nint m_flLightScale = 0xBC; // float32
            public const nint m_flFoWDarkness = 0xC0; // float32
            public const nint m_bEnableSeparateSkyboxFog = 0xC4; // bool
            public const nint m_vFowColor = 0xC8; // 
            public const nint m_ViewOrigin = 0xD4; // 
            public const nint m_ViewAngles = 0xE0; // QAngle
            public const nint m_flViewFoV = 0xEC; // float32
            public const nint m_WorldPoints = 0xF0; // Vector[8]
            public const nint m_vFogOffsetLayer0 = 0x4A8; // Vector2D
            public const nint m_vFogOffsetLayer1 = 0x4B0; // Vector2D
            public const nint m_hEnvWind = 0x4B8; // CHandle<C_BaseEntity>
            public const nint m_hEnvSky = 0x4BC; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseEntity
        // Fields count: 1
        public static class C_GlobalLight {
            public const nint m_WindClothForceHandle = 0xA10; // uint16
        }
        // Parent: CAnimGraphControllerBase
        // Fields count: 4
        public static class C_CSGO_PreviewModel_GraphController {
            public const nint m_pszCharacterMode = 0x18; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszWeaponState = 0x38; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszWeaponType = 0x58; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszEndOfMatchCelebration = 0x78; // CAnimGraphParamOptionalRef<char*>
        }
        // Parent: CAnimGraphControllerBase
        // Fields count: 8
        public static class C_CSGO_PreviewPlayer_GraphController {
            public const nint m_pszCharacterMode = 0x18; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszTeamPreviewVariant = 0x38; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszTeamPreviewPosition = 0x58; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszEndOfMatchCelebration = 0x78; // CAnimGraphParamOptionalRef<char*>
            public const nint m_nTeamPreviewRandom = 0x98; // CAnimGraphParamOptionalRef<int32>
            public const nint m_pszWeaponState = 0xB0; // CAnimGraphParamOptionalRef<char*>
            public const nint m_pszWeaponType = 0xD0; // CAnimGraphParamOptionalRef<char*>
            public const nint m_bCT = 0xF0; // CAnimGraphParamOptionalRef<bool>
        }
        // Parent: C_BaseEntity
        // Fields count: 10
        public static class C_CSGO_MapPreviewCameraPathNode {
            public const nint m_szParentPathUniqueID = 0x550; // CUtlSymbolLarge
            public const nint m_nPathIndex = 0x558; // int32
            public const nint m_vInTangentLocal = 0x55C; // 
            public const nint m_vOutTangentLocal = 0x568; // 
            public const nint m_flFOV = 0x574; // float32
            public const nint m_flSpeed = 0x578; // float32
            public const nint m_flEaseIn = 0x57C; // float32
            public const nint m_flEaseOut = 0x580; // float32
            public const nint m_vInTangentWorld = 0x584; // 
            public const nint m_vOutTangentWorld = 0x590; // 
        }
        // Parent: C_BaseEntity
        // Fields count: 8
        public static class C_CSGO_MapPreviewCameraPath {
            public const nint m_flZFar = 0x550; // float32
            public const nint m_flZNear = 0x554; // float32
            public const nint m_bLoop = 0x558; // bool
            public const nint m_bVerticalFOV = 0x559; // bool
            public const nint m_bConstantSpeed = 0x55A; // bool
            public const nint m_flDuration = 0x55C; // float32
            public const nint m_flPathLength = 0x5A0; // float32
            public const nint m_flPathDuration = 0x5A4; // float32
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CCSPlayer_GlowServices {
        }
        // Parent: None
        // Fields count: 0
        public static class C_CSObserverPawnAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class C_CSPlayerPawnAPI {
        }
        // Parent: C_BaseEntity
        // Fields count: 7
        public static class C_VoteController {
            public const nint m_iActiveIssueIndex = 0x560; // int32
            public const nint m_iOnlyTeamToVote = 0x564; // int32
            public const nint m_nVoteOptionCount = 0x568; // int32[5]
            public const nint m_nPotentialVotes = 0x57C; // int32
            public const nint m_bVotesDirty = 0x580; // bool
            public const nint m_bTypeDirty = 0x581; // bool
            public const nint m_bIsYesNoVote = 0x582; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 17
        public static class C_MapVetoPickController {
            public const nint m_nDraftType = 0x560; // int32
            public const nint m_nTeamWinningCoinToss = 0x564; // int32
            public const nint m_nTeamWithFirstChoice = 0x568; // int32[64]
            public const nint m_nVoteMapIdsList = 0x668; // int32[7]
            public const nint m_nAccountIDs = 0x684; // int32[64]
            public const nint m_nMapId0 = 0x784; // int32[64]
            public const nint m_nMapId1 = 0x884; // int32[64]
            public const nint m_nMapId2 = 0x984; // int32[64]
            public const nint m_nMapId3 = 0xA84; // int32[64]
            public const nint m_nMapId4 = 0xB84; // int32[64]
            public const nint m_nMapId5 = 0xC84; // int32[64]
            public const nint m_nStartingSide0 = 0xD84; // int32[64]
            public const nint m_nCurrentPhase = 0xE84; // int32
            public const nint m_nPhaseStartTick = 0xE88; // int32
            public const nint m_nPhaseDurationTicks = 0xE8C; // int32
            public const nint m_nPostDataUpdateTick = 0xE90; // int32
            public const nint m_bDisabledHud = 0xE94; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CPlayerSprayDecalRenderHelper {
        }
        // Parent: C_CSGO_MapPreviewCameraPath
        // Fields count: 7
        public static class C_CSGO_TeamPreviewCamera {
            public const nint m_nVariant = 0x5B0; // int32
            public const nint m_bDofEnabled = 0x5B4; // bool
            public const nint m_flDofNearBlurry = 0x5B8; // float32
            public const nint m_flDofNearCrisp = 0x5BC; // float32
            public const nint m_flDofFarCrisp = 0x5C0; // float32
            public const nint m_flDofFarBlurry = 0x5C4; // float32
            public const nint m_flDofTiltToGround = 0x5C8; // float32
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_TeamSelectCamera {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_TerroristTeamIntroCamera {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_TerroristWingmanIntroCamera {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_CounterTerroristTeamIntroCamera {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_CounterTerroristWingmanIntroCamera {
        }
        // Parent: C_CSGO_TeamPreviewCamera
        // Fields count: 0
        public static class C_CSGO_EndOfMatchCamera {
        }
        // Parent: C_CSGO_TeamPreviewCharacterPosition
        // Fields count: 0
        public static class C_CSGO_EndOfMatchCharacterPosition {
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_CSGO_EndOfMatchLineupEndpoint {
        }
        // Parent: C_CSGO_EndOfMatchLineupEndpoint
        // Fields count: 0
        public static class C_CSGO_EndOfMatchLineupStart {
        }
        // Parent: C_CSGO_EndOfMatchLineupEndpoint
        // Fields count: 0
        public static class C_CSGO_EndOfMatchLineupEnd {
        }
        // Parent: C_BaseEntity
        // Fields count: 2
        public static class C_CsmFovOverride {
            public const nint m_cameraName = 0x550; // CUtlString
            public const nint m_flCsmFovOverrideValue = 0x558; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class C_PointEntity {
        }
        // Parent: C_BaseEntity
        // Fields count: 24
        public static class C_EnvCombinedLightProbeVolume {
            public const nint m_Color = 0x15A8; // Color
            public const nint m_flBrightness = 0x15AC; // float32
            public const nint m_hCubemapTexture = 0x15B0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bCustomCubemapTexture = 0x15B8; // bool
            public const nint m_hLightProbeTexture = 0x15C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightIndicesTexture = 0x15C8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightScalarsTexture = 0x15D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightShadowsTexture = 0x15D8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vBoxMins = 0x15E0; // 
            public const nint m_vBoxMaxs = 0x15EC; // 
            public const nint m_bMoveable = 0x15F8; // bool
            public const nint m_nHandshake = 0x15FC; // int32
            public const nint m_nEnvCubeMapArrayIndex = 0x1600; // int32
            public const nint m_nPriority = 0x1604; // int32
            public const nint m_bStartDisabled = 0x1608; // bool
            public const nint m_flEdgeFadeDist = 0x160C; // float32
            public const nint m_vEdgeFadeDists = 0x1610; // 
            public const nint m_nLightProbeSizeX = 0x161C; // int32
            public const nint m_nLightProbeSizeY = 0x1620; // int32
            public const nint m_nLightProbeSizeZ = 0x1624; // int32
            public const nint m_nLightProbeAtlasX = 0x1628; // int32
            public const nint m_nLightProbeAtlasY = 0x162C; // int32
            public const nint m_nLightProbeAtlasZ = 0x1630; // int32
            public const nint m_bEnabled = 0x1649; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 18
        public static class C_EnvCubemap {
            public const nint m_hCubemapTexture = 0x5D0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bCustomCubemapTexture = 0x5D8; // bool
            public const nint m_flInfluenceRadius = 0x5DC; // float32
            public const nint m_vBoxProjectMins = 0x5E0; // 
            public const nint m_vBoxProjectMaxs = 0x5EC; // 
            public const nint m_bMoveable = 0x5F8; // bool
            public const nint m_nHandshake = 0x5FC; // int32
            public const nint m_nEnvCubeMapArrayIndex = 0x600; // int32
            public const nint m_nPriority = 0x604; // int32
            public const nint m_flEdgeFadeDist = 0x608; // float32
            public const nint m_vEdgeFadeDists = 0x60C; // 
            public const nint m_flDiffuseScale = 0x618; // float32
            public const nint m_bStartDisabled = 0x61C; // bool
            public const nint m_bDefaultEnvMap = 0x61D; // bool
            public const nint m_bDefaultSpecEnvMap = 0x61E; // bool
            public const nint m_bIndoorCubeMap = 0x61F; // bool
            public const nint m_bCopyDiffuseFromDefaultCubemap = 0x620; // bool
            public const nint m_bEnabled = 0x630; // bool
        }
        // Parent: C_EnvCubemap
        // Fields count: 0
        public static class C_EnvCubemapBox {
        }
        // Parent: C_BaseEntity
        // Fields count: 18
        public static class C_EnvCubemapFog {
            public const nint m_flEndDistance = 0x550; // float32
            public const nint m_flStartDistance = 0x554; // float32
            public const nint m_flFogFalloffExponent = 0x558; // float32
            public const nint m_bHeightFogEnabled = 0x55C; // bool
            public const nint m_flFogHeightWidth = 0x560; // float32
            public const nint m_flFogHeightEnd = 0x564; // float32
            public const nint m_flFogHeightStart = 0x568; // float32
            public const nint m_flFogHeightExponent = 0x56C; // float32
            public const nint m_flLODBias = 0x570; // float32
            public const nint m_bActive = 0x574; // bool
            public const nint m_bStartDisabled = 0x575; // bool
            public const nint m_flFogMaxOpacity = 0x578; // float32
            public const nint m_nCubemapSourceType = 0x57C; // int32
            public const nint m_hSkyMaterial = 0x580; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_iszSkyEntity = 0x588; // CUtlSymbolLarge
            public const nint m_hFogCubemapTexture = 0x590; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bHasHeightFogEnd = 0x598; // bool
            public const nint m_bFirstTime = 0x599; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 16
        public static class C_GradientFog {
            public const nint m_hGradientFogTexture = 0x550; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_flFogStartDistance = 0x558; // float32
            public const nint m_flFogEndDistance = 0x55C; // float32
            public const nint m_bHeightFogEnabled = 0x560; // bool
            public const nint m_flFogStartHeight = 0x564; // float32
            public const nint m_flFogEndHeight = 0x568; // float32
            public const nint m_flFarZ = 0x56C; // float32
            public const nint m_flFogMaxOpacity = 0x570; // float32
            public const nint m_flFogFalloffExponent = 0x574; // float32
            public const nint m_flFogVerticalExponent = 0x578; // float32
            public const nint m_fogColor = 0x57C; // Color
            public const nint m_flFogStrength = 0x580; // float32
            public const nint m_flFadeTime = 0x584; // float32
            public const nint m_bStartDisabled = 0x588; // bool
            public const nint m_bIsEnabled = 0x589; // bool
            public const nint m_bGradientFogNeedsTextures = 0x58A; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 17
        public static class C_EnvLightProbeVolume {
            public const nint m_hLightProbeTexture = 0x1528; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightIndicesTexture = 0x1530; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightScalarsTexture = 0x1538; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightShadowsTexture = 0x1540; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vBoxMins = 0x1548; // 
            public const nint m_vBoxMaxs = 0x1554; // 
            public const nint m_bMoveable = 0x1560; // bool
            public const nint m_nHandshake = 0x1564; // int32
            public const nint m_nPriority = 0x1568; // int32
            public const nint m_bStartDisabled = 0x156C; // bool
            public const nint m_nLightProbeSizeX = 0x1570; // int32
            public const nint m_nLightProbeSizeY = 0x1574; // int32
            public const nint m_nLightProbeSizeZ = 0x1578; // int32
            public const nint m_nLightProbeAtlasX = 0x157C; // int32
            public const nint m_nLightProbeAtlasY = 0x1580; // int32
            public const nint m_nLightProbeAtlasZ = 0x1584; // int32
            public const nint m_bEnabled = 0x1591; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 6
        public static class C_PlayerVisibility {
            public const nint m_flVisibilityStrength = 0x550; // float32
            public const nint m_flFogDistanceMultiplier = 0x554; // float32
            public const nint m_flFogMaxDensityMultiplier = 0x558; // float32
            public const nint m_flFadeTime = 0x55C; // float32
            public const nint m_bStartDisabled = 0x560; // bool
            public const nint m_bIsEnabled = 0x561; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 8
        public static class C_TonemapController2 {
            public const nint m_flAutoExposureMin = 0x550; // float32
            public const nint m_flAutoExposureMax = 0x554; // float32
            public const nint m_flTonemapPercentTarget = 0x558; // float32
            public const nint m_flTonemapPercentBrightPixels = 0x55C; // float32
            public const nint m_flTonemapMinAvgLum = 0x560; // float32
            public const nint m_flExposureAdaptationSpeedUp = 0x564; // float32
            public const nint m_flExposureAdaptationSpeedDown = 0x568; // float32
            public const nint m_flTonemapEVSmoothingRange = 0x56C; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 28
        public static class C_EnvVolumetricFogController {
            public const nint m_flScattering = 0x550; // float32
            public const nint m_flAnisotropy = 0x554; // float32
            public const nint m_flFadeSpeed = 0x558; // float32
            public const nint m_flDrawDistance = 0x55C; // float32
            public const nint m_flFadeInStart = 0x560; // float32
            public const nint m_flFadeInEnd = 0x564; // float32
            public const nint m_flIndirectStrength = 0x568; // float32
            public const nint m_nIndirectTextureDimX = 0x56C; // int32
            public const nint m_nIndirectTextureDimY = 0x570; // int32
            public const nint m_nIndirectTextureDimZ = 0x574; // int32
            public const nint m_vBoxMins = 0x578; // 
            public const nint m_vBoxMaxs = 0x584; // 
            public const nint m_bActive = 0x590; // bool
            public const nint m_flStartAnisoTime = 0x594; // GameTime_t
            public const nint m_flStartScatterTime = 0x598; // GameTime_t
            public const nint m_flStartDrawDistanceTime = 0x59C; // GameTime_t
            public const nint m_flStartAnisotropy = 0x5A0; // float32
            public const nint m_flStartScattering = 0x5A4; // float32
            public const nint m_flStartDrawDistance = 0x5A8; // float32
            public const nint m_flDefaultAnisotropy = 0x5AC; // float32
            public const nint m_flDefaultScattering = 0x5B0; // float32
            public const nint m_flDefaultDrawDistance = 0x5B4; // float32
            public const nint m_bStartDisabled = 0x5B8; // bool
            public const nint m_bEnableIndirect = 0x5B9; // bool
            public const nint m_bIsMaster = 0x5BA; // bool
            public const nint m_hFogIndirectTexture = 0x5C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_nForceRefreshCount = 0x5C8; // int32
            public const nint m_bFirstTime = 0x5CC; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 7
        public static class C_EnvVolumetricFogVolume {
            public const nint m_bActive = 0x550; // bool
            public const nint m_vBoxMins = 0x554; // 
            public const nint m_vBoxMaxs = 0x560; // 
            public const nint m_bStartDisabled = 0x56C; // bool
            public const nint m_flStrength = 0x570; // float32
            public const nint m_nFalloffShape = 0x574; // int32
            public const nint m_flFalloffExponent = 0x578; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 3
        public static class C_FogController {
            public const nint m_fog = 0x550; // fogparams_t
            public const nint m_bUseAngles = 0x5B8; // bool
            public const nint m_iChangedVariables = 0x5BC; // int32
        }
        // Parent: C_PointEntity
        // Fields count: 0
        public static class CInfoTarget {
        }
        // Parent: C_PointEntity
        // Fields count: 0
        public static class CInfoParticleTarget {
        }
        // Parent: C_BaseEntity
        // Fields count: 3
        public static class C_InfoVisibilityBox {
            public const nint m_nMode = 0x554; // int32
            public const nint m_vBoxSize = 0x558; // 
            public const nint m_bEnabled = 0x564; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 8
        public static class CInfoWorldLayer {
            public const nint m_pOutputOnEntitiesSpawned = 0x550; // CEntityIOOutput
            public const nint m_worldName = 0x578; // CUtlSymbolLarge
            public const nint m_layerName = 0x580; // CUtlSymbolLarge
            public const nint m_bWorldLayerVisible = 0x588; // bool
            public const nint m_bEntitiesSpawned = 0x589; // bool
            public const nint m_bCreateAsChildSpawnGroup = 0x58A; // bool
            public const nint m_hLayerSpawnGroup = 0x58C; // uint32
            public const nint m_bWorldLayerActuallyVisible = 0x590; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 25
        public static class C_PointCamera {
            public const nint m_FOV = 0x550; // float32
            public const nint m_Resolution = 0x554; // float32
            public const nint m_bFogEnable = 0x558; // bool
            public const nint m_FogColor = 0x559; // Color
            public const nint m_flFogStart = 0x560; // float32
            public const nint m_flFogEnd = 0x564; // float32
            public const nint m_flFogMaxDensity = 0x568; // float32
            public const nint m_bActive = 0x56C; // bool
            public const nint m_bUseScreenAspectRatio = 0x56D; // bool
            public const nint m_flAspectRatio = 0x570; // float32
            public const nint m_bNoSky = 0x574; // bool
            public const nint m_fBrightness = 0x578; // float32
            public const nint m_flZFar = 0x57C; // float32
            public const nint m_flZNear = 0x580; // float32
            public const nint m_bCanHLTVUse = 0x584; // bool
            public const nint m_bDofEnabled = 0x585; // bool
            public const nint m_flDofNearBlurry = 0x588; // float32
            public const nint m_flDofNearCrisp = 0x58C; // float32
            public const nint m_flDofFarCrisp = 0x590; // float32
            public const nint m_flDofFarBlurry = 0x594; // float32
            public const nint m_flDofTiltToGround = 0x598; // float32
            public const nint m_TargetFOV = 0x59C; // float32
            public const nint m_DegreesPerSecond = 0x5A0; // float32
            public const nint m_bIsOn = 0x5A4; // bool
            public const nint m_pNext = 0x5A8; // C_PointCamera*
        }
        // Parent: C_PointCamera
        // Fields count: 1
        public static class C_PointCameraVFOV {
            public const nint m_flVerticalFOV = 0x5B0; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 12
        public static class CPointTemplate {
            public const nint m_iszWorldName = 0x550; // CUtlSymbolLarge
            public const nint m_iszSource2EntityLumpName = 0x558; // CUtlSymbolLarge
            public const nint m_iszEntityFilterName = 0x560; // CUtlSymbolLarge
            public const nint m_flTimeoutInterval = 0x568; // float32
            public const nint m_bAsynchronouslySpawnEntities = 0x56C; // bool
            public const nint m_pOutputOnSpawned = 0x570; // CEntityIOOutput
            public const nint m_clientOnlyEntityBehavior = 0x598; // PointTemplateClientOnlyEntityBehavior_t
            public const nint m_ownerSpawnGroupType = 0x59C; // PointTemplateOwnerSpawnGroupType_t
            public const nint m_createdSpawnGroupHandles = 0x5A0; // CUtlVector<uint32>
            public const nint m_SpawnedEntityHandles = 0x5B8; // CUtlVector<CEntityHandle>
            public const nint m_ScriptSpawnCallback = 0x5D0; // HSCRIPT
            public const nint m_ScriptCallbackScope = 0x5D8; // HSCRIPT
        }
        // Parent: C_BaseEntity
        // Fields count: 4
        public static class C_SoundAreaEntityBase {
            public const nint m_bDisabled = 0x550; // bool
            public const nint m_bWasEnabled = 0x558; // bool
            public const nint m_iszSoundAreaType = 0x560; // CUtlSymbolLarge
            public const nint m_vPos = 0x568; // 
        }
        // Parent: C_SoundAreaEntityBase
        // Fields count: 1
        public static class C_SoundAreaEntitySphere {
            public const nint m_flRadius = 0x578; // float32
        }
        // Parent: C_SoundAreaEntityBase
        // Fields count: 2
        public static class C_SoundAreaEntityOrientedBox {
            public const nint m_vMin = 0x578; // 
            public const nint m_vMax = 0x584; // 
        }
        // Parent: C_BaseEntity
        // Fields count: 4
        public static class C_Team {
            public const nint m_aPlayerControllers = 0x550; // C_NetworkUtlVectorBase<CHandle<CBasePlayerController>>
            public const nint m_aPlayers = 0x568; // C_NetworkUtlVectorBase<CHandle<C_BasePlayerPawn>>
            public const nint m_iScore = 0x580; // int32
            public const nint m_szTeamname = 0x584; // char[129]
        }
        // Parent: C_BaseEntity
        // Fields count: 15
        public static class CBasePlayerController {
            public const nint m_nFinalPredictedTick = 0x558; // int32
            public const nint m_CommandContext = 0x560; // C_CommandContext
            public const nint m_nInButtonsWhichAreToggles = 0x5F8; // uint64
            public const nint m_nTickBase = 0x600; // uint32
            public const nint m_hPawn = 0x604; // CHandle<C_BasePlayerPawn>
            public const nint m_hPredictedPawn = 0x608; // CHandle<C_BasePlayerPawn>
            public const nint m_nSplitScreenSlot = 0x60C; // CSplitScreenSlot
            public const nint m_hSplitOwner = 0x610; // CHandle<CBasePlayerController>
            public const nint m_hSplitScreenPlayers = 0x618; // CUtlVector<CHandle<CBasePlayerController>>
            public const nint m_bIsHLTV = 0x630; // bool
            public const nint m_iConnected = 0x634; // PlayerConnectedState
            public const nint m_iszPlayerName = 0x638; // char[128]
            public const nint m_steamID = 0x6C0; // uint64
            public const nint m_bIsLocalPlayerController = 0x6C8; // bool
            public const nint m_iDesiredFOV = 0x6CC; // uint32
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 14
        public static class CBasePlayerVData {
            public const nint m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_flHeadDamageMultiplier = 0x108; // CSkillFloat
            public const nint m_flChestDamageMultiplier = 0x118; // CSkillFloat
            public const nint m_flStomachDamageMultiplier = 0x128; // CSkillFloat
            public const nint m_flArmDamageMultiplier = 0x138; // CSkillFloat
            public const nint m_flLegDamageMultiplier = 0x148; // CSkillFloat
            public const nint m_flHoldBreathTime = 0x158; // float32
            public const nint m_flDrowningDamageInterval = 0x15C; // float32
            public const nint m_nDrowningDamageInitial = 0x160; // int32
            public const nint m_nDrowningDamageMax = 0x164; // int32
            public const nint m_nWaterSpeed = 0x168; // int32
            public const nint m_flUseRange = 0x16C; // float32
            public const nint m_flUseAngleTolerance = 0x170; // float32
            public const nint m_flCrouchTime = 0x174; // float32
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 20
        public static class CBasePlayerWeaponVData {
            public const nint m_szWorldModel = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_bBuiltRightHanded = 0x108; // bool
            public const nint m_bAllowFlipping = 0x109; // bool
            public const nint m_sMuzzleAttachment = 0x110; // CUtlString
            public const nint m_szMuzzleFlashParticle = 0x118; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_iFlags = 0x1F8; // ItemFlagTypes_t
            public const nint m_nPrimaryAmmoType = 0x1F9; // AmmoIndex_t
            public const nint m_nSecondaryAmmoType = 0x1FA; // AmmoIndex_t
            public const nint m_iMaxClip1 = 0x1FC; // int32
            public const nint m_iMaxClip2 = 0x200; // int32
            public const nint m_iDefaultClip1 = 0x204; // int32
            public const nint m_iDefaultClip2 = 0x208; // int32
            public const nint m_iWeight = 0x20C; // int32
            public const nint m_bAutoSwitchTo = 0x210; // bool
            public const nint m_bAutoSwitchFrom = 0x211; // bool
            public const nint m_iRumbleEffect = 0x214; // RumbleEffect_t
            public const nint m_bLinkedCooldowns = 0x218; // bool
            public const nint m_aShootSounds = 0x220; // CUtlMap<WeaponSound_t,CSoundEventName>
            public const nint m_iSlot = 0x240; // int32
            public const nint m_iPosition = 0x244; // int32
        }
        // Parent: CSkeletonAnimationController
        // Fields count: 13
        public static class CBaseAnimGraphController {
            public const nint m_animGraphNetworkedVars = 0x18; // CAnimGraphNetworkedVariables
            public const nint m_bSequenceFinished = 0x14A8; // bool
            public const nint m_flSoundSyncTime = 0x14AC; // float32
            public const nint m_hSequence = 0x14B0; // HSequence
            public const nint m_flSeqStartTime = 0x14B4; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x14B8; // float32
            public const nint m_nAnimLoopMode = 0x14BC; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x14C0; // CNetworkedQuantizedFloat
            public const nint m_nNotifyState = 0x14CC; // SequenceFinishNotifyState_t
            public const nint m_bNetworkedAnimationInputsChanged = 0x14CE; // bool
            public const nint m_bNetworkedSequenceChanged = 0x14CF; // bool
            public const nint m_bLastUpdateSkipped = 0x14D0; // bool
            public const nint m_flPrevAnimUpdateTime = 0x14D4; // GameTime_t
        }
        // Parent: C_BaseEntity
        // Fields count: 31
        public static class C_BaseModelEntity {
            public const nint m_CRenderComponent = 0xA20; // CRenderComponent*
            public const nint m_CHitboxComponent = 0xA28; // CHitboxComponent
            public const nint m_bInitModelEffects = 0xA70; // bool
            public const nint m_bIsStaticProp = 0xA71; // bool
            public const nint m_nLastAddDecal = 0xA74; // int32
            public const nint m_nDecalsAdded = 0xA78; // int32
            public const nint m_iOldHealth = 0xA7C; // int32
            public const nint m_nRenderMode = 0xA80; // RenderMode_t
            public const nint m_nRenderFX = 0xA81; // RenderFx_t
            public const nint m_bAllowFadeInView = 0xA82; // bool
            public const nint m_clrRender = 0xA83; // Color
            public const nint m_vecRenderAttributes = 0xA88; // C_UtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
            public const nint m_bRenderToCubemaps = 0xAF0; // bool
            public const nint m_Collision = 0xAF8; // CCollisionProperty
            public const nint m_Glow = 0xBA8; // CGlowProperty
            public const nint m_flGlowBackfaceMult = 0xC00; // float32
            public const nint m_fadeMinDist = 0xC04; // float32
            public const nint m_fadeMaxDist = 0xC08; // float32
            public const nint m_flFadeScale = 0xC0C; // float32
            public const nint m_flShadowStrength = 0xC10; // float32
            public const nint m_nObjectCulling = 0xC14; // uint8
            public const nint m_nAddDecal = 0xC18; // int32
            public const nint m_vDecalPosition = 0xC1C; // 
            public const nint m_vDecalForwardAxis = 0xC28; // 
            public const nint m_flDecalHealBloodRate = 0xC34; // float32
            public const nint m_flDecalHealHeightRate = 0xC38; // float32
            public const nint m_ConfigEntitiesToPropagateMaterialDecalsTo = 0xC40; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_vecViewOffset = 0xC58; // CNetworkViewOffsetVector
            public const nint m_pClientAlphaProperty = 0xC88; // CClientAlphaProperty*
            public const nint m_ClientOverrideTint = 0xC90; // Color
            public const nint m_bUseClientOverrideTint = 0xC94; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class CServerOnlyModelEntity {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_ModelPointEntity {
        }
        // Parent: CLogicalEntity
        // Fields count: 7
        public static class CLogicRelay {
            public const nint m_OnTrigger = 0x550; // CEntityIOOutput
            public const nint m_OnSpawn = 0x578; // CEntityIOOutput
            public const nint m_bDisabled = 0x5A0; // bool
            public const nint m_bWaitForRefire = 0x5A1; // bool
            public const nint m_bTriggerOnce = 0x5A2; // bool
            public const nint m_bFastRetrigger = 0x5A3; // bool
            public const nint m_bPassthoughCaller = 0x5A4; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 24
        public static class C_ParticleSystem {
            public const nint m_szSnapshotFileName = 0xCD0; // char[512]
            public const nint m_bActive = 0xED0; // bool
            public const nint m_bFrozen = 0xED1; // bool
            public const nint m_flFreezeTransitionDuration = 0xED4; // float32
            public const nint m_nStopType = 0xED8; // int32
            public const nint m_bAnimateDuringGameplayPause = 0xEDC; // bool
            public const nint m_iEffectIndex = 0xEE0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flStartTime = 0xEE8; // GameTime_t
            public const nint m_flPreSimTime = 0xEEC; // float32
            public const nint m_vServerControlPoints = 0xEF0; // Vector[4]
            public const nint m_iServerControlPointAssignments = 0xF20; // uint8[4]
            public const nint m_hControlPointEnts = 0xF24; // CHandle<C_BaseEntity>[64]
            public const nint m_bNoSave = 0x1024; // bool
            public const nint m_bNoFreeze = 0x1025; // bool
            public const nint m_bNoRamp = 0x1026; // bool
            public const nint m_bStartActive = 0x1027; // bool
            public const nint m_iszEffectName = 0x1028; // CUtlSymbolLarge
            public const nint m_iszControlPointNames = 0x1030; // CUtlSymbolLarge[64]
            public const nint m_nDataCP = 0x1230; // int32
            public const nint m_vecDataCPValue = 0x1234; // 
            public const nint m_nTintCP = 0x1240; // int32
            public const nint m_clrTint = 0x1244; // Color
            public const nint m_bOldActive = 0x1268; // bool
            public const nint m_bOldFrozen = 0x1269; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 16
        public static class C_PathParticleRope {
            public const nint m_bStartActive = 0x550; // bool
            public const nint m_flMaxSimulationTime = 0x554; // float32
            public const nint m_iszEffectName = 0x558; // CUtlSymbolLarge
            public const nint m_PathNodes_Name = 0x560; // CUtlVector<CUtlSymbolLarge>
            public const nint m_flParticleSpacing = 0x578; // float32
            public const nint m_flSlack = 0x57C; // float32
            public const nint m_flRadius = 0x580; // float32
            public const nint m_ColorTint = 0x584; // Color
            public const nint m_nEffectState = 0x588; // int32
            public const nint m_iEffectIndex = 0x590; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_PathNodes_Position = 0x598; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentIn = 0x5B0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentOut = 0x5C8; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_Color = 0x5E0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_PinEnabled = 0x5F8; // C_NetworkUtlVectorBase<bool>
            public const nint m_PathNodes_RadiusScale = 0x610; // C_NetworkUtlVectorBase<float32>
        }
        // Parent: C_PathParticleRope
        // Fields count: 0
        public static class C_PathParticleRopeAlias_path_particle_rope_clientside {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 7
        public static class C_DynamicLight {
            public const nint m_Flags = 0xCD0; // uint8
            public const nint m_LightStyle = 0xCD1; // uint8
            public const nint m_Radius = 0xCD4; // float32
            public const nint m_Exponent = 0xCD8; // int32
            public const nint m_InnerAngle = 0xCDC; // float32
            public const nint m_OuterAngle = 0xCE0; // float32
            public const nint m_SpotRadius = 0xCE4; // float32
        }
        // Parent: C_PointEntity
        // Fields count: 9
        public static class C_EnvScreenOverlay {
            public const nint m_iszOverlayNames = 0x550; // CUtlSymbolLarge[10]
            public const nint m_flOverlayTimes = 0x5A0; // float32[10]
            public const nint m_flStartTime = 0x5C8; // GameTime_t
            public const nint m_iDesiredOverlay = 0x5CC; // int32
            public const nint m_bIsActive = 0x5D0; // bool
            public const nint m_bWasActive = 0x5D1; // bool
            public const nint m_iCachedDesiredOverlay = 0x5D4; // int32
            public const nint m_iCurrentOverlay = 0x5D8; // int32
            public const nint m_flCurrentOverlayTime = 0x5DC; // GameTime_t
        }
        // Parent: C_BaseModelEntity
        // Fields count: 3
        public static class C_FuncTrackTrain {
            public const nint m_nLongAxis = 0xCD0; // int32
            public const nint m_flRadius = 0xCD4; // float32
            public const nint m_flLineLength = 0xCD8; // float32
        }
        // Parent: CGlowOverlay
        // Fields count: 7
        public static class C_LightGlowOverlay {
            public const nint m_vecOrigin = 0xD0; // 
            public const nint m_vecDirection = 0xDC; // 
            public const nint m_nMinDist = 0xE8; // int32
            public const nint m_nMaxDist = 0xEC; // int32
            public const nint m_nOuterMaxDist = 0xF0; // int32
            public const nint m_bOneSided = 0xF4; // bool
            public const nint m_bModulateByDot = 0xF5; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 8
        public static class C_LightGlow {
            public const nint m_nHorizontalSize = 0xCD0; // uint32
            public const nint m_nVerticalSize = 0xCD4; // uint32
            public const nint m_nMinDist = 0xCD8; // uint32
            public const nint m_nMaxDist = 0xCDC; // uint32
            public const nint m_nOuterMaxDist = 0xCE0; // uint32
            public const nint m_flGlowProxySize = 0xCE4; // float32
            public const nint m_flHDRColorScale = 0xCE8; // float32
            public const nint m_Glow = 0xCF0; // C_LightGlowOverlay
        }
        // Parent: C_BaseEntity
        // Fields count: 1
        public static class C_RagdollManager {
            public const nint m_iCurrentMaxRagdollCount = 0x550; // int8
        }
        // Parent: C_BaseModelEntity
        // Fields count: 2
        public static class C_SpotlightEnd {
            public const nint m_flLightScale = 0xCD0; // float32
            public const nint m_Radius = 0xCD4; // float32
        }
        // Parent: C_BaseEntity
        // Fields count: 25
        public static class C_PointValueRemapper {
            public const nint m_bDisabled = 0x550; // bool
            public const nint m_bDisabledOld = 0x551; // bool
            public const nint m_bUpdateOnClient = 0x552; // bool
            public const nint m_nInputType = 0x554; // ValueRemapperInputType_t
            public const nint m_hRemapLineStart = 0x558; // CHandle<C_BaseEntity>
            public const nint m_hRemapLineEnd = 0x55C; // CHandle<C_BaseEntity>
            public const nint m_flMaximumChangePerSecond = 0x560; // float32
            public const nint m_flDisengageDistance = 0x564; // float32
            public const nint m_flEngageDistance = 0x568; // float32
            public const nint m_bRequiresUseKey = 0x56C; // bool
            public const nint m_nOutputType = 0x570; // ValueRemapperOutputType_t
            public const nint m_hOutputEntities = 0x578; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
            public const nint m_nHapticsType = 0x590; // ValueRemapperHapticsType_t
            public const nint m_nMomentumType = 0x594; // ValueRemapperMomentumType_t
            public const nint m_flMomentumModifier = 0x598; // float32
            public const nint m_flSnapValue = 0x59C; // float32
            public const nint m_flCurrentMomentum = 0x5A0; // float32
            public const nint m_nRatchetType = 0x5A4; // ValueRemapperRatchetType_t
            public const nint m_flRatchetOffset = 0x5A8; // float32
            public const nint m_flInputOffset = 0x5AC; // float32
            public const nint m_bEngaged = 0x5B0; // bool
            public const nint m_bFirstUpdate = 0x5B1; // bool
            public const nint m_flPreviousValue = 0x5B4; // float32
            public const nint m_flPreviousUpdateTickTime = 0x5B8; // GameTime_t
            public const nint m_vecPreviousTestPoint = 0x5BC; // 
        }
        // Parent: C_ModelPointEntity
        // Fields count: 12
        public static class C_PointWorldText {
            public const nint m_bForceRecreateNextUpdate = 0xCD8; // bool
            public const nint m_messageText = 0xCE8; // char[512]
            public const nint m_FontName = 0xEE8; // char[64]
            public const nint m_bEnabled = 0xF28; // bool
            public const nint m_bFullbright = 0xF29; // bool
            public const nint m_flWorldUnitsPerPx = 0xF2C; // float32
            public const nint m_flFontSize = 0xF30; // float32
            public const nint m_flDepthOffset = 0xF34; // float32
            public const nint m_Color = 0xF38; // Color
            public const nint m_nJustifyHorizontal = 0xF3C; // PointWorldTextJustifyHorizontal_t
            public const nint m_nJustifyVertical = 0xF40; // PointWorldTextJustifyVertical_t
            public const nint m_nReorientMode = 0xF44; // PointWorldTextReorientMode_t
        }
        // Parent: C_BaseEntity
        // Fields count: 2
        public static class C_HandleTest {
            public const nint m_Handle = 0x550; // CHandle<C_BaseEntity>
            public const nint m_bSendHandle = 0x554; // bool
        }
        // Parent: C_BaseEntity
        // Fields count: 0
        public static class CClientScriptEntity {
        }
        // Parent: C_BaseEntity
        // Fields count: 1
        public static class C_EnvWind {
            public const nint m_EnvWindShared = 0x550; // C_EnvWindShared
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_BaseToggle {
        }
        // Parent: C_BaseToggle
        // Fields count: 3
        public static class C_BaseButton {
            public const nint m_glowEntity = 0xCD0; // CHandle<C_BaseModelEntity>
            public const nint m_usable = 0xCD4; // bool
            public const nint m_szDisplayText = 0xCD8; // CUtlSymbolLarge
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_PrecipitationBlocker {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 13
        public static class C_EntityDissolve {
            public const nint m_flStartTime = 0xCD8; // GameTime_t
            public const nint m_flFadeInStart = 0xCDC; // float32
            public const nint m_flFadeInLength = 0xCE0; // float32
            public const nint m_flFadeOutModelStart = 0xCE4; // float32
            public const nint m_flFadeOutModelLength = 0xCE8; // float32
            public const nint m_flFadeOutStart = 0xCEC; // float32
            public const nint m_flFadeOutLength = 0xCF0; // float32
            public const nint m_flNextSparkTime = 0xCF4; // GameTime_t
            public const nint m_nDissolveType = 0xCF8; // EntityDisolveType_t
            public const nint m_vDissolverOrigin = 0xCFC; // 
            public const nint m_nMagnitude = 0xD08; // uint32
            public const nint m_bCoreExplode = 0xD0C; // bool
            public const nint m_bLinkedToServerEnt = 0xD0D; // bool
        }
        // Parent: C_ModelPointEntity
        // Fields count: 0
        public static class C_EnvProjectedTexture {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 9
        public static class C_EnvDecal {
            public const nint m_hDecalMaterial = 0xCD0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_flWidth = 0xCD8; // float32
            public const nint m_flHeight = 0xCDC; // float32
            public const nint m_flDepth = 0xCE0; // float32
            public const nint m_nRenderOrder = 0xCE4; // uint32
            public const nint m_bProjectOnWorld = 0xCE8; // bool
            public const nint m_bProjectOnCharacters = 0xCE9; // bool
            public const nint m_bProjectOnWater = 0xCEA; // bool
            public const nint m_flDepthSortBias = 0xCEC; // float32
        }
        // Parent: CGlowOverlay
        // Fields count: 4
        public static class CFireOverlay {
            public const nint m_pOwner = 0xD0; // C_FireSmoke*
            public const nint m_vBaseColors = 0xD8; // Vector[4]
            public const nint m_flScale = 0x108; // float32
            public const nint m_nGUID = 0x10C; // int32
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_FuncBrush {
        }
        // Parent: C_FuncBrush
        // Fields count: 3
        public static class C_FuncElectrifiedVolume {
            public const nint m_nAmbientEffect = 0xCD0; // ParticleIndex_t
            public const nint m_EffectName = 0xCD8; // CUtlSymbolLarge
            public const nint m_bState = 0xCE0; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_FuncRotating {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_Breakable {
        }
        // Parent: C_Breakable
        // Fields count: 0
        public static class C_PhysBox {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 41
        public static class C_RopeKeyframe {
            public const nint m_LinksTouchingSomething = 0xCD8; // CBitVec<10>
            public const nint m_nLinksTouchingSomething = 0xCDC; // int32
            public const nint m_bApplyWind = 0xCE0; // bool
            public const nint m_fPrevLockedPoints = 0xCE4; // int32
            public const nint m_iForcePointMoveCounter = 0xCE8; // int32
            public const nint m_bPrevEndPointPos = 0xCEC; // bool[2]
            public const nint m_vPrevEndPointPos = 0xCF0; // Vector[2]
            public const nint m_flCurScroll = 0xD08; // float32
            public const nint m_flScrollSpeed = 0xD0C; // float32
            public const nint m_RopeFlags = 0xD10; // uint16
            public const nint m_iRopeMaterialModelIndex = 0xD18; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_LightValues = 0xF90; // Vector[10]
            public const nint m_nSegments = 0x1008; // uint8
            public const nint m_hStartPoint = 0x100C; // CHandle<C_BaseEntity>
            public const nint m_hEndPoint = 0x1010; // CHandle<C_BaseEntity>
            public const nint m_iStartAttachment = 0x1014; // AttachmentHandle_t
            public const nint m_iEndAttachment = 0x1015; // AttachmentHandle_t
            public const nint m_Subdiv = 0x1016; // uint8
            public const nint m_RopeLength = 0x1018; // int16
            public const nint m_Slack = 0x101A; // int16
            public const nint m_TextureScale = 0x101C; // float32
            public const nint m_fLockedPoints = 0x1020; // uint8
            public const nint m_nChangeCount = 0x1021; // uint8
            public const nint m_Width = 0x1024; // float32
            public const nint m_PhysicsDelegate = 0x1028; // C_RopeKeyframe::CPhysicsDelegate
            public const nint m_hMaterial = 0x1038; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_TextureHeight = 0x1040; // int32
            public const nint m_vecImpulse = 0x1044; // 
            public const nint m_vecPreviousImpulse = 0x1050; // 
            public const nint m_flCurrentGustTimer = 0x105C; // float32
            public const nint m_flCurrentGustLifetime = 0x1060; // float32
            public const nint m_flTimeToNextGust = 0x1064; // float32
            public const nint m_vWindDir = 0x1068; // 
            public const nint m_vColorMod = 0x1074; // 
            public const nint m_vCachedEndPointAttachmentPos = 0x1080; // Vector[2]
            public const nint m_vCachedEndPointAttachmentAngle = 0x1098; // QAngle[2]
            public const nint m_bConstrainBetweenEndpoints = 0x10B0; // bool
            public const nint m_bEndPointAttachmentPositionsDirty = 0x0; // bitfield:1
            public const nint m_bEndPointAttachmentAnglesDirty = 0x0; // bitfield:1
            public const nint m_bNewDataThisFrame = 0x0; // bitfield:1
            public const nint m_bPhysicsInitted = 0x0; // bitfield:1
        }
        // Parent: C_PointEntity
        // Fields count: 12
        public static class C_SceneEntity {
            public const nint m_bIsPlayingBack = 0x558; // bool
            public const nint m_bPaused = 0x559; // bool
            public const nint m_bMultiplayer = 0x55A; // bool
            public const nint m_bAutogenerated = 0x55B; // bool
            public const nint m_flForceClientTime = 0x55C; // float32
            public const nint m_nSceneStringIndex = 0x560; // uint16
            public const nint m_bClientOnly = 0x562; // bool
            public const nint m_hOwner = 0x564; // CHandle<C_BaseFlex>
            public const nint m_hActorList = 0x568; // C_NetworkUtlVectorBase<CHandle<C_BaseFlex>>
            public const nint m_bWasPlaying = 0x580; // bool
            public const nint m_QueuedEvents = 0x590; // CUtlVector<C_SceneEntity::QueuedEvents_t>
            public const nint m_flCurrentTime = 0x5A8; // float32
        }
        // Parent: CGlowOverlay
        // Fields count: 1
        public static class C_SunGlowOverlay {
            public const nint m_bModulateByDot = 0xD0; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 18
        public static class C_Sun {
            public const nint m_fxSSSunFlareEffectIndex = 0xCD0; // ParticleIndex_t
            public const nint m_fxSunFlareEffectIndex = 0xCD4; // ParticleIndex_t
            public const nint m_fdistNormalize = 0xCD8; // float32
            public const nint m_vSunPos = 0xCDC; // 
            public const nint m_vDirection = 0xCE8; // 
            public const nint m_iszEffectName = 0xCF8; // CUtlSymbolLarge
            public const nint m_iszSSEffectName = 0xD00; // CUtlSymbolLarge
            public const nint m_clrOverlay = 0xD08; // Color
            public const nint m_bOn = 0xD0C; // bool
            public const nint m_bmaxColor = 0xD0D; // bool
            public const nint m_flSize = 0xD10; // float32
            public const nint m_flHazeScale = 0xD14; // float32
            public const nint m_flRotation = 0xD18; // float32
            public const nint m_flHDRColorScale = 0xD1C; // float32
            public const nint m_flAlphaHaze = 0xD20; // float32
            public const nint m_flAlphaScale = 0xD24; // float32
            public const nint m_flAlphaHdr = 0xD28; // float32
            public const nint m_flFarZScale = 0xD2C; // float32
        }
        // Parent: C_BaseToggle
        // Fields count: 2
        public static class C_BaseTrigger {
            public const nint m_bDisabled = 0xCD0; // bool
            public const nint m_bClientSidePredicted = 0xCD1; // bool
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_TriggerVolume {
        }
        // Parent: C_BaseTrigger
        // Fields count: 0
        public static class C_TriggerMultiple {
        }
        // Parent: C_BaseTrigger
        // Fields count: 0
        public static class C_TriggerLerpObject {
        }
        // Parent: C_BaseTrigger
        // Fields count: 13
        public static class C_TriggerPhysics {
            public const nint m_gravityScale = 0xCD8; // float32
            public const nint m_linearLimit = 0xCDC; // float32
            public const nint m_linearDamping = 0xCE0; // float32
            public const nint m_angularLimit = 0xCE4; // float32
            public const nint m_angularDamping = 0xCE8; // float32
            public const nint m_linearForce = 0xCEC; // float32
            public const nint m_flFrequency = 0xCF0; // float32
            public const nint m_flDampingRatio = 0xCF4; // float32
            public const nint m_vecLinearForcePointAt = 0xCF8; // 
            public const nint m_bCollapseToForcePoint = 0xD04; // bool
            public const nint m_vecLinearForcePointAtWorld = 0xD08; // 
            public const nint m_vecLinearForceDirection = 0xD14; // 
            public const nint m_bConvertToDebrisWhenPossible = 0xD20; // bool
        }
        // Parent: IClientAlphaProperty
        // Fields count: 13
        public static class CClientAlphaProperty {
            public const nint m_nRenderFX = 0x10; // uint8
            public const nint m_nRenderMode = 0x11; // uint8
            public const nint m_bAlphaOverride = 0x0; // bitfield:1
            public const nint m_bShadowAlphaOverride = 0x0; // bitfield:1
            public const nint m_nReserved = 0x0; // bitfield:6
            public const nint m_nAlpha = 0x13; // uint8
            public const nint m_nDesyncOffset = 0x14; // uint16
            public const nint m_nReserved2 = 0x16; // uint16
            public const nint m_nDistFadeStart = 0x18; // uint16
            public const nint m_nDistFadeEnd = 0x1A; // uint16
            public const nint m_flFadeScale = 0x1C; // float32
            public const nint m_flRenderFxStartTime = 0x20; // GameTime_t
            public const nint m_flRenderFxDuration = 0x24; // float32
        }
        // Parent: C_BaseModelEntity
        // Fields count: 24
        public static class C_Beam {
            public const nint m_flFrameRate = 0xCD0; // float32
            public const nint m_flHDRColorScale = 0xCD4; // float32
            public const nint m_flFireTime = 0xCD8; // GameTime_t
            public const nint m_flDamage = 0xCDC; // float32
            public const nint m_nNumBeamEnts = 0xCE0; // uint8
            public const nint m_queryHandleHalo = 0xCE4; // int32
            public const nint m_hBaseMaterial = 0xD08; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nHaloIndex = 0xD10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nBeamType = 0xD18; // BeamType_t
            public const nint m_nBeamFlags = 0xD1C; // uint32
            public const nint m_hAttachEntity = 0xD20; // CHandle<C_BaseEntity>[10]
            public const nint m_nAttachIndex = 0xD48; // AttachmentHandle_t[10]
            public const nint m_fWidth = 0xD54; // float32
            public const nint m_fEndWidth = 0xD58; // float32
            public const nint m_fFadeLength = 0xD5C; // float32
            public const nint m_fHaloScale = 0xD60; // float32
            public const nint m_fAmplitude = 0xD64; // float32
            public const nint m_fStartFrame = 0xD68; // float32
            public const nint m_fSpeed = 0xD6C; // float32
            public const nint m_flFrame = 0xD70; // float32
            public const nint m_nClipStyle = 0xD74; // BeamClipStyle_t
            public const nint m_bTurnedOff = 0xD78; // bool
            public const nint m_vecEndPos = 0xD7C; // 
            public const nint m_hEndEntity = 0xD88; // CHandle<C_BaseEntity>
        }
        // Parent: C_BaseModelEntity
        // Fields count: 9
        public static class C_FuncLadder {
            public const nint m_vecLadderDir = 0xCD0; // 
            public const nint m_Dismounts = 0xCE0; // CUtlVector<CHandle<C_InfoLadderDismount>>
            public const nint m_vecLocalTop = 0xCF8; // 
            public const nint m_vecPlayerMountPositionTop = 0xD04; // 
            public const nint m_vecPlayerMountPositionBottom = 0xD10; // 
            public const nint m_flAutoRideSpeed = 0xD1C; // float32
            public const nint m_bDisabled = 0xD20; // bool
            public const nint m_bFakeLadder = 0xD21; // bool
            public const nint m_bHasSlack = 0xD22; // bool
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 7
        public static class CPrecipitationVData {
            public const nint m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_flInnerDistance = 0x108; // float32
            public const nint m_nAttachType = 0x10C; // ParticleAttachment_t
            public const nint m_bBatchSameVolumeType = 0x110; // bool
            public const nint m_nRTEnvCP = 0x114; // int32
            public const nint m_nRTEnvCPComponent = 0x118; // int32
            public const nint m_szModifier = 0x120; // CUtlString
        }
        // Parent: C_BaseModelEntity
        // Fields count: 24
        public static class C_Sprite {
            public const nint m_hSpriteMaterial = 0xCE8; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hAttachedToEntity = 0xCF0; // CHandle<C_BaseEntity>
            public const nint m_nAttachment = 0xCF4; // AttachmentHandle_t
            public const nint m_flSpriteFramerate = 0xCF8; // float32
            public const nint m_flFrame = 0xCFC; // float32
            public const nint m_flDieTime = 0xD00; // GameTime_t
            public const nint m_nBrightness = 0xD10; // uint32
            public const nint m_flBrightnessDuration = 0xD14; // float32
            public const nint m_flSpriteScale = 0xD18; // float32
            public const nint m_flScaleDuration = 0xD1C; // float32
            public const nint m_bWorldSpaceScale = 0xD20; // bool
            public const nint m_flGlowProxySize = 0xD24; // float32
            public const nint m_flHDRColorScale = 0xD28; // float32
            public const nint m_flLastTime = 0xD2C; // GameTime_t
            public const nint m_flMaxFrame = 0xD30; // float32
            public const nint m_flStartScale = 0xD34; // float32
            public const nint m_flDestScale = 0xD38; // float32
            public const nint m_flScaleTimeStart = 0xD3C; // GameTime_t
            public const nint m_nStartBrightness = 0xD40; // int32
            public const nint m_nDestBrightness = 0xD44; // int32
            public const nint m_flBrightnessTimeStart = 0xD48; // GameTime_t
            public const nint m_hOldSpriteMaterial = 0xD50; // CWeakHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nSpriteWidth = 0xDF8; // int32
            public const nint m_nSpriteHeight = 0xDFC; // int32
        }
        // Parent: C_Sprite
        // Fields count: 0
        public static class C_SpriteOriented {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 4
        public static class C_BaseClientUIEntity {
            public const nint m_bEnabled = 0xCD8; // bool
            public const nint m_DialogXMLName = 0xCE0; // CUtlSymbolLarge
            public const nint m_PanelClassName = 0xCE8; // CUtlSymbolLarge
            public const nint m_PanelID = 0xCF0; // CUtlSymbolLarge
        }
        // Parent: C_BaseClientUIEntity
        // Fields count: 2
        public static class C_PointClientUIDialog {
            public const nint m_hActivator = 0xD00; // CHandle<C_BaseEntity>
            public const nint m_bStartEnabled = 0xD04; // bool
        }
        // Parent: C_BaseClientUIEntity
        // Fields count: 13
        public static class C_PointClientUIHUD {
            public const nint m_bCheckCSSClasses = 0xD08; // bool
            public const nint m_bIgnoreInput = 0xE90; // bool
            public const nint m_flWidth = 0xE94; // float32
            public const nint m_flHeight = 0xE98; // float32
            public const nint m_flDPI = 0xE9C; // float32
            public const nint m_flInteractDistance = 0xEA0; // float32
            public const nint m_flDepthOffset = 0xEA4; // float32
            public const nint m_unOwnerContext = 0xEA8; // uint32
            public const nint m_unHorizontalAlign = 0xEAC; // uint32
            public const nint m_unVerticalAlign = 0xEB0; // uint32
            public const nint m_unOrientation = 0xEB4; // uint32
            public const nint m_bAllowInteractionFromAllSceneWorlds = 0xEB8; // bool
            public const nint m_vecCSSClasses = 0xEC0; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
        }
        // Parent: C_BaseClientUIEntity
        // Fields count: 28
        public static class C_PointClientUIWorldPanel {
            public const nint m_bForceRecreateNextUpdate = 0xD08; // bool
            public const nint m_bMoveViewToPlayerNextThink = 0xD09; // bool
            public const nint m_bCheckCSSClasses = 0xD0A; // bool
            public const nint m_anchorDeltaTransform = 0xD10; // CTransform
            public const nint m_pOffScreenIndicator = 0xEB0; // CPointOffScreenIndicatorUi*
            public const nint m_bIgnoreInput = 0xED8; // bool
            public const nint m_bLit = 0xED9; // bool
            public const nint m_bFollowPlayerAcrossTeleport = 0xEDA; // bool
            public const nint m_flWidth = 0xEDC; // float32
            public const nint m_flHeight = 0xEE0; // float32
            public const nint m_flDPI = 0xEE4; // float32
            public const nint m_flInteractDistance = 0xEE8; // float32
            public const nint m_flDepthOffset = 0xEEC; // float32
            public const nint m_unOwnerContext = 0xEF0; // uint32
            public const nint m_unHorizontalAlign = 0xEF4; // uint32
            public const nint m_unVerticalAlign = 0xEF8; // uint32
            public const nint m_unOrientation = 0xEFC; // uint32
            public const nint m_bAllowInteractionFromAllSceneWorlds = 0xF00; // bool
            public const nint m_vecCSSClasses = 0xF08; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_bOpaque = 0xF20; // bool
            public const nint m_bNoDepth = 0xF21; // bool
            public const nint m_bRenderBackface = 0xF22; // bool
            public const nint m_bUseOffScreenIndicator = 0xF23; // bool
            public const nint m_bExcludeFromSaveGames = 0xF24; // bool
            public const nint m_bGrabbable = 0xF25; // bool
            public const nint m_bOnlyRenderToTexture = 0xF26; // bool
            public const nint m_bDisableMipGen = 0xF27; // bool
            public const nint m_nExplicitImageLayout = 0xF28; // int32
        }
        // Parent: C_PointClientUIWorldPanel
        // Fields count: 4
        public static class CPointOffScreenIndicatorUi {
            public const nint m_bBeenEnabled = 0xF30; // bool
            public const nint m_bHide = 0xF31; // bool
            public const nint m_flSeenTargetTime = 0xF34; // float32
            public const nint m_pTargetPanel = 0xF38; // C_PointClientUIWorldPanel*
        }
        // Parent: C_PointClientUIWorldPanel
        // Fields count: 1
        public static class C_PointClientUIWorldTextPanel {
            public const nint m_messageText = 0xF30; // char[512]
        }
        // Parent: C_PointEntity
        // Fields count: 9
        public static class CInfoOffscreenPanoramaTexture {
            public const nint m_bDisabled = 0x550; // bool
            public const nint m_nResolutionX = 0x554; // int32
            public const nint m_nResolutionY = 0x558; // int32
            public const nint m_szLayoutFileName = 0x560; // CUtlSymbolLarge
            public const nint m_RenderAttrName = 0x568; // CUtlSymbolLarge
            public const nint m_TargetEntities = 0x570; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_nTargetChangeCount = 0x588; // int32
            public const nint m_vecCSSClasses = 0x590; // C_NetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_bCheckCSSClasses = 0x708; // bool
        }
        // Parent: IEconItemInterface
        // Fields count: 28
        public static class C_EconItemView {
            public const nint m_bInventoryImageRgbaRequested = 0x60; // bool
            public const nint m_bInventoryImageTriedCache = 0x61; // bool
            public const nint m_nInventoryImageRgbaWidth = 0x80; // int32
            public const nint m_nInventoryImageRgbaHeight = 0x84; // int32
            public const nint m_szCurrentLoadCachedFileName = 0x88; // char[260]
            public const nint m_bRestoreCustomMaterialAfterPrecache = 0x1B8; // bool
            public const nint m_iItemDefinitionIndex = 0x1BA; // uint16
            public const nint m_iEntityQuality = 0x1BC; // int32
            public const nint m_iEntityLevel = 0x1C0; // uint32
            public const nint m_iItemID = 0x1C8; // uint64
            public const nint m_iItemIDHigh = 0x1D0; // uint32
            public const nint m_iItemIDLow = 0x1D4; // uint32
            public const nint m_iAccountID = 0x1D8; // uint32
            public const nint m_iInventoryPosition = 0x1DC; // uint32
            public const nint m_bInitialized = 0x1E8; // bool
            public const nint m_bDisallowSOC = 0x1E9; // bool
            public const nint m_bIsStoreItem = 0x1EA; // bool
            public const nint m_bIsTradeItem = 0x1EB; // bool
            public const nint m_iEntityQuantity = 0x1EC; // int32
            public const nint m_iRarityOverride = 0x1F0; // int32
            public const nint m_iQualityOverride = 0x1F4; // int32
            public const nint m_unClientFlags = 0x1F8; // uint8
            public const nint m_unOverrideStyle = 0x1F9; // uint8
            public const nint m_AttributeList = 0x210; // CAttributeList
            public const nint m_NetworkedDynamicAttributes = 0x270; // CAttributeList
            public const nint m_szCustomName = 0x2D0; // char[161]
            public const nint m_szCustomNameOverride = 0x371; // char[161]
            public const nint m_bInitializedTags = 0x440; // bool
        }
        // Parent: C_BaseTrigger
        // Fields count: 1
        public static class CBombTarget {
            public const nint m_bBombPlantedHere = 0xCD8; // bool
        }
        // Parent: C_BaseTrigger
        // Fields count: 0
        public static class CHostageRescueZoneShim {
        }
        // Parent: CHostageRescueZoneShim
        // Fields count: 0
        public static class CHostageRescueZone {
        }
        // Parent: C_BaseTrigger
        // Fields count: 2
        public static class C_TriggerBuoyancy {
            public const nint m_BuoyancyHelper = 0xCD8; // CBuoyancyHelper
            public const nint m_flFluidDensity = 0xCF8; // float32
        }
        // Parent: C_BaseModelEntity
        // Fields count: 1
        public static class CFuncWater {
            public const nint m_BuoyancyHelper = 0xCD0; // CBuoyancyHelper
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class CWaterSplasher {
        }
        // Parent: C_PointEntity
        // Fields count: 0
        public static class C_InfoInstructorHintHostageRescueZone {
        }
        // Parent: CBasePlayerController
        // Fields count: 62
        public static class CCSPlayerController {
            public const nint m_pInGameMoneyServices = 0x6F8; // CCSPlayerController_InGameMoneyServices*
            public const nint m_pInventoryServices = 0x700; // CCSPlayerController_InventoryServices*
            public const nint m_pActionTrackingServices = 0x708; // CCSPlayerController_ActionTrackingServices*
            public const nint m_pDamageServices = 0x710; // CCSPlayerController_DamageServices*
            public const nint m_iPing = 0x718; // uint32
            public const nint m_bHasCommunicationAbuseMute = 0x71C; // bool
            public const nint m_szCrosshairCodes = 0x720; // CUtlSymbolLarge
            public const nint m_iPendingTeamNum = 0x728; // uint8
            public const nint m_flForceTeamTime = 0x72C; // GameTime_t
            public const nint m_iCompTeammateColor = 0x730; // int32
            public const nint m_bEverPlayedOnTeam = 0x734; // bool
            public const nint m_flPreviousForceJoinTeamTime = 0x738; // GameTime_t
            public const nint m_szClan = 0x740; // CUtlSymbolLarge
            public const nint m_sSanitizedPlayerName = 0x748; // CUtlString
            public const nint m_iCoachingTeam = 0x750; // int32
            public const nint m_nPlayerDominated = 0x758; // uint64
            public const nint m_nPlayerDominatingMe = 0x760; // uint64
            public const nint m_iCompetitiveRanking = 0x768; // int32
            public const nint m_iCompetitiveWins = 0x76C; // int32
            public const nint m_iCompetitiveRankType = 0x770; // int8
            public const nint m_iCompetitiveRankingPredicted_Win = 0x774; // int32
            public const nint m_iCompetitiveRankingPredicted_Loss = 0x778; // int32
            public const nint m_iCompetitiveRankingPredicted_Tie = 0x77C; // int32
            public const nint m_nEndMatchNextMapVote = 0x780; // int32
            public const nint m_unActiveQuestId = 0x784; // uint16
            public const nint m_nQuestProgressReason = 0x788; // QuestProgress::Reason
            public const nint m_unPlayerTvControlFlags = 0x78C; // uint32
            public const nint m_iDraftIndex = 0x7B8; // int32
            public const nint m_msQueuedModeDisconnectionTimestamp = 0x7BC; // uint32
            public const nint m_uiAbandonRecordedReason = 0x7C0; // uint32
            public const nint m_bCannotBeKicked = 0x7C4; // bool
            public const nint m_bEverFullyConnected = 0x7C5; // bool
            public const nint m_bAbandonAllowsSurrender = 0x7C6; // bool
            public const nint m_bAbandonOffersInstantSurrender = 0x7C7; // bool
            public const nint m_bDisconnection1MinWarningPrinted = 0x7C8; // bool
            public const nint m_bScoreReported = 0x7C9; // bool
            public const nint m_nDisconnectionTick = 0x7CC; // int32
            public const nint m_bControllingBot = 0x7D8; // bool
            public const nint m_bHasControlledBotThisRound = 0x7D9; // bool
            public const nint m_bHasBeenControlledByPlayerThisRound = 0x7DA; // bool
            public const nint m_nBotsControlledThisRound = 0x7DC; // int32
            public const nint m_bCanControlObservedBot = 0x7E0; // bool
            public const nint m_hPlayerPawn = 0x7E4; // CHandle<C_CSPlayerPawn>
            public const nint m_hObserverPawn = 0x7E8; // CHandle<C_CSObserverPawn>
            public const nint m_bPawnIsAlive = 0x7EC; // bool
            public const nint m_iPawnHealth = 0x7F0; // uint32
            public const nint m_iPawnArmor = 0x7F4; // int32
            public const nint m_bPawnHasDefuser = 0x7F8; // bool
            public const nint m_bPawnHasHelmet = 0x7F9; // bool
            public const nint m_nPawnCharacterDefIndex = 0x7FA; // uint16
            public const nint m_iPawnLifetimeStart = 0x7FC; // int32
            public const nint m_iPawnLifetimeEnd = 0x800; // int32
            public const nint m_iPawnBotDifficulty = 0x804; // int32
            public const nint m_hOriginalControllerOfCurrentPawn = 0x808; // CHandle<CCSPlayerController>
            public const nint m_iScore = 0x80C; // int32
            public const nint m_vecKills = 0x810; // C_NetworkUtlVectorBase<EKillTypes_t>
            public const nint m_bMvpNoMusic = 0x828; // bool
            public const nint m_eMvpReason = 0x82C; // int32
            public const nint m_iMusicKitID = 0x830; // int32
            public const nint m_iMusicKitMVPs = 0x834; // int32
            public const nint m_iMVPs = 0x838; // int32
            public const nint m_bIsPlayerNameDirty = 0x83C; // bool
        }
        // Parent: C_BaseTrigger
        // Fields count: 2
        public static class C_FootstepControl {
            public const nint m_source = 0xCD8; // CUtlSymbolLarge
            public const nint m_destination = 0xCE0; // CUtlSymbolLarge
        }
        // Parent: CBasePlayerWeaponVData
        // Fields count: 92
        public static class CCSWeaponBaseVData {
            public const nint m_WeaponType = 0x248; // CSWeaponType
            public const nint m_WeaponCategory = 0x24C; // CSWeaponCategory
            public const nint m_szViewModel = 0x250; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szPlayerModel = 0x330; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szWorldDroppedModel = 0x410; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szAimsightLensMaskModel = 0x4F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szMagazineModel = 0x5D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szHeatEffect = 0x6B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szEjectBrassEffect = 0x790; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashParticleAlt = 0x870; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashThirdPersonParticle = 0x950; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashThirdPersonParticleAlt = 0xA30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szTracerParticle = 0xB10; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_GearSlot = 0xBF0; // gear_slot_t
            public const nint m_GearSlotPosition = 0xBF4; // int32
            public const nint m_DefaultLoadoutSlot = 0xBF8; // loadout_slot_t
            public const nint m_sWrongTeamMsg = 0xC00; // CUtlString
            public const nint m_nPrice = 0xC08; // int32
            public const nint m_nKillAward = 0xC0C; // int32
            public const nint m_nPrimaryReserveAmmoMax = 0xC10; // int32
            public const nint m_nSecondaryReserveAmmoMax = 0xC14; // int32
            public const nint m_bMeleeWeapon = 0xC18; // bool
            public const nint m_bHasBurstMode = 0xC19; // bool
            public const nint m_bIsRevolver = 0xC1A; // bool
            public const nint m_bCannotShootUnderwater = 0xC1B; // bool
            public const nint m_szName = 0xC20; // CGlobalSymbol
            public const nint m_szAnimExtension = 0xC28; // CUtlString
            public const nint m_eSilencerType = 0xC30; // CSWeaponSilencerType
            public const nint m_nCrosshairMinDistance = 0xC34; // int32
            public const nint m_nCrosshairDeltaDistance = 0xC38; // int32
            public const nint m_bIsFullAuto = 0xC3C; // bool
            public const nint m_nNumBullets = 0xC40; // int32
            public const nint m_flCycleTime = 0xC44; // CFiringModeFloat
            public const nint m_flMaxSpeed = 0xC4C; // CFiringModeFloat
            public const nint m_flSpread = 0xC54; // CFiringModeFloat
            public const nint m_flInaccuracyCrouch = 0xC5C; // CFiringModeFloat
            public const nint m_flInaccuracyStand = 0xC64; // CFiringModeFloat
            public const nint m_flInaccuracyJump = 0xC6C; // CFiringModeFloat
            public const nint m_flInaccuracyLand = 0xC74; // CFiringModeFloat
            public const nint m_flInaccuracyLadder = 0xC7C; // CFiringModeFloat
            public const nint m_flInaccuracyFire = 0xC84; // CFiringModeFloat
            public const nint m_flInaccuracyMove = 0xC8C; // CFiringModeFloat
            public const nint m_flRecoilAngle = 0xC94; // CFiringModeFloat
            public const nint m_flRecoilAngleVariance = 0xC9C; // CFiringModeFloat
            public const nint m_flRecoilMagnitude = 0xCA4; // CFiringModeFloat
            public const nint m_flRecoilMagnitudeVariance = 0xCAC; // CFiringModeFloat
            public const nint m_nTracerFrequency = 0xCB4; // CFiringModeInt
            public const nint m_flInaccuracyJumpInitial = 0xCBC; // float32
            public const nint m_flInaccuracyJumpApex = 0xCC0; // float32
            public const nint m_flInaccuracyReload = 0xCC4; // float32
            public const nint m_nRecoilSeed = 0xCC8; // int32
            public const nint m_nSpreadSeed = 0xCCC; // int32
            public const nint m_flTimeToIdleAfterFire = 0xCD0; // float32
            public const nint m_flIdleInterval = 0xCD4; // float32
            public const nint m_flAttackMovespeedFactor = 0xCD8; // float32
            public const nint m_flHeatPerShot = 0xCDC; // float32
            public const nint m_flInaccuracyPitchShift = 0xCE0; // float32
            public const nint m_flInaccuracyAltSoundThreshold = 0xCE4; // float32
            public const nint m_flBotAudibleRange = 0xCE8; // float32
            public const nint m_szUseRadioSubtitle = 0xCF0; // CUtlString
            public const nint m_bUnzoomsAfterShot = 0xCF8; // bool
            public const nint m_bHideViewModelWhenZoomed = 0xCF9; // bool
            public const nint m_nZoomLevels = 0xCFC; // int32
            public const nint m_nZoomFOV1 = 0xD00; // int32
            public const nint m_nZoomFOV2 = 0xD04; // int32
            public const nint m_flZoomTime0 = 0xD08; // float32
            public const nint m_flZoomTime1 = 0xD0C; // float32
            public const nint m_flZoomTime2 = 0xD10; // float32
            public const nint m_flIronSightPullUpSpeed = 0xD14; // float32
            public const nint m_flIronSightPutDownSpeed = 0xD18; // float32
            public const nint m_flIronSightFOV = 0xD1C; // float32
            public const nint m_flIronSightPivotForward = 0xD20; // float32
            public const nint m_flIronSightLooseness = 0xD24; // float32
            public const nint m_angPivotAngle = 0xD28; // QAngle
            public const nint m_vecIronSightEyePos = 0xD34; // 
            public const nint m_nDamage = 0xD40; // int32
            public const nint m_flHeadshotMultiplier = 0xD44; // float32
            public const nint m_flArmorRatio = 0xD48; // float32
            public const nint m_flPenetration = 0xD4C; // float32
            public const nint m_flRange = 0xD50; // float32
            public const nint m_flRangeModifier = 0xD54; // float32
            public const nint m_flFlinchVelocityModifierLarge = 0xD58; // float32
            public const nint m_flFlinchVelocityModifierSmall = 0xD5C; // float32
            public const nint m_flRecoveryTimeCrouch = 0xD60; // float32
            public const nint m_flRecoveryTimeStand = 0xD64; // float32
            public const nint m_flRecoveryTimeCrouchFinal = 0xD68; // float32
            public const nint m_flRecoveryTimeStandFinal = 0xD6C; // float32
            public const nint m_nRecoveryTransitionStartBullet = 0xD70; // int32
            public const nint m_nRecoveryTransitionEndBullet = 0xD74; // int32
            public const nint m_flThrowVelocity = 0xD78; // float32
            public const nint m_vSmokeColor = 0xD7C; // 
            public const nint m_szAnimClass = 0xD88; // CGlobalSymbol
        }
        // Parent: C_ModelPointEntity
        // Fields count: 16
        public static class C_PlayerSprayDecal {
            public const nint m_nUniqueID = 0xCD0; // int32
            public const nint m_unAccountID = 0xCD4; // uint32
            public const nint m_unTraceID = 0xCD8; // uint32
            public const nint m_rtGcTime = 0xCDC; // uint32
            public const nint m_vecEndPos = 0xCE0; // 
            public const nint m_vecStart = 0xCEC; // 
            public const nint m_vecLeft = 0xCF8; // 
            public const nint m_vecNormal = 0xD04; // 
            public const nint m_nPlayer = 0xD10; // int32
            public const nint m_nEntity = 0xD14; // int32
            public const nint m_nHitbox = 0xD18; // int32
            public const nint m_flCreationTime = 0xD1C; // float32
            public const nint m_nTintID = 0xD20; // int32
            public const nint m_nVersion = 0xD24; // uint8
            public const nint m_ubSignature = 0xD25; // uint8[128]
            public const nint m_SprayRenderHelper = 0xDB0; // CPlayerSprayDecalRenderHelper
        }
        // Parent: C_BaseModelEntity
        // Fields count: 8
        public static class C_FuncConveyor {
            public const nint m_vecMoveDirEntitySpace = 0xCD8; // 
            public const nint m_flTargetSpeed = 0xCE4; // float32
            public const nint m_nTransitionStartTick = 0xCE8; // GameTick_t
            public const nint m_nTransitionDurationTicks = 0xCEC; // int32
            public const nint m_flTransitionStartSpeed = 0xCF0; // float32
            public const nint m_hConveyorModels = 0xCF8; // C_NetworkUtlVectorBase<CHandle<C_BaseEntity>>
            public const nint m_flCurrentConveyorOffset = 0xD10; // float32
            public const nint m_flCurrentConveyorSpeed = 0xD14; // float32
        }
        // Parent: C_BaseModelEntity
        // Fields count: 2
        public static class CGrenadeTracer {
            public const nint m_flTracerDuration = 0xCF0; // float32
            public const nint m_nType = 0xCF4; // GrenadeType_t
        }
        // Parent: C_BaseModelEntity
        // Fields count: 19
        public static class C_Inferno {
            public const nint m_nfxFireDamageEffect = 0xD10; // ParticleIndex_t
            public const nint m_firePositions = 0xD14; // Vector[64]
            public const nint m_fireParentPositions = 0x1014; // Vector[64]
            public const nint m_bFireIsBurning = 0x1314; // bool[64]
            public const nint m_BurnNormal = 0x1354; // Vector[64]
            public const nint m_fireCount = 0x1654; // int32
            public const nint m_nInfernoType = 0x1658; // int32
            public const nint m_nFireLifetime = 0x165C; // float32
            public const nint m_bInPostEffectTime = 0x1660; // bool
            public const nint m_lastFireCount = 0x1664; // int32
            public const nint m_nFireEffectTickBegin = 0x1668; // int32
            public const nint m_drawableCount = 0x8270; // int32
            public const nint m_blosCheck = 0x8274; // bool
            public const nint m_nlosperiod = 0x8278; // int32
            public const nint m_maxFireHalfWidth = 0x827C; // float32
            public const nint m_maxFireHeight = 0x8280; // float32
            public const nint m_minBounds = 0x8284; // 
            public const nint m_maxBounds = 0x8290; // 
            public const nint m_flLastGrassBurnThink = 0x829C; // float32
        }
        // Parent: C_Inferno
        // Fields count: 0
        public static class C_FireCrackerBlast {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 51
        public static class C_BarnLight {
            public const nint m_bEnabled = 0xCD0; // bool
            public const nint m_nColorMode = 0xCD4; // int32
            public const nint m_Color = 0xCD8; // Color
            public const nint m_flColorTemperature = 0xCDC; // float32
            public const nint m_flBrightness = 0xCE0; // float32
            public const nint m_flBrightnessScale = 0xCE4; // float32
            public const nint m_nDirectLight = 0xCE8; // int32
            public const nint m_nBakedShadowIndex = 0xCEC; // int32
            public const nint m_nLuminaireShape = 0xCF0; // int32
            public const nint m_flLuminaireSize = 0xCF4; // float32
            public const nint m_flLuminaireAnisotropy = 0xCF8; // float32
            public const nint m_LightStyleString = 0xD00; // CUtlString
            public const nint m_flLightStyleStartTime = 0xD08; // GameTime_t
            public const nint m_QueuedLightStyleStrings = 0xD10; // C_NetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleEvents = 0xD28; // C_NetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleTargets = 0xD40; // C_NetworkUtlVectorBase<CHandle<C_BaseModelEntity>>
            public const nint m_StyleEvent = 0xD58; // CEntityIOOutput[4]
            public const nint m_hLightCookie = 0xDF8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_flShape = 0xE00; // float32
            public const nint m_flSoftX = 0xE04; // float32
            public const nint m_flSoftY = 0xE08; // float32
            public const nint m_flSkirt = 0xE0C; // float32
            public const nint m_flSkirtNear = 0xE10; // float32
            public const nint m_vSizeParams = 0xE14; // 
            public const nint m_flRange = 0xE20; // float32
            public const nint m_vShear = 0xE24; // 
            public const nint m_nBakeSpecularToCubemaps = 0xE30; // int32
            public const nint m_vBakeSpecularToCubemapsSize = 0xE34; // 
            public const nint m_nCastShadows = 0xE40; // int32
            public const nint m_nShadowMapSize = 0xE44; // int32
            public const nint m_nShadowPriority = 0xE48; // int32
            public const nint m_bContactShadow = 0xE4C; // bool
            public const nint m_nBounceLight = 0xE50; // int32
            public const nint m_flBounceScale = 0xE54; // float32
            public const nint m_flMinRoughness = 0xE58; // float32
            public const nint m_vAlternateColor = 0xE5C; // 
            public const nint m_fAlternateColorBrightness = 0xE68; // float32
            public const nint m_nFog = 0xE6C; // int32
            public const nint m_flFogStrength = 0xE70; // float32
            public const nint m_nFogShadows = 0xE74; // int32
            public const nint m_flFogScale = 0xE78; // float32
            public const nint m_flFadeSizeStart = 0xE7C; // float32
            public const nint m_flFadeSizeEnd = 0xE80; // float32
            public const nint m_flShadowFadeSizeStart = 0xE84; // float32
            public const nint m_flShadowFadeSizeEnd = 0xE88; // float32
            public const nint m_bPrecomputedFieldsValid = 0xE8C; // bool
            public const nint m_vPrecomputedBoundsMins = 0xE90; // 
            public const nint m_vPrecomputedBoundsMaxs = 0xE9C; // 
            public const nint m_vPrecomputedOBBOrigin = 0xEA8; // 
            public const nint m_vPrecomputedOBBAngles = 0xEB4; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0xEC0; // 
        }
        // Parent: C_BarnLight
        // Fields count: 1
        public static class C_RectLight {
            public const nint m_bShowLight = 0xF18; // bool
        }
        // Parent: C_BarnLight
        // Fields count: 3
        public static class C_OmniLight {
            public const nint m_flInnerAngle = 0xF18; // float32
            public const nint m_flOuterAngle = 0xF1C; // float32
            public const nint m_bShowLight = 0xF20; // bool
        }
        // Parent: C_Team
        // Fields count: 10
        public static class C_CSTeam {
            public const nint m_szTeamMatchStat = 0x608; // char[512]
            public const nint m_numMapVictories = 0x808; // int32
            public const nint m_bSurrendered = 0x80C; // bool
            public const nint m_scoreFirstHalf = 0x810; // int32
            public const nint m_scoreSecondHalf = 0x814; // int32
            public const nint m_scoreOvertime = 0x818; // int32
            public const nint m_szClanTeamname = 0x81C; // char[129]
            public const nint m_iClanID = 0x8A0; // uint32
            public const nint m_szTeamFlagImage = 0x8A4; // char[8]
            public const nint m_szTeamLogoImage = 0x8AC; // char[8]
        }
        // Parent: C_ParticleSystem
        // Fields count: 0
        public static class C_MapPreviewParticleSystem {
        }
        // Parent: C_PointEntity
        // Fields count: 5
        public static class CInfoDynamicShadowHint {
            public const nint m_bDisabled = 0x550; // bool
            public const nint m_flRange = 0x554; // float32
            public const nint m_nImportance = 0x558; // int32
            public const nint m_nLightChoice = 0x55C; // int32
            public const nint m_hLight = 0x560; // CHandle<C_BaseEntity>
        }
        // Parent: CInfoDynamicShadowHint
        // Fields count: 2
        public static class CInfoDynamicShadowHintBox {
            public const nint m_vBoxMins = 0x568; // 
            public const nint m_vBoxMaxs = 0x574; // 
        }
        // Parent: C_BaseModelEntity
        // Fields count: 12
        public static class C_EnvSky {
            public const nint m_hSkyMaterial = 0xCD0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hSkyMaterialLightingOnly = 0xCD8; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_bStartDisabled = 0xCE0; // bool
            public const nint m_vTintColor = 0xCE1; // Color
            public const nint m_vTintColorLightingOnly = 0xCE5; // Color
            public const nint m_flBrightnessScale = 0xCEC; // float32
            public const nint m_nFogType = 0xCF0; // int32
            public const nint m_flFogMinStart = 0xCF4; // float32
            public const nint m_flFogMinEnd = 0xCF8; // float32
            public const nint m_flFogMaxStart = 0xCFC; // float32
            public const nint m_flFogMaxEnd = 0xD00; // float32
            public const nint m_bEnabled = 0xD04; // bool
        }
        // Parent: C_TonemapController2
        // Fields count: 0
        public static class C_TonemapController2Alias_env_tonemap_controller2 {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 1
        public static class C_LightEntity {
            public const nint m_CLightComponent = 0xCD0; // CLightComponent*
        }
        // Parent: C_LightEntity
        // Fields count: 0
        public static class C_LightSpotEntity {
        }
        // Parent: C_LightEntity
        // Fields count: 0
        public static class C_LightOrthoEntity {
        }
        // Parent: C_LightEntity
        // Fields count: 0
        public static class C_LightDirectionalEntity {
        }
        // Parent: C_LightDirectionalEntity
        // Fields count: 0
        public static class C_LightEnvironmentEntity {
        }
        // Parent: C_BaseTrigger
        // Fields count: 16
        public static class C_PostProcessingVolume {
            public const nint m_hPostSettings = 0xCE8; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
            public const nint m_flFadeDuration = 0xCF0; // float32
            public const nint m_flMinLogExposure = 0xCF4; // float32
            public const nint m_flMaxLogExposure = 0xCF8; // float32
            public const nint m_flMinExposure = 0xCFC; // float32
            public const nint m_flMaxExposure = 0xD00; // float32
            public const nint m_flExposureCompensation = 0xD04; // float32
            public const nint m_flExposureFadeSpeedUp = 0xD08; // float32
            public const nint m_flExposureFadeSpeedDown = 0xD0C; // float32
            public const nint m_flTonemapEVSmoothingRange = 0xD10; // float32
            public const nint m_bMaster = 0xD14; // bool
            public const nint m_bExposureControl = 0xD15; // bool
            public const nint m_flRate = 0xD18; // float32
            public const nint m_flTonemapPercentTarget = 0xD1C; // float32
            public const nint m_flTonemapPercentBrightPixels = 0xD20; // float32
            public const nint m_flTonemapMinAvgLum = 0xD24; // float32
        }
        // Parent: C_ParticleSystem
        // Fields count: 5
        public static class C_EnvParticleGlow {
            public const nint m_flAlphaScale = 0x1280; // float32
            public const nint m_flRadiusScale = 0x1284; // float32
            public const nint m_flSelfIllumScale = 0x1288; // float32
            public const nint m_ColorTint = 0x128C; // Color
            public const nint m_hTextureOverride = 0x1290; // CStrongHandle<InfoForResourceTypeCTextureBase>
        }
        // Parent: C_BaseModelEntity
        // Fields count: 8
        public static class C_TextureBasedAnimatable {
            public const nint m_bLoop = 0xCD0; // bool
            public const nint m_flFPS = 0xCD4; // float32
            public const nint m_hPositionKeys = 0xCD8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hRotationKeys = 0xCE0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vAnimationBoundsMin = 0xCE8; // 
            public const nint m_vAnimationBoundsMax = 0xCF4; // 
            public const nint m_flStartTime = 0xD00; // float32
            public const nint m_flStartFrame = 0xD04; // float32
        }
        // Parent: C_BaseModelEntity
        // Fields count: 0
        public static class C_World {
        }
        // Parent: C_BaseModelEntity
        // Fields count: 13
        public static class CBaseAnimGraph {
            public const nint m_bInitiallyPopulateInterpHistory = 0xD48; // bool
            public const nint m_bSuppressAnimEventSounds = 0xD4A; // bool
            public const nint m_bAnimGraphUpdateEnabled = 0xD58; // bool
            public const nint m_flMaxSlopeDistance = 0xD5C; // float32
            public const nint m_vLastSlopeCheckPos = 0xD60; // 
            public const nint m_bAnimationUpdateScheduled = 0xD6C; // bool
            public const nint m_vecForce = 0xD70; // 
            public const nint m_nForceBone = 0xD7C; // int32
            public const nint m_pClientsideRagdoll = 0xD80; // CBaseAnimGraph*
            public const nint m_bBuiltRagdoll = 0xD88; // bool
            public const nint m_pRagdollPose = 0xDA0; // PhysicsRagdollPose_t*
            public const nint m_bClientRagdoll = 0xDA8; // bool
            public const nint m_bHasAnimatedMaterialAttributes = 0xDB8; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 4
        public static class CBaseProp {
            public const nint m_bModelOverrodeBlockLOS = 0xED8; // bool
            public const nint m_iShapeType = 0xEDC; // int32
            public const nint m_bConformToCollisionBounds = 0xEE0; // bool
            public const nint m_mPreferredCatchTransform = 0xEE4; // matrix3x4_t
        }
        // Parent: CBaseProp
        // Fields count: 30
        public static class C_BreakableProp {
            public const nint m_OnBreak = 0xF20; // CEntityIOOutput
            public const nint m_OnHealthChanged = 0xF48; // CEntityOutputTemplate<float32>
            public const nint m_OnTakeDamage = 0xF70; // CEntityIOOutput
            public const nint m_impactEnergyScale = 0xF98; // float32
            public const nint m_iMinHealthDmg = 0xF9C; // int32
            public const nint m_flPressureDelay = 0xFA0; // float32
            public const nint m_hBreaker = 0xFA4; // CHandle<C_BaseEntity>
            public const nint m_PerformanceMode = 0xFA8; // PerformanceMode_t
            public const nint m_flDmgModBullet = 0xFAC; // float32
            public const nint m_flDmgModClub = 0xFB0; // float32
            public const nint m_flDmgModExplosive = 0xFB4; // float32
            public const nint m_flDmgModFire = 0xFB8; // float32
            public const nint m_iszPhysicsDamageTableName = 0xFC0; // CUtlSymbolLarge
            public const nint m_iszBasePropData = 0xFC8; // CUtlSymbolLarge
            public const nint m_iInteractions = 0xFD0; // int32
            public const nint m_flPreventDamageBeforeTime = 0xFD4; // GameTime_t
            public const nint m_bHasBreakPiecesOrCommands = 0xFD8; // bool
            public const nint m_explodeDamage = 0xFDC; // float32
            public const nint m_explodeRadius = 0xFE0; // float32
            public const nint m_explosionDelay = 0xFE8; // float32
            public const nint m_explosionBuildupSound = 0xFF0; // CUtlSymbolLarge
            public const nint m_explosionCustomEffect = 0xFF8; // CUtlSymbolLarge
            public const nint m_explosionCustomSound = 0x1000; // CUtlSymbolLarge
            public const nint m_explosionModifier = 0x1008; // CUtlSymbolLarge
            public const nint m_hPhysicsAttacker = 0x1010; // CHandle<C_BasePlayerPawn>
            public const nint m_flLastPhysicsInfluenceTime = 0x1014; // GameTime_t
            public const nint m_flDefaultFadeScale = 0x1018; // float32
            public const nint m_hLastAttacker = 0x101C; // CHandle<C_BaseEntity>
            public const nint m_hFlareEnt = 0x1020; // CHandle<C_BaseEntity>
            public const nint m_noGhostCollision = 0x1024; // bool
        }
        // Parent: C_BreakableProp
        // Fields count: 23
        public static class C_DynamicProp {
            public const nint m_bUseHitboxesForRenderBox = 0x1028; // bool
            public const nint m_bUseAnimGraph = 0x1029; // bool
            public const nint m_pOutputAnimBegun = 0x1030; // CEntityIOOutput
            public const nint m_pOutputAnimOver = 0x1058; // CEntityIOOutput
            public const nint m_pOutputAnimLoopCycleOver = 0x1080; // CEntityIOOutput
            public const nint m_OnAnimReachedStart = 0x10A8; // CEntityIOOutput
            public const nint m_OnAnimReachedEnd = 0x10D0; // CEntityIOOutput
            public const nint m_iszIdleAnim = 0x10F8; // CUtlSymbolLarge
            public const nint m_nIdleAnimLoopMode = 0x1100; // AnimLoopMode_t
            public const nint m_bRandomizeCycle = 0x1104; // bool
            public const nint m_bStartDisabled = 0x1105; // bool
            public const nint m_bFiredStartEndOutput = 0x1106; // bool
            public const nint m_bForceNpcExclude = 0x1107; // bool
            public const nint m_bCreateNonSolid = 0x1108; // bool
            public const nint m_bIsOverrideProp = 0x1109; // bool
            public const nint m_iInitialGlowState = 0x110C; // int32
            public const nint m_nGlowRange = 0x1110; // int32
            public const nint m_nGlowRangeMin = 0x1114; // int32
            public const nint m_glowColor = 0x1118; // Color
            public const nint m_nGlowTeam = 0x111C; // int32
            public const nint m_iCachedFrameCount = 0x1120; // int32
            public const nint m_vecCachedRenderMins = 0x1124; // 
            public const nint m_vecCachedRenderMaxs = 0x1130; // 
        }
        // Parent: C_DynamicProp
        // Fields count: 0
        public static class C_DynamicPropAlias_dynamic_prop {
        }
        // Parent: C_DynamicProp
        // Fields count: 0
        public static class C_DynamicPropAlias_prop_dynamic_override {
        }
        // Parent: C_DynamicProp
        // Fields count: 0
        public static class C_DynamicPropAlias_cable_dynamic {
        }
        // Parent: C_BaseTrigger
        // Fields count: 9
        public static class C_ColorCorrectionVolume {
            public const nint m_LastEnterWeight = 0xCD8; // float32
            public const nint m_LastEnterTime = 0xCDC; // float32
            public const nint m_LastExitWeight = 0xCE0; // float32
            public const nint m_LastExitTime = 0xCE4; // float32
            public const nint m_bEnabled = 0xCE8; // bool
            public const nint m_MaxWeight = 0xCEC; // float32
            public const nint m_FadeDuration = 0xCF0; // float32
            public const nint m_Weight = 0xCF4; // float32
            public const nint m_lookupFilename = 0xCF8; // char[512]
        }
        // Parent: C_FuncBrush
        // Fields count: 8
        public static class C_FuncMonitor {
            public const nint m_targetCamera = 0xCD0; // CUtlString
            public const nint m_nResolutionEnum = 0xCD8; // int32
            public const nint m_bRenderShadows = 0xCDC; // bool
            public const nint m_bUseUniqueColorTarget = 0xCDD; // bool
            public const nint m_brushModelName = 0xCE0; // CUtlString
            public const nint m_hTargetCamera = 0xCE8; // CHandle<C_BaseEntity>
            public const nint m_bEnabled = 0xCEC; // bool
            public const nint m_bDraw3DSkybox = 0xCED; // bool
        }
        // Parent: C_BaseToggle
        // Fields count: 0
        public static class C_FuncMoveLinear {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 2
        public static class C_PhysMagnet {
            public const nint m_aAttachedObjectsFromServer = 0xED8; // CUtlVector<int32>
            public const nint m_aAttachedObjects = 0xEF0; // CUtlVector<CHandle<C_BaseEntity>>
        }
        // Parent: CBaseAnimGraph
        // Fields count: 13
        public static class C_PointCommentaryNode {
            public const nint m_bActive = 0xEE0; // bool
            public const nint m_bWasActive = 0xEE1; // bool
            public const nint m_flEndTime = 0xEE4; // GameTime_t
            public const nint m_flStartTime = 0xEE8; // GameTime_t
            public const nint m_flStartTimeInCommentary = 0xEEC; // float32
            public const nint m_iszCommentaryFile = 0xEF0; // CUtlSymbolLarge
            public const nint m_iszTitle = 0xEF8; // CUtlSymbolLarge
            public const nint m_iszSpeakers = 0xF00; // CUtlSymbolLarge
            public const nint m_iNodeNumber = 0xF08; // int32
            public const nint m_iNodeNumberMax = 0xF0C; // int32
            public const nint m_bListenedTo = 0xF10; // bool
            public const nint m_hViewPosition = 0xF20; // CHandle<C_BaseEntity>
            public const nint m_bRestartAfterRestore = 0xF24; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_WaterBullet {
        }
        // Parent: C_BaseToggle
        // Fields count: 1
        public static class C_BaseDoor {
            public const nint m_bIsUsable = 0xCD0; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 19
        public static class C_BaseFlex {
            public const nint m_flexWeight = 0xEE8; // C_NetworkUtlVectorBase<float32>
            public const nint m_vLookTargetPosition = 0xF00; // 
            public const nint m_blinktoggle = 0xF18; // bool
            public const nint m_nLastFlexUpdateFrameCount = 0xF78; // int32
            public const nint m_CachedViewTarget = 0xF7C; // 
            public const nint m_nNextSceneEventId = 0xF88; // uint32
            public const nint m_iBlink = 0xF8C; // int32
            public const nint m_blinktime = 0xF90; // float32
            public const nint m_prevblinktoggle = 0xF94; // bool
            public const nint m_iJawOpen = 0xF98; // int32
            public const nint m_flJawOpenAmount = 0xF9C; // float32
            public const nint m_flBlinkAmount = 0xFA0; // float32
            public const nint m_iMouthAttachment = 0xFA4; // AttachmentHandle_t
            public const nint m_iEyeAttachment = 0xFA5; // AttachmentHandle_t
            public const nint m_bResetFlexWeightsOnModelChange = 0xFA6; // bool
            public const nint m_nEyeOcclusionRendererBone = 0xFC0; // int32
            public const nint m_mEyeOcclusionRendererCameraToBoneTransform = 0xFC4; // matrix3x4_t
            public const nint m_vEyeOcclusionRendererHalfExtent = 0xFF4; // 
            public const nint m_PhonemeClasses = 0x1010; // C_BaseFlex::Emphasized_Phoneme[3]
        }
        // Parent: CBaseAnimGraph
        // Fields count: 14
        public static class C_ClientRagdoll {
            public const nint m_bFadeOut = 0xED8; // bool
            public const nint m_bImportant = 0xED9; // bool
            public const nint m_flEffectTime = 0xEDC; // GameTime_t
            public const nint m_gibDespawnTime = 0xEE0; // GameTime_t
            public const nint m_iCurrentFriction = 0xEE4; // int32
            public const nint m_iMinFriction = 0xEE8; // int32
            public const nint m_iMaxFriction = 0xEEC; // int32
            public const nint m_iFrictionAnimState = 0xEF0; // int32
            public const nint m_bReleaseRagdoll = 0xEF4; // bool
            public const nint m_iEyeAttachment = 0xEF5; // AttachmentHandle_t
            public const nint m_bFadingOut = 0xEF6; // bool
            public const nint m_flScaleEnd = 0xEF8; // float32[10]
            public const nint m_flScaleTimeStart = 0xF20; // GameTime_t[10]
            public const nint m_flScaleTimeEnd = 0xF48; // GameTime_t[10]
        }
        // Parent: C_BaseTrigger
        // Fields count: 8
        public static class C_Precipitation {
            public const nint m_flDensity = 0xCD8; // float32
            public const nint m_flParticleInnerDist = 0xCE8; // float32
            public const nint m_pParticleDef = 0xCF0; // char*
            public const nint m_tParticlePrecipTraceTimer = 0xD18; // TimedEvent[1]
            public const nint m_bActiveParticlePrecipEmitter = 0xD20; // bool[1]
            public const nint m_bParticlePrecipInitialized = 0xD21; // bool
            public const nint m_bHasSimulatedSinceLastSceneObjectUpdate = 0xD22; // bool
            public const nint m_nAvailableSheetSequencesMaxIndex = 0xD24; // int32
        }
        // Parent: C_Sprite
        // Fields count: 2
        public static class C_FireSprite {
            public const nint m_vecMoveDir = 0xE00; // 
            public const nint m_bFadeFromAbove = 0xE0C; // bool
        }
        // Parent: C_Sprite
        // Fields count: 0
        public static class C_FireFromAboveSprite {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 23
        public static class C_Fish {
            public const nint m_pos = 0xED8; // 
            public const nint m_vel = 0xEE4; // 
            public const nint m_angles = 0xEF0; // QAngle
            public const nint m_localLifeState = 0xEFC; // int32
            public const nint m_deathDepth = 0xF00; // float32
            public const nint m_deathAngle = 0xF04; // float32
            public const nint m_buoyancy = 0xF08; // float32
            public const nint m_wiggleTimer = 0xF10; // CountdownTimer
            public const nint m_wigglePhase = 0xF28; // float32
            public const nint m_wiggleRate = 0xF2C; // float32
            public const nint m_actualPos = 0xF30; // 
            public const nint m_actualAngles = 0xF3C; // QAngle
            public const nint m_poolOrigin = 0xF48; // 
            public const nint m_waterLevel = 0xF54; // float32
            public const nint m_gotUpdate = 0xF58; // bool
            public const nint m_x = 0xF5C; // float32
            public const nint m_y = 0xF60; // float32
            public const nint m_z = 0xF64; // float32
            public const nint m_angle = 0xF68; // float32
            public const nint m_errorHistory = 0xF6C; // float32[20]
            public const nint m_errorHistoryIndex = 0xFBC; // int32
            public const nint m_errorHistoryCount = 0xFC0; // int32
            public const nint m_averageError = 0xFC4; // float32
        }
        // Parent: C_BreakableProp
        // Fields count: 1
        public static class C_PhysicsProp {
            public const nint m_bAwake = 0x1028; // bool
        }
        // Parent: C_DynamicProp
        // Fields count: 7
        public static class C_BasePropDoor {
            public const nint m_eDoorState = 0x1150; // DoorState_t
            public const nint m_modelChanged = 0x1154; // bool
            public const nint m_bLocked = 0x1155; // bool
            public const nint m_closedPosition = 0x1158; // 
            public const nint m_closedAngles = 0x1164; // QAngle
            public const nint m_hMaster = 0x1170; // CHandle<C_BasePropDoor>
            public const nint m_vWhereToSetLightingOrigin = 0x1174; // 
        }
        // Parent: C_BasePropDoor
        // Fields count: 0
        public static class C_PropDoorRotating {
        }
        // Parent: C_BreakableProp
        // Fields count: 15
        public static class C_PhysPropClientside {
            public const nint m_flTouchDelta = 0x1028; // GameTime_t
            public const nint m_fDeathTime = 0x102C; // GameTime_t
            public const nint m_impactEnergyScale = 0x1030; // float32
            public const nint m_inertiaScale = 0x1034; // float32
            public const nint m_flDmgModBullet = 0x1038; // float32
            public const nint m_flDmgModClub = 0x103C; // float32
            public const nint m_flDmgModExplosive = 0x1040; // float32
            public const nint m_flDmgModFire = 0x1044; // float32
            public const nint m_iszPhysicsDamageTableName = 0x1048; // CUtlSymbolLarge
            public const nint m_iszBasePropData = 0x1050; // CUtlSymbolLarge
            public const nint m_iInteractions = 0x1058; // int32
            public const nint m_bHasBreakPiecesOrCommands = 0x105C; // bool
            public const nint m_vecDamagePosition = 0x1060; // 
            public const nint m_vecDamageDirection = 0x106C; // 
            public const nint m_nDamageType = 0x1078; // int32
        }
        // Parent: CBaseAnimGraph
        // Fields count: 8
        public static class C_RagdollProp {
            public const nint m_ragPos = 0xEE0; // C_NetworkUtlVectorBase<Vector>
            public const nint m_ragAngles = 0xEF8; // C_NetworkUtlVectorBase<QAngle>
            public const nint m_flBlendWeight = 0xF10; // float32
            public const nint m_hRagdollSource = 0xF14; // CHandle<C_BaseEntity>
            public const nint m_iEyeAttachment = 0xF18; // AttachmentHandle_t
            public const nint m_flBlendWeightCurrent = 0xF1C; // float32
            public const nint m_parentPhysicsBoneIndices = 0xF20; // CUtlVector<int32>
            public const nint m_worldSpaceBoneComputationOrder = 0xF38; // CUtlVector<int32>
        }
        // Parent: CBaseAnimGraph
        // Fields count: 25
        public static class C_LocalTempEntity {
            public const nint flags = 0xEF0; // int32
            public const nint die = 0xEF4; // GameTime_t
            public const nint m_flFrameMax = 0xEF8; // float32
            public const nint x = 0xEFC; // float32
            public const nint y = 0xF00; // float32
            public const nint fadeSpeed = 0xF04; // float32
            public const nint bounceFactor = 0xF08; // float32
            public const nint hitSound = 0xF0C; // int32
            public const nint priority = 0xF10; // int32
            public const nint tentOffset = 0xF14; // 
            public const nint m_vecTempEntAngVelocity = 0xF20; // QAngle
            public const nint tempent_renderamt = 0xF2C; // int32
            public const nint m_vecNormal = 0xF30; // 
            public const nint m_flSpriteScale = 0xF3C; // float32
            public const nint m_nFlickerFrame = 0xF40; // int32
            public const nint m_flFrameRate = 0xF44; // float32
            public const nint m_flFrame = 0xF48; // float32
            public const nint m_pszImpactEffect = 0xF50; // char*
            public const nint m_pszParticleEffect = 0xF58; // char*
            public const nint m_bParticleCollision = 0xF60; // bool
            public const nint m_iLastCollisionFrame = 0xF64; // int32
            public const nint m_vLastCollisionOrigin = 0xF68; // 
            public const nint m_vecTempEntVelocity = 0xF74; // 
            public const nint m_vecPrevAbsOrigin = 0xF80; // 
            public const nint m_vecTempEntAcceleration = 0xF8C; // 
        }
        // Parent: C_PhysicsProp
        // Fields count: 1
        public static class C_ShatterGlassShardPhysics {
            public const nint m_ShardDesc = 0x1038; // shard_model_desc_t
        }
        // Parent: C_BaseFlex
        // Fields count: 20
        public static class C_EconEntity {
            public const nint m_flFlexDelayTime = 0x1080; // float32
            public const nint m_flFlexDelayedWeight = 0x1088; // float32*
            public const nint m_bAttributesInitialized = 0x1090; // bool
            public const nint m_AttributeManager = 0x1098; // C_AttributeContainer
            public const nint m_OriginalOwnerXuidLow = 0x1540; // uint32
            public const nint m_OriginalOwnerXuidHigh = 0x1544; // uint32
            public const nint m_nFallbackPaintKit = 0x1548; // int32
            public const nint m_nFallbackSeed = 0x154C; // int32
            public const nint m_flFallbackWear = 0x1550; // float32
            public const nint m_nFallbackStatTrak = 0x1554; // int32
            public const nint m_bClientside = 0x1558; // bool
            public const nint m_bParticleSystemsCreated = 0x1559; // bool
            public const nint m_vecAttachedParticles = 0x1560; // CUtlVector<int32>
            public const nint m_hViewmodelAttachment = 0x1578; // CHandle<CBaseAnimGraph>
            public const nint m_iOldTeam = 0x157C; // int32
            public const nint m_bAttachmentDirty = 0x1580; // bool
            public const nint m_nUnloadedModelIndex = 0x1584; // int32
            public const nint m_iNumOwnerValidationRetries = 0x1588; // int32
            public const nint m_hOldProvidee = 0x1598; // CHandle<C_BaseEntity>
            public const nint m_vecAttachedModels = 0x15A0; // CUtlVector<C_EconEntity::AttachedModelData_t>
        }
        // Parent: C_EconEntity
        // Fields count: 2
        public static class C_EconWearable {
            public const nint m_nForceSkin = 0x15B8; // int32
            public const nint m_bAlwaysAllow = 0x15BC; // bool
        }
        // Parent: C_BaseFlex
        // Fields count: 12
        public static class C_BaseGrenade {
            public const nint m_bHasWarnedAI = 0x1070; // bool
            public const nint m_bIsSmokeGrenade = 0x1071; // bool
            public const nint m_bIsLive = 0x1072; // bool
            public const nint m_DmgRadius = 0x1074; // float32
            public const nint m_flDetonateTime = 0x1078; // GameTime_t
            public const nint m_flWarnAITime = 0x107C; // float32
            public const nint m_flDamage = 0x1080; // float32
            public const nint m_iszBounceSound = 0x1088; // CUtlSymbolLarge
            public const nint m_ExplosionSound = 0x1090; // CUtlString
            public const nint m_hThrower = 0x109C; // CHandle<C_CSPlayerPawn>
            public const nint m_flNextAttack = 0x10B4; // GameTime_t
            public const nint m_hOriginalThrower = 0x10B8; // CHandle<C_CSPlayerPawn>
        }
        // Parent: C_PhysicsProp
        // Fields count: 0
        public static class C_PhysicsPropMultiplayer {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 1
        public static class C_ViewmodelWeapon {
            public const nint m_worldModel = 0xED8; // char*
        }
        // Parent: CBaseAnimGraph
        // Fields count: 17
        public static class C_BaseViewModel {
            public const nint m_vecLastFacing = 0xEE0; // 
            public const nint m_nViewModelIndex = 0xEEC; // uint32
            public const nint m_nAnimationParity = 0xEF0; // uint32
            public const nint m_flAnimationStartTime = 0xEF4; // float32
            public const nint m_hWeapon = 0xEF8; // CHandle<C_BasePlayerWeapon>
            public const nint m_sVMName = 0xF00; // CUtlSymbolLarge
            public const nint m_sAnimationPrefix = 0xF08; // CUtlSymbolLarge
            public const nint m_hWeaponModel = 0xF10; // CHandle<C_ViewmodelWeapon>
            public const nint m_iCameraAttachment = 0xF14; // AttachmentHandle_t
            public const nint m_vecLastCameraAngles = 0xF18; // QAngle
            public const nint m_previousElapsedDuration = 0xF24; // float32
            public const nint m_previousCycle = 0xF28; // float32
            public const nint m_nOldAnimationParity = 0xF2C; // int32
            public const nint m_hOldLayerSequence = 0xF30; // HSequence
            public const nint m_oldLayer = 0xF34; // int32
            public const nint m_oldLayerStartTime = 0xF38; // float32
            public const nint m_hControlPanel = 0xF3C; // CHandle<C_BaseEntity>
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_ViewmodelAttachmentModel {
        }
        // Parent: C_BaseViewModel
        // Fields count: 3
        public static class C_PredictedViewModel {
            public const nint m_vPredictedLagOffset = 0xF40; // 
            public const nint m_targetSpeed = 0xF4C; // QAngle
            public const nint m_currentSpeed = 0xF58; // QAngle
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_WorldModelStattrak {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_WorldModelNametag {
        }
        // Parent: C_BaseGrenade
        // Fields count: 16
        public static class C_BaseCSGrenadeProjectile {
            public const nint m_vInitialPosition = 0x10C0; // 
            public const nint m_vInitialVelocity = 0x10CC; // 
            public const nint m_nBounces = 0x10D8; // int32
            public const nint m_nExplodeEffectIndex = 0x10E0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nExplodeEffectTickBegin = 0x10E8; // int32
            public const nint m_vecExplodeEffectOrigin = 0x10EC; // 
            public const nint m_flSpawnTime = 0x10F8; // GameTime_t
            public const nint vecLastTrailLinePos = 0x10FC; // 
            public const nint flNextTrailLineTime = 0x1108; // GameTime_t
            public const nint m_bExplodeEffectBegan = 0x110C; // bool
            public const nint m_bCanCreateGrenadeTrail = 0x110D; // bool
            public const nint m_nSnapshotTrajectoryEffectIndex = 0x1110; // ParticleIndex_t
            public const nint m_hSnapshotTrajectoryParticleSnapshot = 0x1118; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_arrTrajectoryTrailPoints = 0x1120; // CUtlVector<Vector>
            public const nint m_arrTrajectoryTrailPointCreationTimes = 0x1138; // CUtlVector<float32>
            public const nint m_flTrajectoryTrailEffectCreationTime = 0x1150; // float32
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 0
        public static class C_SensorGrenadeProjectile {
        }
        // Parent: C_BaseGrenade
        // Fields count: 0
        public static class CBreachChargeProjectile {
        }
        // Parent: C_BaseGrenade
        // Fields count: 0
        public static class CBumpMineProjectile {
        }
        // Parent: C_BaseGrenade
        // Fields count: 0
        public static class CTripWireFireProjectile {
        }
        // Parent: C_BaseFlex
        // Fields count: 6
        public static class C_CSGO_PreviewModel {
            public const nint m_animgraph = 0x1070; // CUtlString
            public const nint m_animgraphCharacterModeString = 0x1078; // CGlobalSymbol
            public const nint m_defaultAnim = 0x1080; // CUtlString
            public const nint m_nDefaultAnimLoopMode = 0x1088; // AnimLoopMode_t
            public const nint m_flInitialModelScale = 0x108C; // float32
            public const nint m_sInitialWeaponState = 0x1090; // CUtlString
        }
        // Parent: C_CSGO_PreviewModel
        // Fields count: 0
        public static class C_CSGO_PreviewModelAlias_csgo_item_previewmodel {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 6
        public static class C_BulletHitModel {
            public const nint m_matLocal = 0xED8; // matrix3x4_t
            public const nint m_iBoneIndex = 0xF08; // int32
            public const nint m_hPlayerParent = 0xF0C; // CHandle<C_BaseEntity>
            public const nint m_bIsHit = 0xF10; // bool
            public const nint m_flTimeCreated = 0xF14; // float32
            public const nint m_vecStartPos = 0xF18; // 
        }
        // Parent: CBaseAnimGraph
        // Fields count: 6
        public static class C_PickUpModelSlerper {
            public const nint m_hPlayerParent = 0xED8; // CHandle<C_BaseEntity>
            public const nint m_hItem = 0xEDC; // CHandle<C_BaseEntity>
            public const nint m_flTimePickedUp = 0xEE0; // float32
            public const nint m_angOriginal = 0xEE4; // QAngle
            public const nint m_vecPosOriginal = 0xEF0; // 
            public const nint m_angRandom = 0xF00; // QAngle
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_WorldModelGloves {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class C_HostageCarriableProp {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 1
        public static class C_Multimeter {
            public const nint m_hTargetC4 = 0xEE0; // CHandle<C_PlantedC4>
        }
        // Parent: CBaseAnimGraph
        // Fields count: 29
        public static class C_PlantedC4 {
            public const nint m_bBombTicking = 0xED8; // bool
            public const nint m_nBombSite = 0xEDC; // int32
            public const nint m_nSourceSoundscapeHash = 0xEE0; // int32
            public const nint m_entitySpottedState = 0xEE8; // EntitySpottedState_t
            public const nint m_flNextGlow = 0xF00; // GameTime_t
            public const nint m_flNextBeep = 0xF04; // GameTime_t
            public const nint m_flC4Blow = 0xF08; // GameTime_t
            public const nint m_bCannotBeDefused = 0xF0C; // bool
            public const nint m_bHasExploded = 0xF0D; // bool
            public const nint m_flTimerLength = 0xF10; // float32
            public const nint m_bBeingDefused = 0xF14; // bool
            public const nint m_bTriggerWarning = 0xF18; // float32
            public const nint m_bExplodeWarning = 0xF1C; // float32
            public const nint m_bC4Activated = 0xF20; // bool
            public const nint m_bTenSecWarning = 0xF21; // bool
            public const nint m_flDefuseLength = 0xF24; // float32
            public const nint m_flDefuseCountDown = 0xF28; // GameTime_t
            public const nint m_bBombDefused = 0xF2C; // bool
            public const nint m_hBombDefuser = 0xF30; // CHandle<C_CSPlayerPawn>
            public const nint m_hControlPanel = 0xF34; // CHandle<C_BaseEntity>
            public const nint m_hDefuserMultimeter = 0xF38; // CHandle<C_Multimeter>
            public const nint m_flNextRadarFlashTime = 0xF3C; // GameTime_t
            public const nint m_bRadarFlash = 0xF40; // bool
            public const nint m_pBombDefuser = 0xF44; // CHandle<C_CSPlayerPawn>
            public const nint m_fLastDefuseTime = 0xF48; // GameTime_t
            public const nint m_pPredictionOwner = 0xF50; // CBasePlayerController*
            public const nint m_vecC4ExplodeSpectatePos = 0xF58; // 
            public const nint m_vecC4ExplodeSpectateAng = 0xF64; // QAngle
            public const nint m_flC4ExplodeSpectateDuration = 0xF70; // float32
        }
        // Parent: C_EconEntity
        // Fields count: 2
        public static class C_Item {
            public const nint m_bShouldGlow = 0x15B8; // bool
            public const nint m_pReticleHintTextName = 0x15B9; // char[256]
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 0
        public static class C_HEGrenadeProjectile {
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 0
        public static class C_FlashbangProjectile {
        }
        // Parent: C_DynamicProp
        // Fields count: 8
        public static class C_Chicken {
            public const nint m_hHolidayHatAddon = 0x1148; // CHandle<CBaseAnimGraph>
            public const nint m_jumpedThisFrame = 0x114C; // bool
            public const nint m_leader = 0x1150; // CHandle<C_CSPlayerPawn>
            public const nint m_AttributeManager = 0x1158; // C_AttributeContainer
            public const nint m_OriginalOwnerXuidLow = 0x1600; // uint32
            public const nint m_OriginalOwnerXuidHigh = 0x1604; // uint32
            public const nint m_bAttributesInitialized = 0x1608; // bool
            public const nint m_hWaterWakeParticles = 0x160C; // ParticleIndex_t
        }
        // Parent: C_EconEntity
        // Fields count: 7
        public static class C_BasePlayerWeapon {
            public const nint m_nNextPrimaryAttackTick = 0x15B8; // GameTick_t
            public const nint m_flNextPrimaryAttackTickRatio = 0x15BC; // float32
            public const nint m_nNextSecondaryAttackTick = 0x15C0; // GameTick_t
            public const nint m_flNextSecondaryAttackTickRatio = 0x15C4; // float32
            public const nint m_iClip1 = 0x15C8; // int32
            public const nint m_iClip2 = 0x15CC; // int32
            public const nint m_pReserveAmmo = 0x15D0; // int32[2]
        }
        // Parent: C_RagdollProp
        // Fields count: 7
        public static class C_RagdollPropAttached {
            public const nint m_boneIndexAttached = 0xF50; // uint32
            public const nint m_ragdollAttachedObjectIndex = 0xF54; // uint32
            public const nint m_attachmentPointBoneSpace = 0xF58; // 
            public const nint m_attachmentPointRagdollSpace = 0xF64; // 
            public const nint m_vecOffset = 0xF70; // 
            public const nint m_parentTime = 0xF7C; // float32
            public const nint m_bHasParent = 0xF80; // bool
        }
        // Parent: C_BaseFlex
        // Fields count: 8
        public static class C_BaseCombatCharacter {
            public const nint m_hMyWearables = 0x1070; // C_NetworkUtlVectorBase<CHandle<C_EconWearable>>
            public const nint m_bloodColor = 0x1088; // int32
            public const nint m_leftFootAttachment = 0x108C; // AttachmentHandle_t
            public const nint m_rightFootAttachment = 0x108D; // AttachmentHandle_t
            public const nint m_nWaterWakeMode = 0x1090; // C_BaseCombatCharacter::WaterWakeMode_t
            public const nint m_flWaterWorldZ = 0x1094; // float32
            public const nint m_flWaterNextTraceTime = 0x1098; // float32
            public const nint m_flFieldOfView = 0x109C; // float32
        }
        // Parent: C_BaseCombatCharacter
        // Fields count: 28
        public static class C_BasePlayerPawn {
            public const nint m_pWeaponServices = 0x1100; // CPlayer_WeaponServices*
            public const nint m_pItemServices = 0x1108; // CPlayer_ItemServices*
            public const nint m_pAutoaimServices = 0x1110; // CPlayer_AutoaimServices*
            public const nint m_pObserverServices = 0x1118; // CPlayer_ObserverServices*
            public const nint m_pWaterServices = 0x1120; // CPlayer_WaterServices*
            public const nint m_pUseServices = 0x1128; // CPlayer_UseServices*
            public const nint m_pFlashlightServices = 0x1130; // CPlayer_FlashlightServices*
            public const nint m_pCameraServices = 0x1138; // CPlayer_CameraServices*
            public const nint m_pMovementServices = 0x1140; // CPlayer_MovementServices*
            public const nint m_ServerViewAngleChanges = 0x1150; // C_UtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
            public const nint m_nHighestConsumedServerViewAngleChangeIndex = 0x11A0; // uint32
            public const nint v_angle = 0x11A4; // QAngle
            public const nint v_anglePrevious = 0x11B0; // QAngle
            public const nint m_iHideHUD = 0x11BC; // uint32
            public const nint m_skybox3d = 0x11C0; // sky3dparams_t
            public const nint m_flDeathTime = 0x1250; // GameTime_t
            public const nint m_vecPredictionError = 0x1254; // 
            public const nint m_flPredictionErrorTime = 0x1260; // GameTime_t
            public const nint m_vecLastCameraSetupLocalOrigin = 0x1264; // 
            public const nint m_flLastCameraSetupTime = 0x1270; // GameTime_t
            public const nint m_flFOVSensitivityAdjust = 0x1274; // float32
            public const nint m_flMouseSensitivity = 0x1278; // float32
            public const nint m_vOldOrigin = 0x127C; // 
            public const nint m_flOldSimulationTime = 0x1288; // float32
            public const nint m_nLastExecutedCommandNumber = 0x128C; // int32
            public const nint m_nLastExecutedCommandTick = 0x1290; // int32
            public const nint m_hController = 0x1294; // CHandle<CBasePlayerController>
            public const nint m_bIsSwappingToPredictableController = 0x1298; // bool
        }
        // Parent: C_PredictedViewModel
        // Fields count: 6
        public static class C_CSGOViewModel {
            public const nint m_bShouldIgnoreOffsetAndAccuracy = 0xF68; // bool
            public const nint m_nWeaponParity = 0xF6C; // uint32
            public const nint m_nOldWeaponParity = 0xF70; // uint32
            public const nint m_nLastKnownAssociatedWeaponEntIndex = 0xF74; // CEntityIndex
            public const nint m_bNeedToQueueHighResComposite = 0xF78; // bool
            public const nint m_vLoweredWeaponOffset = 0xFDC; // QAngle
        }
        // Parent: C_BasePlayerWeapon
        // Fields count: 71
        public static class C_CSWeaponBase {
            public const nint m_flFireSequenceStartTime = 0x162C; // float32
            public const nint m_nFireSequenceStartTimeChange = 0x1630; // int32
            public const nint m_nFireSequenceStartTimeAck = 0x1634; // int32
            public const nint m_ePlayerFireEvent = 0x1638; // PlayerAnimEvent_t
            public const nint m_ePlayerFireEventAttackType = 0x163C; // WeaponAttackType_t
            public const nint m_seqIdle = 0x1640; // HSequence
            public const nint m_seqFirePrimary = 0x1644; // HSequence
            public const nint m_seqFireSecondary = 0x1648; // HSequence
            public const nint m_thirdPersonFireSequences = 0x1650; // CUtlVector<HSequence>
            public const nint m_hCurrentThirdPersonSequence = 0x1668; // HSequence
            public const nint m_nSilencerBoneIndex = 0x166C; // int32
            public const nint m_thirdPersonSequences = 0x1670; // HSequence[7]
            public const nint m_ClientPreviousWeaponState = 0x16A8; // CSWeaponState_t
            public const nint m_iState = 0x16AC; // CSWeaponState_t
            public const nint m_flCrosshairDistance = 0x16B0; // float32
            public const nint m_iAmmoLastCheck = 0x16B4; // int32
            public const nint m_iAlpha = 0x16B8; // int32
            public const nint m_iScopeTextureID = 0x16BC; // int32
            public const nint m_iCrosshairTextureID = 0x16C0; // int32
            public const nint m_flGunAccuracyPositionDeprecated = 0x16C4; // float32
            public const nint m_nLastEmptySoundCmdNum = 0x16C8; // int32
            public const nint m_nViewModelIndex = 0x16CC; // uint32
            public const nint m_bReloadsWithClips = 0x16D0; // bool
            public const nint m_flTimeWeaponIdle = 0x16D4; // GameTime_t
            public const nint m_bFireOnEmpty = 0x16D8; // bool
            public const nint m_OnPlayerPickup = 0x16E0; // CEntityIOOutput
            public const nint m_weaponMode = 0x1708; // CSWeaponMode
            public const nint m_flTurningInaccuracyDelta = 0x170C; // float32
            public const nint m_vecTurningInaccuracyEyeDirLast = 0x1710; // 
            public const nint m_flTurningInaccuracy = 0x171C; // float32
            public const nint m_fAccuracyPenalty = 0x1720; // float32
            public const nint m_flLastAccuracyUpdateTime = 0x1724; // GameTime_t
            public const nint m_fAccuracySmoothedForZoom = 0x1728; // float32
            public const nint m_fScopeZoomEndTime = 0x172C; // GameTime_t
            public const nint m_iRecoilIndex = 0x1730; // int32
            public const nint m_flRecoilIndex = 0x1734; // float32
            public const nint m_bBurstMode = 0x1738; // bool
            public const nint m_nPostponeFireReadyTicks = 0x173C; // GameTick_t
            public const nint m_flPostponeFireReadyFrac = 0x1740; // float32
            public const nint m_bInReload = 0x1744; // bool
            public const nint m_bReloadVisuallyComplete = 0x1745; // bool
            public const nint m_flDroppedAtTime = 0x1748; // GameTime_t
            public const nint m_bIsHauledBack = 0x174C; // bool
            public const nint m_bSilencerOn = 0x174D; // bool
            public const nint m_flTimeSilencerSwitchComplete = 0x1750; // GameTime_t
            public const nint m_iOriginalTeamNumber = 0x1754; // int32
            public const nint m_flNextAttackRenderTimeOffset = 0x1758; // float32
            public const nint m_bVisualsDataSet = 0x17E0; // bool
            public const nint m_bOldFirstPersonSpectatedState = 0x17E1; // bool
            public const nint m_hOurPing = 0x17E4; // CHandle<C_BaseEntity>
            public const nint m_nOurPingIndex = 0x17E8; // CEntityIndex
            public const nint m_vecOurPingPos = 0x17EC; // 
            public const nint m_bGlowForPing = 0x17F8; // bool
            public const nint m_bUIWeapon = 0x17F9; // bool
            public const nint m_hPrevOwner = 0x1808; // CHandle<C_CSPlayerPawn>
            public const nint m_nDropTick = 0x180C; // GameTick_t
            public const nint m_donated = 0x182C; // bool
            public const nint m_fLastShotTime = 0x1830; // GameTime_t
            public const nint m_bWasOwnedByCT = 0x1834; // bool
            public const nint m_bWasOwnedByTerrorist = 0x1835; // bool
            public const nint m_gunHeat = 0x1838; // float32
            public const nint m_smokeAttachments = 0x183C; // uint32
            public const nint m_lastSmokeTime = 0x1840; // GameTime_t
            public const nint m_flNextClientFireBulletTime = 0x1844; // float32
            public const nint m_flNextClientFireBulletTime_Repredict = 0x1848; // float32
            public const nint m_IronSightController = 0x1920; // C_IronSightController
            public const nint m_iIronSightMode = 0x19D0; // int32
            public const nint m_flLastLOSTraceFailureTime = 0x19E0; // GameTime_t
            public const nint m_iNumEmptyAttacks = 0x19E4; // int32
            public const nint m_flLastMagDropRequestTime = 0x1A60; // GameTime_t
            public const nint m_flWatTickOffset = 0x1A64; // float32
        }
        // Parent: C_CSWeaponBase
        // Fields count: 6
        public static class C_CSWeaponBaseGun {
            public const nint m_zoomLevel = 0x1A70; // int32
            public const nint m_iBurstShotsRemaining = 0x1A74; // int32
            public const nint m_iSilencerBodygroup = 0x1A78; // int32
            public const nint m_silencedModelIndex = 0x1A88; // int32
            public const nint m_inPrecache = 0x1A8C; // bool
            public const nint m_bNeedsBoltAction = 0x1A8D; // bool
        }
        // Parent: C_CSWeaponBase
        // Fields count: 11
        public static class C_C4 {
            public const nint m_szScreenText = 0x1A70; // char[32]
            public const nint m_activeLightParticleIndex = 0x1A90; // ParticleIndex_t
            public const nint m_eActiveLightEffect = 0x1A94; // C4LightEffect_t
            public const nint m_bStartedArming = 0x1A98; // bool
            public const nint m_fArmedTime = 0x1A9C; // GameTime_t
            public const nint m_bBombPlacedAnimation = 0x1AA0; // bool
            public const nint m_bIsPlantingViaUse = 0x1AA1; // bool
            public const nint m_entitySpottedState = 0x1AA8; // EntitySpottedState_t
            public const nint m_nSpotRules = 0x1AC0; // int32
            public const nint m_bPlayedArmingBeeps = 0x1AC4; // bool[7]
            public const nint m_bBombPlanted = 0x1ACB; // bool
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_DEagle {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponElite {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class C_WeaponNOVA {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class C_WeaponSawedoff {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 1
        public static class C_WeaponTaser {
            public const nint m_fFireTime = 0x1A90; // GameTime_t
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class C_WeaponXM1014 {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class C_Knife {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class C_Melee {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 1
        public static class C_WeaponShield {
            public const nint m_flDisplayHealth = 0x1A90; // float32
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 1
        public static class C_MolotovProjectile {
            public const nint m_bIsIncGrenade = 0x1158; // bool
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 3
        public static class C_DecoyProjectile {
            public const nint m_nDecoyShotTick = 0x1158; // int32
            public const nint m_nClientLastKnownDecoyShotTick = 0x115C; // int32
            public const nint m_flTimeParticleEffectSpawn = 0x1180; // GameTime_t
        }
        // Parent: C_BaseCSGrenadeProjectile
        // Fields count: 8
        public static class C_SmokeGrenadeProjectile {
            public const nint m_nSmokeEffectTickBegin = 0x1160; // int32
            public const nint m_bDidSmokeEffect = 0x1164; // bool
            public const nint m_nRandomSeed = 0x1168; // int32
            public const nint m_vSmokeColor = 0x116C; // 
            public const nint m_vSmokeDetonationPos = 0x1178; // 
            public const nint m_VoxelFrameData = 0x1188; // CUtlVector<uint8>
            public const nint m_bSmokeVolumeDataReceived = 0x11A0; // bool
            public const nint m_bSmokeEffectSpawned = 0x11A1; // bool
        }
        // Parent: C_CSWeaponBase
        // Fields count: 14
        public static class C_BaseCSGrenade {
            public const nint m_bClientPredictDelete = 0x1A70; // bool
            public const nint m_bRedraw = 0x1A71; // bool
            public const nint m_bIsHeldByPlayer = 0x1A72; // bool
            public const nint m_bPinPulled = 0x1A73; // bool
            public const nint m_bJumpThrow = 0x1A74; // bool
            public const nint m_bThrowAnimating = 0x1A75; // bool
            public const nint m_fThrowTime = 0x1A78; // GameTime_t
            public const nint m_flThrowStrength = 0x1A7C; // float32
            public const nint m_flThrowStrengthApproach = 0x1A80; // float32
            public const nint m_fDropTime = 0x1A84; // GameTime_t
            public const nint m_bJustPulledPin = 0x1A88; // bool
            public const nint m_nNextHoldTick = 0x1A8C; // GameTick_t
            public const nint m_flNextHoldFrac = 0x1A90; // float32
            public const nint m_hSwitchToWeaponAfterThrow = 0x1A94; // CHandle<C_CSWeaponBase>
        }
        // Parent: C_CSWeaponBase
        // Fields count: 2
        public static class C_WeaponBaseItem {
            public const nint m_SequenceCompleteTimer = 0x1A70; // CountdownTimer
            public const nint m_bRedraw = 0x1A88; // bool
        }
        // Parent: C_Item
        // Fields count: 2
        public static class C_ItemDogtags {
            public const nint m_OwningPlayer = 0x16C0; // CHandle<C_CSPlayerPawn>
            public const nint m_KillingPlayer = 0x16C4; // CHandle<C_CSPlayerPawn>
        }
        // Parent: C_WeaponBaseItem
        // Fields count: 0
        public static class C_Item_Healthshot {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 2
        public static class C_Fists {
            public const nint m_bPlayingUninterruptableAct = 0x1A70; // bool
            public const nint m_nUninterruptableActivity = 0x1A74; // PlayerAnimEvent_t
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_SensorGrenade {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class CBreachCharge {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class CBumpMine {
        }
        // Parent: C_CSWeaponBase
        // Fields count: 0
        public static class CTablet {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class CTripWireFire {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponZoneRepulsor {
        }
        // Parent: C_BasePlayerPawn
        // Fields count: 142
        public static class C_CSPlayerPawnBase {
            public const nint m_pPingServices = 0x12C0; // CCSPlayer_PingServices*
            public const nint m_pViewModelServices = 0x12C8; // CPlayer_ViewModelServices*
            public const nint m_fRenderingClipPlane = 0x12D8; // float32[4]
            public const nint m_nLastClipPlaneSetupFrame = 0x12E8; // int32
            public const nint m_vecLastClipCameraPos = 0x12EC; // 
            public const nint m_vecLastClipCameraForward = 0x12F8; // 
            public const nint m_bClipHitStaticWorld = 0x1304; // bool
            public const nint m_bCachedPlaneIsValid = 0x1305; // bool
            public const nint m_pClippingWeapon = 0x1308; // C_CSWeaponBase*
            public const nint m_previousPlayerState = 0x1310; // CSPlayerState
            public const nint m_flLastCollisionCeiling = 0x1314; // float32
            public const nint m_flLastCollisionCeilingChangeTime = 0x1318; // float32
            public const nint m_grenadeParameterStashTime = 0x1338; // GameTime_t
            public const nint m_bGrenadeParametersStashed = 0x133C; // bool
            public const nint m_angStashedShootAngles = 0x1340; // QAngle
            public const nint m_vecStashedGrenadeThrowPosition = 0x134C; // 
            public const nint m_vecStashedVelocity = 0x1358; // 
            public const nint m_angShootAngleHistory = 0x1364; // QAngle[2]
            public const nint m_vecThrowPositionHistory = 0x137C; // Vector[2]
            public const nint m_vecVelocityHistory = 0x1394; // Vector[2]
            public const nint m_thirdPersonHeading = 0x13B0; // QAngle
            public const nint m_flSlopeDropOffset = 0x13C8; // float32
            public const nint m_flSlopeDropHeight = 0x13D8; // float32
            public const nint m_vHeadConstraintOffset = 0x13E8; // 
            public const nint m_bIsScoped = 0x1400; // bool
            public const nint m_bIsWalking = 0x1401; // bool
            public const nint m_bResumeZoom = 0x1402; // bool
            public const nint m_iPlayerState = 0x1404; // CSPlayerState
            public const nint m_bIsDefusing = 0x1408; // bool
            public const nint m_bIsGrabbingHostage = 0x1409; // bool
            public const nint m_iBlockingUseActionInProgress = 0x140C; // CSPlayerBlockingUseAction_t
            public const nint m_bIsRescuing = 0x1410; // bool
            public const nint m_fImmuneToGunGameDamageTime = 0x1414; // GameTime_t
            public const nint m_fImmuneToGunGameDamageTimeLast = 0x1418; // GameTime_t
            public const nint m_bGunGameImmunity = 0x141C; // bool
            public const nint m_GunGameImmunityColor = 0x141D; // Color
            public const nint m_bHasMovedSinceSpawn = 0x1421; // bool
            public const nint m_fMolotovUseTime = 0x1424; // float32
            public const nint m_fMolotovDamageTime = 0x1428; // float32
            public const nint m_nWhichBombZone = 0x142C; // int32
            public const nint m_bInNoDefuseArea = 0x1430; // bool
            public const nint m_iThrowGrenadeCounter = 0x1434; // int32
            public const nint m_bWaitForNoAttack = 0x1438; // bool
            public const nint m_flGuardianTooFarDistFrac = 0x143C; // float32
            public const nint m_flDetectedByEnemySensorTime = 0x1440; // GameTime_t
            public const nint m_flNextGuardianTooFarWarning = 0x1444; // float32
            public const nint m_bSuppressGuardianTooFarWarningAudio = 0x1448; // bool
            public const nint m_bKilledByTaser = 0x1449; // bool
            public const nint m_iMoveState = 0x144C; // int32
            public const nint m_bCanMoveDuringFreezePeriod = 0x1450; // bool
            public const nint m_flLowerBodyYawTarget = 0x1454; // float32
            public const nint m_bStrafing = 0x1458; // bool
            public const nint m_flLastSpawnTimeIndex = 0x145C; // GameTime_t
            public const nint m_flEmitSoundTime = 0x1460; // GameTime_t
            public const nint m_iAddonBits = 0x1464; // int32
            public const nint m_iPrimaryAddon = 0x1468; // int32
            public const nint m_iSecondaryAddon = 0x146C; // int32
            public const nint m_iProgressBarDuration = 0x1470; // int32
            public const nint m_flProgressBarStartTime = 0x1474; // float32
            public const nint m_iDirection = 0x1478; // int32
            public const nint m_iShotsFired = 0x147C; // int32
            public const nint m_bNightVisionOn = 0x1480; // bool
            public const nint m_bHasNightVision = 0x1481; // bool
            public const nint m_flVelocityModifier = 0x1484; // float32
            public const nint m_flHitHeading = 0x1488; // float32
            public const nint m_nHitBodyPart = 0x148C; // int32
            public const nint m_iStartAccount = 0x1490; // int32
            public const nint m_vecIntroStartEyePosition = 0x1494; // 
            public const nint m_vecIntroStartPlayerForward = 0x14A0; // 
            public const nint m_flClientDeathTime = 0x14AC; // GameTime_t
            public const nint m_flNightVisionAlpha = 0x14B0; // float32
            public const nint m_bScreenTearFrameCaptured = 0x14B4; // bool
            public const nint m_flFlashBangTime = 0x14B8; // float32
            public const nint m_flFlashScreenshotAlpha = 0x14BC; // float32
            public const nint m_flFlashOverlayAlpha = 0x14C0; // float32
            public const nint m_bFlashBuildUp = 0x14C4; // bool
            public const nint m_bFlashDspHasBeenCleared = 0x14C5; // bool
            public const nint m_bFlashScreenshotHasBeenGrabbed = 0x14C6; // bool
            public const nint m_flFlashMaxAlpha = 0x14C8; // float32
            public const nint m_flFlashDuration = 0x14CC; // float32
            public const nint m_lastStandingPos = 0x14D0; // 
            public const nint m_vecLastMuzzleFlashPos = 0x14DC; // 
            public const nint m_angLastMuzzleFlashAngle = 0x14E8; // QAngle
            public const nint m_hMuzzleFlashShape = 0x14F4; // CHandle<C_BaseEntity>
            public const nint m_iHealthBarRenderMaskIndex = 0x14F8; // int32
            public const nint m_flHealthFadeValue = 0x14FC; // float32
            public const nint m_flHealthFadeAlpha = 0x1500; // float32
            public const nint m_nMyCollisionGroup = 0x1504; // int32
            public const nint m_ignoreLadderJumpTime = 0x1508; // float32
            public const nint m_ladderSurpressionTimer = 0x1510; // CountdownTimer
            public const nint m_lastLadderNormal = 0x1528; // 
            public const nint m_lastLadderPos = 0x1534; // 
            public const nint m_flDeathCCWeight = 0x1548; // float32
            public const nint m_bOldIsScoped = 0x154C; // bool
            public const nint m_flPrevRoundEndTime = 0x1550; // float32
            public const nint m_flPrevMatchEndTime = 0x1554; // float32
            public const nint m_unCurrentEquipmentValue = 0x1558; // uint16
            public const nint m_unRoundStartEquipmentValue = 0x155A; // uint16
            public const nint m_unFreezetimeEndEquipmentValue = 0x155C; // uint16
            public const nint m_vecThirdPersonViewPositionOverride = 0x1560; // 
            public const nint m_nHeavyAssaultSuitCooldownRemaining = 0x156C; // int32
            public const nint m_ArmorValue = 0x1570; // int32
            public const nint m_angEyeAngles = 0x1578; // QAngle
            public const nint m_fNextThinkPushAway = 0x1590; // float32
            public const nint m_bShouldAutobuyDMWeapons = 0x1594; // bool
            public const nint m_bShouldAutobuyNow = 0x1595; // bool
            public const nint m_bHud_MiniScoreHidden = 0x1596; // bool
            public const nint m_bHud_RadarHidden = 0x1597; // bool
            public const nint m_nLastKillerIndex = 0x1598; // CEntityIndex
            public const nint m_nLastConcurrentKilled = 0x159C; // int32
            public const nint m_nDeathCamMusic = 0x15A0; // int32
            public const nint m_iIDEntIndex = 0x15A4; // CEntityIndex
            public const nint m_delayTargetIDTimer = 0x15A8; // CountdownTimer
            public const nint m_iTargetedWeaponEntIndex = 0x15C0; // CEntityIndex
            public const nint m_iOldIDEntIndex = 0x15C4; // CEntityIndex
            public const nint m_holdTargetIDTimer = 0x15C8; // CountdownTimer
            public const nint m_flCurrentMusicStartTime = 0x15E4; // float32
            public const nint m_flMusicRoundStartTime = 0x15E8; // float32
            public const nint m_bDeferStartMusicOnWarmup = 0x15EC; // bool
            public const nint m_cycleLatch = 0x15F0; // int32
            public const nint m_serverIntendedCycle = 0x15F4; // float32
            public const nint m_vecPlayerPatchEconIndices = 0x15F8; // uint32[5]
            public const nint m_bHideTargetID = 0x1614; // bool
            public const nint m_flLastSmokeOverlayAlpha = 0x1618; // float32
            public const nint m_flLastSmokeAge = 0x161C; // float32
            public const nint m_vLastSmokeOverlayColor = 0x1620; // 
            public const nint m_nPlayerSmokedFx = 0x162C; // ParticleIndex_t
            public const nint m_nPlayerInfernoBodyFx = 0x1630; // ParticleIndex_t
            public const nint m_nPlayerInfernoFootFx = 0x1634; // ParticleIndex_t
            public const nint m_flNextMagDropTime = 0x1638; // float32
            public const nint m_nLastMagDropAttachmentIndex = 0x163C; // int32
            public const nint m_vecBulletHitModels = 0x1640; // CUtlVector<C_BulletHitModel*>
            public const nint m_vecPickupModelSlerpers = 0x1658; // CUtlVector<C_PickUpModelSlerper*>
            public const nint m_vecLastAliveLocalVelocity = 0x1670; // 
            public const nint m_entitySpottedState = 0x1698; // EntitySpottedState_t
            public const nint m_nSurvivalTeamNumber = 0x16B0; // int32
            public const nint m_bGuardianShouldSprayCustomXMark = 0x16B4; // bool
            public const nint m_bHasDeathInfo = 0x16B5; // bool
            public const nint m_flDeathInfoTime = 0x16B8; // float32
            public const nint m_vecDeathInfoOrigin = 0x16BC; // 
            public const nint m_bKilledByHeadshot = 0x16C8; // bool
            public const nint m_hOriginalController = 0x16CC; // CHandle<CCSPlayerController>
        }
        // Parent: C_CSPlayerPawnBase
        // Fields count: 1
        public static class C_CSObserverPawn {
            public const nint m_hDetectParentChange = 0x1718; // CEntityHandle
        }
        // Parent: C_CSPlayerPawnBase
        // Fields count: 52
        public static class C_CSPlayerPawn {
            public const nint m_pBulletServices = 0x1718; // CCSPlayer_BulletServices*
            public const nint m_pHostageServices = 0x1720; // CCSPlayer_HostageServices*
            public const nint m_pBuyServices = 0x1728; // CCSPlayer_BuyServices*
            public const nint m_pGlowServices = 0x1730; // CCSPlayer_GlowServices*
            public const nint m_pActionTrackingServices = 0x1738; // CCSPlayer_ActionTrackingServices*
            public const nint m_flHealthShotBoostExpirationTime = 0x1740; // GameTime_t
            public const nint m_flLastFiredWeaponTime = 0x1744; // GameTime_t
            public const nint m_bHasFemaleVoice = 0x1748; // bool
            public const nint m_flLandseconds = 0x174C; // float32
            public const nint m_flOldFallVelocity = 0x1750; // float32
            public const nint m_szLastPlaceName = 0x1754; // char[18]
            public const nint m_bPrevDefuser = 0x1766; // bool
            public const nint m_bPrevHelmet = 0x1767; // bool
            public const nint m_nPrevArmorVal = 0x1768; // int32
            public const nint m_nPrevGrenadeAmmoCount = 0x176C; // int32
            public const nint m_unPreviousWeaponHash = 0x1770; // uint32
            public const nint m_unWeaponHash = 0x1774; // uint32
            public const nint m_bInBuyZone = 0x1778; // bool
            public const nint m_bPreviouslyInBuyZone = 0x1779; // bool
            public const nint m_aimPunchAngle = 0x177C; // QAngle
            public const nint m_aimPunchAngleVel = 0x1788; // QAngle
            public const nint m_aimPunchTickBase = 0x1794; // int32
            public const nint m_aimPunchTickFraction = 0x1798; // float32
            public const nint m_aimPunchCache = 0x17A0; // CUtlVector<QAngle>
            public const nint m_bInLanding = 0x17C0; // bool
            public const nint m_flLandingTime = 0x17C4; // float32
            public const nint m_bInHostageRescueZone = 0x17C8; // bool
            public const nint m_bInBombZone = 0x17C9; // bool
            public const nint m_bIsBuyMenuOpen = 0x17CA; // bool
            public const nint m_flTimeOfLastInjury = 0x17CC; // GameTime_t
            public const nint m_flNextSprayDecalTime = 0x17D0; // GameTime_t
            public const nint m_iRetakesOffering = 0x18E8; // int32
            public const nint m_iRetakesOfferingCard = 0x18EC; // int32
            public const nint m_bRetakesHasDefuseKit = 0x18F0; // bool
            public const nint m_bRetakesMVPLastRound = 0x18F1; // bool
            public const nint m_iRetakesMVPBoostItem = 0x18F4; // int32
            public const nint m_RetakesMVPBoostExtraUtility = 0x18F8; // loadout_slot_t
            public const nint m_bNeedToReApplyGloves = 0x1918; // bool
            public const nint m_EconGloves = 0x1920; // C_EconItemView
            public const nint m_nEconGlovesChanged = 0x1D68; // uint8
            public const nint m_bMustSyncRagdollState = 0x1D69; // bool
            public const nint m_nRagdollDamageBone = 0x1D6C; // int32
            public const nint m_vRagdollDamageForce = 0x1D70; // 
            public const nint m_vRagdollDamagePosition = 0x1D7C; // 
            public const nint m_szRagdollDamageWeaponName = 0x1D88; // char[64]
            public const nint m_bRagdollDamageHeadshot = 0x1DC8; // bool
            public const nint m_vRagdollServerOrigin = 0x1DCC; // 
            public const nint m_bLastHeadBoneTransformIsValid = 0x23E0; // bool
            public const nint m_lastLandTime = 0x23E4; // GameTime_t
            public const nint m_bOnGroundLastTick = 0x23E8; // bool
            public const nint m_qDeathEyeAngles = 0x2404; // QAngle
            public const nint m_bSkipOneHeadConstraintUpdate = 0x2410; // bool
        }
        // Parent: C_BaseCombatCharacter
        // Fields count: 23
        public static class C_Hostage {
            public const nint m_entitySpottedState = 0x1100; // EntitySpottedState_t
            public const nint m_leader = 0x1118; // CHandle<C_BaseEntity>
            public const nint m_reuseTimer = 0x1120; // CountdownTimer
            public const nint m_vel = 0x1138; // 
            public const nint m_isRescued = 0x1144; // bool
            public const nint m_jumpedThisFrame = 0x1145; // bool
            public const nint m_nHostageState = 0x1148; // int32
            public const nint m_bHandsHaveBeenCut = 0x114C; // bool
            public const nint m_hHostageGrabber = 0x1150; // CHandle<C_CSPlayerPawn>
            public const nint m_fLastGrabTime = 0x1154; // GameTime_t
            public const nint m_vecGrabbedPos = 0x1158; // 
            public const nint m_flRescueStartTime = 0x1164; // GameTime_t
            public const nint m_flGrabSuccessTime = 0x1168; // GameTime_t
            public const nint m_flDropStartTime = 0x116C; // GameTime_t
            public const nint m_flDeadOrRescuedTime = 0x1170; // GameTime_t
            public const nint m_blinkTimer = 0x1178; // CountdownTimer
            public const nint m_lookAt = 0x1190; // 
            public const nint m_lookAroundTimer = 0x11A0; // CountdownTimer
            public const nint m_isInit = 0x11B8; // bool
            public const nint m_eyeAttachment = 0x11B9; // AttachmentHandle_t
            public const nint m_chestAttachment = 0x11BA; // AttachmentHandle_t
            public const nint m_pPredictionOwner = 0x11C0; // CBasePlayerController*
            public const nint m_fNewestAlphaThinkTime = 0x11C8; // GameTime_t
        }
        // Parent: C_BaseCombatCharacter
        // Fields count: 0
        public static class C_NetTestBaseCombatCharacter {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_AK47 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponAug {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponAWP {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponBizon {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponFamas {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponFiveSeven {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponG3SG1 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponGalilAR {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponGlock {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponHKP2000 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponUSPSilencer {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponM4A1 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponM4A1Silencer {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponMAC10 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponMag7 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponMP5SD {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponMP7 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponMP9 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponNegev {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponP250 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponCZ75a {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponP90 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponSCAR20 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponSG556 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponSSG08 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponTec9 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponUMP45 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponM249 {
        }
        // Parent: C_CSWeaponBaseGun
        // Fields count: 0
        public static class C_WeaponRevolver {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_MolotovGrenade {
        }
        // Parent: C_MolotovGrenade
        // Fields count: 0
        public static class C_IncendiaryGrenade {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_DecoyGrenade {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_Flashbang {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_HEGrenade {
        }
        // Parent: C_BaseCSGrenade
        // Fields count: 0
        public static class C_SmokeGrenade {
        }
        // Parent: C_CSPlayerPawn
        // Fields count: 3
        public static class C_CSGO_PreviewPlayer {
            public const nint m_animgraph = 0x2418; // CUtlString
            public const nint m_animgraphCharacterModeString = 0x2420; // CGlobalSymbol
            public const nint m_flInitialModelScale = 0x2428; // float32
        }
        // Parent: C_CSGO_PreviewPlayer
        // Fields count: 0
        public static class C_CSGO_PreviewPlayerAlias_csgo_player_previewmodel {
        }
        // Parent: C_CSGO_PreviewPlayer
        // Fields count: 0
        public static class C_CSGO_TeamPreviewModel {
        }
    }
    // Module: engine2.dll
    // Classes count: 48
    // Enums count: 4
    public static class Engine2 {
        // Alignment: 4
        // Members count: 3
        public enum SpawnDebugOverrideState_t : uint {
            SPAWN_DEBUG_OVERRIDE_NONE = 0x0,
            SPAWN_DEBUG_OVERRIDE_FORCE_ENABLED = 0x1,
            SPAWN_DEBUG_OVERRIDE_FORCE_DISABLED = 0x2
        }
        // Alignment: 4
        // Members count: 5
        public enum SpawnDebugRestrictionOverrideState_t : uint {
            SPAWN_DEBUG_RESTRICT_NONE = 0x0,
            SPAWN_DEBUG_RESTRICT_IGNORE_MANAGER_DISTANCE_REQS = 0x1,
            SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_DISTANCE_LOS_REQS = 0x2,
            SPAWN_DEBUG_RESTRICT_IGNORE_TEMPLATE_COOLDOWN_LIMITS = 0x4,
            SPAWN_DEBUG_RESTRICT_IGNORE_TARGET_COOLDOWN_LIMITS = 0x8
        }
        // Alignment: 4
        // Members count: 3
        public enum EntityDormancyType_t : uint {
            ENTITY_NOT_DORMANT = 0x0,
            ENTITY_DORMANT = 0x1,
            ENTITY_SUSPENDED = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum EntityIOTargetType_t : uint {
            ENTITY_IO_TARGET_INVALID = 0xFFFFFFFFFFFFFFFF,
            ENTITY_IO_TARGET_ENTITYNAME = 0x2,
            ENTITY_IO_TARGET_EHANDLE = 0x6,
            ENTITY_IO_TARGET_ENTITYNAME_OR_CLASSNAME = 0x7
        }
        // Parent: None
        // Fields count: 4
        public static class EngineLoopState_t {
            public const nint m_nPlatWindowWidth = 0x18; // int32
            public const nint m_nPlatWindowHeight = 0x1C; // int32
            public const nint m_nRenderWidth = 0x20; // int32
            public const nint m_nRenderHeight = 0x24; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class EventModInitialized_t {
        }
        // Parent: None
        // Fields count: 1
        public static class EventFrameBoundary_t {
            public const nint m_flFrameTime = 0x0; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class EventProfileStorageAvailable_t {
            public const nint m_nSplitScreenSlot = 0x0; // CSplitScreenSlot
        }
        // Parent: None
        // Fields count: 0
        public static class EventSplitScreenStateChanged_t {
        }
        // Parent: None
        // Fields count: 8
        public static class EventSetTime_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_nClientOutputFrames = 0x28; // int32
            public const nint m_flRealTime = 0x30; // float64
            public const nint m_flRenderTime = 0x38; // float64
            public const nint m_flRenderFrameTime = 0x40; // float64
            public const nint m_flRenderFrameTimeUnbounded = 0x48; // float64
            public const nint m_flRenderFrameTimeUnscaled = 0x50; // float64
            public const nint m_flTickRemainder = 0x58; // float64
        }
        // Parent: None
        // Fields count: 2
        public static class EventClientPollInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class EventClientProcessInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flTickInterval = 0x2C; // float32
            public const nint m_flTickStartTime = 0x30; // float64
        }
        // Parent: None
        // Fields count: 3
        public static class EventClientProcessGameInput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
        }
        // Parent: None
        // Fields count: 6
        public static class EventClientPreOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float64
            public const nint m_flRenderFrameTime = 0x30; // float64
            public const nint m_flRenderFrameTimeUnbounded = 0x38; // float64
            public const nint m_flRealTime = 0x40; // float32
            public const nint m_bRenderOnly = 0x44; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class EventClientSceneSystemThreadStateChange_t {
            public const nint m_bThreadsActive = 0x0; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class EventClientOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float32
            public const nint m_flRealTime = 0x2C; // float32
            public const nint m_flRenderFrameTimeUnbounded = 0x30; // float32
            public const nint m_bRenderOnly = 0x34; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class EventClientPostOutput_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRenderTime = 0x28; // float64
            public const nint m_flRenderFrameTime = 0x30; // float32
            public const nint m_flRenderFrameTimeUnbounded = 0x34; // float32
            public const nint m_bRenderOnly = 0x38; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class EventClientFrameSimulate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
            public const nint m_flWhenScheduleSendTickPacket = 0x30; // float64
        }
        // Parent: None
        // Fields count: 3
        public static class EventSimpleLoopFrameUpdate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_flRealTime = 0x28; // float32
            public const nint m_flFrameTime = 0x2C; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class EventSimulate_t {
            public const nint m_LoopState = 0x0; // EngineLoopState_t
            public const nint m_bFirstTick = 0x28; // bool
            public const nint m_bLastTick = 0x29; // bool
        }
        // Parent: EventSimulate_t
        // Fields count: 4
        public static class EventAdvanceTick_t {
            public const nint m_nCurrentTick = 0x30; // int32
            public const nint m_nCurrentTickThisFrame = 0x34; // int32
            public const nint m_nTotalTicksThisFrame = 0x38; // int32
            public const nint m_nTotalTicks = 0x3C; // int32
        }
        // Parent: EventSimulate_t
        // Fields count: 4
        public static class EventPostAdvanceTick_t {
            public const nint m_nCurrentTick = 0x30; // int32
            public const nint m_nCurrentTickThisFrame = 0x34; // int32
            public const nint m_nTotalTicksThisFrame = 0x38; // int32
            public const nint m_nTotalTicks = 0x3C; // int32
        }
        // Parent: EventAdvanceTick_t
        // Fields count: 0
        public static class EventServerAdvanceTick_t {
        }
        // Parent: EventPostAdvanceTick_t
        // Fields count: 0
        public static class EventServerPostAdvanceTick_t {
        }
        // Parent: EventAdvanceTick_t
        // Fields count: 0
        public static class EventClientAdvanceTick_t {
        }
        // Parent: EventPostAdvanceTick_t
        // Fields count: 0
        public static class EventClientPostAdvanceTick_t {
        }
        // Parent: None
        // Fields count: 0
        public static class EventClientPredictionPostNetupdate_t {
        }
        // Parent: None
        // Fields count: 1
        public static class EventClientPollNetworking_t {
            public const nint m_nTickCount = 0x0; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class EventClientProcessNetworking_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventClientPreSimulate_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventClientSimulate_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventServerPollNetworking_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventServerProcessNetworking_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventServerSimulate_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventServerPostSimulate_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventClientPostSimulate_t {
        }
        // Parent: EventSimulate_t
        // Fields count: 0
        public static class EventClientPauseSimulate_t {
        }
        // Parent: None
        // Fields count: 1
        public static class EventPostDataUpdate_t {
            public const nint m_nCount = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class EventPreDataUpdate_t {
            public const nint m_nCount = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class EventAppShutdown_t {
            public const nint m_nDummy0 = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class CNetworkVarChainer {
            public const nint m_PathIndex = 0x20; // ChangeAccessorFieldPathIndex_t
        }
        // Parent: None
        // Fields count: 0
        public static class CVariantDefaultAllocator {
        }
        // Parent: None
        // Fields count: 0
        public static class EntOutput_t {
        }
        // Parent: None
        // Fields count: 7
        public static class EntComponentInfo_t {
            public const nint m_pName = 0x0; // char*
            public const nint m_pCPPClassname = 0x8; // char*
            public const nint m_pNetworkDataReferencedDescription = 0x10; // char*
            public const nint m_pNetworkDataReferencedPtrPropDescription = 0x18; // char*
            public const nint m_nRuntimeIndex = 0x20; // int32
            public const nint m_nFlags = 0x24; // uint32
            public const nint m_pBaseClassComponentHelper = 0x60; // CEntityComponentHelper*
        }
        // Parent: None
        // Fields count: 0
        public static class CEntityComponent {
        }
        // Parent: None
        // Fields count: 0
        public static class EntInput_t {
        }
        // Parent: None
        // Fields count: 4
        public static class CEntityComponentHelper {
            public const nint m_flags = 0x8; // uint32
            public const nint m_pInfo = 0x10; // EntComponentInfo_t*
            public const nint m_nPriority = 0x18; // int32
            public const nint m_pNext = 0x20; // CEntityComponentHelper*
        }
        // Parent: None
        // Fields count: 11
        public static class CEntityIdentity {
            public const nint m_nameStringableIndex = 0x14; // int32
            public const nint m_name = 0x18; // CUtlSymbolLarge
            public const nint m_designerName = 0x20; // CUtlSymbolLarge
            public const nint m_flags = 0x30; // uint32
            public const nint m_worldGroupId = 0x38; // WorldGroupId_t
            public const nint m_fDataObjectTypes = 0x3C; // uint32
            public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
            public const nint m_pPrev = 0x58; // CEntityIdentity*
            public const nint m_pNext = 0x60; // CEntityIdentity*
            public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
            public const nint m_pNextByClass = 0x70; // CEntityIdentity*
        }
        // Parent: None
        // Fields count: 0
        public static class CEmptyEntityInstance {
        }
        // Parent: None
        // Fields count: 4
        public static class CEntityInstance {
            public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
            public const nint m_pEntity = 0x10; // CEntityIdentity*
            public const nint m_CScriptComponent = 0x28; // CScriptComponent*
            public const nint m_bVisibleinPVS = 0x30; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class CEntityIOOutput {
            public const nint m_Value = 0x18; // CVariantBase<CVariantDefaultAllocator>
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CScriptComponent {
            public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
        }
    }
    // Module: host.dll
    // Classes count: 2
    // Enums count: 0
    public static class Host {
        // Parent: None
        // Fields count: 1
        public static class CAnimScriptBase {
            public const nint m_bIsValid = 0x8; // bool
        }
        // Parent: CAnimScriptBase
        // Fields count: 1
        public static class EmptyTestScript {
            public const nint m_hTest = 0x10; // CAnimScriptParam<float32>
        }
    }
    // Module: materialsystem2.dll
    // Classes count: 13
    // Enums count: 5
    public static class Materialsystem2 {
        // Alignment: 4
        // Members count: 4
        public enum HorizJustification_e : uint {
            HORIZ_JUSTIFICATION_LEFT = 0x0,
            HORIZ_JUSTIFICATION_CENTER = 0x1,
            HORIZ_JUSTIFICATION_RIGHT = 0x2,
            HORIZ_JUSTIFICATION_NONE = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum VertJustification_e : uint {
            VERT_JUSTIFICATION_TOP = 0x0,
            VERT_JUSTIFICATION_CENTER = 0x1,
            VERT_JUSTIFICATION_BOTTOM = 0x2,
            VERT_JUSTIFICATION_NONE = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum LayoutPositionType_e : uint {
            LAYOUTPOSITIONTYPE_VIEWPORT_RELATIVE = 0x0,
            LAYOUTPOSITIONTYPE_FRACTIONAL = 0x1,
            LAYOUTPOSITIONTYPE_NONE = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum BloomBlendMode_t : uint {
            BLOOM_BLEND_ADD = 0x0,
            BLOOM_BLEND_SCREEN = 0x1,
            BLOOM_BLEND_BLUR = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ViewFadeMode_t : uint {
            VIEW_FADE_CONSTANT_COLOR = 0x0,
            VIEW_FADE_MODULATE = 0x1,
            VIEW_FADE_MOD2X = 0x2
        }
        // Parent: None
        // Fields count: 1
        public static class MaterialParam_t {
            public const nint m_name = 0x0; // CUtlString
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamInt_t {
            public const nint m_nValue = 0x8; // int32
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamFloat_t {
            public const nint m_flValue = 0x8; // float32
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamVector_t {
            public const nint m_value = 0x8; // Vector4D
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamTexture_t {
            public const nint m_pValue = 0x8; // CStrongHandle<InfoForResourceTypeCTextureBase>
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamString_t {
            public const nint m_value = 0x8; // CUtlString
        }
        // Parent: MaterialParam_t
        // Fields count: 1
        public static class MaterialParamBuffer_t {
            public const nint m_value = 0x8; // CUtlBinaryBlock
        }
        // Parent: None
        // Fields count: 14
        public static class MaterialResourceData_t {
            public const nint m_materialName = 0x0; // CUtlString
            public const nint m_shaderName = 0x8; // CUtlString
            public const nint m_intParams = 0x10; // CUtlVector<MaterialParamInt_t>
            public const nint m_floatParams = 0x28; // CUtlVector<MaterialParamFloat_t>
            public const nint m_vectorParams = 0x40; // CUtlVector<MaterialParamVector_t>
            public const nint m_textureParams = 0x58; // CUtlVector<MaterialParamTexture_t>
            public const nint m_dynamicParams = 0x70; // CUtlVector<MaterialParamBuffer_t>
            public const nint m_dynamicTextureParams = 0x88; // CUtlVector<MaterialParamBuffer_t>
            public const nint m_intAttributes = 0xA0; // CUtlVector<MaterialParamInt_t>
            public const nint m_floatAttributes = 0xB8; // CUtlVector<MaterialParamFloat_t>
            public const nint m_vectorAttributes = 0xD0; // CUtlVector<MaterialParamVector_t>
            public const nint m_textureAttributes = 0xE8; // CUtlVector<MaterialParamTexture_t>
            public const nint m_stringAttributes = 0x100; // CUtlVector<MaterialParamString_t>
            public const nint m_renderAttributesUsed = 0x118; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Fields count: 15
        public static class PostProcessingTonemapParameters_t {
            public const nint m_flExposureBias = 0x0; // float32
            public const nint m_flShoulderStrength = 0x4; // float32
            public const nint m_flLinearStrength = 0x8; // float32
            public const nint m_flLinearAngle = 0xC; // float32
            public const nint m_flToeStrength = 0x10; // float32
            public const nint m_flToeNum = 0x14; // float32
            public const nint m_flToeDenom = 0x18; // float32
            public const nint m_flWhitePoint = 0x1C; // float32
            public const nint m_flLuminanceSource = 0x20; // float32
            public const nint m_flExposureBiasShadows = 0x24; // float32
            public const nint m_flExposureBiasHighlights = 0x28; // float32
            public const nint m_flMinShadowLum = 0x2C; // float32
            public const nint m_flMaxShadowLum = 0x30; // float32
            public const nint m_flMinHighlightLum = 0x34; // float32
            public const nint m_flMaxHighlightLum = 0x38; // float32
        }
        // Parent: None
        // Fields count: 10
        public static class PostProcessingBloomParameters_t {
            public const nint m_blendMode = 0x0; // BloomBlendMode_t
            public const nint m_flBloomStrength = 0x4; // float32
            public const nint m_flScreenBloomStrength = 0x8; // float32
            public const nint m_flBlurBloomStrength = 0xC; // float32
            public const nint m_flBloomThreshold = 0x10; // float32
            public const nint m_flBloomThresholdWidth = 0x14; // float32
            public const nint m_flSkyboxBloomStrength = 0x18; // float32
            public const nint m_flBloomStartValue = 0x1C; // float32
            public const nint m_flBlurWeight = 0x20; // float32[5]
            public const nint m_vBlurTint = 0x34; // Vector[5]
        }
        // Parent: None
        // Fields count: 6
        public static class PostProcessingVignetteParameters_t {
            public const nint m_flVignetteStrength = 0x0; // float32
            public const nint m_vCenter = 0x4; // Vector2D
            public const nint m_flRadius = 0xC; // float32
            public const nint m_flRoundness = 0x10; // float32
            public const nint m_flFeather = 0x14; // float32
            public const nint m_vColorTint = 0x18; // 
        }
        // Parent: None
        // Fields count: 5
        public static class PostProcessingLocalContrastParameters_t {
            public const nint m_flLocalContrastStrength = 0x0; // float32
            public const nint m_flLocalContrastEdgeStrength = 0x4; // float32
            public const nint m_flLocalContrastVignetteStart = 0x8; // float32
            public const nint m_flLocalContrastVignetteEnd = 0xC; // float32
            public const nint m_flLocalContrastVignetteBlur = 0x10; // float32
        }
        // Parent: None
        // Fields count: 11
        public static class PostProcessingResource_t {
            public const nint m_bHasTonemapParams = 0x0; // bool
            public const nint m_toneMapParams = 0x4; // PostProcessingTonemapParameters_t
            public const nint m_bHasBloomParams = 0x40; // bool
            public const nint m_bloomParams = 0x44; // PostProcessingBloomParameters_t
            public const nint m_bHasVignetteParams = 0xB4; // bool
            public const nint m_vignetteParams = 0xB8; // PostProcessingVignetteParameters_t
            public const nint m_bHasLocalContrastParams = 0xDC; // bool
            public const nint m_localConstrastParams = 0xE0; // PostProcessingLocalContrastParameters_t
            public const nint m_nColorCorrectionVolumeDim = 0xF4; // int32
            public const nint m_colorCorrectionVolumeData = 0xF8; // CUtlBinaryBlock
            public const nint m_bHasColorCorrection = 0x110; // bool
        }
    }
    // Module: meshsystem.dll
    // Classes count: 0
    // Enums count: 0
    public static class Meshsystem {
    }
    // Module: networksystem.dll
    // Classes count: 1
    // Enums count: 0
    public static class Networksystem {
        // Parent: None
        // Fields count: 1
        public static class ChangeAccessorFieldPathIndex_t {
            public const nint m_Value = 0x0; // int16
        }
    }
    // Module: panorama.dll
    // Classes count: 0
    // Enums count: 2
    public static class Panorama {
        // Alignment: 4
        // Members count: 13
        public enum ELayoutNodeType : uint {
            ROOT = 0x0,
            STYLES = 0x1,
            SCRIPT_BODY = 0x2,
            SCRIPTS = 0x3,
            SNIPPETS = 0x4,
            INCLUDE = 0x5,
            SNIPPET = 0x6,
            PANEL = 0x7,
            PANEL_ATTRIBUTE = 0x8,
            PANEL_ATTRIBUTE_VALUE = 0x9,
            REFERENCE_CONTENT = 0xA,
            REFERENCE_COMPILED = 0xB,
            REFERENCE_PASSTHROUGH = 0xC
        }
        // Alignment: 4
        // Members count: 15
        public enum EStyleNodeType : uint {
            ROOT = 0x0,
            EXPRESSION = 0x1,
            PROPERTY = 0x2,
            DEFINE = 0x3,
            IMPORT = 0x4,
            KEYFRAMES = 0x5,
            KEYFRAME_SELECTOR = 0x6,
            STYLE_SELECTOR = 0x7,
            WHITESPACE = 0x8,
            EXPRESSION_TEXT = 0x9,
            EXPRESSION_URL = 0xA,
            EXPRESSION_CONCAT = 0xB,
            REFERENCE_CONTENT = 0xC,
            REFERENCE_COMPILED = 0xD,
            REFERENCE_PASSTHROUGH = 0xE
        }
    }
    // Module: particles.dll
    // Classes count: 441
    // Enums count: 71
    public static class Particles {
        // Alignment: 4
        // Members count: 6
        public enum ParticleControlPointAxis_t : uint {
            PARTICLE_CP_AXIS_X = 0x0,
            PARTICLE_CP_AXIS_Y = 0x1,
            PARTICLE_CP_AXIS_Z = 0x2,
            PARTICLE_CP_AXIS_NEGATIVE_X = 0x3,
            PARTICLE_CP_AXIS_NEGATIVE_Y = 0x4,
            PARTICLE_CP_AXIS_NEGATIVE_Z = 0x5
        }
        // Alignment: 4
        // Members count: 6
        public enum ParticleImpulseType_t : uint {
            IMPULSE_TYPE_NONE = 0x0,
            IMPULSE_TYPE_GENERIC = 0x1,
            IMPULSE_TYPE_ROPE = 0x2,
            IMPULSE_TYPE_EXPLOSION = 0x4,
            IMPULSE_TYPE_EXPLOSION_UNDERWATER = 0x8,
            IMPULSE_TYPE_PARTICLE_SYSTEM = 0x10
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleFalloffFunction_t : uint {
            PARTICLE_FALLOFF_CONSTANT = 0x0,
            PARTICLE_FALLOFF_LINEAR = 0x1,
            PARTICLE_FALLOFF_EXPONENTIAL = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum AnimationType_t : uint {
            ANIMATION_TYPE_FIXED_RATE = 0x0,
            ANIMATION_TYPE_FIT_LIFETIME = 0x1,
            ANIMATION_TYPE_MANUAL_FRAMES = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ClosestPointTestType_t : uint {
            PARTICLE_CLOSEST_TYPE_BOX = 0x0,
            PARTICLE_CLOSEST_TYPE_CAPSULE = 0x1,
            PARTICLE_CLOSEST_TYPE_HYBRID = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum InheritableBoolType_t : uint {
            INHERITABLE_BOOL_INHERIT = 0x0,
            INHERITABLE_BOOL_FALSE = 0x1,
            INHERITABLE_BOOL_TRUE = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleHitboxBiasType_t : uint {
            PARTICLE_HITBOX_BIAS_ENTITY = 0x0,
            PARTICLE_HITBOX_BIAS_HITBOX = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleAttrBoxFlags_t : uint {
            PARTICLE_ATTR_BOX_FLAGS_NONE = 0x0,
            PARTICLE_ATTR_BOX_FLAGS_WATER = 0x1
        }
        // Alignment: 4
        // Members count: 7
        public enum PFuncVisualizationType_t : uint {
            PFUNC_VISUALIZATION_SPHERE_WIREFRAME = 0x0,
            PFUNC_VISUALIZATION_SPHERE_SOLID = 0x1,
            PFUNC_VISUALIZATION_BOX = 0x2,
            PFUNC_VISUALIZATION_RING = 0x3,
            PFUNC_VISUALIZATION_PLANE = 0x4,
            PFUNC_VISUALIZATION_LINE = 0x5,
            PFUNC_VISUALIZATION_CYLINDER = 0x6
        }
        // Alignment: 4
        // Members count: 3
        public enum PetGroundType_t : uint {
            PET_GROUND_NONE = 0x0,
            PET_GROUND_GRID = 0x1,
            PET_GROUND_PLANE = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum SpriteCardShaderType_t : uint {
            SPRITECARD_SHADER_BASE = 0x0,
            SPRITECARD_SHADER_CUSTOM = 0x1
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleTopology_t : uint {
            PARTICLE_TOPOLOGY_POINTS = 0x0,
            PARTICLE_TOPOLOGY_LINES = 0x1,
            PARTICLE_TOPOLOGY_TRIS = 0x2,
            PARTICLE_TOPOLOGY_QUADS = 0x3,
            PARTICLE_TOPOLOGY_CUBES = 0x4
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleDetailLevel_t : uint {
            PARTICLEDETAIL_LOW = 0x0,
            PARTICLEDETAIL_MEDIUM = 0x1,
            PARTICLEDETAIL_HIGH = 0x2,
            PARTICLEDETAIL_ULTRA = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleTraceSet_t : uint {
            PARTICLE_TRACE_SET_ALL = 0x0,
            PARTICLE_TRACE_SET_STATIC = 0x1,
            PARTICLE_TRACE_SET_STATIC_AND_KEYFRAMED = 0x2,
            PARTICLE_TRACE_SET_DYNAMIC = 0x3
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleCollisionMode_t : uint {
            COLLISION_MODE_PER_PARTICLE_TRACE = 0x3,
            COLLISION_MODE_USE_NEAREST_TRACE = 0x2,
            COLLISION_MODE_PER_FRAME_PLANESET = 0x1,
            COLLISION_MODE_INITIAL_TRACE_DOWN = 0x0,
            COLLISION_MODE_DISABLED = 0xFFFFFFFFFFFFFFFF
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleColorBlendMode_t : uint {
            PARTICLEBLEND_DEFAULT = 0x0,
            PARTICLEBLEND_OVERLAY = 0x1,
            PARTICLEBLEND_DARKEN = 0x2,
            PARTICLEBLEND_LIGHTEN = 0x3,
            PARTICLEBLEND_MULTIPLY = 0x4
        }
        // Alignment: 4
        // Members count: 7
        public enum Detail2Combo_t : uint {
            DETAIL_2_COMBO_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
            DETAIL_2_COMBO_OFF = 0x0,
            DETAIL_2_COMBO_ADD = 0x1,
            DETAIL_2_COMBO_ADD_SELF_ILLUM = 0x2,
            DETAIL_2_COMBO_MOD2X = 0x3,
            DETAIL_2_COMBO_MUL = 0x4,
            DETAIL_2_COMBO_CROSSFADE = 0x5
        }
        // Alignment: 4
        // Members count: 4
        public enum DetailCombo_t : uint {
            DETAIL_COMBO_OFF = 0x0,
            DETAIL_COMBO_ADD = 0x1,
            DETAIL_COMBO_ADD_SELF_ILLUM = 0x2,
            DETAIL_COMBO_MOD2X = 0x3
        }
        // Alignment: 4
        // Members count: 9
        public enum ScalarExpressionType_t : uint {
            SCALAR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
            SCALAR_EXPRESSION_ADD = 0x0,
            SCALAR_EXPRESSION_SUBTRACT = 0x1,
            SCALAR_EXPRESSION_MUL = 0x2,
            SCALAR_EXPRESSION_DIVIDE = 0x3,
            SCALAR_EXPRESSION_INPUT_1 = 0x4,
            SCALAR_EXPRESSION_MIN = 0x5,
            SCALAR_EXPRESSION_MAX = 0x6,
            SCALAR_EXPRESSION_MOD = 0x7
        }
        // Alignment: 4
        // Members count: 9
        public enum VectorExpressionType_t : uint {
            VECTOR_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
            VECTOR_EXPRESSION_ADD = 0x0,
            VECTOR_EXPRESSION_SUBTRACT = 0x1,
            VECTOR_EXPRESSION_MUL = 0x2,
            VECTOR_EXPRESSION_DIVIDE = 0x3,
            VECTOR_EXPRESSION_INPUT_1 = 0x4,
            VECTOR_EXPRESSION_MIN = 0x5,
            VECTOR_EXPRESSION_MAX = 0x6,
            VECTOR_EXPRESSION_CROSSPRODUCT = 0x7
        }
        // Alignment: 4
        // Members count: 7
        public enum VectorFloatExpressionType_t : uint {
            VECTOR_FLOAT_EXPRESSION_UNINITIALIZED = 0xFFFFFFFFFFFFFFFF,
            VECTOR_FLOAT_EXPRESSION_DOTPRODUCT = 0x0,
            VECTOR_FLOAT_EXPRESSION_DISTANCE = 0x1,
            VECTOR_FLOAT_EXPRESSION_DISTANCESQR = 0x2,
            VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTH = 0x3,
            VECTOR_FLOAT_EXPRESSION_INPUT1_LENGTHSQR = 0x4,
            VECTOR_FLOAT_EXPRESSION_INPUT1_NOISE = 0x5
        }
        // Alignment: 4
        // Members count: 4
        public enum MissingParentInheritBehavior_t : uint {
            MISSING_PARENT_DO_NOTHING = 0xFFFFFFFFFFFFFFFF,
            MISSING_PARENT_KILL = 0x0,
            MISSING_PARENT_FIND_NEW = 0x1,
            MISSING_PARENT_SAME_INDEX = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum HitboxLerpType_t : uint {
            HITBOX_LERP_LIFETIME = 0x0,
            HITBOX_LERP_CONSTANT = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleSelection_t : uint {
            PARTICLE_SELECTION_FIRST = 0x0,
            PARTICLE_SELECTION_LAST = 0x1,
            PARTICLE_SELECTION_NUMBER = 0x2
        }
        // Alignment: 4
        // Members count: 12
        public enum ParticlePinDistance_t : uint {
            PARTICLE_PIN_DISTANCE_NONE = 0xFFFFFFFFFFFFFFFF,
            PARTICLE_PIN_DISTANCE_NEIGHBOR = 0x0,
            PARTICLE_PIN_DISTANCE_FARTHEST = 0x1,
            PARTICLE_PIN_DISTANCE_FIRST = 0x2,
            PARTICLE_PIN_DISTANCE_LAST = 0x3,
            PARTICLE_PIN_DISTANCE_CENTER = 0x5,
            PARTICLE_PIN_DISTANCE_CP = 0x6,
            PARTICLE_PIN_DISTANCE_CP_PAIR_EITHER = 0x7,
            PARTICLE_PIN_DISTANCE_CP_PAIR_BOTH = 0x8,
            PARTICLE_PIN_SPEED = 0x9,
            PARTICLE_PIN_COLLECTION_AGE = 0xA,
            PARTICLE_PIN_FLOAT_VALUE = 0xB
        }
        // Alignment: 4
        // Members count: 13
        public enum ParticleColorBlendType_t : uint {
            PARTICLE_COLOR_BLEND_MULTIPLY = 0x0,
            PARTICLE_COLOR_BLEND_MULTIPLY2X = 0x1,
            PARTICLE_COLOR_BLEND_DIVIDE = 0x2,
            PARTICLE_COLOR_BLEND_ADD = 0x3,
            PARTICLE_COLOR_BLEND_SUBTRACT = 0x4,
            PARTICLE_COLOR_BLEND_MOD2X = 0x5,
            PARTICLE_COLOR_BLEND_SCREEN = 0x6,
            PARTICLE_COLOR_BLEND_MAX = 0x7,
            PARTICLE_COLOR_BLEND_MIN = 0x8,
            PARTICLE_COLOR_BLEND_REPLACE = 0x9,
            PARTICLE_COLOR_BLEND_AVERAGE = 0xA,
            PARTICLE_COLOR_BLEND_NEGATE = 0xB,
            PARTICLE_COLOR_BLEND_LUMINANCE = 0xC
        }
        // Alignment: 4
        // Members count: 6
        public enum ParticleSetMethod_t : uint {
            PARTICLE_SET_REPLACE_VALUE = 0x0,
            PARTICLE_SET_SCALE_INITIAL_VALUE = 0x1,
            PARTICLE_SET_ADD_TO_INITIAL_VALUE = 0x2,
            PARTICLE_SET_RAMP_CURRENT_VALUE = 0x3,
            PARTICLE_SET_SCALE_CURRENT_VALUE = 0x4,
            PARTICLE_SET_ADD_TO_CURRENT_VALUE = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleDirectionNoiseType_t : uint {
            PARTICLE_DIR_NOISE_PERLIN = 0x0,
            PARTICLE_DIR_NOISE_CURL = 0x1,
            PARTICLE_DIR_NOISE_WORLEY_BASIC = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleRotationLockType_t : uint {
            PARTICLE_ROTATION_LOCK_NONE = 0x0,
            PARTICLE_ROTATION_LOCK_ROTATIONS = 0x1,
            PARTICLE_ROTATION_LOCK_NORMAL = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleEndcapMode_t : uint {
            PARTICLE_ENDCAP_ALWAYS_ON = 0xFFFFFFFFFFFFFFFF,
            PARTICLE_ENDCAP_ENDCAP_OFF = 0x0,
            PARTICLE_ENDCAP_ENDCAP_ON = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleLightingQuality_t : uint {
            PARTICLE_LIGHTING_PER_PARTICLE = 0x0,
            PARTICLE_LIGHTING_PER_VERTEX = 0x1,
            PARTICLE_LIGHTING_PER_PIXEL = 0xFFFFFFFFFFFFFFFF
        }
        // Alignment: 4
        // Members count: 2
        public enum StandardLightingAttenuationStyle_t : uint {
            LIGHT_STYLE_OLD = 0x0,
            LIGHT_STYLE_NEW = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleTraceMissBehavior_t : uint {
            PARTICLE_TRACE_MISS_BEHAVIOR_NONE = 0x0,
            PARTICLE_TRACE_MISS_BEHAVIOR_KILL = 0x1,
            PARTICLE_TRACE_MISS_BEHAVIOR_TRACE_END = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleOrientationSetMode_t : uint {
            PARTICLE_ORIENTATION_SET_FROM_VELOCITY = 0x0,
            PARTICLE_ORIENTATION_SET_FROM_ROTATIONS = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleLightnintBranchBehavior_t : uint {
            PARTICLE_LIGHTNING_BRANCH_CURRENT_DIR = 0x0,
            PARTICLE_LIGHTNING_BRANCH_ENDPOINT_DIR = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleLightFogLightingMode_t : uint {
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_NONE = 0x0,
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC = 0x2,
            PARTICLE_LIGHT_FOG_LIGHTING_MODE_DYNAMIC_NOSHADOWS = 0x4
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleSequenceCropOverride_t : uint {
            PARTICLE_SEQUENCE_CROP_OVERRIDE_DEFAULT = 0xFFFFFFFFFFFFFFFF,
            PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_OFF = 0x0,
            PARTICLE_SEQUENCE_CROP_OVERRIDE_FORCE_ON = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleParentSetMode_t : uint {
            PARTICLE_SET_PARENT_NO = 0x0,
            PARTICLE_SET_PARENT_IMMEDIATE = 0x1,
            PARTICLE_SET_PARENT_ROOT = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum MaterialProxyType_t : uint {
            MATERIAL_PROXY_STATUS_EFFECT = 0x0,
            MATERIAL_PROXY_TINT = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum BBoxVolumeType_t : uint {
            BBOX_VOLUME = 0x0,
            BBOX_DIMENSIONS = 0x1,
            BBOX_MINS_MAXS = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleHitboxDataSelection_t : uint {
            PARTICLE_HITBOX_AVERAGE_SPEED = 0x0,
            PARTICLE_HITBOX_COUNT = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum SnapshotIndexType_t : uint {
            SNAPSHOT_INDEX_INCREMENT = 0x0,
            SNAPSHOT_INDEX_DIRECT = 0x1
        }
        // Alignment: 4
        // Members count: 6
        public enum ParticleOrientationChoiceList_t : uint {
            PARTICLE_ORIENTATION_SCREEN_ALIGNED = 0x0,
            PARTICLE_ORIENTATION_SCREEN_Z_ALIGNED = 0x1,
            PARTICLE_ORIENTATION_WORLD_Z_ALIGNED = 0x2,
            PARTICLE_ORIENTATION_ALIGN_TO_PARTICLE_NORMAL = 0x3,
            PARTICLE_ORIENTATION_SCREENALIGN_TO_PARTICLE_NORMAL = 0x4,
            PARTICLE_ORIENTATION_FULL_3AXIS_ROTATION = 0x5
        }
        // Alignment: 4
        // Members count: 7
        public enum ParticleOutputBlendMode_t : uint {
            PARTICLE_OUTPUT_BLEND_MODE_ALPHA = 0x0,
            PARTICLE_OUTPUT_BLEND_MODE_ADD = 0x1,
            PARTICLE_OUTPUT_BLEND_MODE_BLEND_ADD = 0x2,
            PARTICLE_OUTPUT_BLEND_MODE_HALF_BLEND_ADD = 0x3,
            PARTICLE_OUTPUT_BLEND_MODE_NEG_HALF_BLEND_ADD = 0x4,
            PARTICLE_OUTPUT_BLEND_MODE_MOD2X = 0x5,
            PARTICLE_OUTPUT_BLEND_MODE_LIGHTEN = 0x6
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleAlphaReferenceType_t : uint {
            PARTICLE_ALPHA_REFERENCE_ALPHA_ALPHA = 0x0,
            PARTICLE_ALPHA_REFERENCE_OPAQUE_ALPHA = 0x1,
            PARTICLE_ALPHA_REFERENCE_ALPHA_OPAQUE = 0x2,
            PARTICLE_ALPHA_REFERENCE_OPAQUE_OPAQUE = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum BlurFilterType_t : uint {
            BLURFILTER_GAUSSIAN = 0x0,
            BLURFILTER_BOX = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleLightTypeChoiceList_t : uint {
            PARTICLE_LIGHT_TYPE_POINT = 0x0,
            PARTICLE_LIGHT_TYPE_SPOT = 0x1,
            PARTICLE_LIGHT_TYPE_FX = 0x2,
            PARTICLE_LIGHT_TYPE_CAPSULE = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleLightUnitChoiceList_t : uint {
            PARTICLE_LIGHT_UNIT_CANDELAS = 0x0,
            PARTICLE_LIGHT_UNIT_LUMENS = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleOmni2LightTypeChoiceList_t : uint {
            PARTICLE_OMNI2_LIGHT_TYPE_POINT = 0x0,
            PARTICLE_OMNI2_LIGHT_TYPE_SPHERE = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleLightBehaviorChoiceList_t : uint {
            PARTICLE_LIGHT_BEHAVIOR_FOLLOW_DIRECTION = 0x0,
            PARTICLE_LIGHT_BEHAVIOR_ROPE = 0x1,
            PARTICLE_LIGHT_BEHAVIOR_TRAILS = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleDepthFeatheringMode_t : uint {
            PARTICLE_DEPTH_FEATHERING_OFF = 0x0,
            PARTICLE_DEPTH_FEATHERING_ON_OPTIONAL = 0x1,
            PARTICLE_DEPTH_FEATHERING_ON_REQUIRED = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleVRHandChoiceList_t : uint {
            PARTICLE_VRHAND_LEFT = 0x0,
            PARTICLE_VRHAND_RIGHT = 0x1,
            PARTICLE_VRHAND_CP = 0x2,
            PARTICLE_VRHAND_CP_OBJECT = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum ParticleSortingChoiceList_t : uint {
            PARTICLE_SORTING_NEAREST = 0x0,
            PARTICLE_SORTING_CREATION_TIME = 0x1
        }
        // Alignment: 4
        // Members count: 10
        public enum SpriteCardTextureType_t : uint {
            SPRITECARD_TEXTURE_DIFFUSE = 0x0,
            SPRITECARD_TEXTURE_ZOOM = 0x1,
            SPRITECARD_TEXTURE_1D_COLOR_LOOKUP = 0x2,
            SPRITECARD_TEXTURE_UVDISTORTION = 0x3,
            SPRITECARD_TEXTURE_UVDISTORTION_ZOOM = 0x4,
            SPRITECARD_TEXTURE_NORMALMAP = 0x5,
            SPRITECARD_TEXTURE_ANIMMOTIONVEC = 0x6,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_A = 0x7,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_B = 0x8,
            SPRITECARD_TEXTURE_SPHERICAL_HARMONICS_C = 0x9
        }
        // Alignment: 4
        // Members count: 15
        public enum SpriteCardTextureChannel_t : uint {
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB = 0x0,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA = 0x1,
            SPRITECARD_TEXTURE_CHANNEL_MIX_A = 0x2,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A = 0x3,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_ALPHAMASK = 0x4,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_RGBMASK = 0x5,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGBA_RGBALPHA = 0x6,
            SPRITECARD_TEXTURE_CHANNEL_MIX_A_RGBALPHA = 0x7,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RGB_A_RGBALPHA = 0x8,
            SPRITECARD_TEXTURE_CHANNEL_MIX_R = 0x9,
            SPRITECARD_TEXTURE_CHANNEL_MIX_G = 0xA,
            SPRITECARD_TEXTURE_CHANNEL_MIX_B = 0xB,
            SPRITECARD_TEXTURE_CHANNEL_MIX_RALPHA = 0xC,
            SPRITECARD_TEXTURE_CHANNEL_MIX_GALPHA = 0xD,
            SPRITECARD_TEXTURE_CHANNEL_MIX_BALPHA = 0xE
        }
        // Alignment: 4
        // Members count: 14
        public enum SpriteCardPerParticleScale_t : uint {
            SPRITECARD_TEXTURE_PP_SCALE_NONE = 0x0,
            SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_AGE = 0x1,
            SPRITECARD_TEXTURE_PP_SCALE_ANIMATION_FRAME = 0x2,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA1 = 0x3,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_EXTRA_DATA2 = 0x4,
            SPRITECARD_TEXTURE_PP_SCALE_PARTICLE_ALPHA = 0x5,
            SPRITECARD_TEXTURE_PP_SCALE_SHADER_RADIUS = 0x6,
            SPRITECARD_TEXTURE_PP_SCALE_ROLL = 0x7,
            SPRITECARD_TEXTURE_PP_SCALE_YAW = 0x8,
            SPRITECARD_TEXTURE_PP_SCALE_PITCH = 0x9,
            SPRITECARD_TEXTURE_PP_SCALE_RANDOM = 0xA,
            SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM = 0xB,
            SPRITECARD_TEXTURE_PP_SCALE_RANDOM_TIME = 0xC,
            SPRITECARD_TEXTURE_PP_SCALE_NEG_RANDOM_TIME = 0xD
        }
        // Alignment: 4
        // Members count: 7
        public enum ParticleTextureLayerBlendType_t : uint {
            SPRITECARD_TEXTURE_BLEND_MULTIPLY = 0x0,
            SPRITECARD_TEXTURE_BLEND_MOD2X = 0x1,
            SPRITECARD_TEXTURE_BLEND_REPLACE = 0x2,
            SPRITECARD_TEXTURE_BLEND_ADD = 0x3,
            SPRITECARD_TEXTURE_BLEND_SUBTRACT = 0x4,
            SPRITECARD_TEXTURE_BLEND_AVERAGE = 0x5,
            SPRITECARD_TEXTURE_BLEND_LUMINANCE = 0x6
        }
        // Alignment: 4
        // Members count: 6
        public enum ParticlePostProcessPriorityGroup_t : uint {
            PARTICLE_POST_PROCESS_PRIORITY_LEVEL_VOLUME = 0x0,
            PARTICLE_POST_PROCESS_PRIORITY_LEVEL_OVERRIDE = 0x1,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_EFFECT = 0x2,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_LOW = 0x3,
            PARTICLE_POST_PROCESS_PRIORITY_GAMEPLAY_STATE_HIGH = 0x4,
            PARTICLE_POST_PROCESS_PRIORITY_GLOBAL_UI = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum ParticleFogType_t : uint {
            PARTICLE_FOG_GAME_DEFAULT = 0x0,
            PARTICLE_FOG_ENABLED = 0x1,
            PARTICLE_FOG_DISABLED = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum TextureRepetitionMode_t : uint {
            TEXTURE_REPETITION_PARTICLE = 0x0,
            TEXTURE_REPETITION_PATH = 0x1
        }
        // Alignment: 4
        // Members count: 24
        public enum ParticleFloatType_t : uint {
            PF_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PF_TYPE_LITERAL = 0x0,
            PF_TYPE_NAMED_VALUE = 0x1,
            PF_TYPE_RANDOM_UNIFORM = 0x2,
            PF_TYPE_RANDOM_BIASED = 0x3,
            PF_TYPE_COLLECTION_AGE = 0x4,
            PF_TYPE_ENDCAP_AGE = 0x5,
            PF_TYPE_CONTROL_POINT_COMPONENT = 0x6,
            PF_TYPE_CONTROL_POINT_CHANGE_AGE = 0x7,
            PF_TYPE_CONTROL_POINT_SPEED = 0x8,
            PF_TYPE_PARTICLE_DETAIL_LEVEL = 0x9,
            PF_TYPE_CONCURRENT_DEF_COUNT = 0xA,
            PF_TYPE_CLOSEST_CAMERA_DISTANCE = 0xB,
            PF_TYPE_RENDERER_CAMERA_DISTANCE = 0xC,
            PF_TYPE_RENDERER_CAMERA_DOT_PRODUCT = 0xD,
            PF_TYPE_PARTICLE_NOISE = 0xE,
            PF_TYPE_PARTICLE_AGE = 0xF,
            PF_TYPE_PARTICLE_AGE_NORMALIZED = 0x10,
            PF_TYPE_PARTICLE_FLOAT = 0x11,
            PF_TYPE_PARTICLE_VECTOR_COMPONENT = 0x12,
            PF_TYPE_PARTICLE_SPEED = 0x13,
            PF_TYPE_PARTICLE_NUMBER = 0x14,
            PF_TYPE_PARTICLE_NUMBER_NORMALIZED = 0x15,
            PF_TYPE_COUNT = 0x16
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleFloatBiasType_t : uint {
            PF_BIAS_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PF_BIAS_TYPE_STANDARD = 0x0,
            PF_BIAS_TYPE_GAIN = 0x1,
            PF_BIAS_TYPE_EXPONENTIAL = 0x2,
            PF_BIAS_TYPE_COUNT = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum PFNoiseType_t : uint {
            PF_NOISE_TYPE_PERLIN = 0x0,
            PF_NOISE_TYPE_SIMPLEX = 0x1,
            PF_NOISE_TYPE_WORLEY = 0x2,
            PF_NOISE_TYPE_CURL = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum PFNoiseModifier_t : uint {
            PF_NOISE_MODIFIER_NONE = 0x0,
            PF_NOISE_MODIFIER_LINES = 0x1,
            PF_NOISE_MODIFIER_CLUMPS = 0x2,
            PF_NOISE_MODIFIER_RINGS = 0x3
        }
        // Alignment: 4
        // Members count: 6
        public enum PFNoiseTurbulence_t : uint {
            PF_NOISE_TURB_NONE = 0x0,
            PF_NOISE_TURB_HIGHLIGHT = 0x1,
            PF_NOISE_TURB_FEEDBACK = 0x2,
            PF_NOISE_TURB_LOOPY = 0x3,
            PF_NOISE_TURB_CONTRAST = 0x4,
            PF_NOISE_TURB_ALTERNATE = 0x5
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleFloatRandomMode_t : uint {
            PF_RANDOM_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PF_RANDOM_MODE_CONSTANT = 0x0,
            PF_RANDOM_MODE_VARYING = 0x1,
            PF_RANDOM_MODE_COUNT = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum ParticleFloatInputMode_t : uint {
            PF_INPUT_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PF_INPUT_MODE_CLAMPED = 0x0,
            PF_INPUT_MODE_LOOPED = 0x1,
            PF_INPUT_MODE_COUNT = 0x2
        }
        // Alignment: 4
        // Members count: 8
        public enum ParticleFloatMapType_t : uint {
            PF_MAP_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PF_MAP_TYPE_DIRECT = 0x0,
            PF_MAP_TYPE_MULT = 0x1,
            PF_MAP_TYPE_REMAP = 0x2,
            PF_MAP_TYPE_REMAP_BIASED = 0x3,
            PF_MAP_TYPE_CURVE = 0x4,
            PF_MAP_TYPE_NOTCHED = 0x5,
            PF_MAP_TYPE_COUNT = 0x6
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleTransformType_t : uint {
            PT_TYPE_INVALID = 0x0,
            PT_TYPE_NAMED_VALUE = 0x1,
            PT_TYPE_CONTROL_POINT = 0x2,
            PT_TYPE_CONTROL_POINT_RANGE = 0x3,
            PT_TYPE_COUNT = 0x4
        }
        // Alignment: 4
        // Members count: 5
        public enum ParticleModelType_t : uint {
            PM_TYPE_INVALID = 0x0,
            PM_TYPE_NAMED_VALUE_MODEL = 0x1,
            PM_TYPE_NAMED_VALUE_EHANDLE = 0x2,
            PM_TYPE_CONTROL_POINT = 0x3,
            PM_TYPE_COUNT = 0x4
        }
        // Alignment: 4
        // Members count: 19
        public enum ParticleVecType_t : uint {
            PVEC_TYPE_INVALID = 0xFFFFFFFFFFFFFFFF,
            PVEC_TYPE_LITERAL = 0x0,
            PVEC_TYPE_LITERAL_COLOR = 0x1,
            PVEC_TYPE_NAMED_VALUE = 0x2,
            PVEC_TYPE_PARTICLE_VECTOR = 0x3,
            PVEC_TYPE_PARTICLE_VELOCITY = 0x4,
            PVEC_TYPE_CP_VALUE = 0x5,
            PVEC_TYPE_CP_RELATIVE_POSITION = 0x6,
            PVEC_TYPE_CP_RELATIVE_DIR = 0x7,
            PVEC_TYPE_CP_RELATIVE_RANDOM_DIR = 0x8,
            PVEC_TYPE_FLOAT_COMPONENTS = 0x9,
            PVEC_TYPE_FLOAT_INTERP_CLAMPED = 0xA,
            PVEC_TYPE_FLOAT_INTERP_OPEN = 0xB,
            PVEC_TYPE_FLOAT_INTERP_GRADIENT = 0xC,
            PVEC_TYPE_RANDOM_UNIFORM = 0xD,
            PVEC_TYPE_RANDOM_UNIFORM_OFFSET = 0xE,
            PVEC_TYPE_CP_DELTA = 0xF,
            PVEC_TYPE_CLOSEST_CAMERA_POSITION = 0x10,
            PVEC_TYPE_COUNT = 0x11
        }
        // Parent: None
        // Fields count: 2
        public static class CRandomNumberGeneratorParameters {
            public const nint m_bDistributeEvenly = 0x0; // bool
            public const nint m_nSeed = 0x4; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class MaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_nVariableField = 0x8; // ParticleAttributeIndex_t
            public const nint m_flScale = 0xC; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class RenderProjectedMaterial_t {
            public const nint m_hMaterial = 0x0; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: None
        // Fields count: 1
        public static class ParticleAttributeIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class ParticlePreviewBodyGroup_t {
            public const nint m_bodyGroupName = 0x0; // CUtlString
            public const nint m_nValue = 0x8; // int32
        }
        // Parent: None
        // Fields count: 16
        public static class ParticlePreviewState_t {
            public const nint m_previewModel = 0x0; // CUtlString
            public const nint m_nModSpecificData = 0x8; // uint32
            public const nint m_groundType = 0xC; // PetGroundType_t
            public const nint m_sequenceName = 0x10; // CUtlString
            public const nint m_nFireParticleOnSequenceFrame = 0x18; // int32
            public const nint m_hitboxSetName = 0x20; // CUtlString
            public const nint m_materialGroupName = 0x28; // CUtlString
            public const nint m_vecBodyGroups = 0x30; // CUtlVector<ParticlePreviewBodyGroup_t>
            public const nint m_flPlaybackSpeed = 0x48; // float32
            public const nint m_flParticleSimulationRate = 0x4C; // float32
            public const nint m_bShouldDrawHitboxes = 0x50; // bool
            public const nint m_bShouldDrawAttachments = 0x51; // bool
            public const nint m_bShouldDrawAttachmentNames = 0x52; // bool
            public const nint m_bShouldDrawControlPointAxes = 0x53; // bool
            public const nint m_bAnimationNonLooping = 0x54; // bool
            public const nint m_vecPreviewGravity = 0x58; // 
        }
        // Parent: None
        // Fields count: 6
        public static class ParticleControlPointDriver_t {
            public const nint m_iControlPoint = 0x0; // int32
            public const nint m_iAttachType = 0x4; // ParticleAttachment_t
            public const nint m_attachmentName = 0x8; // CUtlString
            public const nint m_vecOffset = 0x10; // 
            public const nint m_angOffset = 0x1C; // QAngle
            public const nint m_entityName = 0x28; // CUtlString
        }
        // Parent: None
        // Fields count: 3
        public static class ParticleControlPointConfiguration_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_drivers = 0x8; // CUtlVector<ParticleControlPointDriver_t>
            public const nint m_previewState = 0x20; // ParticlePreviewState_t
        }
        // Parent: None
        // Fields count: 0
        public static class IParticleCollection {
        }
        // Parent: None
        // Fields count: 0
        public static class IControlPointEditorData {
        }
        // Parent: None
        // Fields count: 0
        public static class IParticleSystemDefinition {
        }
        // Parent: None
        // Fields count: 18
        public static class CParticleVisibilityInputs {
            public const nint m_flCameraBias = 0x0; // float32
            public const nint m_nCPin = 0x4; // int32
            public const nint m_flProxyRadius = 0x8; // float32
            public const nint m_flInputMin = 0xC; // float32
            public const nint m_flInputMax = 0x10; // float32
            public const nint m_flNoPixelVisibilityFallback = 0x14; // float32
            public const nint m_flDistanceInputMin = 0x18; // float32
            public const nint m_flDistanceInputMax = 0x1C; // float32
            public const nint m_flDotInputMin = 0x20; // float32
            public const nint m_flDotInputMax = 0x24; // float32
            public const nint m_bDotCPAngles = 0x28; // bool
            public const nint m_bDotCameraAngles = 0x29; // bool
            public const nint m_flAlphaScaleMin = 0x2C; // float32
            public const nint m_flAlphaScaleMax = 0x30; // float32
            public const nint m_flRadiusScaleMin = 0x34; // float32
            public const nint m_flRadiusScaleMax = 0x38; // float32
            public const nint m_flRadiusScaleFOVBase = 0x3C; // float32
            public const nint m_bRightEye = 0x40; // bool
        }
        // Parent: None
        // Fields count: 8
        public static class CPathParameters {
            public const nint m_nStartControlPointNumber = 0x0; // int32
            public const nint m_nEndControlPointNumber = 0x4; // int32
            public const nint m_nBulgeControl = 0x8; // int32
            public const nint m_flBulge = 0xC; // float32
            public const nint m_flMidPoint = 0x10; // float32
            public const nint m_vStartPointOffset = 0x14; // 
            public const nint m_vMidPointOffset = 0x20; // 
            public const nint m_vEndOffset = 0x2C; // 
        }
        // Parent: None
        // Fields count: 5
        public static class ParticleChildrenInfo_t {
            public const nint m_ChildRef = 0x0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flDelay = 0x8; // float32
            public const nint m_bEndCap = 0xC; // bool
            public const nint m_bDisableChild = 0xD; // bool
            public const nint m_nDetailLevel = 0x10; // ParticleDetailLevel_t
        }
        // Parent: None
        // Fields count: 3
        public static class ControlPointReference_t {
            public const nint m_controlPointNameString = 0x0; // int32
            public const nint m_vOffsetFromControlPoint = 0x4; // 
            public const nint m_bOffsetInLocalSpace = 0x10; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class ModelReference_t {
            public const nint m_model = 0x0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_flRelativeProbabilityOfSpawn = 0x8; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class SequenceWeightedList_t {
            public const nint m_nSequence = 0x0; // int32
            public const nint m_flRelativeWeight = 0x4; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CollisionGroupContext_t {
            public const nint m_nCollisionGroupNumber = 0x0; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class PointDefinition_t {
            public const nint m_nControlPoint = 0x0; // int32
            public const nint m_bLocalCoords = 0x4; // bool
            public const nint m_vOffset = 0x8; // 
        }
        // Parent: PointDefinition_t
        // Fields count: 1
        public static class PointDefinitionWithTimeValues_t {
            public const nint m_flTimeDuration = 0x14; // float32
        }
        // Parent: IParticleSystemDefinition
        // Fields count: 64
        public static class CParticleSystemDefinition {
            public const nint m_nBehaviorVersion = 0x8; // int32
            public const nint m_PreEmissionOperators = 0x10; // CUtlVector<CParticleFunctionPreEmission*>
            public const nint m_Emitters = 0x28; // CUtlVector<CParticleFunctionEmitter*>
            public const nint m_Initializers = 0x40; // CUtlVector<CParticleFunctionInitializer*>
            public const nint m_Operators = 0x58; // CUtlVector<CParticleFunctionOperator*>
            public const nint m_ForceGenerators = 0x70; // CUtlVector<CParticleFunctionForce*>
            public const nint m_Constraints = 0x88; // CUtlVector<CParticleFunctionConstraint*>
            public const nint m_Renderers = 0xA0; // CUtlVector<CParticleFunctionRenderer*>
            public const nint m_Children = 0xB8; // CUtlVector<ParticleChildrenInfo_t>
            public const nint m_nFirstMultipleOverride_BackwardCompat = 0x178; // int32
            public const nint m_nInitialParticles = 0x210; // int32
            public const nint m_nMaxParticles = 0x214; // int32
            public const nint m_nGroupID = 0x218; // int32
            public const nint m_BoundingBoxMin = 0x21C; // 
            public const nint m_BoundingBoxMax = 0x228; // 
            public const nint m_flDepthSortBias = 0x234; // float32
            public const nint m_nSortOverridePositionCP = 0x238; // int32
            public const nint m_bInfiniteBounds = 0x23C; // bool
            public const nint m_bEnableNamedValues = 0x23D; // bool
            public const nint m_NamedValueDomain = 0x240; // CUtlString
            public const nint m_NamedValueLocals = 0x248; // CUtlVector<ParticleNamedValueSource_t*>
            public const nint m_ConstantColor = 0x260; // Color
            public const nint m_ConstantNormal = 0x264; // 
            public const nint m_flConstantRadius = 0x270; // float32
            public const nint m_flConstantRotation = 0x274; // float32
            public const nint m_flConstantRotationSpeed = 0x278; // float32
            public const nint m_flConstantLifespan = 0x27C; // float32
            public const nint m_nConstantSequenceNumber = 0x280; // int32
            public const nint m_nConstantSequenceNumber1 = 0x284; // int32
            public const nint m_nSnapshotControlPoint = 0x288; // int32
            public const nint m_hSnapshot = 0x290; // CStrongHandle<InfoForResourceTypeIParticleSnapshot>
            public const nint m_pszCullReplacementName = 0x298; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flCullRadius = 0x2A0; // float32
            public const nint m_flCullFillCost = 0x2A4; // float32
            public const nint m_nCullControlPoint = 0x2A8; // int32
            public const nint m_hFallback = 0x2B0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nFallbackMaxCount = 0x2B8; // int32
            public const nint m_hLowViolenceDef = 0x2C0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_hReferenceReplacement = 0x2C8; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flPreSimulationTime = 0x2D0; // float32
            public const nint m_flStopSimulationAfterTime = 0x2D4; // float32
            public const nint m_flMaximumTimeStep = 0x2D8; // float32
            public const nint m_flMaximumSimTime = 0x2DC; // float32
            public const nint m_flMinimumSimTime = 0x2E0; // float32
            public const nint m_flMinimumTimeStep = 0x2E4; // float32
            public const nint m_nMinimumFrames = 0x2E8; // int32
            public const nint m_nMinCPULevel = 0x2EC; // int32
            public const nint m_nMinGPULevel = 0x2F0; // int32
            public const nint m_flNoDrawTimeToGoToSleep = 0x2F4; // float32
            public const nint m_flMaxDrawDistance = 0x2F8; // float32
            public const nint m_flStartFadeDistance = 0x2FC; // float32
            public const nint m_flMaxCreationDistance = 0x300; // float32
            public const nint m_nAggregationMinAvailableParticles = 0x304; // int32
            public const nint m_flAggregateRadius = 0x308; // float32
            public const nint m_bShouldBatch = 0x30C; // bool
            public const nint m_bShouldHitboxesFallbackToRenderBounds = 0x30D; // bool
            public const nint m_bShouldHitboxesFallbackToSnapshot = 0x30E; // bool
            public const nint m_nViewModelEffect = 0x310; // InheritableBoolType_t
            public const nint m_bScreenSpaceEffect = 0x314; // bool
            public const nint m_pszTargetLayerID = 0x318; // CUtlSymbolLarge
            public const nint m_nSkipRenderControlPoint = 0x320; // int32
            public const nint m_nAllowRenderControlPoint = 0x324; // int32
            public const nint m_bShouldSort = 0x328; // bool
            public const nint m_controlPointConfigurations = 0x370; // CUtlVector<ParticleControlPointConfiguration_t>
        }
        // Parent: None
        // Fields count: 16
        public static class CParticleFunction {
            public const nint m_flOpStrength = 0x8; // CParticleCollectionFloatInput
            public const nint m_nOpEndCapState = 0x160; // ParticleEndcapMode_t
            public const nint m_flOpStartFadeInTime = 0x164; // float32
            public const nint m_flOpEndFadeInTime = 0x168; // float32
            public const nint m_flOpStartFadeOutTime = 0x16C; // float32
            public const nint m_flOpEndFadeOutTime = 0x170; // float32
            public const nint m_flOpFadeOscillatePeriod = 0x174; // float32
            public const nint m_bNormalizeToStopTime = 0x178; // bool
            public const nint m_flOpTimeOffsetMin = 0x17C; // float32
            public const nint m_flOpTimeOffsetMax = 0x180; // float32
            public const nint m_nOpTimeOffsetSeed = 0x184; // int32
            public const nint m_nOpTimeScaleSeed = 0x188; // int32
            public const nint m_flOpTimeScaleMin = 0x18C; // float32
            public const nint m_flOpTimeScaleMax = 0x190; // float32
            public const nint m_bDisableOperator = 0x196; // bool
            public const nint m_Notes = 0x198; // CUtlString
        }
        // Parent: CParticleFunction
        // Fields count: 1
        public static class CParticleFunctionInitializer {
            public const nint m_nAssociatedEmitterIndex = 0x1B8; // int32
        }
        // Parent: CParticleFunction
        // Fields count: 1
        public static class CParticleFunctionEmitter {
            public const nint m_nEmitterIndex = 0x1B8; // int32
        }
        // Parent: CParticleFunction
        // Fields count: 0
        public static class CParticleFunctionConstraint {
        }
        // Parent: CParticleFunction
        // Fields count: 0
        public static class CParticleFunctionOperator {
        }
        // Parent: CParticleFunction
        // Fields count: 0
        public static class CParticleFunctionForce {
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class CParticleFunctionPreEmission {
            public const nint m_bRunOnce = 0x1C0; // bool
        }
        // Parent: CParticleFunction
        // Fields count: 3
        public static class CParticleFunctionRenderer {
            public const nint VisibilityInputs = 0x1B8; // CParticleVisibilityInputs
            public const nint m_bCannotBeRefracted = 0x1FC; // bool
            public const nint m_bSkipRenderingOnMobile = 0x1FD; // bool
        }
        // Parent: None
        // Fields count: 16
        public static class TextureControls_t {
            public const nint m_flFinalTextureScaleU = 0x0; // CParticleCollectionRendererFloatInput
            public const nint m_flFinalTextureScaleV = 0x158; // CParticleCollectionRendererFloatInput
            public const nint m_flFinalTextureOffsetU = 0x2B0; // CParticleCollectionRendererFloatInput
            public const nint m_flFinalTextureOffsetV = 0x408; // CParticleCollectionRendererFloatInput
            public const nint m_flFinalTextureUVRotation = 0x560; // CParticleCollectionRendererFloatInput
            public const nint m_flZoomScale = 0x6B8; // CParticleCollectionRendererFloatInput
            public const nint m_flDistortion = 0x810; // CParticleCollectionRendererFloatInput
            public const nint m_bRandomizeOffsets = 0x968; // bool
            public const nint m_bClampUVs = 0x969; // bool
            public const nint m_nPerParticleBlend = 0x96C; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleScale = 0x970; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleOffsetU = 0x974; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleOffsetV = 0x978; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleRotation = 0x97C; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleZoom = 0x980; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleDistortion = 0x984; // SpriteCardPerParticleScale_t
        }
        // Parent: None
        // Fields count: 9
        public static class TextureGroup_t {
            public const nint m_bEnabled = 0x0; // bool
            public const nint m_bReplaceTextureWithGradient = 0x1; // bool
            public const nint m_hTexture = 0x8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_Gradient = 0x10; // CColorGradient
            public const nint m_nTextureType = 0x28; // SpriteCardTextureType_t
            public const nint m_nTextureChannels = 0x2C; // SpriteCardTextureChannel_t
            public const nint m_nTextureBlendMode = 0x30; // ParticleTextureLayerBlendType_t
            public const nint m_flTextureBlend = 0x38; // CParticleCollectionRendererFloatInput
            public const nint m_TextureControls = 0x190; // TextureControls_t
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 62
        public static class CBaseRendererSource2 {
            public const nint m_flRadiusScale = 0x200; // CParticleCollectionRendererFloatInput
            public const nint m_flAlphaScale = 0x358; // CParticleCollectionRendererFloatInput
            public const nint m_flRollScale = 0x4B0; // CParticleCollectionRendererFloatInput
            public const nint m_nAlpha2Field = 0x608; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x610; // CParticleCollectionRendererVecInput
            public const nint m_nColorBlendType = 0xC68; // ParticleColorBlendType_t
            public const nint m_nShaderType = 0xC6C; // SpriteCardShaderType_t
            public const nint m_strShaderOverride = 0xC70; // CUtlString
            public const nint m_flCenterXOffset = 0xC78; // CParticleCollectionRendererFloatInput
            public const nint m_flCenterYOffset = 0xDD0; // CParticleCollectionRendererFloatInput
            public const nint m_flBumpStrength = 0xF28; // float32
            public const nint m_nCropTextureOverride = 0xF2C; // ParticleSequenceCropOverride_t
            public const nint m_vecTexturesInput = 0xF30; // CUtlVector<TextureGroup_t>
            public const nint m_flAnimationRate = 0xF48; // float32
            public const nint m_nAnimationType = 0xF4C; // AnimationType_t
            public const nint m_bAnimateInFPS = 0xF50; // bool
            public const nint m_flSelfIllumAmount = 0xF58; // CParticleCollectionRendererFloatInput
            public const nint m_flDiffuseAmount = 0x10B0; // CParticleCollectionRendererFloatInput
            public const nint m_flDiffuseClamp = 0x1208; // CParticleCollectionRendererFloatInput
            public const nint m_nLightingControlPoint = 0x1360; // int32
            public const nint m_nSelfIllumPerParticle = 0x1364; // ParticleAttributeIndex_t
            public const nint m_nOutputBlendMode = 0x1368; // ParticleOutputBlendMode_t
            public const nint m_bGammaCorrectVertexColors = 0x136C; // bool
            public const nint m_bSaturateColorPreAlphaBlend = 0x136D; // bool
            public const nint m_flAddSelfAmount = 0x1370; // CParticleCollectionRendererFloatInput
            public const nint m_flDesaturation = 0x14C8; // CParticleCollectionRendererFloatInput
            public const nint m_flOverbrightFactor = 0x1620; // CParticleCollectionRendererFloatInput
            public const nint m_nHSVShiftControlPoint = 0x1778; // int32
            public const nint m_nFogType = 0x177C; // ParticleFogType_t
            public const nint m_flFogAmount = 0x1780; // CParticleCollectionRendererFloatInput
            public const nint m_bTintByFOW = 0x18D8; // bool
            public const nint m_bTintByGlobalLight = 0x18D9; // bool
            public const nint m_nPerParticleAlphaReference = 0x18DC; // SpriteCardPerParticleScale_t
            public const nint m_nPerParticleAlphaRefWindow = 0x18E0; // SpriteCardPerParticleScale_t
            public const nint m_nAlphaReferenceType = 0x18E4; // ParticleAlphaReferenceType_t
            public const nint m_flAlphaReferenceSoftness = 0x18E8; // CParticleCollectionRendererFloatInput
            public const nint m_flSourceAlphaValueToMapToZero = 0x1A40; // CParticleCollectionRendererFloatInput
            public const nint m_flSourceAlphaValueToMapToOne = 0x1B98; // CParticleCollectionRendererFloatInput
            public const nint m_bRefract = 0x1CF0; // bool
            public const nint m_bRefractSolid = 0x1CF1; // bool
            public const nint m_flRefractAmount = 0x1CF8; // CParticleCollectionRendererFloatInput
            public const nint m_nRefractBlurRadius = 0x1E50; // int32
            public const nint m_nRefractBlurType = 0x1E54; // BlurFilterType_t
            public const nint m_bOnlyRenderInEffectsBloomPass = 0x1E58; // bool
            public const nint m_bOnlyRenderInEffectsWaterPass = 0x1E59; // bool
            public const nint m_bUseMixedResolutionRendering = 0x1E5A; // bool
            public const nint m_bOnlyRenderInEffecsGameOverlay = 0x1E5B; // bool
            public const nint m_stencilTestID = 0x1E5C; // char[128]
            public const nint m_bStencilTestExclude = 0x1EDC; // bool
            public const nint m_stencilWriteID = 0x1EDD; // char[128]
            public const nint m_bWriteStencilOnDepthPass = 0x1F5D; // bool
            public const nint m_bWriteStencilOnDepthFail = 0x1F5E; // bool
            public const nint m_bReverseZBuffering = 0x1F5F; // bool
            public const nint m_bDisableZBuffering = 0x1F60; // bool
            public const nint m_nFeatheringMode = 0x1F64; // ParticleDepthFeatheringMode_t
            public const nint m_flFeatheringMinDist = 0x1F68; // CParticleCollectionRendererFloatInput
            public const nint m_flFeatheringMaxDist = 0x20C0; // CParticleCollectionRendererFloatInput
            public const nint m_flFeatheringFilter = 0x2218; // CParticleCollectionRendererFloatInput
            public const nint m_flDepthBias = 0x2370; // CParticleCollectionRendererFloatInput
            public const nint m_nSortMethod = 0x24C8; // ParticleSortingChoiceList_t
            public const nint m_bBlendFramesSeq0 = 0x24CC; // bool
            public const nint m_bMaxLuminanceBlendingSequence0 = 0x24CD; // bool
        }
        // Parent: CBaseRendererSource2
        // Fields count: 27
        public static class C_OP_RenderSprites {
            public const nint m_nSequenceOverride = 0x2710; // CParticleCollectionRendererFloatInput
            public const nint m_nOrientationType = 0x2868; // ParticleOrientationChoiceList_t
            public const nint m_nOrientationControlPoint = 0x286C; // int32
            public const nint m_bUseYawWithNormalAligned = 0x2870; // bool
            public const nint m_flMinSize = 0x2878; // CParticleCollectionRendererFloatInput
            public const nint m_flMaxSize = 0x29D0; // CParticleCollectionRendererFloatInput
            public const nint m_flAlphaAdjustWithSizeAdjust = 0x2B28; // CParticleCollectionRendererFloatInput
            public const nint m_flStartFadeSize = 0x2C80; // CParticleCollectionRendererFloatInput
            public const nint m_flEndFadeSize = 0x2DD8; // CParticleCollectionRendererFloatInput
            public const nint m_flStartFadeDot = 0x2F30; // float32
            public const nint m_flEndFadeDot = 0x2F34; // float32
            public const nint m_bDistanceAlpha = 0x2F38; // bool
            public const nint m_bSoftEdges = 0x2F39; // bool
            public const nint m_flEdgeSoftnessStart = 0x2F3C; // float32
            public const nint m_flEdgeSoftnessEnd = 0x2F40; // float32
            public const nint m_bOutline = 0x2F44; // bool
            public const nint m_OutlineColor = 0x2F45; // Color
            public const nint m_nOutlineAlpha = 0x2F4C; // int32
            public const nint m_flOutlineStart0 = 0x2F50; // float32
            public const nint m_flOutlineStart1 = 0x2F54; // float32
            public const nint m_flOutlineEnd0 = 0x2F58; // float32
            public const nint m_flOutlineEnd1 = 0x2F5C; // float32
            public const nint m_nLightingMode = 0x2F60; // ParticleLightingQuality_t
            public const nint m_flLightingTessellation = 0x2F68; // CParticleCollectionRendererFloatInput
            public const nint m_flLightingDirectionality = 0x30C0; // CParticleCollectionRendererFloatInput
            public const nint m_bParticleShadows = 0x3218; // bool
            public const nint m_flShadowDensity = 0x321C; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class FloatInputMaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_flInput = 0x8; // CParticleCollectionFloatInput
        }
        // Parent: None
        // Fields count: 2
        public static class VecInputMaterialVariable_t {
            public const nint m_strVariable = 0x0; // CUtlString
            public const nint m_vecInput = 0x8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 22
        public static class C_OP_RenderCables {
            public const nint m_flRadiusScale = 0x200; // CParticleCollectionFloatInput
            public const nint m_flAlphaScale = 0x358; // CParticleCollectionFloatInput
            public const nint m_vecColorScale = 0x4B0; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0xB08; // ParticleColorBlendType_t
            public const nint m_hMaterial = 0xB10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nTextureRepetitionMode = 0xB18; // TextureRepetitionMode_t
            public const nint m_flTextureRepeatsPerSegment = 0xB20; // CParticleCollectionFloatInput
            public const nint m_flTextureRepeatsCircumference = 0xC78; // CParticleCollectionFloatInput
            public const nint m_flColorMapOffsetV = 0xDD0; // CParticleCollectionFloatInput
            public const nint m_flColorMapOffsetU = 0xF28; // CParticleCollectionFloatInput
            public const nint m_flNormalMapOffsetV = 0x1080; // CParticleCollectionFloatInput
            public const nint m_flNormalMapOffsetU = 0x11D8; // CParticleCollectionFloatInput
            public const nint m_bDrawCableCaps = 0x1330; // bool
            public const nint m_flCapRoundness = 0x1334; // float32
            public const nint m_flCapOffsetAmount = 0x1338; // float32
            public const nint m_flTessScale = 0x133C; // float32
            public const nint m_nMinTesselation = 0x1340; // int32
            public const nint m_nMaxTesselation = 0x1344; // int32
            public const nint m_nRoundness = 0x1348; // int32
            public const nint m_LightingTransform = 0x1350; // CParticleTransformInput
            public const nint m_MaterialFloatVars = 0x13B8; // CUtlVector<FloatInputMaterialVariable_t>
            public const nint m_MaterialVecVars = 0x13E8; // CUtlVector<VecInputMaterialVariable_t>
        }
        // Parent: None
        // Fields count: 0
        public static class CParticleInput {
        }
        // Parent: CParticleInput
        // Fields count: 46
        public static class CParticleFloatInput {
            public const nint m_nType = 0x10; // ParticleFloatType_t
            public const nint m_nMapType = 0x14; // ParticleFloatMapType_t
            public const nint m_flLiteralValue = 0x18; // float32
            public const nint m_NamedValue = 0x20; // CParticleNamedValueRef
            public const nint m_nControlPoint = 0x60; // int32
            public const nint m_nScalarAttribute = 0x64; // ParticleAttributeIndex_t
            public const nint m_nVectorAttribute = 0x68; // ParticleAttributeIndex_t
            public const nint m_nVectorComponent = 0x6C; // int32
            public const nint m_flRandomMin = 0x70; // float32
            public const nint m_flRandomMax = 0x74; // float32
            public const nint m_bHasRandomSignFlip = 0x78; // bool
            public const nint m_nRandomSeed = 0x7C; // int32
            public const nint m_nRandomMode = 0x80; // ParticleFloatRandomMode_t
            public const nint m_flLOD0 = 0x88; // float32
            public const nint m_flLOD1 = 0x8C; // float32
            public const nint m_flLOD2 = 0x90; // float32
            public const nint m_flLOD3 = 0x94; // float32
            public const nint m_nNoiseInputVectorAttribute = 0x98; // ParticleAttributeIndex_t
            public const nint m_flNoiseOutputMin = 0x9C; // float32
            public const nint m_flNoiseOutputMax = 0xA0; // float32
            public const nint m_flNoiseScale = 0xA4; // float32
            public const nint m_vecNoiseOffsetRate = 0xA8; // 
            public const nint m_flNoiseOffset = 0xB4; // float32
            public const nint m_nNoiseOctaves = 0xB8; // int32
            public const nint m_nNoiseTurbulence = 0xBC; // PFNoiseTurbulence_t
            public const nint m_nNoiseType = 0xC0; // PFNoiseType_t
            public const nint m_nNoiseModifier = 0xC4; // PFNoiseModifier_t
            public const nint m_flNoiseTurbulenceScale = 0xC8; // float32
            public const nint m_flNoiseTurbulenceMix = 0xCC; // float32
            public const nint m_flNoiseImgPreviewScale = 0xD0; // float32
            public const nint m_bNoiseImgPreviewLive = 0xD4; // bool
            public const nint m_flNoCameraFallback = 0xE0; // float32
            public const nint m_bUseBoundsCenter = 0xE4; // bool
            public const nint m_nInputMode = 0xE8; // ParticleFloatInputMode_t
            public const nint m_flMultFactor = 0xEC; // float32
            public const nint m_flInput0 = 0xF0; // float32
            public const nint m_flInput1 = 0xF4; // float32
            public const nint m_flOutput0 = 0xF8; // float32
            public const nint m_flOutput1 = 0xFC; // float32
            public const nint m_flNotchedRangeMin = 0x100; // float32
            public const nint m_flNotchedRangeMax = 0x104; // float32
            public const nint m_flNotchedOutputOutside = 0x108; // float32
            public const nint m_flNotchedOutputInside = 0x10C; // float32
            public const nint m_nBiasType = 0x110; // ParticleFloatBiasType_t
            public const nint m_flBiasParameter = 0x114; // float32
            public const nint m_Curve = 0x118; // CPiecewiseCurve
        }
        // Parent: CParticleFloatInput
        // Fields count: 0
        public static class CPerParticleFloatInput {
        }
        // Parent: CParticleFloatInput
        // Fields count: 0
        public static class CParticleCollectionFloatInput {
        }
        // Parent: CParticleCollectionFloatInput
        // Fields count: 0
        public static class CParticleCollectionRendererFloatInput {
        }
        // Parent: CParticleFloatInput
        // Fields count: 0
        public static class CParticleRemapFloatInput {
        }
        // Parent: CParticleInput
        // Fields count: 8
        public static class CParticleTransformInput {
            public const nint m_nType = 0x10; // ParticleTransformType_t
            public const nint m_NamedValue = 0x18; // CParticleNamedValueRef
            public const nint m_bFollowNamedValue = 0x58; // bool
            public const nint m_bSupportsDisabled = 0x59; // bool
            public const nint m_bUseOrientation = 0x5A; // bool
            public const nint m_nControlPoint = 0x5C; // int32
            public const nint m_nControlPointRangeMax = 0x60; // int32
            public const nint m_flEndCPGrowthTime = 0x64; // float32
        }
        // Parent: CParticleInput
        // Fields count: 3
        public static class CParticleModelInput {
            public const nint m_nType = 0x10; // ParticleModelType_t
            public const nint m_NamedValue = 0x18; // CParticleNamedValueRef
            public const nint m_nControlPoint = 0x58; // int32
        }
        // Parent: CParticleInput
        // Fields count: 23
        public static class CParticleVecInput {
            public const nint m_nType = 0x10; // ParticleVecType_t
            public const nint m_vLiteralValue = 0x14; // 
            public const nint m_LiteralColor = 0x20; // Color
            public const nint m_NamedValue = 0x28; // CParticleNamedValueRef
            public const nint m_bFollowNamedValue = 0x68; // bool
            public const nint m_nVectorAttribute = 0x6C; // ParticleAttributeIndex_t
            public const nint m_vVectorAttributeScale = 0x70; // 
            public const nint m_nControlPoint = 0x7C; // int32
            public const nint m_nDeltaControlPoint = 0x80; // int32
            public const nint m_vCPValueScale = 0x84; // 
            public const nint m_vCPRelativePosition = 0x90; // 
            public const nint m_vCPRelativeDir = 0x9C; // 
            public const nint m_FloatComponentX = 0xA8; // CParticleFloatInput
            public const nint m_FloatComponentY = 0x200; // CParticleFloatInput
            public const nint m_FloatComponentZ = 0x358; // CParticleFloatInput
            public const nint m_FloatInterp = 0x4B0; // CParticleFloatInput
            public const nint m_flInterpInput0 = 0x608; // float32
            public const nint m_flInterpInput1 = 0x60C; // float32
            public const nint m_vInterpOutput0 = 0x610; // 
            public const nint m_vInterpOutput1 = 0x61C; // 
            public const nint m_Gradient = 0x628; // CColorGradient
            public const nint m_vRandomMin = 0x640; // 
            public const nint m_vRandomMax = 0x64C; // 
        }
        // Parent: CParticleVecInput
        // Fields count: 0
        public static class CPerParticleVecInput {
        }
        // Parent: CParticleVecInput
        // Fields count: 0
        public static class CParticleCollectionVecInput {
        }
        // Parent: CParticleCollectionVecInput
        // Fields count: 0
        public static class CParticleCollectionRendererVecInput {
        }
        // Parent: None
        // Fields count: 1
        public static class PARTICLE_EHANDLE__ {
            public const nint unused = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PARTICLE_WORLD_HANDLE__ {
            public const nint unused = 0x0; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class IParticleEffect {
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 0
        public static class CParticleCollectionBindingInstance {
        }
        // Parent: None
        // Fields count: 6
        public static class ParticleNamedValueConfiguration_t {
            public const nint m_ConfigName = 0x0; // CUtlString
            public const nint m_ConfigValue = 0x8; // KeyValues3
            public const nint m_iAttachType = 0x18; // ParticleAttachment_t
            public const nint m_BoundEntityPath = 0x20; // CUtlString
            public const nint m_strEntityScope = 0x28; // CUtlString
            public const nint m_strAttachmentName = 0x30; // CUtlString
        }
        // Parent: None
        // Fields count: 5
        public static class ParticleNamedValueSource_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_IsPublic = 0x8; // bool
            public const nint m_ValueType = 0xC; // PulseValueType_t
            public const nint m_DefaultConfig = 0x10; // ParticleNamedValueConfiguration_t
            public const nint m_NamedConfigs = 0x48; // CUtlVector<ParticleNamedValueConfiguration_t>
        }
        // Parent: None
        // Fields count: 2
        public static class CParticleVariableRef {
            public const nint m_variableName = 0x0; // CKV3MemberNameWithStorage
            public const nint m_variableType = 0x38; // PulseValueType_t
        }
        // Parent: None
        // Fields count: 0
        public static class CParticleProperty {
        }
        // Parent: IParticleEffect
        // Fields count: 32
        public static class CNewParticleEffect {
            public const nint m_pNext = 0x10; // CNewParticleEffect*
            public const nint m_pPrev = 0x18; // CNewParticleEffect*
            public const nint m_pParticles = 0x20; // IParticleCollection*
            public const nint m_pDebugName = 0x28; // char*
            public const nint m_bDontRemove = 0x0; // bitfield:1
            public const nint m_bRemove = 0x0; // bitfield:1
            public const nint m_bNeedsBBoxUpdate = 0x0; // bitfield:1
            public const nint m_bIsFirstFrame = 0x0; // bitfield:1
            public const nint m_bAutoUpdateBBox = 0x0; // bitfield:1
            public const nint m_bAllocated = 0x0; // bitfield:1
            public const nint m_bSimulate = 0x0; // bitfield:1
            public const nint m_bShouldPerformCullCheck = 0x0; // bitfield:1
            public const nint m_bForceNoDraw = 0x0; // bitfield:1
            public const nint m_bShouldSave = 0x0; // bitfield:1
            public const nint m_bDisableAggregation = 0x0; // bitfield:1
            public const nint m_bShouldSimulateDuringGamePaused = 0x0; // bitfield:1
            public const nint m_bShouldCheckFoW = 0x0; // bitfield:1
            public const nint m_vSortOrigin = 0x40; // 
            public const nint m_flScale = 0x4C; // float32
            public const nint m_hOwner = 0x50; // PARTICLE_EHANDLE__*
            public const nint m_pOwningParticleProperty = 0x58; // CParticleProperty*
            public const nint m_flFreezeTransitionStart = 0x70; // float32
            public const nint m_flFreezeTransitionDuration = 0x74; // float32
            public const nint m_flFreezeTransitionOverride = 0x78; // float32
            public const nint m_bFreezeTransitionActive = 0x7C; // bool
            public const nint m_bFreezeTargetState = 0x7D; // bool
            public const nint m_bCanFreeze = 0x7E; // bool
            public const nint m_LastMin = 0x80; // 
            public const nint m_LastMax = 0x8C; // 
            public const nint m_nSplitScreenUser = 0x98; // CSplitScreenSlot
            public const nint m_vecAggregationCenter = 0x9C; // 
            public const nint m_RefCount = 0xC0; // int32
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 5
        public static class C_OP_ConstrainDistance {
            public const nint m_fMinDistance = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_fMaxDistance = 0x318; // CParticleCollectionFloatInput
            public const nint m_nControlPointNumber = 0x470; // int32
            public const nint m_CenterOffset = 0x474; // 
            public const nint m_bGlobalCenter = 0x480; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 2
        public static class C_OP_CollideWithSelf {
            public const nint m_flRadiusScale = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMinimumSpeed = 0x318; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 2
        public static class C_OP_CollideWithParentParticles {
            public const nint m_flParentRadiusScale = 0x1C0; // CPerParticleFloatInput
            public const nint m_flRadiusScale = 0x318; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 8
        public static class C_OP_ConstrainDistanceToPath {
            public const nint m_fMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance0 = 0x1C4; // float32
            public const nint m_flMaxDistanceMid = 0x1C8; // float32
            public const nint m_flMaxDistance1 = 0x1CC; // float32
            public const nint m_PathParameters = 0x1D0; // CPathParameters
            public const nint m_flTravelTime = 0x210; // float32
            public const nint m_nFieldScale = 0x214; // ParticleAttributeIndex_t
            public const nint m_nManualTField = 0x218; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 5
        public static class C_OP_ConstrainDistanceToUserSpecifiedPath {
            public const nint m_fMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance = 0x1C4; // float32
            public const nint m_flTimeScale = 0x1C8; // float32
            public const nint m_bLoopedPath = 0x1CC; // bool
            public const nint m_pointList = 0x1D0; // CUtlVector<PointDefinitionWithTimeValues_t>
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 8
        public static class C_OP_PlanarConstraint {
            public const nint m_PointOnPlane = 0x1C0; // 
            public const nint m_PlaneNormal = 0x1CC; // 
            public const nint m_nControlPointNumber = 0x1D8; // int32
            public const nint m_bGlobalOrigin = 0x1DC; // bool
            public const nint m_bGlobalNormal = 0x1DD; // bool
            public const nint m_flRadiusScale = 0x1E0; // CPerParticleFloatInput
            public const nint m_flMaximumDistanceToCP = 0x338; // CParticleCollectionFloatInput
            public const nint m_bUseOldCode = 0x490; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 0
        public static class C_OP_WorldCollideConstraint {
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 27
        public static class C_OP_WorldTraceConstraint {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_vecCpOffset = 0x1C4; // 
            public const nint m_nCollisionMode = 0x1D0; // ParticleCollisionMode_t
            public const nint m_nCollisionModeMin = 0x1D4; // ParticleCollisionMode_t
            public const nint m_nTraceSet = 0x1D8; // ParticleTraceSet_t
            public const nint m_CollisionGroupName = 0x1DC; // char[128]
            public const nint m_bWorldOnly = 0x25C; // bool
            public const nint m_bBrushOnly = 0x25D; // bool
            public const nint m_bIncludeWater = 0x25E; // bool
            public const nint m_nIgnoreCP = 0x260; // int32
            public const nint m_flCpMovementTolerance = 0x264; // float32
            public const nint m_flRetestRate = 0x268; // float32
            public const nint m_flTraceTolerance = 0x26C; // float32
            public const nint m_flCollisionConfirmationSpeed = 0x270; // float32
            public const nint m_nMaxTracesPerFrame = 0x274; // float32
            public const nint m_flRadiusScale = 0x278; // CPerParticleFloatInput
            public const nint m_flBounceAmount = 0x3D0; // CPerParticleFloatInput
            public const nint m_flSlideAmount = 0x528; // CPerParticleFloatInput
            public const nint m_flRandomDirScale = 0x680; // CPerParticleFloatInput
            public const nint m_bDecayBounce = 0x7D8; // bool
            public const nint m_bKillonContact = 0x7D9; // bool
            public const nint m_flMinSpeed = 0x7DC; // float32
            public const nint m_bSetNormal = 0x7E0; // bool
            public const nint m_nStickOnCollisionField = 0x7E4; // ParticleAttributeIndex_t
            public const nint m_flStopSpeed = 0x7E8; // CPerParticleFloatInput
            public const nint m_nEntityStickDataField = 0x940; // ParticleAttributeIndex_t
            public const nint m_nEntityStickNormalField = 0x944; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 5
        public static class C_OP_BoxConstraint {
            public const nint m_vecMin = 0x1C0; // CParticleCollectionVecInput
            public const nint m_vecMax = 0x818; // CParticleCollectionVecInput
            public const nint m_nCP = 0xE70; // int32
            public const nint m_bLocalSpace = 0xE74; // bool
            public const nint m_bAccountForRadius = 0xE75; // bool
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 1
        public static class C_OP_ShapeMatchingConstraint {
            public const nint m_flShapeRestorationTime = 0x1C0; // float32
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 5
        public static class C_OP_RopeSpringConstraint {
            public const nint m_flRestLength = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flMinDistance = 0x318; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x470; // CParticleCollectionFloatInput
            public const nint m_flAdjustmentScale = 0x5C8; // float32
            public const nint m_flInitialRestingLength = 0x5D0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 5
        public static class C_OP_SpringToVectorConstraint {
            public const nint m_flRestLength = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMinDistance = 0x318; // CPerParticleFloatInput
            public const nint m_flMaxDistance = 0x470; // CPerParticleFloatInput
            public const nint m_flRestingLength = 0x5C8; // CPerParticleFloatInput
            public const nint m_vecAnchorVector = 0x720; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 2
        public static class C_OP_ConstrainLineLength {
            public const nint m_flMinDistance = 0x1C0; // float32
            public const nint m_flMaxDistance = 0x1C4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 11
        public static class C_INIT_RingWave {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_flParticlesPerOrbit = 0x228; // CParticleCollectionFloatInput
            public const nint m_flInitialRadius = 0x380; // CPerParticleFloatInput
            public const nint m_flThickness = 0x4D8; // CPerParticleFloatInput
            public const nint m_flInitialSpeedMin = 0x630; // CPerParticleFloatInput
            public const nint m_flInitialSpeedMax = 0x788; // CPerParticleFloatInput
            public const nint m_flRoll = 0x8E0; // CPerParticleFloatInput
            public const nint m_flPitch = 0xA38; // CPerParticleFloatInput
            public const nint m_flYaw = 0xB90; // CPerParticleFloatInput
            public const nint m_bEvenDistribution = 0xCE8; // bool
            public const nint m_bXYVelocityOnly = 0xCE9; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 7
        public static class C_INIT_CreateSpiralSphere {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nOverrideCP = 0x1C4; // int32
            public const nint m_nDensity = 0x1C8; // int32
            public const nint m_flInitialRadius = 0x1CC; // float32
            public const nint m_flInitialSpeedMin = 0x1D0; // float32
            public const nint m_flInitialSpeedMax = 0x1D4; // float32
            public const nint m_bUseParticleCount = 0x1D8; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_CreateInEpitrochoid {
            public const nint m_nComponent1 = 0x1C0; // int32
            public const nint m_nComponent2 = 0x1C4; // int32
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_flParticleDensity = 0x230; // CPerParticleFloatInput
            public const nint m_flOffset = 0x388; // CPerParticleFloatInput
            public const nint m_flRadius1 = 0x4E0; // CPerParticleFloatInput
            public const nint m_flRadius2 = 0x638; // CPerParticleFloatInput
            public const nint m_bUseCount = 0x790; // bool
            public const nint m_bUseLocalCoords = 0x791; // bool
            public const nint m_bOffsetExistingPos = 0x792; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 14
        public static class C_INIT_CreatePhyllotaxis {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nScaleCP = 0x1C4; // int32
            public const nint m_nComponent = 0x1C8; // int32
            public const nint m_fRadCentCore = 0x1CC; // float32
            public const nint m_fRadPerPoint = 0x1D0; // float32
            public const nint m_fRadPerPointTo = 0x1D4; // float32
            public const nint m_fpointAngle = 0x1D8; // float32
            public const nint m_fsizeOverall = 0x1DC; // float32
            public const nint m_fRadBias = 0x1E0; // float32
            public const nint m_fMinRad = 0x1E4; // float32
            public const nint m_fDistBias = 0x1E8; // float32
            public const nint m_bUseLocalCoords = 0x1EC; // bool
            public const nint m_bUseWithContEmit = 0x1ED; // bool
            public const nint m_bUseOrigRadius = 0x1EE; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 14
        public static class C_INIT_CreateOnModel {
            public const nint m_modelInput = 0x1C0; // CParticleModelInput
            public const nint m_transformInput = 0x220; // CParticleTransformInput
            public const nint m_nForceInModel = 0x288; // int32
            public const nint m_nDesiredHitbox = 0x28C; // int32
            public const nint m_nHitboxValueFromControlPointIndex = 0x290; // int32
            public const nint m_vecHitBoxScale = 0x298; // CParticleCollectionVecInput
            public const nint m_flBoneVelocity = 0x8F0; // float32
            public const nint m_flMaxBoneVelocity = 0x8F4; // float32
            public const nint m_vecDirectionBias = 0x8F8; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0xF50; // char[128]
            public const nint m_bLocalCoords = 0xFD0; // bool
            public const nint m_bUseBones = 0xFD1; // bool
            public const nint m_bUseMesh = 0xFD2; // bool
            public const nint m_flShellSize = 0xFD8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 14
        public static class C_INIT_CreateOnModelAtHeight {
            public const nint m_bUseBones = 0x1C0; // bool
            public const nint m_bForceZ = 0x1C1; // bool
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_nHeightCP = 0x1C8; // int32
            public const nint m_bUseWaterHeight = 0x1CC; // bool
            public const nint m_flDesiredHeight = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_vecHitBoxScale = 0x328; // CParticleCollectionVecInput
            public const nint m_vecDirectionBias = 0x980; // CParticleCollectionVecInput
            public const nint m_nBiasType = 0xFD8; // ParticleHitboxBiasType_t
            public const nint m_bLocalCoords = 0xFDC; // bool
            public const nint m_bPreferMovingBoxes = 0xFDD; // bool
            public const nint m_HitboxSetName = 0xFDE; // char[128]
            public const nint m_flHitboxVelocityScale = 0x1060; // CParticleCollectionFloatInput
            public const nint m_flMaxBoneVelocity = 0x11B8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 9
        public static class C_INIT_SetHitboxToClosest {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nDesiredHitbox = 0x1C4; // int32
            public const nint m_vecHitBoxScale = 0x1C8; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0x820; // char[128]
            public const nint m_bUseBones = 0x8A0; // bool
            public const nint m_bUseClosestPointOnHitbox = 0x8A1; // bool
            public const nint m_nTestType = 0x8A4; // ClosestPointTestType_t
            public const nint m_flHybridRatio = 0x8A8; // CParticleCollectionFloatInput
            public const nint m_bUpdatePosition = 0xA00; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 9
        public static class C_INIT_SetHitboxToModel {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nForceInModel = 0x1C4; // int32
            public const nint m_nDesiredHitbox = 0x1C8; // int32
            public const nint m_vecHitBoxScale = 0x1D0; // CParticleCollectionVecInput
            public const nint m_vecDirectionBias = 0x828; // 
            public const nint m_bMaintainHitbox = 0x834; // bool
            public const nint m_bUseBones = 0x835; // bool
            public const nint m_HitboxSetName = 0x836; // char[128]
            public const nint m_flShellSize = 0x8B8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 14
        public static class C_INIT_CreateWithinSphereTransform {
            public const nint m_fRadiusMin = 0x1C0; // CPerParticleFloatInput
            public const nint m_fRadiusMax = 0x318; // CPerParticleFloatInput
            public const nint m_vecDistanceBias = 0x470; // CPerParticleVecInput
            public const nint m_vecDistanceBiasAbs = 0xAC8; // 
            public const nint m_TransformInput = 0xAD8; // CParticleTransformInput
            public const nint m_fSpeedMin = 0xB40; // CPerParticleFloatInput
            public const nint m_fSpeedMax = 0xC98; // CPerParticleFloatInput
            public const nint m_fSpeedRandExp = 0xDF0; // float32
            public const nint m_bLocalCoords = 0xDF4; // bool
            public const nint m_flEndCPGrowthTime = 0xDF8; // float32
            public const nint m_LocalCoordinateSystemSpeedMin = 0xE00; // CPerParticleVecInput
            public const nint m_LocalCoordinateSystemSpeedMax = 0x1458; // CPerParticleVecInput
            public const nint m_nFieldOutput = 0x1AB0; // ParticleAttributeIndex_t
            public const nint m_nFieldVelocity = 0x1AB4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_CreateWithinBox {
            public const nint m_vecMin = 0x1C0; // CPerParticleVecInput
            public const nint m_vecMax = 0x818; // CPerParticleVecInput
            public const nint m_nControlPointNumber = 0xE70; // int32
            public const nint m_bLocalSpace = 0xE74; // bool
            public const nint m_randomnessParameters = 0xE78; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_CreateOnGrid {
            public const nint m_nXCount = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_nYCount = 0x318; // CParticleCollectionFloatInput
            public const nint m_nZCount = 0x470; // CParticleCollectionFloatInput
            public const nint m_nXSpacing = 0x5C8; // CParticleCollectionFloatInput
            public const nint m_nYSpacing = 0x720; // CParticleCollectionFloatInput
            public const nint m_nZSpacing = 0x878; // CParticleCollectionFloatInput
            public const nint m_nControlPointNumber = 0x9D0; // int32
            public const nint m_bLocalSpace = 0x9D4; // bool
            public const nint m_bCenter = 0x9D5; // bool
            public const nint m_bHollow = 0x9D6; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_PositionOffset {
            public const nint m_OffsetMin = 0x1C0; // CPerParticleVecInput
            public const nint m_OffsetMax = 0x818; // CPerParticleVecInput
            public const nint m_TransformInput = 0xE70; // CParticleTransformInput
            public const nint m_bLocalCoords = 0xED8; // bool
            public const nint m_bProportional = 0xED9; // bool
            public const nint m_randomnessParameters = 0xEDC; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_PositionOffsetToCP {
            public const nint m_nControlPointNumberStart = 0x1C0; // int32
            public const nint m_nControlPointNumberEnd = 0x1C4; // int32
            public const nint m_bLocalCoords = 0x1C8; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 13
        public static class C_INIT_PositionPlaceOnGround {
            public const nint m_flOffset = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x318; // CPerParticleFloatInput
            public const nint m_CollisionGroupName = 0x470; // char[128]
            public const nint m_nTraceSet = 0x4F0; // ParticleTraceSet_t
            public const nint m_nTraceMissBehavior = 0x500; // ParticleTraceMissBehavior_t
            public const nint m_bIncludeWater = 0x504; // bool
            public const nint m_bSetNormal = 0x505; // bool
            public const nint m_bSetPXYZOnly = 0x506; // bool
            public const nint m_bTraceAlongNormal = 0x507; // bool
            public const nint m_bOffsetonColOnly = 0x508; // bool
            public const nint m_flOffsetByRadiusFactor = 0x50C; // float32
            public const nint m_nPreserveOffsetCP = 0x510; // int32
            public const nint m_nIgnoreCP = 0x514; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_VelocityFromNormal {
            public const nint m_fSpeedMin = 0x1C0; // float32
            public const nint m_fSpeedMax = 0x1C4; // float32
            public const nint m_bIgnoreDt = 0x1C8; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 7
        public static class C_INIT_VelocityRandom {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_fSpeedMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_fSpeedMax = 0x320; // CPerParticleFloatInput
            public const nint m_LocalCoordinateSystemSpeedMin = 0x478; // CPerParticleVecInput
            public const nint m_LocalCoordinateSystemSpeedMax = 0xAD0; // CPerParticleVecInput
            public const nint m_bIgnoreDT = 0x1128; // bool
            public const nint m_randomnessParameters = 0x112C; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_InitialVelocityNoise {
            public const nint m_vecAbsVal = 0x1C0; // 
            public const nint m_vecAbsValInv = 0x1CC; // 
            public const nint m_vecOffsetLoc = 0x1D8; // CPerParticleVecInput
            public const nint m_flOffset = 0x830; // CPerParticleFloatInput
            public const nint m_vecOutputMin = 0x988; // CPerParticleVecInput
            public const nint m_vecOutputMax = 0xFE0; // CPerParticleVecInput
            public const nint m_flNoiseScale = 0x1638; // CPerParticleFloatInput
            public const nint m_flNoiseScaleLoc = 0x1790; // CPerParticleFloatInput
            public const nint m_TransformInput = 0x18E8; // CParticleTransformInput
            public const nint m_bIgnoreDt = 0x1950; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_InitialVelocityFromHitbox {
            public const nint m_flVelocityMin = 0x1C0; // float32
            public const nint m_flVelocityMax = 0x1C4; // float32
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_HitboxSetName = 0x1CC; // char[128]
            public const nint m_bUseBones = 0x24C; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_VelocityRadialRandom {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_fSpeedMin = 0x1C4; // float32
            public const nint m_fSpeedMax = 0x1C8; // float32
            public const nint m_vecLocalCoordinateSystemSpeedScale = 0x1CC; // 
            public const nint m_bIgnoreDelta = 0x1D9; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_RandomLifeTime {
            public const nint m_fLifetimeMin = 0x1C0; // float32
            public const nint m_fLifetimeMax = 0x1C4; // float32
            public const nint m_fLifetimeRandExponent = 0x1C8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RandomScalar {
            public const nint m_flMin = 0x1C0; // float32
            public const nint m_flMax = 0x1C4; // float32
            public const nint m_flExponent = 0x1C8; // float32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RandomVector {
            public const nint m_vecMin = 0x1C0; // 
            public const nint m_vecMax = 0x1CC; // 
            public const nint m_nFieldOutput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_randomnessParameters = 0x1DC; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RandomVectorComponent {
            public const nint m_flMin = 0x1C0; // float32
            public const nint m_flMax = 0x1C4; // float32
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nComponent = 0x1CC; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_AddVectorToVector {
            public const nint m_vecScale = 0x1C0; // 
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_vOffsetMin = 0x1D4; // 
            public const nint m_vOffsetMax = 0x1E0; // 
            public const nint m_randomnessParameters = 0x1EC; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_RandomAlphaWindowThreshold {
            public const nint m_flMin = 0x1C0; // float32
            public const nint m_flMax = 0x1C4; // float32
            public const nint m_flExponent = 0x1C8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_RandomRadius {
            public const nint m_flRadiusMin = 0x1C0; // float32
            public const nint m_flRadiusMax = 0x1C4; // float32
            public const nint m_flRadiusRandExponent = 0x1C8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RandomAlpha {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nAlphaMin = 0x1C4; // int32
            public const nint m_nAlphaMax = 0x1C8; // int32
            public const nint m_flAlphaRandExponent = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class CGeneralRandomRotation {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flDegrees = 0x1C4; // float32
            public const nint m_flDegreesMin = 0x1C8; // float32
            public const nint m_flDegreesMax = 0x1CC; // float32
            public const nint m_flRotationRandExponent = 0x1D0; // float32
            public const nint m_bRandomlyFlipDirection = 0x1D4; // bool
        }
        // Parent: CGeneralRandomRotation
        // Fields count: 0
        public static class C_INIT_RandomRotation {
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_Orient2DRelToCP {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flRotOffset = 0x1C8; // float32
        }
        // Parent: CGeneralRandomRotation
        // Fields count: 0
        public static class C_INIT_RandomRotationSpeed {
        }
        // Parent: CGeneralRandomRotation
        // Fields count: 0
        public static class C_INIT_RandomYaw {
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_RandomColor {
            public const nint m_ColorMin = 0x1DC; // Color
            public const nint m_ColorMax = 0x1E0; // Color
            public const nint m_TintMin = 0x1E4; // Color
            public const nint m_TintMax = 0x1E8; // Color
            public const nint m_flTintPerc = 0x1EC; // float32
            public const nint m_flUpdateThreshold = 0x1F0; // float32
            public const nint m_nTintCP = 0x1F4; // int32
            public const nint m_nFieldOutput = 0x1F8; // ParticleAttributeIndex_t
            public const nint m_nTintBlendMode = 0x1FC; // ParticleColorBlendMode_t
            public const nint m_flLightAmplification = 0x200; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 7
        public static class C_INIT_ColorLitPerParticle {
            public const nint m_ColorMin = 0x1D8; // Color
            public const nint m_ColorMax = 0x1DC; // Color
            public const nint m_TintMin = 0x1E0; // Color
            public const nint m_TintMax = 0x1E4; // Color
            public const nint m_flTintPerc = 0x1E8; // float32
            public const nint m_nTintBlendMode = 0x1EC; // ParticleColorBlendMode_t
            public const nint m_flLightAmplification = 0x1F0; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_RandomTrailLength {
            public const nint m_flMinLength = 0x1C0; // float32
            public const nint m_flMaxLength = 0x1C4; // float32
            public const nint m_flLengthRandExponent = 0x1C8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_RandomSequence {
            public const nint m_nSequenceMin = 0x1C0; // int32
            public const nint m_nSequenceMax = 0x1C4; // int32
            public const nint m_bShuffle = 0x1C8; // bool
            public const nint m_bLinear = 0x1C9; // bool
            public const nint m_WeightedList = 0x1D0; // CUtlVector<SequenceWeightedList_t>
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_SequenceFromCP {
            public const nint m_bKillUnused = 0x1C0; // bool
            public const nint m_bRadiusScale = 0x1C1; // bool
            public const nint m_nCP = 0x1C4; // int32
            public const nint m_vecOffset = 0x1C8; // 
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_RandomModelSequence {
            public const nint m_ActivityName = 0x1C0; // char[256]
            public const nint m_SequenceName = 0x2C0; // char[256]
            public const nint m_hModel = 0x3C0; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_ScaleVelocity {
            public const nint m_vecScale = 0x1C0; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_PositionWarp {
            public const nint m_vecWarpMin = 0x1C0; // CParticleCollectionVecInput
            public const nint m_vecWarpMax = 0x818; // CParticleCollectionVecInput
            public const nint m_nScaleControlPointNumber = 0xE70; // int32
            public const nint m_nControlPointNumber = 0xE74; // int32
            public const nint m_nRadiusComponent = 0xE78; // int32
            public const nint m_flWarpTime = 0xE7C; // float32
            public const nint m_flWarpStartTime = 0xE80; // float32
            public const nint m_flPrevPosScale = 0xE84; // float32
            public const nint m_bInvertWarp = 0xE88; // bool
            public const nint m_bUseCount = 0xE89; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_PositionWarpScalar {
            public const nint m_vecWarpMin = 0x1C0; // 
            public const nint m_vecWarpMax = 0x1CC; // 
            public const nint m_InputValue = 0x1D8; // CPerParticleFloatInput
            public const nint m_flPrevPosScale = 0x330; // float32
            public const nint m_nScaleControlPointNumber = 0x334; // int32
            public const nint m_nControlPointNumber = 0x338; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_CreationNoise {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_bAbsVal = 0x1C4; // bool
            public const nint m_bAbsValInv = 0x1C5; // bool
            public const nint m_flOffset = 0x1C8; // float32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_flNoiseScale = 0x1D4; // float32
            public const nint m_flNoiseScaleLoc = 0x1D8; // float32
            public const nint m_vecOffsetLoc = 0x1DC; // 
            public const nint m_flWorldTimeScale = 0x1E8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_CreateAlongPath {
            public const nint m_fMaxDistance = 0x1C0; // float32
            public const nint m_PathParams = 0x1D0; // CPathParameters
            public const nint m_bUseRandomCPs = 0x210; // bool
            public const nint m_vEndOffset = 0x214; // 
            public const nint m_bSaveOffset = 0x220; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 7
        public static class C_INIT_MoveBetweenPoints {
            public const nint m_flSpeedMin = 0x1C0; // CPerParticleFloatInput
            public const nint m_flSpeedMax = 0x318; // CPerParticleFloatInput
            public const nint m_flEndSpread = 0x470; // CPerParticleFloatInput
            public const nint m_flStartOffset = 0x5C8; // CPerParticleFloatInput
            public const nint m_flEndOffset = 0x720; // CPerParticleFloatInput
            public const nint m_nEndControlPointNumber = 0x878; // int32
            public const nint m_bTrailBias = 0x87C; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 11
        public static class C_INIT_RemapScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_flStartTime = 0x1D8; // float32
            public const nint m_flEndTime = 0x1DC; // float32
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1E4; // bool
            public const nint m_flRemapBias = 0x1E8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 12
        public static class C_INIT_RemapParticleCountToScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1C4; // int32
            public const nint m_nInputMax = 0x1C8; // int32
            public const nint m_nScaleControlPoint = 0x1CC; // int32
            public const nint m_nScaleControlPointField = 0x1D0; // int32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_nSetMethod = 0x1DC; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1E0; // bool
            public const nint m_bInvert = 0x1E1; // bool
            public const nint m_bWrap = 0x1E2; // bool
            public const nint m_flRemapBias = 0x1E4; // float32
        }
        // Parent: C_INIT_RemapParticleCountToScalar
        // Fields count: 4
        public static class C_INIT_RemapParticleCountToNamedModelElementScalar {
            public const nint m_hModel = 0x1F0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_outputMinName = 0x1F8; // CUtlString
            public const nint m_outputMaxName = 0x200; // CUtlString
            public const nint m_bModelFromRenderer = 0x208; // bool
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Fields count: 0
        public static class C_INIT_RemapParticleCountToNamedModelSequenceScalar {
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Fields count: 0
        public static class C_INIT_RemapParticleCountToNamedModelBodyPartScalar {
        }
        // Parent: C_INIT_RemapParticleCountToNamedModelElementScalar
        // Fields count: 0
        public static class C_INIT_RemapParticleCountToNamedModelMeshGroupScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_InheritVelocity {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_flVelocityScale = 0x1C4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_VelocityFromCP {
            public const nint m_velocityInput = 0x1C0; // CParticleCollectionVecInput
            public const nint m_transformInput = 0x818; // CParticleTransformInput
            public const nint m_flVelocityScale = 0x880; // float32
            public const nint m_bDirectionOnly = 0x884; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 8
        public static class C_INIT_AgeNoise {
            public const nint m_bAbsVal = 0x1C0; // bool
            public const nint m_bAbsValInv = 0x1C1; // bool
            public const nint m_flOffset = 0x1C4; // float32
            public const nint m_flAgeMin = 0x1C8; // float32
            public const nint m_flAgeMax = 0x1CC; // float32
            public const nint m_flNoiseScale = 0x1D0; // float32
            public const nint m_flNoiseScaleLoc = 0x1D4; // float32
            public const nint m_vecOffsetLoc = 0x1D8; // 
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_SequenceLifeTime {
            public const nint m_flFramerate = 0x1C0; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 12
        public static class C_INIT_RemapScalarToVector {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_vecOutputMin = 0x1D0; // 
            public const nint m_vecOutputMax = 0x1DC; // 
            public const nint m_flStartTime = 0x1E8; // float32
            public const nint m_flEndTime = 0x1EC; // float32
            public const nint m_nSetMethod = 0x1F0; // ParticleSetMethod_t
            public const nint m_nControlPointNumber = 0x1F4; // int32
            public const nint m_bLocalCoords = 0x1F8; // bool
            public const nint m_flRemapBias = 0x1FC; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_OffsetVectorToVector {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1C8; // 
            public const nint m_vecOutputMax = 0x1D4; // 
            public const nint m_randomnessParameters = 0x1E0; // CRandomNumberGeneratorParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_CreateSequentialPathV2 {
            public const nint m_fMaxDistance = 0x1C0; // CPerParticleFloatInput
            public const nint m_flNumToAssign = 0x318; // CParticleCollectionFloatInput
            public const nint m_bLoop = 0x470; // bool
            public const nint m_bCPPairs = 0x471; // bool
            public const nint m_bSaveOffset = 0x472; // bool
            public const nint m_PathParams = 0x480; // CPathParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_CreateSequentialPath {
            public const nint m_fMaxDistance = 0x1C0; // float32
            public const nint m_flNumToAssign = 0x1C4; // float32
            public const nint m_bLoop = 0x1C8; // bool
            public const nint m_bCPPairs = 0x1C9; // bool
            public const nint m_bSaveOffset = 0x1CA; // bool
            public const nint m_PathParams = 0x1D0; // CPathParameters
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 13
        public static class C_INIT_InitialRepulsionVelocity {
            public const nint m_CollisionGroupName = 0x1C0; // char[128]
            public const nint m_nTraceSet = 0x240; // ParticleTraceSet_t
            public const nint m_vecOutputMin = 0x244; // 
            public const nint m_vecOutputMax = 0x250; // 
            public const nint m_nControlPointNumber = 0x25C; // int32
            public const nint m_bPerParticle = 0x260; // bool
            public const nint m_bTranslate = 0x261; // bool
            public const nint m_bProportional = 0x262; // bool
            public const nint m_flTraceLength = 0x264; // float32
            public const nint m_bPerParticleTR = 0x268; // bool
            public const nint m_bInherit = 0x269; // bool
            public const nint m_nChildCP = 0x26C; // int32
            public const nint m_nChildGroupID = 0x270; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_RandomYawFlip {
            public const nint m_flPercent = 0x1C0; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_RandomSecondSequence {
            public const nint m_nSequenceMin = 0x1C0; // int32
            public const nint m_nSequenceMax = 0x1C4; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 11
        public static class C_INIT_RemapCPtoScalar {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nField = 0x1C8; // int32
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flStartTime = 0x1DC; // float32
            public const nint m_flEndTime = 0x1E0; // float32
            public const nint m_nSetMethod = 0x1E4; // ParticleSetMethod_t
            public const nint m_flRemapBias = 0x1E8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 13
        public static class C_INIT_RemapTransformToVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vInputMin = 0x1C4; // 
            public const nint m_vInputMax = 0x1D0; // 
            public const nint m_vOutputMin = 0x1DC; // 
            public const nint m_vOutputMax = 0x1E8; // 
            public const nint m_TransformInput = 0x1F8; // CParticleTransformInput
            public const nint m_LocalSpaceTransform = 0x260; // CParticleTransformInput
            public const nint m_flStartTime = 0x2C8; // float32
            public const nint m_flEndTime = 0x2CC; // float32
            public const nint m_nSetMethod = 0x2D0; // ParticleSetMethod_t
            public const nint m_bOffset = 0x2D4; // bool
            public const nint m_bAccelerate = 0x2D5; // bool
            public const nint m_flRemapBias = 0x2D8; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 9
        public static class C_INIT_ChaoticAttractor {
            public const nint m_flAParm = 0x1C0; // float32
            public const nint m_flBParm = 0x1C4; // float32
            public const nint m_flCParm = 0x1C8; // float32
            public const nint m_flDParm = 0x1CC; // float32
            public const nint m_flScale = 0x1D0; // float32
            public const nint m_flSpeedMin = 0x1D4; // float32
            public const nint m_flSpeedMax = 0x1D8; // float32
            public const nint m_nBaseCP = 0x1DC; // int32
            public const nint m_bUniformSpeed = 0x1E0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_CreateFromParentParticles {
            public const nint m_flVelocityScale = 0x1C0; // float32
            public const nint m_flIncrement = 0x1C4; // float32
            public const nint m_bRandomDistribution = 0x1C8; // bool
            public const nint m_nRandomSeed = 0x1CC; // int32
            public const nint m_bSubFrame = 0x1D0; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_InheritFromParentParticles {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_bRandomDistribution = 0x1CC; // bool
            public const nint m_nRandomSeed = 0x1D0; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_CreateFromCPs {
            public const nint m_nIncrement = 0x1C0; // int32
            public const nint m_nMinCP = 0x1C4; // int32
            public const nint m_nMaxCP = 0x1C8; // int32
            public const nint m_nDynamicCPCount = 0x1D0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 15
        public static class C_INIT_DistanceToCPInit {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x478; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5D0; // CPerParticleFloatInput
            public const nint m_nStartCP = 0x728; // int32
            public const nint m_bLOS = 0x72C; // bool
            public const nint m_CollisionGroupName = 0x72D; // char[128]
            public const nint m_nTraceSet = 0x7B0; // ParticleTraceSet_t
            public const nint m_flMaxTraceLength = 0x7B8; // CPerParticleFloatInput
            public const nint m_flLOSScale = 0x910; // float32
            public const nint m_nSetMethod = 0x914; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x918; // bool
            public const nint m_vecDistanceScale = 0x91C; // 
            public const nint m_flRemapBias = 0x928; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 8
        public static class C_INIT_LifespanFromVelocity {
            public const nint m_vecComponentScale = 0x1C0; // 
            public const nint m_flTraceOffset = 0x1CC; // float32
            public const nint m_flMaxTraceLength = 0x1D0; // float32
            public const nint m_flTraceTolerance = 0x1D4; // float32
            public const nint m_nMaxPlanes = 0x1D8; // int32
            public const nint m_CollisionGroupName = 0x1E0; // char[128]
            public const nint m_nTraceSet = 0x260; // ParticleTraceSet_t
            public const nint m_bIncludeWater = 0x270; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_CreateFromPlaneCache {
            public const nint m_vecOffsetMin = 0x1C0; // 
            public const nint m_vecOffsetMax = 0x1CC; // 
            public const nint m_bUseNormal = 0x1D9; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_ModelCull {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_bBoundBox = 0x1C4; // bool
            public const nint m_bCullOutside = 0x1C5; // bool
            public const nint m_bUseBones = 0x1C6; // bool
            public const nint m_HitboxSetName = 0x1C7; // char[128]
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_DistanceCull {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_flDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_bCullInside = 0x320; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 3
        public static class C_INIT_PlaneCull {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_flDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_bCullInside = 0x320; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_DistanceToNeighborCull {
            public const nint m_flDistance = 0x1C0; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 8
        public static class C_INIT_RtEnvCull {
            public const nint m_vecTestDir = 0x1C0; // 
            public const nint m_vecTestNormal = 0x1CC; // 
            public const nint m_bUseVelocity = 0x1D8; // bool
            public const nint m_bCullOnMiss = 0x1D9; // bool
            public const nint m_bLifeAdjust = 0x1DA; // bool
            public const nint m_RtEnvName = 0x1DB; // char[128]
            public const nint m_nRTEnvCP = 0x25C; // int32
            public const nint m_nComponent = 0x260; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_NormalAlignToCP {
            public const nint m_transformInput = 0x1C0; // CParticleTransformInput
            public const nint m_nControlPointAxis = 0x228; // ParticleControlPointAxis_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_NormalOffset {
            public const nint m_OffsetMin = 0x1C0; // 
            public const nint m_OffsetMax = 0x1CC; // 
            public const nint m_nControlPointNumber = 0x1D8; // int32
            public const nint m_bLocalCoords = 0x1DC; // bool
            public const nint m_bNormalize = 0x1DD; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_RemapSpeedToScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_flStartTime = 0x1C8; // float32
            public const nint m_flEndTime = 0x1CC; // float32
            public const nint m_flInputMin = 0x1D0; // float32
            public const nint m_flInputMax = 0x1D4; // float32
            public const nint m_flOutputMin = 0x1D8; // float32
            public const nint m_flOutputMax = 0x1DC; // float32
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
            public const nint m_bPerParticle = 0x1E4; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 10
        public static class C_INIT_InitFromCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nAttributeToRead = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nAttributeToWrite = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1CC; // int32
            public const nint m_bRandom = 0x1D0; // bool
            public const nint m_bReverse = 0x1D1; // bool
            public const nint m_nSnapShotIncrement = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_nManualSnapshotIndex = 0x330; // CPerParticleFloatInput
            public const nint m_nRandomSeed = 0x488; // int32
            public const nint m_bLocalSpaceAngles = 0x48C; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 19
        public static class C_INIT_InitSkinnedPositionFromCPSnapshot {
            public const nint m_nSnapshotControlPointNumber = 0x1C0; // int32
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_bRandom = 0x1C8; // bool
            public const nint m_nRandomSeed = 0x1CC; // int32
            public const nint m_bRigid = 0x1D0; // bool
            public const nint m_bSetNormal = 0x1D1; // bool
            public const nint m_bIgnoreDt = 0x1D2; // bool
            public const nint m_flMinNormalVelocity = 0x1D4; // float32
            public const nint m_flMaxNormalVelocity = 0x1D8; // float32
            public const nint m_nIndexType = 0x1DC; // SnapshotIndexType_t
            public const nint m_flReadIndex = 0x1E0; // CPerParticleFloatInput
            public const nint m_flIncrement = 0x338; // float32
            public const nint m_nFullLoopIncrement = 0x33C; // int32
            public const nint m_nSnapShotStartPoint = 0x340; // int32
            public const nint m_flBoneVelocity = 0x344; // float32
            public const nint m_flBoneVelocityMax = 0x348; // float32
            public const nint m_bCopyColor = 0x34C; // bool
            public const nint m_bCopyAlpha = 0x34D; // bool
            public const nint m_bSetRadius = 0x34E; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_InitFromParentKilled {
            public const nint m_nAttributeToCopy = 0x1C0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_InitFromVectorFieldSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nLocalSpaceCP = 0x1C4; // int32
            public const nint m_nWeightUpdateCP = 0x1C8; // int32
            public const nint m_bUseVerticalVelocity = 0x1CC; // bool
            public const nint m_vecScale = 0x1D0; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_RemapInitialDirectionToTransformToVector {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x228; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x22C; // float32
            public const nint m_flOffsetRot = 0x230; // float32
            public const nint m_vecOffsetAxis = 0x234; // 
            public const nint m_bNormalize = 0x240; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RemapInitialTransformDirectionToRotation {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x228; // ParticleAttributeIndex_t
            public const nint m_flOffsetRot = 0x22C; // float32
            public const nint m_nComponent = 0x230; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_RemapQAnglesToRotation {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_RemapTransformOrientationToRotations {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_vecRotation = 0x228; // 
            public const nint m_bUseQuat = 0x234; // bool
            public const nint m_bWriteNormal = 0x235; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_SetRigidAttachment {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_bLocalSpace = 0x1CC; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_RemapInitialVisibilityScalar {
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 1
        public static class C_INIT_RadiusFromCPObject {
            public const nint m_nControlPoint = 0x1C0; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 8
        public static class C_INIT_InitialSequenceFromModel {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputAnim = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_nSetMethod = 0x1DC; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_GlobalScale {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nScaleControlPointNumber = 0x1C4; // int32
            public const nint m_nControlPointNumber = 0x1C8; // int32
            public const nint m_bScaleRadius = 0x1CC; // bool
            public const nint m_bScalePosition = 0x1CD; // bool
            public const nint m_bScaleVelocity = 0x1CE; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_PointList {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_pointList = 0x1C8; // CUtlVector<PointDefinition_t>
            public const nint m_bPlaceAlongPath = 0x1E0; // bool
            public const nint m_bClosedLoop = 0x1E1; // bool
            public const nint m_nNumPointsAlongPath = 0x1E4; // int32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_RandomNamedModelElement {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_names = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_bShuffle = 0x1E0; // bool
            public const nint m_bLinear = 0x1E1; // bool
            public const nint m_bModelFromRenderer = 0x1E2; // bool
            public const nint m_nFieldOutput = 0x1E4; // ParticleAttributeIndex_t
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Fields count: 0
        public static class C_INIT_RandomNamedModelSequence {
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Fields count: 0
        public static class C_INIT_RandomNamedModelBodyPart {
        }
        // Parent: C_INIT_RandomNamedModelElement
        // Fields count: 0
        public static class C_INIT_RandomNamedModelMeshGroup {
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 7
        public static class C_INIT_RemapNamedModelElementToScalar {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_names = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_values = 0x1E0; // CUtlVector<float32>
            public const nint m_nFieldInput = 0x1F8; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1FC; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x200; // ParticleSetMethod_t
            public const nint m_bModelFromRenderer = 0x204; // bool
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Fields count: 0
        public static class C_INIT_RemapNamedModelSequenceToScalar {
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Fields count: 0
        public static class C_INIT_RemapNamedModelBodyPartToScalar {
        }
        // Parent: C_INIT_RemapNamedModelElementToScalar
        // Fields count: 0
        public static class C_INIT_RemapNamedModelMeshGroupToScalar {
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 18
        public static class C_INIT_StatusEffect {
            public const nint m_nDetail2Combo = 0x1C0; // Detail2Combo_t
            public const nint m_flDetail2Rotation = 0x1C4; // float32
            public const nint m_flDetail2Scale = 0x1C8; // float32
            public const nint m_flDetail2BlendFactor = 0x1CC; // float32
            public const nint m_flColorWarpIntensity = 0x1D0; // float32
            public const nint m_flDiffuseWarpBlendToFull = 0x1D4; // float32
            public const nint m_flEnvMapIntensity = 0x1D8; // float32
            public const nint m_flAmbientScale = 0x1DC; // float32
            public const nint m_specularColor = 0x1E0; // Color
            public const nint m_flSpecularScale = 0x1E4; // float32
            public const nint m_flSpecularExponent = 0x1E8; // float32
            public const nint m_flSpecularExponentBlendToFull = 0x1EC; // float32
            public const nint m_flSpecularBlendToFull = 0x1F0; // float32
            public const nint m_rimLightColor = 0x1F4; // Color
            public const nint m_flRimLightScale = 0x1F8; // float32
            public const nint m_flReflectionsTintByBaseBlendToNone = 0x1FC; // float32
            public const nint m_flMetalnessBlendToFull = 0x200; // float32
            public const nint m_flSelfIllumBlendToFull = 0x204; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 19
        public static class C_INIT_StatusEffectCitadel {
            public const nint m_flSFXColorWarpAmount = 0x1C0; // float32
            public const nint m_flSFXNormalAmount = 0x1C4; // float32
            public const nint m_flSFXMetalnessAmount = 0x1C8; // float32
            public const nint m_flSFXRoughnessAmount = 0x1CC; // float32
            public const nint m_flSFXSelfIllumAmount = 0x1D0; // float32
            public const nint m_flSFXSScale = 0x1D4; // float32
            public const nint m_flSFXSScrollX = 0x1D8; // float32
            public const nint m_flSFXSScrollY = 0x1DC; // float32
            public const nint m_flSFXSScrollZ = 0x1E0; // float32
            public const nint m_flSFXSOffsetX = 0x1E4; // float32
            public const nint m_flSFXSOffsetY = 0x1E8; // float32
            public const nint m_flSFXSOffsetZ = 0x1EC; // float32
            public const nint m_nDetailCombo = 0x1F0; // DetailCombo_t
            public const nint m_flSFXSDetailAmount = 0x1F4; // float32
            public const nint m_flSFXSDetailScale = 0x1F8; // float32
            public const nint m_flSFXSDetailScrollX = 0x1FC; // float32
            public const nint m_flSFXSDetailScrollY = 0x200; // float32
            public const nint m_flSFXSDetailScrollZ = 0x204; // float32
            public const nint m_flSFXSUseModelUVs = 0x208; // float32
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_CreateParticleImpulse {
            public const nint m_InputRadius = 0x1C0; // CPerParticleFloatInput
            public const nint m_InputMagnitude = 0x318; // CPerParticleFloatInput
            public const nint m_nFalloffFunction = 0x470; // ParticleFalloffFunction_t
            public const nint m_InputFalloffExp = 0x478; // CPerParticleFloatInput
            public const nint m_nImpulseType = 0x5D0; // ParticleImpulseType_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_QuantizeFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_SetAttributeToScalarExpression {
            public const nint m_nExpression = 0x1C0; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInput2 = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputRemap = 0x478; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0x5D0; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x5D4; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 6
        public static class C_INIT_SetVectorAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C0; // VectorExpressionType_t
            public const nint m_vInput1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vInput2 = 0x820; // CPerParticleVecInput
            public const nint m_nOutputField = 0xE78; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0xE7C; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0xE80; // bool
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_InitFloatCollection {
            public const nint m_InputValue = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 4
        public static class C_INIT_InitFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x31C; // ParticleSetMethod_t
            public const nint m_InputStrength = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 2
        public static class C_INIT_InitVecCollection {
            public const nint m_InputValue = 0x1C0; // CParticleCollectionVecInput
            public const nint m_nOutputField = 0x818; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionInitializer
        // Fields count: 5
        public static class C_INIT_InitVec {
            public const nint m_InputValue = 0x1C0; // CPerParticleVecInput
            public const nint m_nOutputField = 0x818; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x81C; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0x820; // bool
            public const nint m_bWritePreviousPosition = 0x821; // bool
        }
        // Parent: CParticleFunctionEmitter
        // Fields count: 6
        public static class C_OP_InstantaneousEmitter {
            public const nint m_nParticlesToEmit = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x318; // CParticleCollectionFloatInput
            public const nint m_flInitFromKilledParentParticles = 0x470; // float32
            public const nint m_flParentParticleScale = 0x478; // CParticleCollectionFloatInput
            public const nint m_nMaxEmittedPerFrame = 0x5D0; // int32
            public const nint m_nSnapshotControlPoint = 0x5D4; // int32
        }
        // Parent: CParticleFunctionEmitter
        // Fields count: 10
        public static class C_OP_ContinuousEmitter {
            public const nint m_flEmissionDuration = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x318; // CParticleCollectionFloatInput
            public const nint m_flEmitRate = 0x470; // CParticleCollectionFloatInput
            public const nint m_flEmissionScale = 0x5C8; // float32
            public const nint m_flScalePerParentParticle = 0x5CC; // float32
            public const nint m_bInitFromKilledParentParticles = 0x5D0; // bool
            public const nint m_nSnapshotControlPoint = 0x5D4; // int32
            public const nint m_nLimitPerUpdate = 0x5D8; // int32
            public const nint m_bForceEmitOnFirstUpdate = 0x5DC; // bool
            public const nint m_bForceEmitOnLastUpdate = 0x5DD; // bool
        }
        // Parent: CParticleFunctionEmitter
        // Fields count: 15
        public static class C_OP_NoiseEmitter {
            public const nint m_flEmissionDuration = 0x1C0; // float32
            public const nint m_flStartTime = 0x1C4; // float32
            public const nint m_flEmissionScale = 0x1C8; // float32
            public const nint m_nScaleControlPoint = 0x1CC; // int32
            public const nint m_nScaleControlPointField = 0x1D0; // int32
            public const nint m_nWorldNoisePoint = 0x1D4; // int32
            public const nint m_bAbsVal = 0x1D8; // bool
            public const nint m_bAbsValInv = 0x1D9; // bool
            public const nint m_flOffset = 0x1DC; // float32
            public const nint m_flOutputMin = 0x1E0; // float32
            public const nint m_flOutputMax = 0x1E4; // float32
            public const nint m_flNoiseScale = 0x1E8; // float32
            public const nint m_flWorldNoiseScale = 0x1EC; // float32
            public const nint m_vecOffsetLoc = 0x1F0; // 
            public const nint m_flWorldTimeScale = 0x1FC; // float32
        }
        // Parent: CParticleFunctionEmitter
        // Fields count: 8
        public static class C_OP_MaintainEmitter {
            public const nint m_nParticlesToMaintain = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flStartTime = 0x318; // float32
            public const nint m_flEmissionDuration = 0x320; // CParticleCollectionFloatInput
            public const nint m_flEmissionRate = 0x478; // float32
            public const nint m_nSnapshotControlPoint = 0x47C; // int32
            public const nint m_bEmitInstantaneously = 0x480; // bool
            public const nint m_bFinalEmitOnStop = 0x481; // bool
            public const nint m_flScale = 0x488; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionForce
        // Fields count: 2
        public static class C_OP_RandomForce {
            public const nint m_MinForce = 0x1D0; // 
            public const nint m_MaxForce = 0x1DC; // 
        }
        // Parent: CParticleFunctionForce
        // Fields count: 2
        public static class C_OP_CPVelocityForce {
            public const nint m_nControlPointNumber = 0x1D0; // int32
            public const nint m_flScale = 0x1D8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionForce
        // Fields count: 3
        public static class C_OP_ParentVortices {
            public const nint m_flForceScale = 0x1D0; // float32
            public const nint m_vecTwistAxis = 0x1D4; // 
            public const nint m_bFlipBasedOnYaw = 0x1E0; // bool
        }
        // Parent: CParticleFunctionForce
        // Fields count: 4
        public static class C_OP_TwistAroundAxis {
            public const nint m_fForceAmount = 0x1D0; // float32
            public const nint m_TwistAxis = 0x1D4; // 
            public const nint m_bLocalSpace = 0x1E0; // bool
            public const nint m_nControlPointNumber = 0x1E4; // int32
        }
        // Parent: CParticleFunctionForce
        // Fields count: 6
        public static class C_OP_AttractToControlPoint {
            public const nint m_vecComponentScale = 0x1D0; // 
            public const nint m_fForceAmount = 0x1E0; // CPerParticleFloatInput
            public const nint m_fFalloffPower = 0x338; // float32
            public const nint m_TransformInput = 0x340; // CParticleTransformInput
            public const nint m_fForceAmountMin = 0x3A8; // CPerParticleFloatInput
            public const nint m_bApplyMinForce = 0x500; // bool
        }
        // Parent: CParticleFunctionForce
        // Fields count: 7
        public static class C_OP_ForceBasedOnDistanceToPlane {
            public const nint m_flMinDist = 0x1D0; // float32
            public const nint m_vecForceAtMinDist = 0x1D4; // 
            public const nint m_flMaxDist = 0x1E0; // float32
            public const nint m_vecForceAtMaxDist = 0x1E4; // 
            public const nint m_vecPlaneNormal = 0x1F0; // 
            public const nint m_nControlPointNumber = 0x1FC; // int32
            public const nint m_flExponent = 0x200; // float32
        }
        // Parent: CParticleFunctionForce
        // Fields count: 4
        public static class C_OP_TimeVaryingForce {
            public const nint m_flStartLerpTime = 0x1D0; // float32
            public const nint m_StartingForce = 0x1D4; // 
            public const nint m_flEndLerpTime = 0x1E0; // float32
            public const nint m_EndingForce = 0x1E4; // 
        }
        // Parent: CParticleFunctionForce
        // Fields count: 8
        public static class C_OP_TurbulenceForce {
            public const nint m_flNoiseCoordScale0 = 0x1D0; // float32
            public const nint m_flNoiseCoordScale1 = 0x1D4; // float32
            public const nint m_flNoiseCoordScale2 = 0x1D8; // float32
            public const nint m_flNoiseCoordScale3 = 0x1DC; // float32
            public const nint m_vecNoiseAmount0 = 0x1E0; // 
            public const nint m_vecNoiseAmount1 = 0x1EC; // 
            public const nint m_vecNoiseAmount2 = 0x1F8; // 
            public const nint m_vecNoiseAmount3 = 0x204; // 
        }
        // Parent: CParticleFunctionForce
        // Fields count: 7
        public static class C_OP_CurlNoiseForce {
            public const nint m_nNoiseType = 0x1D0; // ParticleDirectionNoiseType_t
            public const nint m_vecNoiseFreq = 0x1D8; // CPerParticleVecInput
            public const nint m_vecNoiseScale = 0x830; // CPerParticleVecInput
            public const nint m_vecOffset = 0xE88; // CPerParticleVecInput
            public const nint m_vecOffsetRate = 0x14E0; // CPerParticleVecInput
            public const nint m_flWorleySeed = 0x1B38; // CPerParticleFloatInput
            public const nint m_flWorleyJitter = 0x1C90; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionForce
        // Fields count: 3
        public static class C_OP_PerParticleForce {
            public const nint m_flForceScale = 0x1D0; // CPerParticleFloatInput
            public const nint m_vForce = 0x328; // CPerParticleVecInput
            public const nint m_nCP = 0x980; // int32
        }
        // Parent: CParticleFunctionForce
        // Fields count: 1
        public static class C_OP_WindForce {
            public const nint m_vForce = 0x1D0; // 
        }
        // Parent: CParticleFunctionForce
        // Fields count: 11
        public static class C_OP_ExternalWindForce {
            public const nint m_vecSamplePosition = 0x1D0; // CPerParticleVecInput
            public const nint m_vecScale = 0x828; // CPerParticleVecInput
            public const nint m_bSampleWind = 0xE80; // bool
            public const nint m_bSampleWater = 0xE81; // bool
            public const nint m_bDampenNearWaterPlane = 0xE82; // bool
            public const nint m_bSampleGravity = 0xE83; // bool
            public const nint m_vecGravityForce = 0xE88; // CPerParticleVecInput
            public const nint m_bUseBasicMovementGravity = 0x14E0; // bool
            public const nint m_flLocalGravityScale = 0x14E8; // CPerParticleFloatInput
            public const nint m_flLocalBuoyancyScale = 0x1640; // CPerParticleFloatInput
            public const nint m_vecBuoyancyForce = 0x1798; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionForce
        // Fields count: 5
        public static class C_OP_ExternalGameImpulseForce {
            public const nint m_flForceScale = 0x1D0; // CPerParticleFloatInput
            public const nint m_bRopes = 0x328; // bool
            public const nint m_bRopesZOnly = 0x329; // bool
            public const nint m_bExplosions = 0x32A; // bool
            public const nint m_bParticles = 0x32B; // bool
        }
        // Parent: CParticleFunctionForce
        // Fields count: 3
        public static class C_OP_LocalAccelerationForce {
            public const nint m_nCP = 0x1D0; // int32
            public const nint m_nScaleCP = 0x1D4; // int32
            public const nint m_vecAccel = 0x1D8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionForce
        // Fields count: 3
        public static class C_OP_DensityForce {
            public const nint m_flRadiusScale = 0x1D0; // float32
            public const nint m_flForceScale = 0x1D4; // float32
            public const nint m_flTargetDensity = 0x1D8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_BasicMovement {
            public const nint m_Gravity = 0x1C0; // CParticleCollectionVecInput
            public const nint m_fDrag = 0x818; // CParticleCollectionFloatInput
            public const nint m_nMaxConstraintPasses = 0x970; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_FadeAndKill {
            public const nint m_flStartFadeInTime = 0x1C0; // float32
            public const nint m_flEndFadeInTime = 0x1C4; // float32
            public const nint m_flStartFadeOutTime = 0x1C8; // float32
            public const nint m_flEndFadeOutTime = 0x1CC; // float32
            public const nint m_flStartAlpha = 0x1D0; // float32
            public const nint m_flEndAlpha = 0x1D4; // float32
            public const nint m_bForcePreserveParticleOrder = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_FadeAndKillForTracers {
            public const nint m_flStartFadeInTime = 0x1C0; // float32
            public const nint m_flEndFadeInTime = 0x1C4; // float32
            public const nint m_flStartFadeOutTime = 0x1C8; // float32
            public const nint m_flEndFadeOutTime = 0x1CC; // float32
            public const nint m_flStartAlpha = 0x1D0; // float32
            public const nint m_flEndAlpha = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_FadeIn {
            public const nint m_flFadeInTimeMin = 0x1C0; // float32
            public const nint m_flFadeInTimeMax = 0x1C4; // float32
            public const nint m_flFadeInTimeExp = 0x1C8; // float32
            public const nint m_bProportional = 0x1CC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_FadeOut {
            public const nint m_flFadeOutTimeMin = 0x1C0; // float32
            public const nint m_flFadeOutTimeMax = 0x1C4; // float32
            public const nint m_flFadeOutTimeExp = 0x1C8; // float32
            public const nint m_flFadeBias = 0x1CC; // float32
            public const nint m_bProportional = 0x200; // bool
            public const nint m_bEaseInAndOut = 0x201; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_FadeInSimple {
            public const nint m_flFadeInTime = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_FadeOutSimple {
            public const nint m_flFadeOutTime = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_ClampScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_ClampVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1C8; // CPerParticleVecInput
            public const nint m_vecOutputMax = 0x820; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 13
        public static class C_OP_OscillateScalar {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_FrequencyMin = 0x1C8; // float32
            public const nint m_FrequencyMax = 0x1CC; // float32
            public const nint m_nField = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_bProportional = 0x1D4; // bool
            public const nint m_bProportionalOp = 0x1D5; // bool
            public const nint m_flStartTime_min = 0x1D8; // float32
            public const nint m_flStartTime_max = 0x1DC; // float32
            public const nint m_flEndTime_min = 0x1E0; // float32
            public const nint m_flEndTime_max = 0x1E4; // float32
            public const nint m_flOscMult = 0x1E8; // float32
            public const nint m_flOscAdd = 0x1EC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_OscillateScalarSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_Frequency = 0x1C4; // float32
            public const nint m_nField = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flOscMult = 0x1CC; // float32
            public const nint m_flOscAdd = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 15
        public static class C_OP_OscillateVector {
            public const nint m_RateMin = 0x1C0; // 
            public const nint m_RateMax = 0x1CC; // 
            public const nint m_FrequencyMin = 0x1D8; // 
            public const nint m_FrequencyMax = 0x1E4; // 
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
            public const nint m_bProportional = 0x1F4; // bool
            public const nint m_bProportionalOp = 0x1F5; // bool
            public const nint m_bOffset = 0x1F6; // bool
            public const nint m_flStartTime_min = 0x1F8; // float32
            public const nint m_flStartTime_max = 0x1FC; // float32
            public const nint m_flEndTime_min = 0x200; // float32
            public const nint m_flEndTime_max = 0x204; // float32
            public const nint m_flOscMult = 0x208; // CPerParticleFloatInput
            public const nint m_flOscAdd = 0x360; // CPerParticleFloatInput
            public const nint m_flRateScale = 0x4B8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_OscillateVectorSimple {
            public const nint m_Rate = 0x1C0; // 
            public const nint m_Frequency = 0x1CC; // 
            public const nint m_nField = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_flOscMult = 0x1DC; // float32
            public const nint m_flOscAdd = 0x1E0; // float32
            public const nint m_bOffset = 0x1E4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_DifferencePreviousParticle {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1DC; // bool
            public const nint m_bSetPreviousParticle = 0x1DD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_PointVectorAtNextParticle {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInterpolation = 0x1C8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_bOldCode = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapDensityToVector {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flDensityMin = 0x1C8; // float32
            public const nint m_flDensityMax = 0x1CC; // float32
            public const nint m_vecOutputMin = 0x1D0; // 
            public const nint m_vecOutputMax = 0x1DC; // 
            public const nint m_bUseParentDensity = 0x1E8; // bool
            public const nint m_nVoxelGridResolution = 0x1EC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_Diffusion {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nVoxelGridResolution = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_RemapScalarEndCap {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_ReinitializeScalarEndCap {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C4; // float32
            public const nint m_flOutputMax = 0x1C8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapScalarOnceTimed {
            public const nint m_bProportional = 0x1C0; // bool
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flRemapTime = 0x1DC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapParticleCountOnScalarEndCap {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1C4; // int32
            public const nint m_nInputMax = 0x1C8; // int32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_bBackwards = 0x1D4; // bool
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapParticleCountToScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nInputMin = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_nInputMax = 0x320; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x478; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5D0; // CParticleCollectionFloatInput
            public const nint m_bActiveRange = 0x728; // bool
            public const nint m_nSetMethod = 0x72C; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapVisibilityScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // float32
            public const nint m_flInputMax = 0x1CC; // float32
            public const nint m_flOutputMin = 0x1D0; // float32
            public const nint m_flOutputMax = 0x1D4; // float32
            public const nint m_flRadiusScale = 0x1D8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapTransformVisibilityToScalar {
            public const nint m_nSetMethod = 0x1C0; // ParticleSetMethod_t
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x234; // float32
            public const nint m_flInputMax = 0x238; // float32
            public const nint m_flOutputMin = 0x23C; // float32
            public const nint m_flOutputMax = 0x240; // float32
            public const nint m_flRadius = 0x244; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapTransformVisibilityToVector {
            public const nint m_nSetMethod = 0x1C0; // ParticleSetMethod_t
            public const nint m_TransformInput = 0x1C8; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x230; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x234; // float32
            public const nint m_flInputMax = 0x238; // float32
            public const nint m_vecOutputMin = 0x23C; // 
            public const nint m_vecOutputMax = 0x248; // 
            public const nint m_flRadius = 0x254; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_LerpScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutput = 0x1C8; // CPerParticleFloatInput
            public const nint m_flStartTime = 0x320; // float32
            public const nint m_flEndTime = 0x324; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_LerpEndCapScalar {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutput = 0x1C4; // float32
            public const nint m_flLerpTime = 0x1C8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_LerpEndCapVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutput = 0x1C4; // 
            public const nint m_flLerpTime = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_LerpVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutput = 0x1C4; // 
            public const nint m_flStartTime = 0x1D0; // float32
            public const nint m_flEndTime = 0x1D4; // float32
            public const nint m_nSetMethod = 0x1D8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_LerpToOtherAttribute {
            public const nint m_flInterpolation = 0x1C0; // CPerParticleFloatInput
            public const nint m_nFieldInputFrom = 0x318; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x31C; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x320; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapSpeed {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_nSetMethod = 0x1D4; // ParticleSetMethod_t
            public const nint m_bIgnoreDelta = 0x1D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_RemapVectortoCP {
            public const nint m_nOutControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nParticleNumber = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RampScalarLinear {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_flStartTime_min = 0x1C8; // float32
            public const nint m_flStartTime_max = 0x1CC; // float32
            public const nint m_flEndTime_min = 0x1D0; // float32
            public const nint m_flEndTime_max = 0x1D4; // float32
            public const nint m_nField = 0x200; // ParticleAttributeIndex_t
            public const nint m_bProportionalOp = 0x204; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 10
        public static class C_OP_RampScalarSpline {
            public const nint m_RateMin = 0x1C0; // float32
            public const nint m_RateMax = 0x1C4; // float32
            public const nint m_flStartTime_min = 0x1C8; // float32
            public const nint m_flStartTime_max = 0x1CC; // float32
            public const nint m_flEndTime_min = 0x1D0; // float32
            public const nint m_flEndTime_max = 0x1D4; // float32
            public const nint m_flBias = 0x1D8; // float32
            public const nint m_nField = 0x200; // ParticleAttributeIndex_t
            public const nint m_bProportionalOp = 0x204; // bool
            public const nint m_bEaseOut = 0x205; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RampScalarLinearSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_flStartTime = 0x1C4; // float32
            public const nint m_flEndTime = 0x1C8; // float32
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_RampScalarSplineSimple {
            public const nint m_Rate = 0x1C0; // float32
            public const nint m_flStartTime = 0x1C4; // float32
            public const nint m_flEndTime = 0x1C8; // float32
            public const nint m_nField = 0x1F0; // ParticleAttributeIndex_t
            public const nint m_bEaseOut = 0x1F4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 10
        public static class C_OP_ChladniWave {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x478; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5D0; // CPerParticleFloatInput
            public const nint m_vecWaveLength = 0x728; // CPerParticleVecInput
            public const nint m_vecHarmonics = 0xD80; // CPerParticleVecInput
            public const nint m_nSetMethod = 0x13D8; // ParticleSetMethod_t
            public const nint m_nLocalSpaceControlPoint = 0x13DC; // int32
            public const nint m_b3D = 0x13E0; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_Noise {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flOutputMin = 0x1C4; // float32
            public const nint m_flOutputMax = 0x1C8; // float32
            public const nint m_fl4NoiseScale = 0x1CC; // float32
            public const nint m_bAdditive = 0x1D0; // bool
            public const nint m_flNoiseAnimationTimeScale = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_VectorNoise {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecOutputMin = 0x1C4; // 
            public const nint m_vecOutputMax = 0x1D0; // 
            public const nint m_fl4NoiseScale = 0x1DC; // float32
            public const nint m_bAdditive = 0x1E0; // bool
            public const nint m_bOffset = 0x1E1; // bool
            public const nint m_flNoiseAnimationTimeScale = 0x1E4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_Decay {
            public const nint m_bRopeDecay = 0x1C0; // bool
            public const nint m_bForcePreserveParticleOrder = 0x1C1; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_DecayOffscreen {
            public const nint m_flOffscreenTime = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_EndCapTimedFreeze {
            public const nint m_flFreezeTime = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_EndCapTimedDecay {
            public const nint m_flDecayTime = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 0
        public static class C_OP_EndCapDecay {
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_VelocityDecay {
            public const nint m_flMinVelocity = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_AlphaDecay {
            public const nint m_flMinAlpha = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_RadiusDecay {
            public const nint m_flMinRadius = 0x1C0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_DecayMaintainCount {
            public const nint m_nParticlesToMaintain = 0x1C0; // int32
            public const nint m_flDecayDelay = 0x1C4; // float32
            public const nint m_nSnapshotControlPoint = 0x1C8; // int32
            public const nint m_bLifespanDecay = 0x1CC; // bool
            public const nint m_flScale = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bKillNewest = 0x328; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_DecayClampCount {
            public const nint m_nCount = 0x1C0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_Cull {
            public const nint m_flCullPerc = 0x1C0; // float32
            public const nint m_flCullStart = 0x1C4; // float32
            public const nint m_flCullEnd = 0x1C8; // float32
            public const nint m_flCullExp = 0x1CC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class CGeneralSpin {
            public const nint m_nSpinRateDegrees = 0x1C0; // int32
            public const nint m_nSpinRateMinDegrees = 0x1C4; // int32
            public const nint m_fSpinRateStopTime = 0x1CC; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 0
        public static class CSpinUpdateBase {
        }
        // Parent: CGeneralSpin
        // Fields count: 0
        public static class C_OP_Spin {
        }
        // Parent: CSpinUpdateBase
        // Fields count: 0
        public static class C_OP_SpinUpdate {
        }
        // Parent: CGeneralSpin
        // Fields count: 0
        public static class C_OP_SpinYaw {
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_InterpolateRadius {
            public const nint m_flStartTime = 0x1C0; // float32
            public const nint m_flEndTime = 0x1C4; // float32
            public const nint m_flStartScale = 0x1C8; // float32
            public const nint m_flEndScale = 0x1CC; // float32
            public const nint m_bEaseInAndOut = 0x1D0; // bool
            public const nint m_flBias = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_ColorInterpolate {
            public const nint m_ColorFade = 0x1C0; // Color
            public const nint m_flFadeStartTime = 0x1D0; // float32
            public const nint m_flFadeEndTime = 0x1D4; // float32
            public const nint m_nFieldOutput = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_bEaseInOut = 0x1DC; // bool
            public const nint m_bUseNewCode = 0x1DD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_ColorInterpolateRandom {
            public const nint m_ColorFadeMin = 0x1C0; // Color
            public const nint m_ColorFadeMax = 0x1DC; // Color
            public const nint m_flFadeStartTime = 0x1EC; // float32
            public const nint m_flFadeEndTime = 0x1F0; // float32
            public const nint m_nFieldOutput = 0x1F4; // ParticleAttributeIndex_t
            public const nint m_bEaseInOut = 0x1F8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 15
        public static class C_OP_PositionLock {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_flStartTime_min = 0x228; // float32
            public const nint m_flStartTime_max = 0x22C; // float32
            public const nint m_flStartTime_exp = 0x230; // float32
            public const nint m_flEndTime_min = 0x234; // float32
            public const nint m_flEndTime_max = 0x238; // float32
            public const nint m_flEndTime_exp = 0x23C; // float32
            public const nint m_flRange = 0x240; // float32
            public const nint m_flRangeBias = 0x248; // CParticleCollectionFloatInput
            public const nint m_flJumpThreshold = 0x3A0; // float32
            public const nint m_flPrevPosScale = 0x3A4; // float32
            public const nint m_bLockRot = 0x3A8; // bool
            public const nint m_vecScale = 0x3B0; // CParticleCollectionVecInput
            public const nint m_nFieldOutput = 0xA08; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputPrev = 0xA0C; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 33
        public static class C_OP_ControlpointLight {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nControlPoint1 = 0x650; // int32
            public const nint m_nControlPoint2 = 0x654; // int32
            public const nint m_nControlPoint3 = 0x658; // int32
            public const nint m_nControlPoint4 = 0x65C; // int32
            public const nint m_vecCPOffset1 = 0x660; // 
            public const nint m_vecCPOffset2 = 0x66C; // 
            public const nint m_vecCPOffset3 = 0x678; // 
            public const nint m_vecCPOffset4 = 0x684; // 
            public const nint m_LightFiftyDist1 = 0x690; // float32
            public const nint m_LightZeroDist1 = 0x694; // float32
            public const nint m_LightFiftyDist2 = 0x698; // float32
            public const nint m_LightZeroDist2 = 0x69C; // float32
            public const nint m_LightFiftyDist3 = 0x6A0; // float32
            public const nint m_LightZeroDist3 = 0x6A4; // float32
            public const nint m_LightFiftyDist4 = 0x6A8; // float32
            public const nint m_LightZeroDist4 = 0x6AC; // float32
            public const nint m_LightColor1 = 0x6B0; // Color
            public const nint m_LightColor2 = 0x6B4; // Color
            public const nint m_LightColor3 = 0x6B8; // Color
            public const nint m_LightColor4 = 0x6BC; // Color
            public const nint m_bLightType1 = 0x6C0; // bool
            public const nint m_bLightType2 = 0x6C1; // bool
            public const nint m_bLightType3 = 0x6C2; // bool
            public const nint m_bLightType4 = 0x6C3; // bool
            public const nint m_bLightDynamic1 = 0x6C4; // bool
            public const nint m_bLightDynamic2 = 0x6C5; // bool
            public const nint m_bLightDynamic3 = 0x6C6; // bool
            public const nint m_bLightDynamic4 = 0x6C7; // bool
            public const nint m_bUseNormal = 0x6C8; // bool
            public const nint m_bUseHLambert = 0x6C9; // bool
            public const nint m_bClampLowerRange = 0x6CE; // bool
            public const nint m_bClampUpperRange = 0x6CF; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_GlobalLight {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_bClampLowerRange = 0x1C4; // bool
            public const nint m_bClampUpperRange = 0x1C5; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_SetChildControlPoints {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nFirstSourcePoint = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bReverse = 0x328; // bool
            public const nint m_bSetOrientation = 0x329; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_SetControlPointsToParticle {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nFirstSourcePoint = 0x1CC; // int32
            public const nint m_bSetOrientation = 0x1D0; // bool
            public const nint m_nOrientationMode = 0x1D4; // ParticleOrientationSetMode_t
            public const nint m_nSetParent = 0x1D8; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_SetControlPointsToModelParticles {
            public const nint m_HitboxSetName = 0x1C0; // char[128]
            public const nint m_AttachmentName = 0x240; // char[128]
            public const nint m_nFirstControlPoint = 0x2C0; // int32
            public const nint m_nNumControlPoints = 0x2C4; // int32
            public const nint m_nFirstSourcePoint = 0x2C8; // int32
            public const nint m_bSkin = 0x2CC; // bool
            public const nint m_bAttachment = 0x2CD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_SetPerChildControlPoint {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nParticleIncrement = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_nFirstSourcePoint = 0x328; // CParticleCollectionFloatInput
            public const nint m_bSetOrientation = 0x480; // bool
            public const nint m_nOrientationField = 0x484; // ParticleAttributeIndex_t
            public const nint m_bNumBasedOnParticleCount = 0x488; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_SetPerChildControlPointFromAttribute {
            public const nint m_nChildGroupID = 0x1C0; // int32
            public const nint m_nFirstControlPoint = 0x1C4; // int32
            public const nint m_nNumControlPoints = 0x1C8; // int32
            public const nint m_nParticleIncrement = 0x1CC; // int32
            public const nint m_nFirstSourcePoint = 0x1D0; // int32
            public const nint m_bNumBasedOnParticleCount = 0x1D4; // bool
            public const nint m_nAttributeToRead = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_nCPField = 0x1DC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RemapTransformOrientationToYaw {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_nFieldOutput = 0x228; // ParticleAttributeIndex_t
            public const nint m_flRotOffset = 0x22C; // float32
            public const nint m_flSpinStrength = 0x230; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_DampenToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_flRange = 0x1C4; // float32
            public const nint m_flScale = 0x1C8; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_SetToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_vecOffset = 0x1C4; // 
            public const nint m_bOffsetLocal = 0x1D0; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 13
        public static class C_OP_PinParticleToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_vecOffset = 0x1C8; // CParticleCollectionVecInput
            public const nint m_bOffsetLocal = 0x820; // bool
            public const nint m_nParticleSelection = 0x824; // ParticleSelection_t
            public const nint m_nParticleNumber = 0x828; // CParticleCollectionFloatInput
            public const nint m_nPinBreakType = 0x980; // ParticlePinDistance_t
            public const nint m_flBreakDistance = 0x988; // CParticleCollectionFloatInput
            public const nint m_flBreakSpeed = 0xAE0; // CParticleCollectionFloatInput
            public const nint m_flAge = 0xC38; // CParticleCollectionFloatInput
            public const nint m_nBreakControlPointNumber = 0xD90; // int32
            public const nint m_nBreakControlPointNumber2 = 0xD94; // int32
            public const nint m_flBreakValue = 0xD98; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0xEF0; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_MovementRigidAttachToCP {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nScaleControlPoint = 0x1C4; // int32
            public const nint m_nScaleCPField = 0x1C8; // int32
            public const nint m_nFieldInput = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1D0; // ParticleAttributeIndex_t
            public const nint m_bOffsetLocal = 0x1D4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_LerpToInitialPosition {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_flInterpolation = 0x1C8; // CPerParticleFloatInput
            public const nint m_nCacheField = 0x320; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x328; // CParticleCollectionFloatInput
            public const nint m_vecScale = 0x480; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 13
        public static class C_OP_DistanceBetweenTransforms {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_TransformStart = 0x1C8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x230; // CParticleTransformInput
            public const nint m_flInputMin = 0x298; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x3F0; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x548; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x6A0; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x7F8; // float32
            public const nint m_flLOSScale = 0x7FC; // float32
            public const nint m_CollisionGroupName = 0x800; // char[128]
            public const nint m_nTraceSet = 0x880; // ParticleTraceSet_t
            public const nint m_bLOS = 0x884; // bool
            public const nint m_nSetMethod = 0x888; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 10
        public static class C_OP_PercentageBetweenTransforms {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_flOutputMin = 0x1CC; // float32
            public const nint m_flOutputMax = 0x1D0; // float32
            public const nint m_TransformStart = 0x1D8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x240; // CParticleTransformInput
            public const nint m_nSetMethod = 0x2A8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2AC; // bool
            public const nint m_bRadialCheck = 0x2AD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 10
        public static class C_OP_PercentageBetweenTransformsVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_vecOutputMin = 0x1CC; // 
            public const nint m_vecOutputMax = 0x1D8; // 
            public const nint m_TransformStart = 0x1E8; // CParticleTransformInput
            public const nint m_TransformEnd = 0x250; // CParticleTransformInput
            public const nint m_nSetMethod = 0x2B8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2BC; // bool
            public const nint m_bRadialCheck = 0x2BD; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 12
        public static class C_OP_PercentageBetweenTransformLerpCPs {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C4; // float32
            public const nint m_flInputMax = 0x1C8; // float32
            public const nint m_TransformStart = 0x1D0; // CParticleTransformInput
            public const nint m_TransformEnd = 0x238; // CParticleTransformInput
            public const nint m_nOutputStartCP = 0x2A0; // int32
            public const nint m_nOutputStartField = 0x2A4; // int32
            public const nint m_nOutputEndCP = 0x2A8; // int32
            public const nint m_nOutputEndField = 0x2AC; // int32
            public const nint m_nSetMethod = 0x2B0; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x2B4; // bool
            public const nint m_bRadialCheck = 0x2B5; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_DistanceBetweenVecs {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecPoint1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vecPoint2 = 0x820; // CPerParticleVecInput
            public const nint m_flInputMin = 0xE78; // CPerParticleFloatInput
            public const nint m_flInputMax = 0xFD0; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x1128; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x1280; // CPerParticleFloatInput
            public const nint m_nSetMethod = 0x13D8; // ParticleSetMethod_t
            public const nint m_bDeltaTime = 0x13DC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_DirectionBetweenVecsToVec {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecPoint1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vecPoint2 = 0x820; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 15
        public static class C_OP_DistanceToTransform {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x478; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5D0; // CPerParticleFloatInput
            public const nint m_TransformStart = 0x728; // CParticleTransformInput
            public const nint m_bLOS = 0x790; // bool
            public const nint m_CollisionGroupName = 0x791; // char[128]
            public const nint m_nTraceSet = 0x814; // ParticleTraceSet_t
            public const nint m_flMaxTraceLength = 0x818; // float32
            public const nint m_flLOSScale = 0x81C; // float32
            public const nint m_nSetMethod = 0x820; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x824; // bool
            public const nint m_bAdditive = 0x825; // bool
            public const nint m_vecComponentScale = 0x828; // CPerParticleVecInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_CylindricalDistanceToTransform {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInputMax = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputMin = 0x478; // CPerParticleFloatInput
            public const nint m_flOutputMax = 0x5D0; // CPerParticleFloatInput
            public const nint m_TransformStart = 0x728; // CParticleTransformInput
            public const nint m_TransformEnd = 0x790; // CParticleTransformInput
            public const nint m_nSetMethod = 0x7F8; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x7FC; // bool
            public const nint m_bAdditive = 0x7FD; // bool
            public const nint m_bCapsule = 0x7FE; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RtEnvCull {
            public const nint m_vecTestDir = 0x1C0; // 
            public const nint m_vecTestNormal = 0x1CC; // 
            public const nint m_bCullOnMiss = 0x1D8; // bool
            public const nint m_bStickInsteadOfCull = 0x1D9; // bool
            public const nint m_RtEnvName = 0x1DA; // char[128]
            public const nint m_nRTEnvCP = 0x25C; // int32
            public const nint m_nComponent = 0x260; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_MovementLoopInsideSphere {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_flDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_vecScale = 0x320; // CParticleCollectionVecInput
            public const nint m_nDistSqrAttr = 0x978; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_MoveToHitbox {
            public const nint m_modelInput = 0x1C0; // CParticleModelInput
            public const nint m_transformInput = 0x220; // CParticleTransformInput
            public const nint m_flLifeTimeLerpStart = 0x28C; // float32
            public const nint m_flLifeTimeLerpEnd = 0x290; // float32
            public const nint m_flPrevPosScale = 0x294; // float32
            public const nint m_HitboxSetName = 0x298; // char[128]
            public const nint m_bUseBones = 0x318; // bool
            public const nint m_nLerpType = 0x31C; // HitboxLerpType_t
            public const nint m_flInterpolation = 0x320; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 15
        public static class C_OP_LockToBone {
            public const nint m_modelInput = 0x1C0; // CParticleModelInput
            public const nint m_transformInput = 0x220; // CParticleTransformInput
            public const nint m_flLifeTimeFadeStart = 0x288; // float32
            public const nint m_flLifeTimeFadeEnd = 0x28C; // float32
            public const nint m_flJumpThreshold = 0x290; // float32
            public const nint m_flPrevPosScale = 0x294; // float32
            public const nint m_HitboxSetName = 0x298; // char[128]
            public const nint m_bRigid = 0x318; // bool
            public const nint m_bUseBones = 0x319; // bool
            public const nint m_nFieldOutput = 0x31C; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputPrev = 0x320; // ParticleAttributeIndex_t
            public const nint m_nRotationSetType = 0x324; // ParticleRotationLockType_t
            public const nint m_bRigidRotationLock = 0x328; // bool
            public const nint m_vecRotation = 0x330; // CPerParticleVecInput
            public const nint m_flRotLerp = 0x988; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_SnapshotRigidSkinToBones {
            public const nint m_bTransformNormals = 0x1C0; // bool
            public const nint m_bTransformRadii = 0x1C1; // bool
            public const nint m_nControlPointNumber = 0x1C4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_SnapshotSkinToBones {
            public const nint m_bTransformNormals = 0x1C0; // bool
            public const nint m_bTransformRadii = 0x1C1; // bool
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_flLifeTimeFadeStart = 0x1C8; // float32
            public const nint m_flLifeTimeFadeEnd = 0x1CC; // float32
            public const nint m_flJumpThreshold = 0x1D0; // float32
            public const nint m_flPrevPosScale = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_CPOffsetToPercentageBetweenCPs {
            public const nint m_flInputMin = 0x1C0; // float32
            public const nint m_flInputMax = 0x1C4; // float32
            public const nint m_flInputBias = 0x1C8; // float32
            public const nint m_nStartCP = 0x1CC; // int32
            public const nint m_nEndCP = 0x1D0; // int32
            public const nint m_nOffsetCP = 0x1D4; // int32
            public const nint m_nOuputCP = 0x1D8; // int32
            public const nint m_nInputCP = 0x1DC; // int32
            public const nint m_bRadialCheck = 0x1E0; // bool
            public const nint m_bScaleOffset = 0x1E1; // bool
            public const nint m_vecOffset = 0x1E4; // 
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_PlaneCull {
            public const nint m_nPlaneControlPoint = 0x1C0; // int32
            public const nint m_vecPlaneDirection = 0x1C4; // 
            public const nint m_bLocalSpace = 0x1D0; // bool
            public const nint m_flPlaneOffset = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_DistanceCull {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_vecPointOffset = 0x1C4; // 
            public const nint m_flDistance = 0x1D0; // float32
            public const nint m_bCullInside = 0x1D4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_ModelCull {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_bBoundBox = 0x1C4; // bool
            public const nint m_bCullOutside = 0x1C5; // bool
            public const nint m_bUseBones = 0x1C6; // bool
            public const nint m_HitboxSetName = 0x1C7; // char[128]
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_ModelDampenMovement {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_bBoundBox = 0x1C4; // bool
            public const nint m_bOutside = 0x1C5; // bool
            public const nint m_bUseBones = 0x1C6; // bool
            public const nint m_HitboxSetName = 0x1C7; // char[128]
            public const nint m_vecPosOffset = 0x248; // CPerParticleVecInput
            public const nint m_fDrag = 0x8A0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_SequenceFromModel {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nFieldOutputAnim = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_nSetMethod = 0x1DC; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_VelocityMatchingForce {
            public const nint m_flDirScale = 0x1C0; // float32
            public const nint m_flSpdScale = 0x1C4; // float32
            public const nint m_nCPBroadcast = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_MovementMaintainOffset {
            public const nint m_vecOffset = 0x1C0; // 
            public const nint m_nCP = 0x1CC; // int32
            public const nint m_bRadiusScale = 0x1D0; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 17
        public static class C_OP_MovementPlaceOnGround {
            public const nint m_flOffset = 0x1C0; // CPerParticleFloatInput
            public const nint m_flMaxTraceLength = 0x318; // float32
            public const nint m_flTolerance = 0x31C; // float32
            public const nint m_flTraceOffset = 0x320; // float32
            public const nint m_flLerpRate = 0x324; // float32
            public const nint m_CollisionGroupName = 0x328; // char[128]
            public const nint m_nTraceSet = 0x3A8; // ParticleTraceSet_t
            public const nint m_nRefCP1 = 0x3AC; // int32
            public const nint m_nRefCP2 = 0x3B0; // int32
            public const nint m_nLerpCP = 0x3B4; // int32
            public const nint m_nTraceMissBehavior = 0x3C0; // ParticleTraceMissBehavior_t
            public const nint m_bIncludeShotHull = 0x3C4; // bool
            public const nint m_bIncludeWater = 0x3C5; // bool
            public const nint m_bSetNormal = 0x3C8; // bool
            public const nint m_bScaleOffset = 0x3C9; // bool
            public const nint m_nPreserveOffsetCP = 0x3CC; // int32
            public const nint m_nIgnoreCP = 0x3D0; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_InheritFromParentParticles {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_bRandomDistribution = 0x1CC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_InheritFromParentParticlesV2 {
            public const nint m_flScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_bRandomDistribution = 0x1CC; // bool
            public const nint m_nMissingParentBehavior = 0x1D0; // MissingParentInheritBehavior_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_ReadFromNeighboringParticle {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_DistanceCheck = 0x1D0; // CPerParticleFloatInput
            public const nint m_flInterpolation = 0x328; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_InheritFromPeerSystem {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nIncrement = 0x1C8; // int32
            public const nint m_nGroupID = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_RemapVectorComponentToScalar {
            public const nint m_nFieldInput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nComponent = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_OrientTo2dDirection {
            public const nint m_flRotOffset = 0x1C0; // float32
            public const nint m_flSpinStrength = 0x1C4; // float32
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_RestartAfterDuration {
            public const nint m_flDurationMin = 0x1C0; // float32
            public const nint m_flDurationMax = 0x1C4; // float32
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nCPField = 0x1CC; // int32
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_bOnlyChildren = 0x1D4; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_Orient2DRelToCP {
            public const nint m_flRotOffset = 0x1C0; // float32
            public const nint m_flSpinStrength = 0x1C4; // float32
            public const nint m_nCP = 0x1C8; // int32
            public const nint m_nFieldOutput = 0x1CC; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_MovementRotateParticleAroundAxis {
            public const nint m_vecRotAxis = 0x1C0; // CParticleCollectionVecInput
            public const nint m_flRotRate = 0x818; // CParticleCollectionFloatInput
            public const nint m_TransformInput = 0x970; // CParticleTransformInput
            public const nint m_bLocalSpace = 0x9D8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RotateVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_vecRotAxisMin = 0x1C4; // 
            public const nint m_vecRotAxisMax = 0x1D0; // 
            public const nint m_flRotRateMin = 0x1DC; // float32
            public const nint m_flRotRateMax = 0x1E0; // float32
            public const nint m_bNormalize = 0x1E4; // bool
            public const nint m_flScale = 0x1E8; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_MaxVelocity {
            public const nint m_flMaxVelocity = 0x1C0; // float32
            public const nint m_flMinVelocity = 0x1C4; // float32
            public const nint m_nOverrideCP = 0x1C8; // int32
            public const nint m_nOverrideCPField = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_LagCompensation {
            public const nint m_nDesiredVelocityCP = 0x1C0; // int32
            public const nint m_nLatencyCP = 0x1C4; // int32
            public const nint m_nLatencyCPField = 0x1C8; // int32
            public const nint m_nDesiredVelocityCPField = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_MaintainSequentialPath {
            public const nint m_fMaxDistance = 0x1C0; // float32
            public const nint m_flNumToAssign = 0x1C4; // float32
            public const nint m_flCohesionStrength = 0x1C8; // float32
            public const nint m_flTolerance = 0x1CC; // float32
            public const nint m_bLoop = 0x1D0; // bool
            public const nint m_bUseParticleCount = 0x1D1; // bool
            public const nint m_PathParams = 0x1E0; // CPathParameters
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_LockToSavedSequentialPathV2 {
            public const nint m_flFadeStart = 0x1C0; // float32
            public const nint m_flFadeEnd = 0x1C4; // float32
            public const nint m_bCPPairs = 0x1C8; // bool
            public const nint m_PathParams = 0x1D0; // CPathParameters
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_LockToSavedSequentialPath {
            public const nint m_flFadeStart = 0x1C4; // float32
            public const nint m_flFadeEnd = 0x1C8; // float32
            public const nint m_bCPPairs = 0x1CC; // bool
            public const nint m_PathParams = 0x1D0; // CPathParameters
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_RemapDotProductToScalar {
            public const nint m_nInputCP1 = 0x1C0; // int32
            public const nint m_nInputCP2 = 0x1C4; // int32
            public const nint m_nFieldOutput = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_bUseParticleVelocity = 0x1DC; // bool
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
            public const nint m_bActiveRange = 0x1E4; // bool
            public const nint m_bUseParticleNormal = 0x1E5; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_RemapCPtoScalar {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nField = 0x1C8; // int32
            public const nint m_flInputMin = 0x1CC; // float32
            public const nint m_flInputMax = 0x1D0; // float32
            public const nint m_flOutputMin = 0x1D4; // float32
            public const nint m_flOutputMax = 0x1D8; // float32
            public const nint m_flStartTime = 0x1DC; // float32
            public const nint m_flEndTime = 0x1E0; // float32
            public const nint m_flInterpRate = 0x1E4; // float32
            public const nint m_nSetMethod = 0x1E8; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_NormalLock {
            public const nint m_nControlPointNumber = 0x1C0; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 13
        public static class C_OP_RemapCPtoVector {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1C8; // int32
            public const nint m_vInputMin = 0x1CC; // 
            public const nint m_vInputMax = 0x1D8; // 
            public const nint m_vOutputMin = 0x1E4; // 
            public const nint m_vOutputMax = 0x1F0; // 
            public const nint m_flStartTime = 0x1FC; // float32
            public const nint m_flEndTime = 0x200; // float32
            public const nint m_flInterpRate = 0x204; // float32
            public const nint m_nSetMethod = 0x208; // ParticleSetMethod_t
            public const nint m_bOffset = 0x20C; // bool
            public const nint m_bAccelerate = 0x20D; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_SetCPtoVector {
            public const nint m_nCPInput = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_RemapTransformToVelocity {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_RemapVelocityToVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
            public const nint m_bNormalize = 0x1C8; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RemapCPVelocityToVector {
            public const nint m_nControlPoint = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_bNormalize = 0x1CC; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_SetCPOrientationToDirection {
            public const nint m_nInputControlPoint = 0x1C0; // int32
            public const nint m_nOutputControlPoint = 0x1C4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapDirectionToCPToVector {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C8; // float32
            public const nint m_flOffsetRot = 0x1CC; // float32
            public const nint m_vecOffsetAxis = 0x1D0; // 
            public const nint m_bNormalize = 0x1DC; // bool
            public const nint m_nFieldStrength = 0x1E0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RemapCrossProductOfTwoVectorsToVector {
            public const nint m_InputVec1 = 0x1C0; // CPerParticleVecInput
            public const nint m_InputVec2 = 0x818; // CPerParticleVecInput
            public const nint m_nFieldOutput = 0xE70; // ParticleAttributeIndex_t
            public const nint m_bNormalize = 0xE74; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_NormalizeVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_RemapControlPointDirectionToVector {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flScale = 0x1C4; // float32
            public const nint m_nControlPointNumber = 0x1C8; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_SetCPOrientationToGroundNormal {
            public const nint m_flInterpRate = 0x1C0; // float32
            public const nint m_flMaxTraceLength = 0x1C4; // float32
            public const nint m_flTolerance = 0x1C8; // float32
            public const nint m_flTraceOffset = 0x1CC; // float32
            public const nint m_CollisionGroupName = 0x1D0; // char[128]
            public const nint m_nTraceSet = 0x250; // ParticleTraceSet_t
            public const nint m_nInputCP = 0x254; // int32
            public const nint m_nOutputCP = 0x258; // int32
            public const nint m_bIncludeWater = 0x268; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RemapTransformOrientationToRotations {
            public const nint m_TransformInput = 0x1C0; // CParticleTransformInput
            public const nint m_vecRotation = 0x228; // 
            public const nint m_bUseQuat = 0x234; // bool
            public const nint m_bWriteNormal = 0x235; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_RemapControlPointOrientationToRotation {
            public const nint m_nCP = 0x1C0; // int32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flOffsetRot = 0x1C8; // float32
            public const nint m_nComponent = 0x1CC; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_LockToPointList {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_pointList = 0x1C8; // CUtlVector<PointDefinition_t>
            public const nint m_bPlaceAlongPath = 0x1E0; // bool
            public const nint m_bClosedLoop = 0x1E1; // bool
            public const nint m_nNumPointsAlongPath = 0x1E4; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_RemapNamedModelElementOnceTimed {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_inNames = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_outNames = 0x1E0; // CUtlVector<CUtlString>
            public const nint m_fallbackNames = 0x1F8; // CUtlVector<CUtlString>
            public const nint m_bModelFromRenderer = 0x210; // bool
            public const nint m_bProportional = 0x211; // bool
            public const nint m_nFieldInput = 0x214; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x218; // ParticleAttributeIndex_t
            public const nint m_flRemapTime = 0x21C; // float32
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Fields count: 0
        public static class C_OP_RemapNamedModelSequenceOnceTimed {
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Fields count: 0
        public static class C_OP_RemapNamedModelBodyPartOnceTimed {
        }
        // Parent: C_OP_RemapNamedModelElementOnceTimed
        // Fields count: 0
        public static class C_OP_RemapNamedModelMeshGroupOnceTimed {
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 7
        public static class C_OP_RemapNamedModelElementEndCap {
            public const nint m_hModel = 0x1C0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_inNames = 0x1C8; // CUtlVector<CUtlString>
            public const nint m_outNames = 0x1E0; // CUtlVector<CUtlString>
            public const nint m_fallbackNames = 0x1F8; // CUtlVector<CUtlString>
            public const nint m_bModelFromRenderer = 0x210; // bool
            public const nint m_nFieldInput = 0x214; // ParticleAttributeIndex_t
            public const nint m_nFieldOutput = 0x218; // ParticleAttributeIndex_t
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Fields count: 0
        public static class C_OP_RemapNamedModelSequenceEndCap {
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Fields count: 0
        public static class C_OP_RemapNamedModelBodyPartEndCap {
        }
        // Parent: C_OP_RemapNamedModelElementEndCap
        // Fields count: 0
        public static class C_OP_RemapNamedModelMeshGroupEndCap {
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 12
        public static class C_OP_SetFromCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nAttributeToRead = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nAttributeToWrite = 0x1C8; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1CC; // int32
            public const nint m_bRandom = 0x1D0; // bool
            public const nint m_bReverse = 0x1D1; // bool
            public const nint m_nRandomSeed = 0x1D4; // int32
            public const nint m_nSnapShotStartPoint = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_nSnapShotIncrement = 0x330; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0x488; // CPerParticleFloatInput
            public const nint m_bSubSample = 0x5E0; // bool
            public const nint m_bPrev = 0x5E1; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 9
        public static class C_OP_VectorFieldSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nAttributeToWrite = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_nLocalSpaceCP = 0x1C8; // int32
            public const nint m_flInterpolation = 0x1D0; // CPerParticleFloatInput
            public const nint m_vecScale = 0x328; // CPerParticleVecInput
            public const nint m_flBoundaryDampening = 0x980; // float32
            public const nint m_bSetVelocity = 0x984; // bool
            public const nint m_bLockToSurface = 0x985; // bool
            public const nint m_flGridSpacing = 0x988; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_SetAttributeToScalarExpression {
            public const nint m_nExpression = 0x1C0; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1C8; // CPerParticleFloatInput
            public const nint m_flInput2 = 0x320; // CPerParticleFloatInput
            public const nint m_flOutputRemap = 0x478; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0x5D0; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x5D4; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_SetVectorAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C0; // VectorExpressionType_t
            public const nint m_vInput1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vInput2 = 0x820; // CPerParticleVecInput
            public const nint m_nOutputField = 0xE78; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0xE7C; // ParticleSetMethod_t
            public const nint m_bNormalizedOutput = 0xE80; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_SetFloatAttributeToVectorExpression {
            public const nint m_nExpression = 0x1C0; // VectorFloatExpressionType_t
            public const nint m_vInput1 = 0x1C8; // CPerParticleVecInput
            public const nint m_vInput2 = 0x820; // CPerParticleVecInput
            public const nint m_flOutputRemap = 0xE78; // CParticleRemapFloatInput
            public const nint m_nOutputField = 0xFD0; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0xFD4; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 12
        public static class C_OP_MovementSkinnedPositionFromCPSnapshot {
            public const nint m_nSnapshotControlPointNumber = 0x1C0; // int32
            public const nint m_nControlPointNumber = 0x1C4; // int32
            public const nint m_bRandom = 0x1C8; // bool
            public const nint m_nRandomSeed = 0x1CC; // int32
            public const nint m_bSetNormal = 0x1D0; // bool
            public const nint m_bSetRadius = 0x1D1; // bool
            public const nint m_nIndexType = 0x1D4; // SnapshotIndexType_t
            public const nint m_flReadIndex = 0x1D8; // CPerParticleFloatInput
            public const nint m_flIncrement = 0x330; // CParticleCollectionFloatInput
            public const nint m_nFullLoopIncrement = 0x488; // CParticleCollectionFloatInput
            public const nint m_nSnapShotStartPoint = 0x5E0; // CParticleCollectionFloatInput
            public const nint m_flInterpolation = 0x738; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_MovementMoveAlongSkinnedCPSnapshot {
            public const nint m_nControlPointNumber = 0x1C0; // int32
            public const nint m_nSnapshotControlPointNumber = 0x1C4; // int32
            public const nint m_bSetNormal = 0x1C8; // bool
            public const nint m_bSetRadius = 0x1C9; // bool
            public const nint m_flInterpolation = 0x1D0; // CPerParticleFloatInput
            public const nint m_flTValue = 0x328; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_QuantizeFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 4
        public static class C_OP_SetFloatCollection {
            public const nint m_InputValue = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x31C; // ParticleSetMethod_t
            public const nint m_Lerp = 0x320; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_SetFloat {
            public const nint m_InputValue = 0x1C0; // CPerParticleFloatInput
            public const nint m_nOutputField = 0x318; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x31C; // ParticleSetMethod_t
            public const nint m_Lerp = 0x320; // CPerParticleFloatInput
            public const nint m_bUseNewCode = 0x478; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_SetVec {
            public const nint m_InputValue = 0x1C0; // CPerParticleVecInput
            public const nint m_nOutputField = 0x818; // ParticleAttributeIndex_t
            public const nint m_nSetMethod = 0x81C; // ParticleSetMethod_t
            public const nint m_Lerp = 0x820; // CPerParticleFloatInput
            public const nint m_bNormalizedOutput = 0x978; // bool
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_DragRelativeToPlane {
            public const nint m_flDragAtPlane = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flFalloff = 0x318; // CParticleCollectionFloatInput
            public const nint m_bDirectional = 0x470; // bool
            public const nint m_vecPlaneNormal = 0x478; // CParticleCollectionVecInput
            public const nint m_nControlPointNumber = 0xAD0; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 2
        public static class C_OP_RemapDensityGradientToVectorAttribute {
            public const nint m_flRadiusScale = 0x1C0; // float32
            public const nint m_nFieldOutput = 0x1C4; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_LockPoints {
            public const nint m_nMinCol = 0x1C0; // int32
            public const nint m_nMaxCol = 0x1C4; // int32
            public const nint m_nMinRow = 0x1C8; // int32
            public const nint m_nMaxRow = 0x1CC; // int32
            public const nint m_nControlPoint = 0x1D0; // int32
            public const nint m_flBlendValue = 0x1D4; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_RemapDistanceToLineSegmentBase {
            public const nint m_nCP0 = 0x1C0; // int32
            public const nint m_nCP1 = 0x1C4; // int32
            public const nint m_flMinInputValue = 0x1C8; // float32
            public const nint m_flMaxInputValue = 0x1CC; // float32
            public const nint m_bInfiniteLine = 0x1D0; // bool
        }
        // Parent: C_OP_RemapDistanceToLineSegmentBase
        // Fields count: 3
        public static class C_OP_RemapDistanceToLineSegmentToScalar {
            public const nint m_nFieldOutput = 0x1E0; // ParticleAttributeIndex_t
            public const nint m_flMinOutputValue = 0x1E4; // float32
            public const nint m_flMaxOutputValue = 0x1E8; // float32
        }
        // Parent: C_OP_RemapDistanceToLineSegmentBase
        // Fields count: 3
        public static class C_OP_RemapDistanceToLineSegmentToVector {
            public const nint m_nFieldOutput = 0x1E0; // ParticleAttributeIndex_t
            public const nint m_vMinOutputValue = 0x1E4; // 
            public const nint m_vMaxOutputValue = 0x1F0; // 
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_TeleportBeam {
            public const nint m_nCPPosition = 0x1C0; // int32
            public const nint m_nCPVelocity = 0x1C4; // int32
            public const nint m_nCPMisc = 0x1C8; // int32
            public const nint m_nCPColor = 0x1CC; // int32
            public const nint m_nCPInvalidColor = 0x1D0; // int32
            public const nint m_nCPExtraArcData = 0x1D4; // int32
            public const nint m_vGravity = 0x1D8; // 
            public const nint m_flArcMaxDuration = 0x1E4; // float32
            public const nint m_flSegmentBreak = 0x1E8; // float32
            public const nint m_flArcSpeed = 0x1EC; // float32
            public const nint m_flAlpha = 0x1F0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 10
        public static class C_OP_CycleScalar {
            public const nint m_nDestField = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_flStartValue = 0x1C4; // float32
            public const nint m_flEndValue = 0x1C8; // float32
            public const nint m_flCycleTime = 0x1CC; // float32
            public const nint m_bDoNotRepeatCycle = 0x1D0; // bool
            public const nint m_bSynchronizeParticles = 0x1D1; // bool
            public const nint m_nCPScale = 0x1D4; // int32
            public const nint m_nCPFieldMin = 0x1D8; // int32
            public const nint m_nCPFieldMax = 0x1DC; // int32
            public const nint m_nSetMethod = 0x1E0; // ParticleSetMethod_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 11
        public static class C_OP_CalculateVectorAttribute {
            public const nint m_vStartValue = 0x1C0; // 
            public const nint m_nFieldInput1 = 0x1CC; // ParticleAttributeIndex_t
            public const nint m_flInputScale1 = 0x1D0; // float32
            public const nint m_nFieldInput2 = 0x1D4; // ParticleAttributeIndex_t
            public const nint m_flInputScale2 = 0x1D8; // float32
            public const nint m_nControlPointInput1 = 0x1DC; // ControlPointReference_t
            public const nint m_flControlPointScale1 = 0x1F0; // float32
            public const nint m_nControlPointInput2 = 0x1F4; // ControlPointReference_t
            public const nint m_flControlPointScale2 = 0x208; // float32
            public const nint m_nFieldOutput = 0x20C; // ParticleAttributeIndex_t
            public const nint m_vFinalOutputScale = 0x210; // 
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_ColorAdjustHSL {
            public const nint m_flHueAdjust = 0x1C0; // CPerParticleFloatInput
            public const nint m_flSaturationAdjust = 0x318; // CPerParticleFloatInput
            public const nint m_flLightnessAdjust = 0x470; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 5
        public static class C_OP_ConnectParentParticleToNearest {
            public const nint m_nFirstControlPoint = 0x1C0; // int32
            public const nint m_nSecondControlPoint = 0x1C4; // int32
            public const nint m_bUseRadius = 0x1C8; // bool
            public const nint m_flRadiusScale = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_flParentRadiusScale = 0x328; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 6
        public static class C_OP_UpdateLightSource {
            public const nint m_vColorTint = 0x1C0; // Color
            public const nint m_flBrightnessScale = 0x1C4; // float32
            public const nint m_flRadiusScale = 0x1C8; // float32
            public const nint m_flMinimumLightingRadius = 0x1CC; // float32
            public const nint m_flMaximumLightingRadius = 0x1D0; // float32
            public const nint m_flPositionDampingConstant = 0x1D4; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 8
        public static class C_OP_RemapSpeedtoCP {
            public const nint m_nInControlPointNumber = 0x1D0; // int32
            public const nint m_nOutControlPointNumber = 0x1D4; // int32
            public const nint m_nField = 0x1D8; // int32
            public const nint m_flInputMin = 0x1DC; // float32
            public const nint m_flInputMax = 0x1E0; // float32
            public const nint m_flOutputMin = 0x1E4; // float32
            public const nint m_flOutputMax = 0x1E8; // float32
            public const nint m_bUseDeltaV = 0x1EC; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 11
        public static class C_OP_RemapAverageHitboxSpeedtoCP {
            public const nint m_nInControlPointNumber = 0x1D0; // int32
            public const nint m_nOutControlPointNumber = 0x1D4; // int32
            public const nint m_nField = 0x1D8; // int32
            public const nint m_nHitboxDataType = 0x1DC; // ParticleHitboxDataSelection_t
            public const nint m_flInputMin = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_flInputMax = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x490; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5E8; // CParticleCollectionFloatInput
            public const nint m_nHeightControlPointNumber = 0x740; // int32
            public const nint m_vecComparisonVelocity = 0x748; // CParticleCollectionVecInput
            public const nint m_HitboxSetName = 0xDA0; // char[128]
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 8
        public static class C_OP_RemapDotProductToCP {
            public const nint m_nInputCP1 = 0x1D0; // int32
            public const nint m_nInputCP2 = 0x1D4; // int32
            public const nint m_nOutputCP = 0x1D8; // int32
            public const nint m_nOutVectorField = 0x1DC; // int32
            public const nint m_flInputMin = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_flInputMax = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOutputMin = 0x490; // CParticleCollectionFloatInput
            public const nint m_flOutputMax = 0x5E8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_SetControlPointFieldToScalarExpression {
            public const nint m_nExpression = 0x1D0; // ScalarExpressionType_t
            public const nint m_flInput1 = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flInput2 = 0x330; // CParticleCollectionFloatInput
            public const nint m_flOutputRemap = 0x488; // CParticleRemapFloatInput
            public const nint m_nOutputCP = 0x5E0; // int32
            public const nint m_nOutVectorField = 0x5E4; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_SetControlPointFieldFromVectorExpression {
            public const nint m_nExpression = 0x1D0; // VectorFloatExpressionType_t
            public const nint m_vecInput1 = 0x1D8; // CParticleCollectionVecInput
            public const nint m_vecInput2 = 0x830; // CParticleCollectionVecInput
            public const nint m_flOutputRemap = 0xE88; // CParticleRemapFloatInput
            public const nint m_nOutputCP = 0xFE0; // int32
            public const nint m_nOutVectorField = 0xFE4; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_SetControlPointToVectorExpression {
            public const nint m_nExpression = 0x1D0; // VectorExpressionType_t
            public const nint m_nOutputCP = 0x1D4; // int32
            public const nint m_vInput1 = 0x1D8; // CParticleCollectionVecInput
            public const nint m_vInput2 = 0x830; // CParticleCollectionVecInput
            public const nint m_bNormalizedOutput = 0xE88; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 9
        public static class C_OP_RemapModelVolumetoCP {
            public const nint m_nBBoxType = 0x1D0; // BBoxVolumeType_t
            public const nint m_nInControlPointNumber = 0x1D4; // int32
            public const nint m_nOutControlPointNumber = 0x1D8; // int32
            public const nint m_nOutControlPointMaxNumber = 0x1DC; // int32
            public const nint m_nField = 0x1E0; // int32
            public const nint m_flInputMin = 0x1E4; // float32
            public const nint m_flInputMax = 0x1E8; // float32
            public const nint m_flOutputMin = 0x1EC; // float32
            public const nint m_flOutputMax = 0x1F0; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_RemapBoundingVolumetoCP {
            public const nint m_nOutControlPointNumber = 0x1D0; // int32
            public const nint m_flInputMin = 0x1D4; // float32
            public const nint m_flInputMax = 0x1D8; // float32
            public const nint m_flOutputMin = 0x1DC; // float32
            public const nint m_flOutputMax = 0x1E0; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 7
        public static class C_OP_RemapAverageScalarValuetoCP {
            public const nint m_nOutControlPointNumber = 0x1D0; // int32
            public const nint m_nOutVectorField = 0x1D4; // int32
            public const nint m_nField = 0x1D8; // ParticleAttributeIndex_t
            public const nint m_flInputMin = 0x1DC; // float32
            public const nint m_flInputMax = 0x1E0; // float32
            public const nint m_flOutputMin = 0x1E4; // float32
            public const nint m_flOutputMax = 0x1E8; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_RampCPLinearRandom {
            public const nint m_nOutControlPointNumber = 0x1D0; // int32
            public const nint m_vecRateMin = 0x1D4; // 
            public const nint m_vecRateMax = 0x1E0; // 
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_SetParentControlPointsToChildCP {
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_nChildControlPoint = 0x1D4; // int32
            public const nint m_nNumControlPoints = 0x1D8; // int32
            public const nint m_nFirstSourcePoint = 0x1DC; // int32
            public const nint m_bSetOrientation = 0x1E0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_SetVariable {
            public const nint m_variableReference = 0x1D0; // CParticleVariableRef
            public const nint m_transformInput = 0x210; // CParticleTransformInput
            public const nint m_positionOffset = 0x278; // 
            public const nint m_rotationOffset = 0x284; // QAngle
            public const nint m_vecInput = 0x290; // CParticleCollectionVecInput
            public const nint m_floatInput = 0x8E8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 12
        public static class C_OP_SetControlPointPositions {
            public const nint m_bUseWorldLocation = 0x1D0; // bool
            public const nint m_bOrient = 0x1D1; // bool
            public const nint m_bSetOnce = 0x1D2; // bool
            public const nint m_nCP1 = 0x1D4; // int32
            public const nint m_nCP2 = 0x1D8; // int32
            public const nint m_nCP3 = 0x1DC; // int32
            public const nint m_nCP4 = 0x1E0; // int32
            public const nint m_vecCP1Pos = 0x1E4; // 
            public const nint m_vecCP2Pos = 0x1F0; // 
            public const nint m_vecCP3Pos = 0x1FC; // 
            public const nint m_vecCP4Pos = 0x208; // 
            public const nint m_nHeadLocation = 0x214; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_SetSingleControlPointPosition {
            public const nint m_bSetOnce = 0x1D0; // bool
            public const nint m_nCP1 = 0x1D4; // int32
            public const nint m_vecCP1Pos = 0x1D8; // CParticleCollectionVecInput
            public const nint m_transformInput = 0x830; // CParticleTransformInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_SetControlPointPositionToRandomActiveCP {
            public const nint m_nCP1 = 0x1D0; // int32
            public const nint m_nHeadLocationMin = 0x1D4; // int32
            public const nint m_nHeadLocationMax = 0x1D8; // int32
            public const nint m_flResetRate = 0x1E0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 8
        public static class C_OP_SetRandomControlPointPosition {
            public const nint m_bUseWorldLocation = 0x1D0; // bool
            public const nint m_bOrient = 0x1D1; // bool
            public const nint m_nCP1 = 0x1D4; // int32
            public const nint m_nHeadLocation = 0x1D8; // int32
            public const nint m_flReRandomRate = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_vecCPMinPos = 0x338; // 
            public const nint m_vecCPMaxPos = 0x344; // 
            public const nint m_flInterpolation = 0x350; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 8
        public static class C_OP_SetControlPointOrientation {
            public const nint m_bUseWorldLocation = 0x1D0; // bool
            public const nint m_bRandomize = 0x1D2; // bool
            public const nint m_bSetOnce = 0x1D3; // bool
            public const nint m_nCP = 0x1D4; // int32
            public const nint m_nHeadLocation = 0x1D8; // int32
            public const nint m_vecRotation = 0x1DC; // QAngle
            public const nint m_vecRotationB = 0x1E8; // QAngle
            public const nint m_flInterpolation = 0x1F8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 2
        public static class C_OP_SetControlPointFromObjectScale {
            public const nint m_nCPInput = 0x1D0; // int32
            public const nint m_nCPOutput = 0x1D4; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 15
        public static class C_OP_DistanceBetweenCPsToCP {
            public const nint m_nStartCP = 0x1D0; // int32
            public const nint m_nEndCP = 0x1D4; // int32
            public const nint m_nOutputCP = 0x1D8; // int32
            public const nint m_nOutputCPField = 0x1DC; // int32
            public const nint m_bSetOnce = 0x1E0; // bool
            public const nint m_flInputMin = 0x1E4; // float32
            public const nint m_flInputMax = 0x1E8; // float32
            public const nint m_flOutputMin = 0x1EC; // float32
            public const nint m_flOutputMax = 0x1F0; // float32
            public const nint m_flMaxTraceLength = 0x1F4; // float32
            public const nint m_flLOSScale = 0x1F8; // float32
            public const nint m_bLOS = 0x1FC; // bool
            public const nint m_CollisionGroupName = 0x1FD; // char[128]
            public const nint m_nTraceSet = 0x280; // ParticleTraceSet_t
            public const nint m_nSetParent = 0x284; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_SetControlPointToPlayer {
            public const nint m_nCP1 = 0x1D0; // int32
            public const nint m_vecCP1Pos = 0x1D4; // 
            public const nint m_bOrientToEyes = 0x1E0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_SetControlPointToHand {
            public const nint m_nCP1 = 0x1D0; // int32
            public const nint m_nHand = 0x1D4; // int32
            public const nint m_vecCP1Pos = 0x1D8; // 
            public const nint m_bOrientToHand = 0x1E4; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_SetControlPointToHMD {
            public const nint m_nCP1 = 0x1D0; // int32
            public const nint m_vecCP1Pos = 0x1D4; // 
            public const nint m_bOrientToHMD = 0x1E0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_SetControlPointPositionToTimeOfDayValue {
            public const nint m_nControlPointNumber = 0x1D0; // int32
            public const nint m_pszTimeOfDayParameter = 0x1D4; // char[128]
            public const nint m_vecDefaultValue = 0x254; // 
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_SetControlPointToCenter {
            public const nint m_nCP1 = 0x1D0; // int32
            public const nint m_vecCP1Pos = 0x1D4; // 
            public const nint m_nSetParent = 0x1E0; // ParticleParentSetMode_t
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_SetControlPointToCPVelocity {
            public const nint m_nCPInput = 0x1D0; // int32
            public const nint m_nCPOutputVel = 0x1D4; // int32
            public const nint m_bNormalize = 0x1D8; // bool
            public const nint m_nCPOutputMag = 0x1DC; // int32
            public const nint m_nCPField = 0x1E0; // int32
            public const nint m_vecComparisonVelocity = 0x1E8; // CParticleCollectionVecInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 2
        public static class C_OP_SetControlPointOrientationToCPVelocity {
            public const nint m_nCPInput = 0x1D0; // int32
            public const nint m_nCPOutput = 0x1D4; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_StopAfterCPDuration {
            public const nint m_flDuration = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_bDestroyImmediately = 0x328; // bool
            public const nint m_bPlayEndCap = 0x329; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_SetControlPointRotation {
            public const nint m_vecRotAxis = 0x1D0; // CParticleCollectionVecInput
            public const nint m_flRotRate = 0x828; // CParticleCollectionFloatInput
            public const nint m_nCP = 0x980; // int32
            public const nint m_nLocalCP = 0x984; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 10
        public static class C_OP_RemapCPtoCP {
            public const nint m_nInputControlPoint = 0x1D0; // int32
            public const nint m_nOutputControlPoint = 0x1D4; // int32
            public const nint m_nInputField = 0x1D8; // int32
            public const nint m_nOutputField = 0x1DC; // int32
            public const nint m_flInputMin = 0x1E0; // float32
            public const nint m_flInputMax = 0x1E4; // float32
            public const nint m_flOutputMin = 0x1E8; // float32
            public const nint m_flOutputMax = 0x1EC; // float32
            public const nint m_bDerivative = 0x1F0; // bool
            public const nint m_flInterpRate = 0x1F4; // float32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_HSVShiftToCP {
            public const nint m_nColorCP = 0x1D0; // int32
            public const nint m_nColorGemEnableCP = 0x1D4; // int32
            public const nint m_nOutputCP = 0x1D8; // int32
            public const nint m_DefaultHSVColor = 0x1DC; // Color
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 12
        public static class C_OP_SetControlPointToImpactPoint {
            public const nint m_nCPOut = 0x1D0; // int32
            public const nint m_nCPIn = 0x1D4; // int32
            public const nint m_flUpdateRate = 0x1D8; // float32
            public const nint m_flTraceLength = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_flStartOffset = 0x338; // float32
            public const nint m_flOffset = 0x33C; // float32
            public const nint m_vecTraceDir = 0x340; // 
            public const nint m_CollisionGroupName = 0x34C; // char[128]
            public const nint m_nTraceSet = 0x3CC; // ParticleTraceSet_t
            public const nint m_bSetToEndpoint = 0x3D0; // bool
            public const nint m_bTraceToClosestSurface = 0x3D1; // bool
            public const nint m_bIncludeWater = 0x3D2; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_SetCPOrientationToPointAtCP {
            public const nint m_nInputCP = 0x1D0; // int32
            public const nint m_nOutputCP = 0x1D4; // int32
            public const nint m_flInterpolation = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_b2DOrientation = 0x330; // bool
            public const nint m_bAvoidSingularity = 0x331; // bool
            public const nint m_bPointAway = 0x332; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 6
        public static class C_OP_EnableChildrenFromParentParticleCount {
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_nFirstChild = 0x1D4; // int32
            public const nint m_nNumChildrenToEnable = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_bDisableChildren = 0x330; // bool
            public const nint m_bPlayEndcapOnStop = 0x331; // bool
            public const nint m_bDestroyImmediately = 0x332; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_SelectivelyEnableChildren {
            public const nint m_nChildGroupID = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_nFirstChild = 0x328; // CParticleCollectionFloatInput
            public const nint m_nNumChildrenToEnable = 0x480; // CParticleCollectionFloatInput
            public const nint m_bPlayEndcapOnStop = 0x5D8; // bool
            public const nint m_bDestroyImmediately = 0x5D9; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 2
        public static class C_OP_PlayEndCapWhenFinished {
            public const nint m_bFireOnEmissionEnd = 0x1D0; // bool
            public const nint m_bIncludeChildren = 0x1D1; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 1
        public static class C_OP_ForceControlPointStub {
            public const nint m_ControlPoint = 0x1D0; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 9
        public static class C_OP_DriveCPFromGlobalSoundFloat {
            public const nint m_nOutputControlPoint = 0x1D0; // int32
            public const nint m_nOutputField = 0x1D4; // int32
            public const nint m_flInputMin = 0x1D8; // float32
            public const nint m_flInputMax = 0x1DC; // float32
            public const nint m_flOutputMin = 0x1E0; // float32
            public const nint m_flOutputMax = 0x1E4; // float32
            public const nint m_StackName = 0x1E8; // CUtlString
            public const nint m_OperatorName = 0x1F0; // CUtlString
            public const nint m_FieldName = 0x1F8; // CUtlString
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 3
        public static class C_OP_SetControlPointFieldToWater {
            public const nint m_nSourceCP = 0x1D0; // int32
            public const nint m_nDestCP = 0x1D4; // int32
            public const nint m_nCPField = 0x1D8; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 7
        public static class C_OP_SetControlPointToWaterSurface {
            public const nint m_nSourceCP = 0x1D0; // int32
            public const nint m_nDestCP = 0x1D4; // int32
            public const nint m_nFlowCP = 0x1D8; // int32
            public const nint m_nActiveCP = 0x1DC; // int32
            public const nint m_nActiveCPField = 0x1E0; // int32
            public const nint m_flRetestRate = 0x1E8; // CParticleCollectionFloatInput
            public const nint m_bAdaptiveThreshold = 0x340; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_RepeatedTriggerChildGroup {
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_flClusterRefireTime = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_flClusterSize = 0x330; // CParticleCollectionFloatInput
            public const nint m_flClusterCooldown = 0x488; // CParticleCollectionFloatInput
            public const nint m_bLimitChildCount = 0x5E0; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 2
        public static class C_OP_ChooseRandomChildrenInGroup {
            public const nint m_nChildGroupID = 0x1D0; // int32
            public const nint m_flNumberOfChildren = 0x1D8; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 1
        public static class C_OP_SetSimulationRate {
            public const nint m_flSimulationScale = 0x1D0; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_ControlPointToRadialScreenSpace {
            public const nint m_nCPIn = 0x1D0; // int32
            public const nint m_vecCP1Pos = 0x1D4; // 
            public const nint m_nCPOut = 0x1E0; // int32
            public const nint m_nCPOutField = 0x1E4; // int32
            public const nint m_nCPSSPosOut = 0x1E8; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 15
        public static class C_OP_LightningSnapshotGenerator {
            public const nint m_nCPSnapshot = 0x1D0; // int32
            public const nint m_nCPStartPnt = 0x1D4; // int32
            public const nint m_nCPEndPnt = 0x1D8; // int32
            public const nint m_flSegments = 0x1E0; // CParticleCollectionFloatInput
            public const nint m_flOffset = 0x338; // CParticleCollectionFloatInput
            public const nint m_flOffsetDecay = 0x490; // CParticleCollectionFloatInput
            public const nint m_flRecalcRate = 0x5E8; // CParticleCollectionFloatInput
            public const nint m_flUVScale = 0x740; // CParticleCollectionFloatInput
            public const nint m_flUVOffset = 0x898; // CParticleCollectionFloatInput
            public const nint m_flSplitRate = 0x9F0; // CParticleCollectionFloatInput
            public const nint m_flBranchTwist = 0xB48; // CParticleCollectionFloatInput
            public const nint m_nBranchBehavior = 0xCA0; // ParticleLightnintBranchBehavior_t
            public const nint m_flRadiusStart = 0xCA8; // CParticleCollectionFloatInput
            public const nint m_flRadiusEnd = 0xE00; // CParticleCollectionFloatInput
            public const nint m_flDedicatedPool = 0xF58; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_RemapExternalWindToCP {
            public const nint m_nCP = 0x1D0; // int32
            public const nint m_nCPOutput = 0x1D4; // int32
            public const nint m_vecScale = 0x1D8; // CParticleCollectionVecInput
            public const nint m_bSetMagnitude = 0x830; // bool
            public const nint m_nOutVectorField = 0x834; // int32
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 5
        public static class C_OP_SetGravityToCP {
            public const nint m_nCPInput = 0x1D0; // int32
            public const nint m_nCPOutput = 0x1D4; // int32
            public const nint m_flScale = 0x1D8; // CParticleCollectionFloatInput
            public const nint m_bSetOrientation = 0x330; // bool
            public const nint m_bSetZDown = 0x331; // bool
        }
        // Parent: CParticleFunctionPreEmission
        // Fields count: 4
        public static class C_OP_QuantizeCPComponent {
            public const nint m_flInputValue = 0x1D0; // CParticleCollectionFloatInput
            public const nint m_nCPOutput = 0x328; // int32
            public const nint m_nOutVectorField = 0x32C; // int32
            public const nint m_flQuantizeValue = 0x330; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 1
        public static class C_OP_RenderPoints {
            public const nint m_hMaterial = 0x200; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CBaseRendererSource2
        // Fields count: 7
        public static class CBaseTrailRenderer {
            public const nint m_nOrientationType = 0x2710; // ParticleOrientationChoiceList_t
            public const nint m_nOrientationControlPoint = 0x2714; // int32
            public const nint m_flMinSize = 0x2718; // float32
            public const nint m_flMaxSize = 0x271C; // float32
            public const nint m_flStartFadeSize = 0x2720; // CParticleCollectionRendererFloatInput
            public const nint m_flEndFadeSize = 0x2878; // CParticleCollectionRendererFloatInput
            public const nint m_bClampV = 0x29D0; // bool
        }
        // Parent: CBaseTrailRenderer
        // Fields count: 20
        public static class C_OP_RenderTrails {
            public const nint m_bEnableFadingAndClamping = 0x29E0; // bool
            public const nint m_flStartFadeDot = 0x29E4; // float32
            public const nint m_flEndFadeDot = 0x29E8; // float32
            public const nint m_nPrevPntSource = 0x29EC; // ParticleAttributeIndex_t
            public const nint m_flMaxLength = 0x29F0; // float32
            public const nint m_flMinLength = 0x29F4; // float32
            public const nint m_bIgnoreDT = 0x29F8; // bool
            public const nint m_flConstrainRadiusToLengthRatio = 0x29FC; // float32
            public const nint m_flLengthScale = 0x2A00; // float32
            public const nint m_flLengthFadeInTime = 0x2A04; // float32
            public const nint m_flRadiusHeadTaper = 0x2A08; // CPerParticleFloatInput
            public const nint m_vecHeadColorScale = 0x2B60; // CParticleCollectionVecInput
            public const nint m_flHeadAlphaScale = 0x31B8; // CPerParticleFloatInput
            public const nint m_flRadiusTaper = 0x3310; // CPerParticleFloatInput
            public const nint m_vecTailColorScale = 0x3468; // CParticleCollectionVecInput
            public const nint m_flTailAlphaScale = 0x3AC0; // CPerParticleFloatInput
            public const nint m_nHorizCropField = 0x3C18; // ParticleAttributeIndex_t
            public const nint m_nVertCropField = 0x3C1C; // ParticleAttributeIndex_t
            public const nint m_flForwardShift = 0x3C20; // float32
            public const nint m_bFlipUVBasedOnPitchYaw = 0x3C24; // bool
        }
        // Parent: CBaseRendererSource2
        // Fields count: 30
        public static class C_OP_RenderRopes {
            public const nint m_bEnableFadingAndClamping = 0x2710; // bool
            public const nint m_flMinSize = 0x2714; // float32
            public const nint m_flMaxSize = 0x2718; // float32
            public const nint m_flStartFadeSize = 0x271C; // float32
            public const nint m_flEndFadeSize = 0x2720; // float32
            public const nint m_flStartFadeDot = 0x2724; // float32
            public const nint m_flEndFadeDot = 0x2728; // float32
            public const nint m_flRadiusTaper = 0x272C; // float32
            public const nint m_nMinTesselation = 0x2730; // int32
            public const nint m_nMaxTesselation = 0x2734; // int32
            public const nint m_flTessScale = 0x2738; // float32
            public const nint m_flTextureVWorldSize = 0x2740; // CParticleCollectionRendererFloatInput
            public const nint m_flTextureVScrollRate = 0x2898; // CParticleCollectionRendererFloatInput
            public const nint m_flTextureVOffset = 0x29F0; // CParticleCollectionRendererFloatInput
            public const nint m_nTextureVParamsCP = 0x2B48; // int32
            public const nint m_bClampV = 0x2B4C; // bool
            public const nint m_nScaleCP1 = 0x2B50; // int32
            public const nint m_nScaleCP2 = 0x2B54; // int32
            public const nint m_flScaleVSizeByControlPointDistance = 0x2B58; // float32
            public const nint m_flScaleVScrollByControlPointDistance = 0x2B5C; // float32
            public const nint m_flScaleVOffsetByControlPointDistance = 0x2B60; // float32
            public const nint m_bUseScalarForTextureCoordinate = 0x2B65; // bool
            public const nint m_nScalarFieldForTextureCoordinate = 0x2B68; // ParticleAttributeIndex_t
            public const nint m_flScalarAttributeTextureCoordScale = 0x2B6C; // float32
            public const nint m_bReverseOrder = 0x2B70; // bool
            public const nint m_bClosedLoop = 0x2B71; // bool
            public const nint m_nOrientationType = 0x2B74; // ParticleOrientationChoiceList_t
            public const nint m_nVectorFieldForOrientation = 0x2B78; // ParticleAttributeIndex_t
            public const nint m_bDrawAsOpaque = 0x2B7C; // bool
            public const nint m_bGenerateNormals = 0x2B7D; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 8
        public static class C_OP_RenderAsModels {
            public const nint m_ModelList = 0x200; // CUtlVector<ModelReference_t>
            public const nint m_flModelScale = 0x21C; // float32
            public const nint m_bFitToModelSize = 0x220; // bool
            public const nint m_bNonUniformScaling = 0x221; // bool
            public const nint m_nXAxisScalingAttribute = 0x224; // ParticleAttributeIndex_t
            public const nint m_nYAxisScalingAttribute = 0x228; // ParticleAttributeIndex_t
            public const nint m_nZAxisScalingAttribute = 0x22C; // ParticleAttributeIndex_t
            public const nint m_nSizeCullBloat = 0x230; // int32
        }
        // Parent: C_OP_RenderPoints
        // Fields count: 7
        public static class C_OP_RenderLights {
            public const nint m_flAnimationRate = 0x210; // float32
            public const nint m_nAnimationType = 0x214; // AnimationType_t
            public const nint m_bAnimateInFPS = 0x218; // bool
            public const nint m_flMinSize = 0x21C; // float32
            public const nint m_flMaxSize = 0x220; // float32
            public const nint m_flStartFadeSize = 0x224; // float32
            public const nint m_flEndFadeSize = 0x228; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 6
        public static class C_OP_RenderBlobs {
            public const nint m_cubeWidth = 0x200; // CParticleCollectionRendererFloatInput
            public const nint m_cutoffRadius = 0x358; // CParticleCollectionRendererFloatInput
            public const nint m_renderRadius = 0x4B0; // CParticleCollectionRendererFloatInput
            public const nint m_nScaleCP = 0x608; // int32
            public const nint m_MaterialVars = 0x610; // CUtlVector<MaterialVariable_t>
            public const nint m_hMaterial = 0x640; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 6
        public static class C_OP_RenderGpuImplicit {
            public const nint m_bUsePerParticleRadius = 0x200; // bool
            public const nint m_fGridSize = 0x208; // CParticleCollectionRendererFloatInput
            public const nint m_fRadiusScale = 0x360; // CParticleCollectionRendererFloatInput
            public const nint m_fIsosurfaceThreshold = 0x4B8; // CParticleCollectionRendererFloatInput
            public const nint m_nScaleCP = 0x610; // int32
            public const nint m_hMaterial = 0x618; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 2
        public static class C_OP_RenderScreenVelocityRotate {
            public const nint m_flRotateRateDegrees = 0x200; // float32
            public const nint m_flForwardDegrees = 0x204; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 54
        public static class C_OP_RenderModels {
            public const nint m_bOnlyRenderInEffectsBloomPass = 0x200; // bool
            public const nint m_bOnlyRenderInEffectsWaterPass = 0x201; // bool
            public const nint m_bUseMixedResolutionRendering = 0x202; // bool
            public const nint m_bOnlyRenderInEffecsGameOverlay = 0x203; // bool
            public const nint m_ModelList = 0x208; // CUtlVector<ModelReference_t>
            public const nint m_nBodyGroupField = 0x224; // ParticleAttributeIndex_t
            public const nint m_nSubModelField = 0x228; // ParticleAttributeIndex_t
            public const nint m_bIgnoreNormal = 0x22C; // bool
            public const nint m_bOrientZ = 0x22D; // bool
            public const nint m_bCenterOffset = 0x22E; // bool
            public const nint m_vecLocalOffset = 0x230; // CPerParticleVecInput
            public const nint m_vecLocalRotation = 0x888; // CPerParticleVecInput
            public const nint m_bIgnoreRadius = 0xEE0; // bool
            public const nint m_nModelScaleCP = 0xEE4; // int32
            public const nint m_vecComponentScale = 0xEE8; // CPerParticleVecInput
            public const nint m_bLocalScale = 0x1540; // bool
            public const nint m_nSizeCullBloat = 0x1544; // int32
            public const nint m_bAnimated = 0x1548; // bool
            public const nint m_flAnimationRate = 0x1550; // CPerParticleFloatInput
            public const nint m_bScaleAnimationRate = 0x16A8; // bool
            public const nint m_bForceLoopingAnimation = 0x16A9; // bool
            public const nint m_bResetAnimOnStop = 0x16AA; // bool
            public const nint m_bManualAnimFrame = 0x16AB; // bool
            public const nint m_nAnimationScaleField = 0x16AC; // ParticleAttributeIndex_t
            public const nint m_nAnimationField = 0x16B0; // ParticleAttributeIndex_t
            public const nint m_nManualFrameField = 0x16B4; // ParticleAttributeIndex_t
            public const nint m_ActivityName = 0x16B8; // char[256]
            public const nint m_SequenceName = 0x17B8; // char[256]
            public const nint m_bEnableClothSimulation = 0x18B8; // bool
            public const nint m_hOverrideMaterial = 0x18C0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_bOverrideTranslucentMaterials = 0x18C8; // bool
            public const nint m_nSkin = 0x18D0; // CPerParticleFloatInput
            public const nint m_MaterialVars = 0x1A28; // CUtlVector<MaterialVariable_t>
            public const nint m_flManualModelSelection = 0x1A40; // CPerParticleFloatInput
            public const nint m_modelInput = 0x1B98; // CParticleModelInput
            public const nint m_nLOD = 0x1BF8; // int32
            public const nint m_EconSlotName = 0x1BFC; // char[256]
            public const nint m_bOriginalModel = 0x1CFC; // bool
            public const nint m_bSuppressTint = 0x1CFD; // bool
            public const nint m_bUseRawMeshGroup = 0x1CFE; // bool
            public const nint m_bDisableShadows = 0x1CFF; // bool
            public const nint m_bDisableDepthPrepass = 0x1D00; // bool
            public const nint m_bAcceptsDecals = 0x1D01; // bool
            public const nint m_bForceDrawInterlevedWithSiblings = 0x1D02; // bool
            public const nint m_bDoNotDrawInParticlePass = 0x1D03; // bool
            public const nint m_bUseFastModelCollectionRenderPath = 0x1D04; // bool
            public const nint m_bAllowApproximateTransforms = 0x1D05; // bool
            public const nint m_szRenderAttribute = 0x1D06; // char[260]
            public const nint m_flRadiusScale = 0x1E10; // CParticleCollectionFloatInput
            public const nint m_flAlphaScale = 0x1F68; // CParticleCollectionFloatInput
            public const nint m_flRollScale = 0x20C0; // CParticleCollectionFloatInput
            public const nint m_nAlpha2Field = 0x2218; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x2220; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x2878; // ParticleColorBlendType_t
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 5
        public static class C_OP_RenderSimpleModelCollection {
            public const nint m_bCenterOffset = 0x200; // bool
            public const nint m_modelInput = 0x208; // CParticleModelInput
            public const nint m_nLOD = 0x268; // int32
            public const nint m_bDisableShadows = 0x26C; // bool
            public const nint m_bAcceptsDecals = 0x26D; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 8
        public static class C_OP_RenderMaterialProxy {
            public const nint m_nMaterialControlPoint = 0x200; // int32
            public const nint m_nProxyType = 0x204; // MaterialProxyType_t
            public const nint m_MaterialVars = 0x208; // CUtlVector<MaterialVariable_t>
            public const nint m_hOverrideMaterial = 0x220; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_flMaterialOverrideEnabled = 0x228; // CParticleCollectionFloatInput
            public const nint m_vecColorScale = 0x380; // CParticleCollectionVecInput
            public const nint m_flAlpha = 0x9D8; // CPerParticleFloatInput
            public const nint m_nColorBlendType = 0xB30; // ParticleColorBlendType_t
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 12
        public static class C_OP_RenderProjected {
            public const nint m_bProjectCharacter = 0x200; // bool
            public const nint m_bProjectWorld = 0x201; // bool
            public const nint m_bProjectWater = 0x202; // bool
            public const nint m_bFlipHorizontal = 0x203; // bool
            public const nint m_bEnableProjectedDepthControls = 0x204; // bool
            public const nint m_flMinProjectionDepth = 0x208; // float32
            public const nint m_flMaxProjectionDepth = 0x20C; // float32
            public const nint m_vecProjectedMaterials = 0x210; // CUtlVector<RenderProjectedMaterial_t>
            public const nint m_flMaterialSelection = 0x228; // CPerParticleFloatInput
            public const nint m_flAnimationTimeScale = 0x380; // float32
            public const nint m_bOrientToNormal = 0x384; // bool
            public const nint m_MaterialVars = 0x388; // CUtlVector<MaterialVariable_t>
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 16
        public static class C_OP_RenderDeferredLight {
            public const nint m_bUseAlphaTestWindow = 0x200; // bool
            public const nint m_bUseTexture = 0x201; // bool
            public const nint m_flRadiusScale = 0x204; // float32
            public const nint m_flAlphaScale = 0x208; // float32
            public const nint m_nAlpha2Field = 0x20C; // ParticleAttributeIndex_t
            public const nint m_vecColorScale = 0x210; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x868; // ParticleColorBlendType_t
            public const nint m_flLightDistance = 0x86C; // float32
            public const nint m_flStartFalloff = 0x870; // float32
            public const nint m_flDistanceFalloff = 0x874; // float32
            public const nint m_flSpotFoV = 0x878; // float32
            public const nint m_nAlphaTestPointField = 0x87C; // ParticleAttributeIndex_t
            public const nint m_nAlphaTestRangeField = 0x880; // ParticleAttributeIndex_t
            public const nint m_nAlphaTestSharpnessField = 0x884; // ParticleAttributeIndex_t
            public const nint m_hTexture = 0x888; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_nHSVShiftControlPoint = 0x890; // int32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 29
        public static class C_OP_RenderStandardLight {
            public const nint m_nLightType = 0x200; // ParticleLightTypeChoiceList_t
            public const nint m_vecColorScale = 0x208; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x860; // ParticleColorBlendType_t
            public const nint m_flIntensity = 0x868; // CParticleCollectionFloatInput
            public const nint m_bCastShadows = 0x9C0; // bool
            public const nint m_flTheta = 0x9C8; // CParticleCollectionFloatInput
            public const nint m_flPhi = 0xB20; // CParticleCollectionFloatInput
            public const nint m_flRadiusMultiplier = 0xC78; // CParticleCollectionFloatInput
            public const nint m_nAttenuationStyle = 0xDD0; // StandardLightingAttenuationStyle_t
            public const nint m_flFalloffLinearity = 0xDD8; // CParticleCollectionFloatInput
            public const nint m_flFiftyPercentFalloff = 0xF30; // CParticleCollectionFloatInput
            public const nint m_flZeroPercentFalloff = 0x1088; // CParticleCollectionFloatInput
            public const nint m_bRenderDiffuse = 0x11E0; // bool
            public const nint m_bRenderSpecular = 0x11E1; // bool
            public const nint m_lightCookie = 0x11E8; // CUtlString
            public const nint m_nPriority = 0x11F0; // int32
            public const nint m_nFogLightingMode = 0x11F4; // ParticleLightFogLightingMode_t
            public const nint m_flFogContribution = 0x11F8; // CParticleCollectionRendererFloatInput
            public const nint m_nCapsuleLightBehavior = 0x1350; // ParticleLightBehaviorChoiceList_t
            public const nint m_flCapsuleLength = 0x1354; // float32
            public const nint m_bReverseOrder = 0x1358; // bool
            public const nint m_bClosedLoop = 0x1359; // bool
            public const nint m_nPrevPntSource = 0x135C; // ParticleAttributeIndex_t
            public const nint m_flMaxLength = 0x1360; // float32
            public const nint m_flMinLength = 0x1364; // float32
            public const nint m_bIgnoreDT = 0x1368; // bool
            public const nint m_flConstrainRadiusToLengthRatio = 0x136C; // float32
            public const nint m_flLengthScale = 0x1370; // float32
            public const nint m_flLengthFadeInTime = 0x1374; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 14
        public static class C_OP_RenderOmni2Light {
            public const nint m_nLightType = 0x200; // ParticleOmni2LightTypeChoiceList_t
            public const nint m_vColorBlend = 0x208; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x860; // ParticleColorBlendType_t
            public const nint m_nBrightnessUnit = 0x864; // ParticleLightUnitChoiceList_t
            public const nint m_flBrightnessLumens = 0x868; // CPerParticleFloatInput
            public const nint m_flBrightnessCandelas = 0x9C0; // CPerParticleFloatInput
            public const nint m_bCastShadows = 0xB18; // bool
            public const nint m_flLuminaireRadius = 0xB20; // CPerParticleFloatInput
            public const nint m_flSkirt = 0xC78; // CPerParticleFloatInput
            public const nint m_flRange = 0xDD0; // CPerParticleFloatInput
            public const nint m_flInnerConeAngle = 0xF28; // CPerParticleFloatInput
            public const nint m_flOuterConeAngle = 0x1080; // CPerParticleFloatInput
            public const nint m_hLightCookie = 0x11D8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bSphericalCookie = 0x11E0; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 7
        public static class C_OP_RenderLightBeam {
            public const nint m_vColorBlend = 0x200; // CParticleCollectionVecInput
            public const nint m_nColorBlendType = 0x858; // ParticleColorBlendType_t
            public const nint m_flBrightnessLumensPerMeter = 0x860; // CParticleCollectionFloatInput
            public const nint m_bCastShadows = 0x9B8; // bool
            public const nint m_flSkirt = 0x9C0; // CParticleCollectionFloatInput
            public const nint m_flRange = 0xB18; // CParticleCollectionFloatInput
            public const nint m_flThickness = 0xC70; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 0
        public static class C_OP_RenderClothForce {
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 0
        public static class C_OP_Callback {
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 9
        public static class C_OP_RenderScreenShake {
            public const nint m_flDurationScale = 0x200; // float32
            public const nint m_flRadiusScale = 0x204; // float32
            public const nint m_flFrequencyScale = 0x208; // float32
            public const nint m_flAmplitudeScale = 0x20C; // float32
            public const nint m_nRadiusField = 0x210; // ParticleAttributeIndex_t
            public const nint m_nDurationField = 0x214; // ParticleAttributeIndex_t
            public const nint m_nFrequencyField = 0x218; // ParticleAttributeIndex_t
            public const nint m_nAmplitudeField = 0x21C; // ParticleAttributeIndex_t
            public const nint m_nFilterCP = 0x220; // int32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 4
        public static class C_OP_RenderTonemapController {
            public const nint m_flTonemapLevel = 0x200; // float32
            public const nint m_flTonemapWeight = 0x204; // float32
            public const nint m_nTonemapLevelField = 0x208; // ParticleAttributeIndex_t
            public const nint m_nTonemapWeightField = 0x20C; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 3
        public static class C_OP_RenderPostProcessing {
            public const nint m_flPostProcessStrength = 0x200; // CPerParticleFloatInput
            public const nint m_hPostTexture = 0x358; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
            public const nint m_nPriority = 0x360; // ParticlePostProcessPriorityGroup_t
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 12
        public static class C_OP_RenderSound {
            public const nint m_flDurationScale = 0x200; // float32
            public const nint m_flSndLvlScale = 0x204; // float32
            public const nint m_flPitchScale = 0x208; // float32
            public const nint m_flVolumeScale = 0x20C; // float32
            public const nint m_nSndLvlField = 0x210; // ParticleAttributeIndex_t
            public const nint m_nDurationField = 0x214; // ParticleAttributeIndex_t
            public const nint m_nPitchField = 0x218; // ParticleAttributeIndex_t
            public const nint m_nVolumeField = 0x21C; // ParticleAttributeIndex_t
            public const nint m_nChannel = 0x220; // int32
            public const nint m_nCPReference = 0x224; // int32
            public const nint m_pszSoundName = 0x228; // char[256]
            public const nint m_bSuppressStopSoundEvent = 0x328; // bool
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 7
        public static class C_OP_RenderStatusEffect {
            public const nint m_pTextureColorWarp = 0x200; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureDetail2 = 0x208; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureDiffuseWarp = 0x210; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureFresnelColorWarp = 0x218; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureFresnelWarp = 0x220; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureSpecularWarp = 0x228; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureEnvMap = 0x230; // CStrongHandle<InfoForResourceTypeCTextureBase>
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 6
        public static class C_OP_RenderStatusEffectCitadel {
            public const nint m_pTextureColorWarp = 0x200; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureNormal = 0x208; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureMetalness = 0x210; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureRoughness = 0x218; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureSelfIllum = 0x220; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_pTextureDetail = 0x228; // CStrongHandle<InfoForResourceTypeCTextureBase>
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 3
        public static class C_OP_RenderFlattenGrass {
            public const nint m_flFlattenStrength = 0x200; // float32
            public const nint m_nStrengthFieldOverride = 0x204; // ParticleAttributeIndex_t
            public const nint m_flRadiusScale = 0x208; // float32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 10
        public static class C_OP_RenderTreeShake {
            public const nint m_flPeakStrength = 0x200; // float32
            public const nint m_nPeakStrengthFieldOverride = 0x204; // ParticleAttributeIndex_t
            public const nint m_flRadius = 0x208; // float32
            public const nint m_nRadiusFieldOverride = 0x20C; // ParticleAttributeIndex_t
            public const nint m_flShakeDuration = 0x210; // float32
            public const nint m_flTransitionTime = 0x214; // float32
            public const nint m_flTwistAmount = 0x218; // float32
            public const nint m_flRadialAmount = 0x21C; // float32
            public const nint m_flControlPointOrientationAmount = 0x220; // float32
            public const nint m_nControlPointForLinearDirection = 0x224; // int32
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 2
        public static class C_OP_RenderText {
            public const nint m_OutlineColor = 0x200; // Color
            public const nint m_DefaultText = 0x208; // CUtlString
        }
        // Parent: CParticleFunctionRenderer
        // Fields count: 4
        public static class C_OP_RenderVRHapticEvent {
            public const nint m_nHand = 0x200; // ParticleVRHandChoiceList_t
            public const nint m_nOutputHandCP = 0x204; // int32
            public const nint m_nOutputField = 0x208; // int32
            public const nint m_flAmplitude = 0x210; // CPerParticleFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapSDFDistanceToScalarAttribute {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nVectorFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flMinDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x320; // CParticleCollectionFloatInput
            public const nint m_flValueBelowMin = 0x478; // CParticleCollectionFloatInput
            public const nint m_flValueAtMin = 0x5D0; // CParticleCollectionFloatInput
            public const nint m_flValueAtMax = 0x728; // CParticleCollectionFloatInput
            public const nint m_flValueAboveMax = 0x880; // CParticleCollectionFloatInput
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 8
        public static class C_OP_RemapSDFDistanceToVectorAttribute {
            public const nint m_nVectorFieldOutput = 0x1C0; // ParticleAttributeIndex_t
            public const nint m_nVectorFieldInput = 0x1C4; // ParticleAttributeIndex_t
            public const nint m_flMinDistance = 0x1C8; // CParticleCollectionFloatInput
            public const nint m_flMaxDistance = 0x320; // CParticleCollectionFloatInput
            public const nint m_vValueBelowMin = 0x478; // 
            public const nint m_vValueAtMin = 0x484; // 
            public const nint m_vValueAtMax = 0x490; // 
            public const nint m_vValueAboveMax = 0x49C; // 
        }
        // Parent: CParticleFunctionForce
        // Fields count: 1
        public static class C_OP_SDFForce {
            public const nint m_flForceScale = 0x1D0; // float32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 1
        public static class C_OP_RemapSDFGradientToVectorAttribute {
            public const nint m_nFieldOutput = 0x1C0; // ParticleAttributeIndex_t
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_SDFLighting {
            public const nint m_vLightingDir = 0x1C0; // 
            public const nint m_vTint_0 = 0x1CC; // 
            public const nint m_vTint_1 = 0x1D8; // 
        }
        // Parent: CParticleFunctionConstraint
        // Fields count: 3
        public static class C_OP_SDFConstraint {
            public const nint m_flMinDist = 0x1C0; // CParticleCollectionFloatInput
            public const nint m_flMaxDist = 0x318; // CParticleCollectionFloatInput
            public const nint m_nMaxIterations = 0x470; // int32
        }
        // Parent: CParticleFunctionOperator
        // Fields count: 3
        public static class C_OP_ParticlePhysics {
            public const nint m_Gravity = 0x1C0; // CParticleCollectionVecInput
            public const nint m_fDrag = 0x818; // CParticleCollectionFloatInput
            public const nint m_nMaxConstraintPasses = 0x970; // int32
        }
    }
    // Module: pulse_system.dll
    // Classes count: 85
    // Enums count: 7
    public static class PulseSystem {
        // Alignment: 2
        // Members count: 61
        public enum PulseInstructionCode_t : ushort {
            INVALID = 0x0,
            IMMEDIATE_HALT = 0x1,
            RETURN_VOID = 0x2,
            RETURN_VALUE = 0x3,
            NOP = 0x4,
            JUMP = 0x5,
            JUMP_COND = 0x6,
            CHUNK_LEAP = 0x7,
            CHUNK_LEAP_COND = 0x8,
            PULSE_CALL_SYNC = 0x9,
            PULSE_CALL_ASYNC_FIRE = 0xA,
            CELL_INVOKE = 0xB,
            LIBRARY_INVOKE = 0xC,
            SET_VAR = 0xD,
            GET_VAR = 0xE,
            GET_CONST = 0xF,
            SET_REGISTER_DOMAIN_VALUE = 0x10,
            COPY = 0x11,
            NOT = 0x12,
            NEGATE = 0x13,
            ADD = 0x14,
            SUB = 0x15,
            MUL = 0x16,
            DIV = 0x17,
            MOD = 0x18,
            LT = 0x19,
            LTE = 0x1A,
            EQ = 0x1B,
            NE = 0x1C,
            AND = 0x1D,
            OR = 0x1E,
            CONVERT_VALUE = 0x1F,
            LAST_SERIALIZED_CODE = 0x20,
            NEGATE_INT = 0x21,
            NEGATE_FLOAT = 0x22,
            ADD_INT = 0x23,
            ADD_FLOAT = 0x24,
            ADD_STRING = 0x25,
            SUB_INT = 0x26,
            SUB_FLOAT = 0x27,
            MUL_INT = 0x28,
            MUL_FLOAT = 0x29,
            DIV_INT = 0x2A,
            DIV_FLOAT = 0x2B,
            MOD_INT = 0x2C,
            MOD_FLOAT = 0x2D,
            LT_INT = 0x2E,
            LT_FLOAT = 0x2F,
            LTE_INT = 0x30,
            LTE_FLOAT = 0x31,
            EQ_BOOL = 0x32,
            EQ_INT = 0x33,
            EQ_FLOAT = 0x34,
            EQ_STRING = 0x35,
            EQ_ENTITY_NAME = 0x36,
            NE_BOOL = 0x37,
            NE_INT = 0x38,
            NE_FLOAT = 0x39,
            NE_STRING = 0x3A,
            NE_ENTITY_NAME = 0x3B,
            GET_CONST_INLINE_STORAGE = 0x3C
        }
        // Alignment: 4
        // Members count: 2
        public enum PulseMethodCallMode_t : uint {
            SYNC_WAIT_FOR_COMPLETION = 0x0,
            ASYNC_FIRE_AND_FORGET = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum PulseCursorExecResult_t : uint {
            Succeeded = 0x0,
            Canceled = 0x1,
            Failed = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum PulseCursorCancelPriority_t : uint {
            None = 0x0,
            CancelOnSucceeded = 0x1,
            SoftCancel = 0x2,
            HardCancel = 0x3
        }
        // Alignment: 4
        // Members count: 19
        public enum PulseValueType_t : uint {
            PVAL_INVALID = 0xFFFFFFFFFFFFFFFF,
            PVAL_BOOL = 0x0,
            PVAL_INT = 0x1,
            PVAL_FLOAT = 0x2,
            PVAL_STRING = 0x3,
            PVAL_VEC3 = 0x4,
            PVAL_TRANSFORM = 0x5,
            PVAL_COLOR_RGB = 0x6,
            PVAL_EHANDLE = 0x7,
            PVAL_RESOURCE = 0x8,
            PVAL_SNDEVT_GUID = 0x9,
            PVAL_ENTITY_NAME = 0xA,
            PVAL_SCHEMA_PTR = 0xB,
            PVAL_TYPESAFE_INT = 0xC,
            PVAL_CURSOR_FLOW = 0xD,
            PVAL_ANY = 0xE,
            PVAL_SCHEMA_ENUM = 0xF,
            PVAL_PANORAMA_PANEL_HANDLE = 0x10,
            PVAL_COUNT = 0x11
        }
        // Alignment: 4
        // Members count: 5
        public enum PulseTestEnumColor_t : uint {
            BLACK = 0x0,
            WHITE = 0x1,
            RED = 0x2,
            GREEN = 0x3,
            BLUE = 0x4
        }
        // Alignment: 4
        // Members count: 3
        public enum PulseTestEnumShape_t : uint {
            CIRCLE = 0x64,
            SQUARE = 0xC8,
            TRIANGLE = 0x12C
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseCursorFuncs {
        }
        // Parent: None
        // Fields count: 1
        public static class CPulseCell_WaitForCursorsWithTagBase__CursorState_t {
            public const nint m_TagName = 0x0; // CUtlSymbolLarge
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseTestFuncs_LibraryA {
        }
        // Parent: None
        // Fields count: 0
        public static class FakeEntity_tAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseExecCursor {
        }
        // Parent: None
        // Fields count: 5
        public static class CPulse_RegisterInfo {
            public const nint m_nReg = 0x0; // PulseRuntimeRegisterIndex_t
            public const nint m_Type = 0x8; // CPulseValueFullType
            public const nint m_OriginName = 0x18; // CKV3MemberNameWithStorage
            public const nint m_nWrittenByInstruction = 0x50; // int32
            public const nint m_nLastReadByInstruction = 0x54; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class CPulse_Chunk {
            public const nint m_Instructions = 0x0; // CUtlLeanVector<PGDInstruction_t>
            public const nint m_Registers = 0x10; // CUtlLeanVector<CPulse_RegisterInfo>
            public const nint m_InstructionEditorIDs = 0x20; // CUtlLeanVector<PulseDocNodeID_t>
        }
        // Parent: None
        // Fields count: 5
        public static class CPulse_Variable {
            public const nint m_Name = 0x0; // CUtlSymbolLarge
            public const nint m_Description = 0x8; // CUtlString
            public const nint m_Type = 0x10; // CPulseValueFullType
            public const nint m_DefaultValue = 0x20; // KeyValues3
            public const nint m_bIsPublic = 0x32; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CPulse_Constant {
            public const nint m_Type = 0x0; // CPulseValueFullType
            public const nint m_Value = 0x10; // KeyValues3
        }
        // Parent: None
        // Fields count: 3
        public static class CPulse_PublicOutput {
            public const nint m_Name = 0x0; // CUtlSymbolLarge
            public const nint m_Description = 0x8; // CUtlString
            public const nint m_ParamType = 0x10; // CPulseValueFullType
        }
        // Parent: None
        // Fields count: 4
        public static class CPulse_OutputConnection {
            public const nint m_SourceOutput = 0x0; // CUtlSymbolLarge
            public const nint m_TargetEntity = 0x8; // CUtlSymbolLarge
            public const nint m_TargetInput = 0x10; // CUtlSymbolLarge
            public const nint m_Param = 0x18; // CUtlSymbolLarge
        }
        // Parent: None
        // Fields count: 5
        public static class CPulse_InvokeBinding {
            public const nint m_RegisterMap = 0x0; // PulseRegisterMap_t
            public const nint m_FuncName = 0x20; // CUtlSymbolLarge
            public const nint m_nCellIndex = 0x28; // PulseRuntimeCellIndex_t
            public const nint m_nSrcChunk = 0x2C; // PulseRuntimeChunkIndex_t
            public const nint m_nSrcInstruction = 0x30; // int32
        }
        // Parent: None
        // Fields count: 6
        public static class CPulse_CallInfo {
            public const nint m_PortName = 0x0; // CUtlSymbolLarge
            public const nint m_nEditorNodeID = 0x8; // PulseDocNodeID_t
            public const nint m_RegisterMap = 0x10; // PulseRegisterMap_t
            public const nint m_CallMethodID = 0x30; // PulseDocNodeID_t
            public const nint m_nSrcChunk = 0x34; // PulseRuntimeChunkIndex_t
            public const nint m_nSrcInstruction = 0x38; // int32
        }
        // Parent: None
        // Fields count: 10
        public static class CPulseGraphDef {
            public const nint m_DomainIdentifier = 0x8; // CUtlSymbolLarge
            public const nint m_ParentMapName = 0x10; // CUtlSymbolLarge
            public const nint m_Chunks = 0x18; // CUtlVector<CPulse_Chunk*>
            public const nint m_Cells = 0x30; // CUtlVector<CPulseCell_Base*>
            public const nint m_Vars = 0x48; // CUtlVector<CPulse_Variable>
            public const nint m_PublicOutputs = 0x60; // CUtlVector<CPulse_PublicOutput>
            public const nint m_InvokeBindings = 0x78; // CUtlVector<CPulse_InvokeBinding*>
            public const nint m_CallInfos = 0x90; // CUtlVector<CPulse_CallInfo*>
            public const nint m_Constants = 0xA8; // CUtlVector<CPulse_Constant>
            public const nint m_OutputConnections = 0xC0; // CUtlVector<CPulse_OutputConnection*>
        }
        // Parent: None
        // Fields count: 0
        public static class CBasePulseGraphInstance {
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseMathlib {
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseTestScriptLib {
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeChunkIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeCallInfoIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeVarIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeOutputIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeStateOffset_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeRegisterIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeConstantIndex_t {
            public const nint m_Value = 0x0; // int16
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeCellIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeInvokeIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseDocNodeID_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseRuntimeEntrypointIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseGraphInstanceID_t {
            public const nint m_Value = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseCursorID_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class PulseCursorYieldToken_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class PulseRegisterMap_t {
            public const nint m_Inparams = 0x0; // KeyValues3
            public const nint m_Outparams = 0x10; // KeyValues3
        }
        // Parent: None
        // Fields count: 11
        public static class PGDInstruction_t {
            public const nint m_nCode = 0x0; // PulseInstructionCode_t
            public const nint m_nVar = 0x4; // PulseRuntimeVarIndex_t
            public const nint m_nReg0 = 0x8; // PulseRuntimeRegisterIndex_t
            public const nint m_nReg1 = 0xA; // PulseRuntimeRegisterIndex_t
            public const nint m_nReg2 = 0xC; // PulseRuntimeRegisterIndex_t
            public const nint m_nInvokeBindingIndex = 0x10; // PulseRuntimeInvokeIndex_t
            public const nint m_nChunk = 0x14; // PulseRuntimeChunkIndex_t
            public const nint m_nDestInstruction = 0x18; // int32
            public const nint m_nCallInfoIndex = 0x1C; // PulseRuntimeCallInfoIndex_t
            public const nint m_nConstIdx = 0x20; // PulseRuntimeConstantIndex_t
            public const nint m_DomainValue = 0x28; // CBufferString
        }
        // Parent: None
        // Fields count: 3
        public static class CPulse_OutflowConnection {
            public const nint m_SourceOutflowName = 0x0; // CUtlSymbolLarge
            public const nint m_nDestChunk = 0x8; // PulseRuntimeChunkIndex_t
            public const nint m_nInstruction = 0xC; // int32
        }
        // Parent: CPulse_OutflowConnection
        // Fields count: 0
        public static class CPulse_ResumePoint {
        }
        // Parent: None
        // Fields count: 1
        public static class CPulseCell_Base {
            public const nint m_nEditorNodeID = 0x8; // PulseDocNodeID_t
        }
        // Parent: CPulseCell_Base
        // Fields count: 0
        public static class CPulseCell_BaseFlow {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Inflow_BaseEntrypoint {
            public const nint m_EntryChunk = 0x48; // PulseRuntimeChunkIndex_t
            public const nint m_RegisterMap = 0x50; // PulseRegisterMap_t
        }
        // Parent: None
        // Fields count: 3
        public static class CPulseRuntimeMethodArg {
            public const nint m_Name = 0x0; // CKV3MemberNameWithStorage
            public const nint m_Description = 0x38; // CUtlString
            public const nint m_Type = 0x40; // CPulseValueFullType
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Fields count: 5
        public static class CPulseCell_Inflow_Method {
            public const nint m_MethodName = 0x70; // CUtlSymbolLarge
            public const nint m_Description = 0x78; // CUtlString
            public const nint m_bIsPublic = 0x80; // bool
            public const nint m_ReturnType = 0x88; // CPulseValueFullType
            public const nint m_Args = 0x98; // CUtlVector<CPulseRuntimeMethodArg>
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Fields count: 1
        public static class CPulseCell_Inflow_EventHandler {
            public const nint m_EventName = 0x70; // CUtlSymbolLarge
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Fields count: 1
        public static class CPulseCell_Inflow_GraphHook {
            public const nint m_HookName = 0x70; // CUtlSymbolLarge
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Fields count: 4
        public static class CPulseCell_Inflow_EntOutputHandler {
            public const nint m_SourceEntity = 0x70; // CUtlSymbolLarge
            public const nint m_SourceOutput = 0x78; // CUtlSymbolLarge
            public const nint m_TargetInput = 0x80; // CUtlSymbolLarge
            public const nint m_ExpectedParamType = 0x88; // CPulseValueFullType
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_BaseYieldingInflow {
        }
        // Parent: CPulseCell_Base
        // Fields count: 0
        public static class CPulseCell_BaseValue {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Step_PublicOutput {
            public const nint m_OutputIndex = 0x48; // PulseRuntimeOutputIndex_t
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 1
        public static class CPulseCell_Inflow_Yield {
            public const nint m_UnyieldResume = 0x48; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 1
        public static class CPulseCell_Inflow_Wait {
            public const nint m_WakeResume = 0x48; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Outflow_StringSwitch {
            public const nint m_DefaultCaseOutflow = 0x48; // CPulse_OutflowConnection
            public const nint m_CaseOutflows = 0x58; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Outflow_IntSwitch {
            public const nint m_DefaultCaseOutflow = 0x48; // CPulse_OutflowConnection
            public const nint m_CaseOutflows = 0x58; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Outflow_CycleOrdered {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Fields count: 1
        public static class CPulseCell_Outflow_CycleOrdered__InstanceState_t {
            public const nint m_nNextIndex = 0x0; // int32
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Outflow_CycleRandom {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Outflow_CycleShuffled {
            public const nint m_Outputs = 0x48; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Fields count: 2
        public static class CPulseCell_Outflow_CycleShuffled__InstanceState_t {
            public const nint m_Shuffle = 0x0; // CUtlVectorFixedGrowable<uint8>
            public const nint m_nNextShuffle = 0x20; // int32
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Outflow_TestRandomYesNo {
            public const nint m_Yes = 0x48; // CPulse_OutflowConnection
            public const nint m_No = 0x58; // CPulse_OutflowConnection
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Outflow_TestExplicitYesNo {
            public const nint m_Yes = 0x48; // CPulse_OutflowConnection
            public const nint m_No = 0x58; // CPulse_OutflowConnection
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 0
        public static class CPulseCell_Value_TestValue50 {
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 0
        public static class CPulseCell_Value_RandomInt {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Step_DebugLog {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 4
        public static class CPulseCell_Step_CallExternalMethod {
            public const nint m_MethodName = 0x48; // CUtlSymbolLarge
            public const nint m_ExpectedArgs = 0x50; // CUtlVector<CPulseRuntimeMethodArg>
            public const nint m_nAsyncCallMode = 0x68; // PulseMethodCallMode_t
            public const nint m_OnFinished = 0x70; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 4
        public static class CPulseCell_Timeline {
            public const nint m_TimelineEvents = 0x48; // CUtlVector<CPulseCell_Timeline::TimelineEvent_t>
            public const nint m_bWaitForChildOutflows = 0x60; // bool
            public const nint m_OnFinished = 0x68; // CPulse_ResumePoint
            public const nint m_OnCanceled = 0x78; // CPulse_ResumePoint
        }
        // Parent: None
        // Fields count: 4
        public static class CPulseCell_Timeline__TimelineEvent_t {
            public const nint m_flTimeFromPrevious = 0x0; // float32
            public const nint m_bPauseForPreviousEvents = 0x4; // bool
            public const nint m_bCallModeSync = 0x5; // bool
            public const nint m_EventOutflow = 0x8; // CPulse_OutflowConnection
        }
        // Parent: None
        // Fields count: 1
        public static class PulseTestEHandle_t {
            public const nint m_Value = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 7
        public static class FakeEntity_t {
            public const nint m_nHandle = 0x0; // PulseTestEHandle_t
            public const nint m_Name = 0x8; // CUtlString
            public const nint m_Class = 0x10; // CUtlString
            public const nint m_bDestroyed = 0x18; // bool
            public const nint m_pAssociatedGraphInstance = 0x20; // CPulseGraphInstance_TestDomain*
            public const nint m_bFuncWasCalled = 0x28; // bool
            public const nint m_fValue = 0x2C; // float32
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 6
        public static class CPulseGraphInstance_TestDomain {
            public const nint m_bIsRunningUnitTests = 0xD8; // bool
            public const nint m_bExplicitTimeStepping = 0xD9; // bool
            public const nint m_bExpectingToDestroyWithYieldedCursors = 0xDA; // bool
            public const nint m_nNextValidateIndex = 0xDC; // int32
            public const nint m_Tracepoints = 0xE0; // CUtlVector<CUtlString>
            public const nint m_bTestYesOrNoPath = 0xF8; // bool
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Step_TestDomainTracepoint {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Step_TestDomainCreateFakeEntity {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Step_TestDomainDestroyFakeEntity {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Step_TestDomainEntFire {
            public const nint m_Input = 0x48; // CUtlString
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 0
        public static class CPulseCell_Val_TestDomainGetEntityName {
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 0
        public static class CPulseCell_Val_TestDomainFindEntityByName {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 3
        public static class CPulseCell_TestWaitWithCursorState {
            public const nint m_WakeResume = 0x48; // CPulse_ResumePoint
            public const nint m_WakeCancel = 0x58; // CPulse_ResumePoint
            public const nint m_WakeFail = 0x68; // CPulse_ResumePoint
        }
        // Parent: None
        // Fields count: 2
        public static class CPulseCell_TestWaitWithCursorState__CursorState_t {
            public const nint flWaitValue = 0x0; // float32
            public const nint bFailOnCancel = 0x4; // bool
        }
        // Parent: CPulseExecCursor
        // Fields count: 2
        public static class CTestDomainDerived_Cursor {
            public const nint m_nCursorValueA = 0x168; // int32
            public const nint m_nCursorValueB = 0x16C; // int32
        }
        // Parent: CPulseGraphInstance_TestDomain
        // Fields count: 1
        public static class CPulseGraphInstance_TestDomain_Derived {
            public const nint m_nInstanceValueX = 0x100; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseTestFuncs_DerivedDomain {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Test_NoInflow {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Test_MultiInflow_WithDefault {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 0
        public static class CPulseCell_Test_MultiInflow_NoDefault {
        }
        // Parent: CPulseExecCursor
        // Fields count: 4
        public static class CPulseTurtleGraphicsCursor {
            public const nint m_Color = 0x168; // Color
            public const nint m_vPos = 0x16C; // Vector2D
            public const nint m_flHeadingDeg = 0x174; // float32
            public const nint m_bPenUp = 0x178; // bool
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 0
        public static class CPulseGraphInstance_TurtleGraphics {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 2
        public static class CPulseCell_WaitForCursorsWithTagBase {
            public const nint m_nCursorsAllowedToWait = 0x48; // int32
            public const nint m_WaitComplete = 0x50; // CPulse_ResumePoint
        }
        // Parent: CPulseCell_WaitForCursorsWithTagBase
        // Fields count: 2
        public static class CPulseCell_WaitForCursorsWithTag {
            public const nint m_bTagSelfWhenComplete = 0x60; // bool
            public const nint m_nDesiredKillPriority = 0x64; // PulseCursorCancelPriority_t
        }
        // Parent: CPulseCell_WaitForCursorsWithTagBase
        // Fields count: 1
        public static class CPulseCell_CursorQueue {
            public const nint m_nCursorsAllowedToRunParallel = 0x60; // int32
        }
    }
    // Module: rendersystemdx11.dll
    // Classes count: 3
    // Enums count: 5
    public static class Rendersystemdx11 {
        // Alignment: 4
        // Members count: 3
        public enum RenderSlotType_t : uint {
            RENDER_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
            RENDER_SLOT_PER_VERTEX = 0x0,
            RENDER_SLOT_PER_INSTANCE = 0x1
        }
        // Alignment: 4
        // Members count: 12
        public enum RenderBufferFlags_t : uint {
            RENDER_BUFFER_USAGE_VERTEX_BUFFER = 0x1,
            RENDER_BUFFER_USAGE_INDEX_BUFFER = 0x2,
            RENDER_BUFFER_USAGE_SHADER_RESOURCE = 0x4,
            RENDER_BUFFER_USAGE_UNORDERED_ACCESS = 0x8,
            RENDER_BUFFER_BYTEADDRESS_BUFFER = 0x10,
            RENDER_BUFFER_STRUCTURED_BUFFER = 0x20,
            RENDER_BUFFER_APPEND_CONSUME_BUFFER = 0x40,
            RENDER_BUFFER_UAV_COUNTER = 0x80,
            RENDER_BUFFER_UAV_DRAW_INDIRECT_ARGS = 0x100,
            RENDER_BUFFER_ACCELERATION_STRUCTURE = 0x200,
            RENDER_BUFFER_SHADER_BINDING_TABLE = 0x400,
            RENDER_BUFFER_PER_FRAME_WRITE_ONCE = 0x800
        }
        // Alignment: 4
        // Members count: 13
        public enum RenderPrimitiveType_t : uint {
            RENDER_PRIM_POINTS = 0x0,
            RENDER_PRIM_LINES = 0x1,
            RENDER_PRIM_LINES_WITH_ADJACENCY = 0x2,
            RENDER_PRIM_LINE_STRIP = 0x3,
            RENDER_PRIM_LINE_STRIP_WITH_ADJACENCY = 0x4,
            RENDER_PRIM_TRIANGLES = 0x5,
            RENDER_PRIM_TRIANGLES_WITH_ADJACENCY = 0x6,
            RENDER_PRIM_TRIANGLE_STRIP = 0x7,
            RENDER_PRIM_TRIANGLE_STRIP_WITH_ADJACENCY = 0x8,
            RENDER_PRIM_INSTANCED_QUADS = 0x9,
            RENDER_PRIM_HETEROGENOUS = 0xA,
            RENDER_PRIM_COMPUTE_SHADER = 0xB,
            RENDER_PRIM_TYPE_COUNT = 0xC
        }
        // Alignment: 4
        // Members count: 4
        public enum InputLayoutVariation_t : uint {
            INPUT_LAYOUT_VARIATION_DEFAULT = 0x0,
            INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID = 0x1,
            INPUT_LAYOUT_VARIATION_STREAM1_INSTANCEID_MORPH_VERT_ID = 0x2,
            INPUT_LAYOUT_VARIATION_MAX = 0x3
        }
        // Alignment: 1
        // Members count: 8
        public enum RenderMultisampleType_t : byte {
            RENDER_MULTISAMPLE_INVALID = 0xFFFFFFFFFFFFFFFF,
            RENDER_MULTISAMPLE_NONE = 0x0,
            RENDER_MULTISAMPLE_2X = 0x1,
            RENDER_MULTISAMPLE_4X = 0x2,
            RENDER_MULTISAMPLE_6X = 0x3,
            RENDER_MULTISAMPLE_8X = 0x4,
            RENDER_MULTISAMPLE_16X = 0x5,
            RENDER_MULTISAMPLE_TYPE_COUNT = 0x6
        }
        // Parent: None
        // Fields count: 7
        public static class RenderInputLayoutField_t {
            public const nint m_pSemanticName = 0x0; // uint8[32]
            public const nint m_nSemanticIndex = 0x20; // int32
            public const nint m_Format = 0x24; // uint32
            public const nint m_nOffset = 0x28; // int32
            public const nint m_nSlot = 0x2C; // int32
            public const nint m_nSlotType = 0x30; // RenderSlotType_t
            public const nint m_nInstanceStepRate = 0x34; // int32
        }
        // Parent: None
        // Fields count: 4
        public static class VsInputSignatureElement_t {
            public const nint m_pName = 0x0; // char[64]
            public const nint m_pSemantic = 0x40; // char[64]
            public const nint m_pD3DSemanticName = 0x80; // char[64]
            public const nint m_nD3DSemanticIndex = 0xC0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class VsInputSignature_t {
            public const nint m_elems = 0x0; // CUtlVector<VsInputSignatureElement_t>
        }
    }
    // Module: resourcesystem.dll
    // Classes count: 59
    // Enums count: 2
    public static class Resourcesystem {
        // Alignment: 1
        // Members count: 2
        public enum FuseVariableAccess_t : byte {
            WRITABLE = 0x0,
            READ_ONLY = 0x1
        }
        // Alignment: 1
        // Members count: 9
        public enum FuseVariableType_t : byte {
            INVALID = 0x0,
            BOOL = 0x1,
            INT8 = 0x2,
            INT16 = 0x3,
            INT32 = 0x4,
            UINT8 = 0x5,
            UINT16 = 0x6,
            UINT32 = 0x7,
            FLOAT32 = 0x8
        }
        // Parent: None
        // Fields count: 1
        public static class TestResource_t {
            public const nint m_name = 0x0; // CUtlString
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeTestResource_t {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeProceduralTestResource_t {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeManifestTestResource_t {
        }
        // Parent: None
        // Fields count: 2
        public static class ManifestTestResource_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_child = 0x8; // CStrongHandle<InfoForResourceTypeManifestTestResource_t>
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVDataResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIPulseGraphDef {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCTypeScriptResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCJavaScriptResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIParticleSystemDefinition {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIParticleSnapshot {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCAnimData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCAnimationGroup {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCSequenceGroupData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIMaterial2 {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCMorphSetData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCRenderMesh {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCModel {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCTextureBase {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIVectorGraphic {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVSoundEventScriptList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVSoundStackScriptList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVoiceContainerBase {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVMixListResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCPhysAggregateData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVPhysXSurfacePropertiesList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCEntityLump {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCWorldNode {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeWorld_t {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCVoxelVisibility {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCPostProcessingResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCPanoramaStyle {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCPanoramaLayout {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCPanoramaDynamicImages {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCDotaItemDefinitionResource {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCDOTAPatchNotesList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCDOTANovelsList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeIAnimGraphModelBinding {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCChoreoSceneFileData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCDACGameDefsData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCCompositeMaterialKit {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCGcExportableExternalData {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCSmartProp {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCCSGOEconItem {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCResponseRulesList {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCNmSkeleton {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCNmClip {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCNmGraph {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCNmGraphDataSet {
        }
        // Parent: None
        // Fields count: 1
        public static class FuseVariableIndex_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: None
        // Fields count: 1
        public static class FuseFunctionIndex_t {
            public const nint m_Value = 0x0; // uint16
        }
        // Parent: None
        // Fields count: 3
        public static class ConstantInfo_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nameToken = 0x8; // CUtlStringToken
            public const nint m_flValue = 0xC; // float32
        }
        // Parent: None
        // Fields count: 6
        public static class VariableInfo_t {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nameToken = 0x8; // CUtlStringToken
            public const nint m_nIndex = 0xC; // FuseVariableIndex_t
            public const nint m_nNumComponents = 0xE; // uint8
            public const nint m_eVarType = 0xF; // FuseVariableType_t
            public const nint m_eAccess = 0x10; // FuseVariableAccess_t
        }
        // Parent: None
        // Fields count: 5
        public static class FunctionInfo_t {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_nameToken = 0x10; // CUtlStringToken
            public const nint m_nParamCount = 0x14; // int32
            public const nint m_nIndex = 0x18; // FuseFunctionIndex_t
            public const nint m_bIsPure = 0x1A; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class CFuseProgram {
            public const nint m_programBuffer = 0x0; // CUtlVector<uint8>
            public const nint m_variablesRead = 0x18; // CUtlVector<FuseVariableIndex_t>
            public const nint m_variablesWritten = 0x30; // CUtlVector<FuseVariableIndex_t>
            public const nint m_nMaxTempVarsUsed = 0x48; // int32
        }
        // Parent: None
        // Fields count: 6
        public static class CFuseSymbolTable {
            public const nint m_constants = 0x0; // CUtlVector<ConstantInfo_t>
            public const nint m_variables = 0x18; // CUtlVector<VariableInfo_t>
            public const nint m_functions = 0x30; // CUtlVector<FunctionInfo_t>
            public const nint m_constantMap = 0x48; // CUtlHashtable<CUtlStringToken,int32>
            public const nint m_variableMap = 0x68; // CUtlHashtable<CUtlStringToken,int32>
            public const nint m_functionMap = 0x88; // CUtlHashtable<CUtlStringToken,int32>
        }
        // Parent: None
        // Fields count: 2
        public static class AABB_t {
            public const nint m_vMinBounds = 0x0; // 
            public const nint m_vMaxBounds = 0xC; // 
        }
        // Parent: None
        // Fields count: 2
        public static class PackedAABB_t {
            public const nint m_nPackedMin = 0x0; // uint32
            public const nint m_nPackedMax = 0x4; // uint32
        }
        // Parent: None
        // Fields count: 4
        public static class FourQuaternions {
            public const nint x = 0x0; // fltx4
            public const nint y = 0x10; // fltx4
            public const nint z = 0x20; // fltx4
            public const nint w = 0x30; // fltx4
        }
    }
    // Module: scenefilecache.dll
    // Classes count: 0
    // Enums count: 0
    public static class Scenefilecache {
    }
    // Module: scenesystem.dll
    // Classes count: 9
    // Enums count: 1
    public static class Scenesystem {
        // Alignment: 1
        // Members count: 4
        public enum DisableShadows_t : byte {
            kDisableShadows_None = 0x0,
            kDisableShadows_All = 0x1,
            kDisableShadows_Baked = 0x2,
            kDisableShadows_Realtime = 0x3
        }
        // Parent: None
        // Fields count: 2
        public static class CSSDSEndFrameViewInfo {
            public const nint m_nViewId = 0x0; // uint64
            public const nint m_ViewName = 0x8; // CUtlString
        }
        // Parent: None
        // Fields count: 1
        public static class CSSDSMsg_EndFrame {
            public const nint m_Views = 0x0; // CUtlVector<CSSDSEndFrameViewInfo>
        }
        // Parent: None
        // Fields count: 2
        public static class SceneViewId_t {
            public const nint m_nViewId = 0x0; // uint64
            public const nint m_nFrameCount = 0x8; // uint64
        }
        // Parent: None
        // Fields count: 2
        public static class CSSDSMsg_ViewRender {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
        }
        // Parent: None
        // Fields count: 6
        public static class CSSDSMsg_LayerBase {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
            public const nint m_nLayerIndex = 0x18; // int32
            public const nint m_nLayerId = 0x20; // uint64
            public const nint m_LayerName = 0x28; // CUtlString
            public const nint m_displayText = 0x30; // CUtlString
        }
        // Parent: None
        // Fields count: 10
        public static class CSSDSMsg_ViewTarget {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_TextureId = 0x8; // uint64
            public const nint m_nWidth = 0x10; // int32
            public const nint m_nHeight = 0x14; // int32
            public const nint m_nRequestedWidth = 0x18; // int32
            public const nint m_nRequestedHeight = 0x1C; // int32
            public const nint m_nNumMipLevels = 0x20; // int32
            public const nint m_nDepth = 0x24; // int32
            public const nint m_nMultisampleNumSamples = 0x28; // int32
            public const nint m_nFormat = 0x2C; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class CSSDSMsg_ViewTargetList {
            public const nint m_viewId = 0x0; // SceneViewId_t
            public const nint m_ViewName = 0x10; // CUtlString
            public const nint m_Targets = 0x18; // CUtlVector<CSSDSMsg_ViewTarget>
        }
        // Parent: CSSDSMsg_LayerBase
        // Fields count: 0
        public static class CSSDSMsg_PreLayer {
        }
        // Parent: CSSDSMsg_LayerBase
        // Fields count: 0
        public static class CSSDSMsg_PostLayer {
        }
    }
    // Module: schemasystem.dll
    // Classes count: 7
    // Enums count: 2
    public static class Schemasystem {
        // Alignment: 4
        // Members count: 3
        public enum ThreeState_t : uint {
            TRS_FALSE = 0x0,
            TRS_TRUE = 0x1,
            TRS_NONE = 0x2
        }
        // Alignment: 1
        // Members count: 81
        public enum fieldtype_t : byte {
            FIELD_VOID = 0x0,
            FIELD_FLOAT32 = 0x1,
            FIELD_STRING = 0x2,
            FIELD_VECTOR = 0x3,
            FIELD_QUATERNION = 0x4,
            FIELD_INT32 = 0x5,
            FIELD_BOOLEAN = 0x6,
            FIELD_INT16 = 0x7,
            FIELD_CHARACTER = 0x8,
            FIELD_COLOR32 = 0x9,
            FIELD_EMBEDDED = 0xA,
            FIELD_CUSTOM = 0xB,
            FIELD_CLASSPTR = 0xC,
            FIELD_EHANDLE = 0xD,
            FIELD_POSITION_VECTOR = 0xE,
            FIELD_TIME = 0xF,
            FIELD_TICK = 0x10,
            FIELD_SOUNDNAME = 0x11,
            FIELD_INPUT = 0x12,
            FIELD_FUNCTION = 0x13,
            FIELD_VMATRIX = 0x14,
            FIELD_VMATRIX_WORLDSPACE = 0x15,
            FIELD_MATRIX3X4_WORLDSPACE = 0x16,
            FIELD_INTERVAL = 0x17,
            FIELD_UNUSED = 0x18,
            FIELD_VECTOR2D = 0x19,
            FIELD_INT64 = 0x1A,
            FIELD_VECTOR4D = 0x1B,
            FIELD_RESOURCE = 0x1C,
            FIELD_TYPEUNKNOWN = 0x1D,
            FIELD_CSTRING = 0x1E,
            FIELD_HSCRIPT = 0x1F,
            FIELD_VARIANT = 0x20,
            FIELD_UINT64 = 0x21,
            FIELD_FLOAT64 = 0x22,
            FIELD_POSITIVEINTEGER_OR_NULL = 0x23,
            FIELD_HSCRIPT_NEW_INSTANCE = 0x24,
            FIELD_UINT32 = 0x25,
            FIELD_UTLSTRINGTOKEN = 0x26,
            FIELD_QANGLE = 0x27,
            FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_VECTOR = 0x28,
            FIELD_HMATERIAL = 0x29,
            FIELD_HMODEL = 0x2A,
            FIELD_NETWORK_QUANTIZED_VECTOR = 0x2B,
            FIELD_NETWORK_QUANTIZED_FLOAT = 0x2C,
            FIELD_DIRECTION_VECTOR_WORLDSPACE = 0x2D,
            FIELD_QANGLE_WORLDSPACE = 0x2E,
            FIELD_QUATERNION_WORLDSPACE = 0x2F,
            FIELD_HSCRIPT_LIGHTBINDING = 0x30,
            FIELD_V8_VALUE = 0x31,
            FIELD_V8_OBJECT = 0x32,
            FIELD_V8_ARRAY = 0x33,
            FIELD_V8_CALLBACK_INFO = 0x34,
            FIELD_UTLSTRING = 0x35,
            FIELD_NETWORK_ORIGIN_CELL_QUANTIZED_POSITION_VECTOR = 0x36,
            FIELD_HRENDERTEXTURE = 0x37,
            FIELD_HPARTICLESYSTEMDEFINITION = 0x38,
            FIELD_UINT8 = 0x39,
            FIELD_UINT16 = 0x3A,
            FIELD_CTRANSFORM = 0x3B,
            FIELD_CTRANSFORM_WORLDSPACE = 0x3C,
            FIELD_HPOSTPROCESSING = 0x3D,
            FIELD_MATRIX3X4 = 0x3E,
            FIELD_SHIM = 0x3F,
            FIELD_CMOTIONTRANSFORM = 0x40,
            FIELD_CMOTIONTRANSFORM_WORLDSPACE = 0x41,
            FIELD_ATTACHMENT_HANDLE = 0x42,
            FIELD_AMMO_INDEX = 0x43,
            FIELD_CONDITION_ID = 0x44,
            FIELD_AI_SCHEDULE_BITS = 0x45,
            FIELD_MODIFIER_HANDLE = 0x46,
            FIELD_ROTATION_VECTOR = 0x47,
            FIELD_ROTATION_VECTOR_WORLDSPACE = 0x48,
            FIELD_HVDATA = 0x49,
            FIELD_SCALE32 = 0x4A,
            FIELD_STRING_AND_TOKEN = 0x4B,
            FIELD_ENGINE_TIME = 0x4C,
            FIELD_ENGINE_TICK = 0x4D,
            FIELD_WORLD_GROUP_ID = 0x4E,
            FIELD_GLOBALSYMBOL = 0x4F,
            FIELD_TYPECOUNT = 0x50
        }
        // Parent: None
        // Fields count: 22
        public static class CSchemaSystemInternalRegistration {
            public const nint m_Vector2D = 0x0; // Vector2D
            public const nint m_Vector = 0x8; // 
            public const nint m_VectorAligned = 0x20; // VectorAligned
            public const nint m_Quaternion = 0x30; // Quaternion
            public const nint m_QAngle = 0x40; // QAngle
            public const nint m_RotationVector = 0x4C; // RotationVector
            public const nint m_RadianEuler = 0x58; // RadianEuler
            public const nint m_DegreeEuler = 0x64; // DegreeEuler
            public const nint m_QuaternionStorage = 0x70; // QuaternionStorage
            public const nint m_matrix3x4_t = 0x80; // matrix3x4_t
            public const nint m_matrix3x4a_t = 0xB0; // matrix3x4a_t
            public const nint m_Color = 0xE0; // Color
            public const nint m_Vector4D = 0xE4; // Vector4D
            public const nint m_CTransform = 0x100; // CTransform
            public const nint m_pKeyValues = 0x120; // KeyValues*
            public const nint m_CUtlBinaryBlock = 0x128; // CUtlBinaryBlock
            public const nint m_CUtlString = 0x140; // CUtlString
            public const nint m_CUtlSymbol = 0x148; // CUtlSymbol
            public const nint m_stringToken = 0x14C; // CUtlStringToken
            public const nint m_stringTokenWithStorage = 0x150; // CUtlStringTokenWithStorage
            public const nint m_ResourceTypes = 0x168; // CResourceArray<CResourcePointer<CResourceString>>
            public const nint m_KV3 = 0x170; // KeyValues3
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeCResourceManifestInternal {
        }
        // Parent: None
        // Fields count: 1
        public static class ResourceId_t {
            public const nint m_Value = 0x0; // uint64
        }
        // Parent: None
        // Fields count: 2
        public static class CExampleSchemaVData_Monomorphic {
            public const nint m_nExample1 = 0x0; // int32
            public const nint m_nExample2 = 0x4; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class CExampleSchemaVData_PolymorphicBase {
            public const nint m_nBase = 0x8; // int32
        }
        // Parent: CExampleSchemaVData_PolymorphicBase
        // Fields count: 1
        public static class CExampleSchemaVData_PolymorphicDerivedA {
            public const nint m_nDerivedA = 0x10; // int32
        }
        // Parent: CExampleSchemaVData_PolymorphicBase
        // Fields count: 1
        public static class CExampleSchemaVData_PolymorphicDerivedB {
            public const nint m_nDerivedB = 0x10; // int32
        }
    }
    // Module: server.dll
    // Classes count: 785
    // Enums count: 128
    public static class Server {
        // Alignment: 4
        // Members count: 19
        public enum NavAttributeEnum : uint {
            NAV_MESH_AVOID = 0x80,
            NAV_MESH_STAIRS = 0x1000,
            NAV_MESH_NON_ZUP = 0x8000,
            NAV_MESH_SHORT_HEIGHT = 0x10000,
            NAV_MESH_CROUCH = 0x10000,
            NAV_MESH_JUMP = 0x2,
            NAV_MESH_PRECISE = 0x4,
            NAV_MESH_NO_JUMP = 0x8,
            NAV_MESH_STOP = 0x10,
            NAV_MESH_RUN = 0x20,
            NAV_MESH_WALK = 0x40,
            NAV_MESH_TRANSIENT = 0x100,
            NAV_MESH_DONT_HIDE = 0x200,
            NAV_MESH_STAND = 0x400,
            NAV_MESH_NO_HOSTAGES = 0x800,
            NAV_MESH_NO_MERGE = 0x2000,
            NAV_MESH_OBSTACLE_TOP = 0x4000,
            NAV_ATTR_FIRST_GAME_INDEX = 0x13,
            NAV_ATTR_LAST_INDEX = 0x1F
        }
        // Alignment: 4
        // Members count: 5
        public enum NavDirType : uint {
            NORTH = 0x0,
            EAST = 0x1,
            SOUTH = 0x2,
            WEST = 0x3,
            NUM_NAV_DIR_TYPE_DIRECTIONS = 0x4
        }
        // Alignment: 1
        // Members count: 3
        public enum SequenceFinishNotifyState_t : byte {
            eDoNotNotify = 0x0,
            eNotifyWhenFinished = 0x1,
            eNotifyTriggered = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum PointTemplateOwnerSpawnGroupType_t : uint {
            INSERT_INTO_POINT_TEMPLATE_SPAWN_GROUP = 0x0,
            INSERT_INTO_CURRENTLY_ACTIVE_SPAWN_GROUP = 0x1,
            INSERT_INTO_NEWLY_CREATED_SPAWN_GROUP = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum PointTemplateClientOnlyEntityBehavior_t : uint {
            CREATE_FOR_CURRENTLY_CONNECTED_CLIENTS_ONLY = 0x0,
            CREATE_FOR_CLIENTS_WHO_CONNECT_LATER = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum PerformanceMode_t : uint {
            PM_NORMAL = 0x0,
            PM_NO_GIBS = 0x1,
            PM_FULL_GIBS = 0x2,
            PM_REDUCED_GIBS = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum AmmoPosition_t : uint {
            AMMO_POSITION_INVALID = 0xFFFFFFFFFFFFFFFF,
            AMMO_POSITION_PRIMARY = 0x0,
            AMMO_POSITION_SECONDARY = 0x1,
            AMMO_POSITION_COUNT = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum ChatIgnoreType_t : uint {
            CHAT_IGNORE_NONE = 0x0,
            CHAT_IGNORE_ALL = 0x1,
            CHAT_IGNORE_TEAM = 0x2
        }
        // Alignment: 1
        // Members count: 3
        public enum FixAngleSet_t : byte {
            None = 0x0,
            Absolute = 0x1,
            Relative = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum CommandExecMode_t : uint {
            EXEC_MANUAL = 0x0,
            EXEC_LEVELSTART = 0x1,
            EXEC_PERIODIC = 0x2,
            EXEC_MODES_COUNT = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum CommandEntitySpecType_t : uint {
            SPEC_SEARCH = 0x0,
            SPEC_TYPES_COUNT = 0x1
        }
        // Alignment: 4
        // Members count: 43
        public enum GameAnimEventIndex_t : uint {
            AE_EMPTY = 0x0,
            AE_CL_PLAYSOUND = 0x1,
            AE_CL_PLAYSOUND_ATTACHMENT = 0x2,
            AE_CL_PLAYSOUND_POSITION = 0x3,
            AE_SV_PLAYSOUND = 0x4,
            AE_CL_STOPSOUND = 0x5,
            AE_CL_PLAYSOUND_LOOPING = 0x6,
            AE_CL_CREATE_PARTICLE_EFFECT = 0x7,
            AE_CL_STOP_PARTICLE_EFFECT = 0x8,
            AE_CL_CREATE_PARTICLE_EFFECT_CFG = 0x9,
            AE_SV_CREATE_PARTICLE_EFFECT_CFG = 0xA,
            AE_SV_STOP_PARTICLE_EFFECT = 0xB,
            AE_FOOTSTEP = 0xC,
            AE_RAGDOLL = 0xD,
            AE_CL_STOP_RAGDOLL_CONTROL = 0xE,
            AE_CL_ENABLE_BODYGROUP = 0xF,
            AE_CL_DISABLE_BODYGROUP = 0x10,
            AE_BODYGROUP_SET_VALUE = 0x11,
            AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN = 0x12,
            AE_WEAPON_PERFORM_ATTACK = 0x13,
            AE_FIRE_INPUT = 0x14,
            AE_CL_CLOTH_ATTR = 0x15,
            AE_CL_CLOTH_GROUND_OFFSET = 0x16,
            AE_CL_CLOTH_STIFFEN = 0x17,
            AE_CL_CLOTH_EFFECT = 0x18,
            AE_CL_CREATE_ANIM_SCOPE_PROP = 0x19,
            AE_PULSE_GRAPH = 0x1A,
            AE_PULSE_GRAPH_LOOKAT = 0x1B,
            AE_PULSE_GRAPH_AIMAT = 0x1C,
            AE_PULSE_GRAPH_IKLOCKLEFTARM = 0x1D,
            AE_PULSE_GRAPH_IKLOCKRIGHTARM = 0x1E,
            AE_CL_WEAPON_TRANSITION_INTO_HAND = 0x1F,
            AE_CL_BODYGROUP_SET_TO_CLIP = 0x20,
            AE_CL_BODYGROUP_SET_TO_NEXTCLIP = 0x21,
            AE_SV_SHOW_SILENCER = 0x22,
            AE_SV_ATTACH_SILENCER_COMPLETE = 0x23,
            AE_SV_HIDE_SILENCER = 0x24,
            AE_SV_DETACH_SILENCER_COMPLETE = 0x25,
            AE_CL_EJECT_MAG = 0x26,
            AE_WPN_COMPLETE_RELOAD = 0x27,
            AE_WPN_HEALTHSHOT_INJECT = 0x28,
            AE_CL_C4_SCREEN_TEXT = 0x29,
            AE_GRENADE_THROW_COMPLETE = 0x2A
        }
        // Alignment: 4
        // Members count: 7
        public enum ObserverMode_t : uint {
            OBS_MODE_NONE = 0x0,
            OBS_MODE_FIXED = 0x1,
            OBS_MODE_IN_EYE = 0x2,
            OBS_MODE_CHASE = 0x3,
            OBS_MODE_ROAMING = 0x4,
            OBS_MODE_DIRECTED = 0x5,
            NUM_OBSERVER_MODES = 0x6
        }
        // Alignment: 4
        // Members count: 3
        public enum ObserverInterpState_t : uint {
            OBSERVER_INTERP_NONE = 0x0,
            OBSERVER_INTERP_TRAVELING = 0x1,
            OBSERVER_INTERP_SETTLING = 0x2
        }
        // Alignment: 4
        // Members count: 27
        public enum RumbleEffect_t : uint {
            RUMBLE_INVALID = 0xFFFFFFFFFFFFFFFF,
            RUMBLE_STOP_ALL = 0x0,
            RUMBLE_PISTOL = 0x1,
            RUMBLE_357 = 0x2,
            RUMBLE_SMG1 = 0x3,
            RUMBLE_AR2 = 0x4,
            RUMBLE_SHOTGUN_SINGLE = 0x5,
            RUMBLE_SHOTGUN_DOUBLE = 0x6,
            RUMBLE_AR2_ALT_FIRE = 0x7,
            RUMBLE_RPG_MISSILE = 0x8,
            RUMBLE_CROWBAR_SWING = 0x9,
            RUMBLE_AIRBOAT_GUN = 0xA,
            RUMBLE_JEEP_ENGINE_LOOP = 0xB,
            RUMBLE_FLAT_LEFT = 0xC,
            RUMBLE_FLAT_RIGHT = 0xD,
            RUMBLE_FLAT_BOTH = 0xE,
            RUMBLE_DMG_LOW = 0xF,
            RUMBLE_DMG_MED = 0x10,
            RUMBLE_DMG_HIGH = 0x11,
            RUMBLE_FALL_LONG = 0x12,
            RUMBLE_FALL_SHORT = 0x13,
            RUMBLE_PHYSCANNON_OPEN = 0x14,
            RUMBLE_PHYSCANNON_PUNT = 0x15,
            RUMBLE_PHYSCANNON_LOW = 0x16,
            RUMBLE_PHYSCANNON_MEDIUM = 0x17,
            RUMBLE_PHYSCANNON_HIGH = 0x18,
            NUM_RUMBLE_EFFECTS = 0x19
        }
        // Alignment: 4
        // Members count: 25
        public enum WeaponSound_t : uint {
            WEAPON_SOUND_EMPTY = 0x0,
            WEAPON_SOUND_SECONDARY_EMPTY = 0x1,
            WEAPON_SOUND_SINGLE = 0x2,
            WEAPON_SOUND_SECONDARY_ATTACK = 0x3,
            WEAPON_SOUND_MELEE_MISS = 0x4,
            WEAPON_SOUND_MELEE_HIT = 0x5,
            WEAPON_SOUND_MELEE_HIT_WORLD = 0x6,
            WEAPON_SOUND_MELEE_HIT_PLAYER = 0x7,
            WEAPON_SOUND_MELEE_HIT_NPC = 0x8,
            WEAPON_SOUND_SPECIAL1 = 0x9,
            WEAPON_SOUND_SPECIAL2 = 0xA,
            WEAPON_SOUND_SPECIAL3 = 0xB,
            WEAPON_SOUND_NEARLYEMPTY = 0xC,
            WEAPON_SOUND_IMPACT = 0xD,
            WEAPON_SOUND_REFLECT = 0xE,
            WEAPON_SOUND_SECONDARY_IMPACT = 0xF,
            WEAPON_SOUND_SECONDARY_REFLECT = 0x10,
            WEAPON_SOUND_RELOAD = 0x11,
            WEAPON_SOUND_SINGLE_ACCURATE = 0x12,
            WEAPON_SOUND_ZOOM_IN = 0x13,
            WEAPON_SOUND_ZOOM_OUT = 0x14,
            WEAPON_SOUND_MOUSE_PRESSED = 0x15,
            WEAPON_SOUND_DROP = 0x16,
            WEAPON_SOUND_RADIO_USE = 0x17,
            WEAPON_SOUND_NUM_TYPES = 0x18
        }
        // Alignment: 4
        // Members count: 3
        public enum AmmoFlags_t : uint {
            AMMO_FORCE_DROP_IF_CARRIED = 0x1,
            AMMO_RESERVE_STAYS_WITH_WEAPON = 0x2,
            AMMO_FLAG_MAX = 0x2
        }
        // Alignment: 4
        // Members count: 15
        public enum TakeDamageFlags_t : uint {
            DFLAG_NONE = 0x0,
            DFLAG_SUPPRESS_HEALTH_CHANGES = 0x1,
            DFLAG_SUPPRESS_PHYSICS_FORCE = 0x2,
            DFLAG_SUPPRESS_EFFECTS = 0x4,
            DFLAG_PREVENT_DEATH = 0x8,
            DFLAG_FORCE_DEATH = 0x10,
            DFLAG_ALWAYS_GIB = 0x20,
            DFLAG_NEVER_GIB = 0x40,
            DFLAG_REMOVE_NO_RAGDOLL = 0x80,
            DFLAG_SUPPRESS_DAMAGE_MODIFICATION = 0x100,
            DFLAG_ALWAYS_FIRE_DAMAGE_EVENTS = 0x200,
            DFLAG_RADIUS_DMG = 0x400,
            DMG_LASTDFLAG = 0x400,
            DFLAG_IGNORE_ARMOR = 0x800,
            DFLAG_SUPPRESS_UTILREMOVE = 0x1000
        }
        // Alignment: 4
        // Members count: 24
        public enum DamageTypes_t : uint {
            DMG_GENERIC = 0x0,
            DMG_CRUSH = 0x1,
            DMG_BULLET = 0x2,
            DMG_SLASH = 0x4,
            DMG_BURN = 0x8,
            DMG_VEHICLE = 0x10,
            DMG_FALL = 0x20,
            DMG_BLAST = 0x40,
            DMG_CLUB = 0x80,
            DMG_SHOCK = 0x100,
            DMG_SONIC = 0x200,
            DMG_ENERGYBEAM = 0x400,
            DMG_DROWN = 0x4000,
            DMG_POISON = 0x8000,
            DMG_RADIATION = 0x10000,
            DMG_DROWNRECOVER = 0x20000,
            DMG_ACID = 0x40000,
            DMG_PHYSGUN = 0x100000,
            DMG_DISSOLVE = 0x200000,
            DMG_BLAST_SURFACE = 0x400000,
            DMG_BUCKSHOT = 0x1000000,
            DMG_LASTGENERICFLAG = 0x1000000,
            DMG_HEADSHOT = 0x2000000,
            DMG_DANGERZONE = 0x4000000
        }
        // Alignment: 4
        // Members count: 17
        public enum BaseExplosionTypes_t : uint {
            EXPLOSION_TYPE_DEFAULT = 0x0,
            EXPLOSION_TYPE_GRENADE = 0x1,
            EXPLOSION_TYPE_MOLOTOV = 0x2,
            EXPLOSION_TYPE_FIREWORKS = 0x3,
            EXPLOSION_TYPE_GASCAN = 0x4,
            EXPLOSION_TYPE_GASCYLINDER = 0x5,
            EXPLOSION_TYPE_EXPLOSIVEBARREL = 0x6,
            EXPLOSION_TYPE_ELECTRICAL = 0x7,
            EXPLOSION_TYPE_EMP = 0x8,
            EXPLOSION_TYPE_SHRAPNEL = 0x9,
            EXPLOSION_TYPE_SMOKEGRENADE = 0xA,
            EXPLOSION_TYPE_FLASHBANG = 0xB,
            EXPLOSION_TYPE_TRIPMINE = 0xC,
            EXPLOSION_TYPE_ICE = 0xD,
            EXPLOSION_TYPE_NONE = 0xE,
            EXPLOSION_TYPE_CUSTOM = 0xF,
            EXPLOSION_TYPE_COUNT = 0x10
        }
        // Alignment: 4
        // Members count: 6
        public enum HierarchyType_t : uint {
            HIERARCHY_NONE = 0x0,
            HIERARCHY_BONE_MERGE = 0x1,
            HIERARCHY_ATTACHMENT = 0x2,
            HIERARCHY_ABSORIGIN = 0x3,
            HIERARCHY_BONE = 0x4,
            HIERARCHY_TYPE_COUNT = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum CanPlaySequence_t : uint {
            CANNOT_PLAY = 0x0,
            CAN_PLAY_NOW = 0x1,
            CAN_PLAY_ENQUEUED = 0x2
        }
        // Alignment: 4
        // Members count: 6
        public enum ScriptedMoveTo_t : uint {
            CINE_MOVETO_WAIT = 0x0,
            CINE_MOVETO_WALK = 0x1,
            CINE_MOVETO_RUN = 0x2,
            CINE_MOVETO_CUSTOM = 0x3,
            CINE_MOVETO_TELEPORT = 0x4,
            CINE_MOVETO_WAIT_FACING = 0x5
        }
        // Alignment: 4
        // Members count: 4
        public enum ScriptedOnDeath_t : uint {
            SS_ONDEATH_NOT_APPLICABLE = 0xFFFFFFFFFFFFFFFF,
            SS_ONDEATH_UNDEFINED = 0x0,
            SS_ONDEATH_RAGDOLL = 0x1,
            SS_ONDEATH_ANIMATED_DEATH = 0x2
        }
        // Alignment: 4
        // Members count: 7
        public enum IChoreoServices__ScriptState_t : uint {
            SCRIPT_PLAYING = 0x0,
            SCRIPT_WAIT = 0x1,
            SCRIPT_POST_IDLE = 0x2,
            SCRIPT_CLEANUP = 0x3,
            SCRIPT_WALK_TO_MARK = 0x4,
            SCRIPT_RUN_TO_MARK = 0x5,
            SCRIPT_CUSTOM_MOVE_TO_MARK = 0x6
        }
        // Alignment: 4
        // Members count: 7
        public enum IChoreoServices__ChoreoState_t : uint {
            STATE_PRE_SCRIPT = 0x0,
            STATE_WAIT_FOR_SCRIPT = 0x1,
            STATE_WALK_TO_MARK = 0x2,
            STATE_SYNCHRONIZE_SCRIPT = 0x3,
            STATE_PLAY_SCRIPT = 0x4,
            STATE_PLAY_SCRIPT_POST_IDLE = 0x5,
            STATE_PLAY_SCRIPT_POST_IDLE_DONE = 0x6
        }
        // Alignment: 8
        // Members count: 21
        public enum InputBitMask_t : ulong {
            IN_NONE = 0x0,
            IN_ALL = 0xFFFFFFFFFFFFFFFF,
            IN_ATTACK = 0x1,
            IN_JUMP = 0x2,
            IN_DUCK = 0x4,
            IN_FORWARD = 0x8,
            IN_BACK = 0x10,
            IN_USE = 0x20,
            IN_TURNLEFT = 0x80,
            IN_TURNRIGHT = 0x100,
            IN_MOVELEFT = 0x200,
            IN_MOVERIGHT = 0x400,
            IN_ATTACK2 = 0x800,
            IN_RELOAD = 0x2000,
            IN_SPEED = 0x10000,
            IN_JOYAUTOSPRINT = 0x20000,
            IN_FIRST_MOD_SPECIFIC_BIT = 0x100000000,
            IN_USEORRELOAD = 0x100000000,
            IN_SCORE = 0x200000000,
            IN_ZOOM = 0x400000000,
            IN_LOOK_AT_WEAPON = 0x800000000
        }
        // Alignment: 4
        // Members count: 9
        public enum EInButtonState : uint {
            IN_BUTTON_UP = 0x0,
            IN_BUTTON_DOWN = 0x1,
            IN_BUTTON_DOWN_UP = 0x2,
            IN_BUTTON_UP_DOWN = 0x3,
            IN_BUTTON_UP_DOWN_UP = 0x4,
            IN_BUTTON_DOWN_UP_DOWN = 0x5,
            IN_BUTTON_DOWN_UP_DOWN_UP = 0x6,
            IN_BUTTON_UP_DOWN_UP_DOWN = 0x7,
            IN_BUTTON_STATE_COUNT = 0x8
        }
        // Alignment: 4
        // Members count: 6
        public enum ShakeCommand_t : uint {
            SHAKE_START = 0x0,
            SHAKE_STOP = 0x1,
            SHAKE_AMPLITUDE = 0x2,
            SHAKE_FREQUENCY = 0x3,
            SHAKE_START_RUMBLEONLY = 0x4,
            SHAKE_START_NORUMBLE = 0x5
        }
        // Alignment: 4
        // Members count: 5
        public enum TimelineCompression_t : uint {
            TIMELINE_COMPRESSION_SUM = 0x0,
            TIMELINE_COMPRESSION_COUNT_PER_INTERVAL = 0x1,
            TIMELINE_COMPRESSION_AVERAGE = 0x2,
            TIMELINE_COMPRESSION_AVERAGE_BLEND = 0x3,
            TIMELINE_COMPRESSION_TOTAL = 0x4
        }
        // Alignment: 8
        // Members count: 39
        public enum DebugOverlayBits_t : ulong {
            OVERLAY_TEXT_BIT = 0x1,
            OVERLAY_NAME_BIT = 0x2,
            OVERLAY_BBOX_BIT = 0x4,
            OVERLAY_PIVOT_BIT = 0x8,
            OVERLAY_MESSAGE_BIT = 0x10,
            OVERLAY_ABSBOX_BIT = 0x20,
            OVERLAY_RBOX_BIT = 0x40,
            OVERLAY_SHOW_BLOCKSLOS = 0x80,
            OVERLAY_ATTACHMENTS_BIT = 0x100,
            OVERLAY_INTERPOLATED_ATTACHMENTS_BIT = 0x200,
            OVERLAY_INTERPOLATED_PIVOT_BIT = 0x400,
            OVERLAY_SKELETON_BIT = 0x800,
            OVERLAY_INTERPOLATED_SKELETON_BIT = 0x1000,
            OVERLAY_TRIGGER_BOUNDS_BIT = 0x2000,
            OVERLAY_HITBOX_BIT = 0x4000,
            OVERLAY_INTERPOLATED_HITBOX_BIT = 0x8000,
            OVERLAY_AUTOAIM_BIT = 0x10000,
            OVERLAY_NPC_SELECTED_BIT = 0x20000,
            OVERLAY_JOINT_INFO_BIT = 0x40000,
            OVERLAY_NPC_ROUTE_BIT = 0x80000,
            OVERLAY_VISIBILITY_TRACES_BIT = 0x100000,
            OVERLAY_NPC_ENEMIES_BIT = 0x400000,
            OVERLAY_NPC_CONDITIONS_BIT = 0x800000,
            OVERLAY_NPC_COMBAT_BIT = 0x1000000,
            OVERLAY_NPC_TASK_BIT = 0x2000000,
            OVERLAY_NPC_BODYLOCATIONS = 0x4000000,
            OVERLAY_NPC_VIEWCONE_BIT = 0x8000000,
            OVERLAY_NPC_KILL_BIT = 0x10000000,
            OVERLAY_WC_CHANGE_ENTITY = 0x20000000,
            OVERLAY_BUDDHA_MODE = 0x40000000,
            OVERLAY_NPC_STEERING_REGULATIONS = 0x80000000,
            OVERLAY_NPC_TASK_TEXT_BIT = 0x100000000,
            OVERLAY_PROP_DEBUG = 0x200000000,
            OVERLAY_NPC_RELATION_BIT = 0x400000000,
            OVERLAY_VIEWOFFSET = 0x800000000,
            OVERLAY_VCOLLIDE_WIREFRAME_BIT = 0x1000000000,
            OVERLAY_ACTORNAME_BIT = 0x4000000000,
            OVERLAY_NPC_CONDITIONS_TEXT_BIT = 0x8000000000,
            OVERLAY_NPC_ABILITY_RANGE_DEBUG_BIT = 0x10000000000
        }
        // Alignment: 1
        // Members count: 14
        public enum MoveType_t : byte {
            MOVETYPE_NONE = 0x0,
            MOVETYPE_OBSOLETE = 0x1,
            MOVETYPE_WALK = 0x2,
            MOVETYPE_FLY = 0x3,
            MOVETYPE_FLYGRAVITY = 0x4,
            MOVETYPE_VPHYSICS = 0x5,
            MOVETYPE_PUSH = 0x6,
            MOVETYPE_NOCLIP = 0x7,
            MOVETYPE_OBSERVER = 0x8,
            MOVETYPE_LADDER = 0x9,
            MOVETYPE_CUSTOM = 0xA,
            MOVETYPE_LAST = 0xB,
            MOVETYPE_INVALID = 0xB,
            MOVETYPE_MAX_BITS = 0x5
        }
        // Alignment: 1
        // Members count: 6
        public enum MoveCollide_t : byte {
            MOVECOLLIDE_DEFAULT = 0x0,
            MOVECOLLIDE_FLY_BOUNCE = 0x1,
            MOVECOLLIDE_FLY_CUSTOM = 0x2,
            MOVECOLLIDE_FLY_SLIDE = 0x3,
            MOVECOLLIDE_COUNT = 0x4,
            MOVECOLLIDE_MAX_BITS = 0x3
        }
        // Alignment: 1
        // Members count: 9
        public enum SolidType_t : byte {
            SOLID_NONE = 0x0,
            SOLID_BSP = 0x1,
            SOLID_BBOX = 0x2,
            SOLID_OBB = 0x3,
            SOLID_SPHERE = 0x4,
            SOLID_POINT = 0x5,
            SOLID_VPHYSICS = 0x6,
            SOLID_CAPSULE = 0x7,
            SOLID_LAST = 0x8
        }
        // Alignment: 4
        // Members count: 3
        public enum BrushSolidities_e : uint {
            BRUSHSOLID_TOGGLE = 0x0,
            BRUSHSOLID_NEVER = 0x1,
            BRUSHSOLID_ALWAYS = 0x2
        }
        // Alignment: 1
        // Members count: 13
        public enum RenderMode_t : byte {
            kRenderNormal = 0x0,
            kRenderTransColor = 0x1,
            kRenderTransTexture = 0x2,
            kRenderGlow = 0x3,
            kRenderTransAlpha = 0x4,
            kRenderTransAdd = 0x5,
            kRenderEnvironmental = 0x6,
            kRenderTransAddFrameBlend = 0x7,
            kRenderTransAlphaAdd = 0x8,
            kRenderWorldGlow = 0x9,
            kRenderNone = 0xA,
            kRenderDevVisualizer = 0xB,
            kRenderModeCount = 0xC
        }
        // Alignment: 1
        // Members count: 20
        public enum RenderFx_t : byte {
            kRenderFxNone = 0x0,
            kRenderFxPulseSlow = 0x1,
            kRenderFxPulseFast = 0x2,
            kRenderFxPulseSlowWide = 0x3,
            kRenderFxPulseFastWide = 0x4,
            kRenderFxFadeSlow = 0x5,
            kRenderFxFadeFast = 0x6,
            kRenderFxSolidSlow = 0x7,
            kRenderFxSolidFast = 0x8,
            kRenderFxStrobeSlow = 0x9,
            kRenderFxStrobeFast = 0xA,
            kRenderFxStrobeFaster = 0xB,
            kRenderFxFlickerSlow = 0xC,
            kRenderFxFlickerFast = 0xD,
            kRenderFxNoDissipation = 0xE,
            kRenderFxFadeOut = 0xF,
            kRenderFxFadeIn = 0x10,
            kRenderFxPulseFastWider = 0x11,
            kRenderFxGlowShell = 0x12,
            kRenderFxMax = 0x13
        }
        // Alignment: 4
        // Members count: 2
        public enum CRR_Response__ResponseEnum_t : uint {
            MAX_RESPONSE_NAME = 0xC0,
            MAX_RULE_NAME = 0x80
        }
        // Alignment: 4
        // Members count: 3
        public enum LessonPanelLayoutFileTypes_t : uint {
            LAYOUT_HAND_DEFAULT = 0x0,
            LAYOUT_WORLD_DEFAULT = 0x1,
            LAYOUT_CUSTOM = 0x2
        }
        // Alignment: 4
        // Members count: 5
        public enum Touch_t : uint {
            touch_none = 0x0,
            touch_player_only = 0x1,
            touch_npc_only = 0x2,
            touch_player_or_npc = 0x3,
            touch_player_or_npc_or_physicsprop = 0x4
        }
        // Alignment: 4
        // Members count: 4
        public enum ScriptedMoveType_t : uint {
            SCRIPTED_MOVETYPE_NONE = 0x0,
            SCRIPTED_MOVETYPE_TO_WITH_DURATION = 0x1,
            SCRIPTED_MOVETYPE_TO_WITH_MOVESPEED = 0x2,
            SCRIPTED_MOVETYPE_SWEEP_TO_AT_MOVEMENT_SPEED = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum ForcedCrouchState_t : uint {
            FORCEDCROUCH_NONE = 0x0,
            FORCEDCROUCH_CROUCHED = 0x1,
            FORCEDCROUCH_UNCROUCHED = 0x2
        }
        // Alignment: 4
        // Members count: 12
        public enum Hull_t : uint {
            HULL_HUMAN = 0x0,
            HULL_SMALL_CENTERED = 0x1,
            HULL_WIDE_HUMAN = 0x2,
            HULL_TINY = 0x3,
            HULL_MEDIUM = 0x4,
            HULL_TINY_CENTERED = 0x5,
            HULL_LARGE = 0x6,
            HULL_LARGE_CENTERED = 0x7,
            HULL_MEDIUM_TALL = 0x8,
            HULL_SMALL = 0x9,
            NUM_HULLS = 0xA,
            HULL_NONE = 0xB
        }
        // Alignment: 4
        // Members count: 1
        public enum navproperties_t : uint {
            NAV_IGNORE = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum CLogicBranchList__LogicBranchListenerLastState_t : uint {
            LOGIC_BRANCH_LISTENER_NOT_INIT = 0x0,
            LOGIC_BRANCH_LISTENER_ALL_TRUE = 0x1,
            LOGIC_BRANCH_LISTENER_ALL_FALSE = 0x2,
            LOGIC_BRANCH_LISTENER_MIXED = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum EntFinderMethod_t : uint {
            ENT_FIND_METHOD_NEAREST = 0x0,
            ENT_FIND_METHOD_FARTHEST = 0x1,
            ENT_FIND_METHOD_RANDOM = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum ValueRemapperInputType_t : uint {
            InputType_PlayerShootPosition = 0x0,
            InputType_PlayerShootPositionAroundAxis = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum ValueRemapperOutputType_t : uint {
            OutputType_AnimationCycle = 0x0,
            OutputType_RotationX = 0x1,
            OutputType_RotationY = 0x2,
            OutputType_RotationZ = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum ValueRemapperHapticsType_t : uint {
            HaticsType_Default = 0x0,
            HaticsType_None = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum ValueRemapperMomentumType_t : uint {
            MomentumType_None = 0x0,
            MomentumType_Friction = 0x1,
            MomentumType_SpringTowardSnapValue = 0x2,
            MomentumType_SpringAwayFromSnapValue = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum ValueRemapperRatchetType_t : uint {
            RatchetType_Absolute = 0x0,
            RatchetType_EachEngage = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum PointWorldTextJustifyHorizontal_t : uint {
            POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_LEFT = 0x0,
            POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_CENTER = 0x1,
            POINT_WORLD_TEXT_JUSTIFY_HORIZONTAL_RIGHT = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum PointWorldTextJustifyVertical_t : uint {
            POINT_WORLD_TEXT_JUSTIFY_VERTICAL_BOTTOM = 0x0,
            POINT_WORLD_TEXT_JUSTIFY_VERTICAL_CENTER = 0x1,
            POINT_WORLD_TEXT_JUSTIFY_VERTICAL_TOP = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum PointWorldTextReorientMode_t : uint {
            POINT_WORLD_TEXT_REORIENT_NONE = 0x0,
            POINT_WORLD_TEXT_REORIENT_AROUND_UP = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum doorCheck_e : uint {
            DOOR_CHECK_FORWARD = 0x0,
            DOOR_CHECK_BACKWARD = 0x1,
            DOOR_CHECK_FULL = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum PropDoorRotatingSpawnPos_t : uint {
            DOOR_SPAWN_CLOSED = 0x0,
            DOOR_SPAWN_OPEN_FORWARD = 0x1,
            DOOR_SPAWN_OPEN_BACK = 0x2,
            DOOR_SPAWN_AJAR = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum PropDoorRotatingOpenDirection_e : uint {
            DOOR_ROTATING_OPEN_BOTH_WAYS = 0x0,
            DOOR_ROTATING_OPEN_FORWARD = 0x1,
            DOOR_ROTATING_OPEN_BACKWARD = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum SceneOnPlayerDeath_t : uint {
            SCENE_ONPLAYERDEATH_DO_NOTHING = 0x0,
            SCENE_ONPLAYERDEATH_CANCEL = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum ScriptedConflictResponse_t : uint {
            SS_CONFLICT_ENQUEUE = 0x0,
            SS_CONFLICT_INTERRUPT = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum TRAIN_CODE : uint {
            TRAIN_SAFE = 0x0,
            TRAIN_BLOCKING = 0x1,
            TRAIN_FOLLOWING = 0x2
        }
        // Alignment: 4
        // Members count: 5
        public enum NPCFollowFormation_t : uint {
            Default = 0xFFFFFFFFFFFFFFFF,
            CloseCircle = 0x0,
            WideCircle = 0x1,
            MediumCircle = 0x5,
            Sidekick = 0x6
        }
        // Alignment: 4
        // Members count: 3
        public enum NPCLookType_t : uint {
            Chest = 0x0,
            Head = 0x1,
            Eyes = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum SoundEventStartType_t : uint {
            SOUNDEVENT_START_PLAYER = 0x0,
            SOUNDEVENT_START_WORLD = 0x1,
            SOUNDEVENT_START_ENTITY = 0x2
        }
        // Alignment: 4
        // Members count: 8
        public enum TOGGLE_STATE : uint {
            TS_AT_TOP = 0x0,
            TS_AT_BOTTOM = 0x1,
            TS_GOING_UP = 0x2,
            TS_GOING_DOWN = 0x3,
            DOOR_OPEN = 0x0,
            DOOR_CLOSED = 0x1,
            DOOR_OPENING = 0x2,
            DOOR_CLOSING = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum FuncDoorSpawnPos_t : uint {
            FUNC_DOOR_SPAWN_CLOSED = 0x0,
            FUNC_DOOR_SPAWN_OPEN = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum filter_t : uint {
            FILTER_AND = 0x0,
            FILTER_OR = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum Explosions : uint {
            expRandom = 0x0,
            expDirected = 0x1,
            expUsePrecise = 0x2
        }
        // Alignment: 4
        // Members count: 12
        public enum Materials : uint {
            matGlass = 0x0,
            matWood = 0x1,
            matMetal = 0x2,
            matFlesh = 0x3,
            matCinderBlock = 0x4,
            matCeilingTile = 0x5,
            matComputer = 0x6,
            matUnbreakableGlass = 0x7,
            matRocks = 0x8,
            matWeb = 0x9,
            matNone = 0xA,
            matLastMaterial = 0xB
        }
        // Alignment: 4
        // Members count: 3
        public enum EOverrideBlockLOS_t : uint {
            BLOCK_LOS_DEFAULT = 0x0,
            BLOCK_LOS_FORCE_FALSE = 0x1,
            BLOCK_LOS_FORCE_TRUE = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum MoveLinearAuthoredPos_t : uint {
            MOVELINEAR_AUTHORED_AT_START_POSITION = 0x0,
            MOVELINEAR_AUTHORED_AT_OPEN_POSITION = 0x1,
            MOVELINEAR_AUTHORED_AT_CLOSED_POSITION = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum TrackOrientationType_t : uint {
            TrackOrientation_Fixed = 0x0,
            TrackOrientation_FacePath = 0x1,
            TrackOrientation_FacePathAngles = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum SimpleConstraintSoundProfile__SimpleConstraintsSoundProfileKeypoints_t : uint {
            kMIN_THRESHOLD = 0x0,
            kMIN_FULL = 0x1,
            kHIGHWATER = 0x2
        }
        // Alignment: 4
        // Members count: 23
        public enum SoundFlags_t : uint {
            SOUND_NONE = 0x0,
            SOUND_COMBAT = 0x1,
            SOUND_WORLD = 0x2,
            SOUND_PLAYER = 0x4,
            SOUND_DANGER = 0x8,
            SOUND_BULLET_IMPACT = 0x10,
            SOUND_THUMPER = 0x20,
            SOUND_PHYSICS_DANGER = 0x40,
            SOUND_MOVE_AWAY = 0x80,
            SOUND_PLAYER_VEHICLE = 0x100,
            SOUND_GLASS_BREAK = 0x200,
            SOUND_PHYSICS_OBJECT = 0x400,
            SOUND_CONTEXT_GUNFIRE = 0x100000,
            SOUND_CONTEXT_COMBINE_ONLY = 0x200000,
            SOUND_CONTEXT_REACT_TO_SOURCE = 0x400000,
            SOUND_CONTEXT_EXPLOSION = 0x800000,
            SOUND_CONTEXT_EXCLUDE_COMBINE = 0x1000000,
            SOUND_CONTEXT_DANGER_APPROACH = 0x2000000,
            SOUND_CONTEXT_ALLIES_ONLY = 0x4000000,
            SOUND_CONTEXT_PANIC_NPCS = 0x8000000,
            ALL_CONTEXTS = 0xFFFFFFFFFFF00000,
            ALL_SCENTS = 0x0,
            ALL_SOUNDS = 0xFFFFF
        }
        // Alignment: 4
        // Members count: 3
        public enum TrainVelocityType_t : uint {
            TrainVelocity_Instantaneous = 0x0,
            TrainVelocity_LinearBlend = 0x1,
            TrainVelocity_EaseInEaseOut = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum TrainOrientationType_t : uint {
            TrainOrientation_Fixed = 0x0,
            TrainOrientation_AtPathTracks = 0x1,
            TrainOrientation_LinearBlend = 0x2,
            TrainOrientation_EaseInEaseOut = 0x3
        }
        // Alignment: 4
        // Members count: 7
        public enum BeamType_t : uint {
            BEAM_INVALID = 0x0,
            BEAM_POINTS = 0x1,
            BEAM_ENTPOINT = 0x2,
            BEAM_ENTS = 0x3,
            BEAM_HOSE = 0x4,
            BEAM_SPLINE = 0x5,
            BEAM_LASER = 0x6
        }
        // Alignment: 4
        // Members count: 4
        public enum BeamClipStyle_t : uint {
            kNOCLIP = 0x0,
            kGEOCLIP = 0x1,
            kMODELCLIP = 0x2,
            kBEAMCLIPSTYLE_NUMBITS = 0x2
        }
        // Alignment: 1
        // Members count: 10
        public enum SurroundingBoundsType_t : byte {
            USE_OBB_COLLISION_BOUNDS = 0x0,
            USE_BEST_COLLISION_BOUNDS = 0x1,
            USE_HITBOXES = 0x2,
            USE_SPECIFIED_BOUNDS = 0x3,
            USE_GAME_CODE = 0x4,
            USE_ROTATION_EXPANDED_BOUNDS = 0x5,
            USE_ROTATION_EXPANDED_ORIENTED_BOUNDS = 0x6,
            USE_COLLISION_BOUNDS_NEVER_VPHYSICS = 0x7,
            USE_ROTATION_EXPANDED_SEQUENCE_BOUNDS = 0x8,
            SURROUNDING_TYPE_BIT_COUNT = 0x3
        }
        // Alignment: 1
        // Members count: 2
        public enum ShatterPanelMode : byte {
            SHATTER_GLASS = 0x0,
            SHATTER_DRYWALL = 0x1
        }
        // Alignment: 1
        // Members count: 5
        public enum ShatterDamageCause : byte {
            SHATTERDAMAGE_BULLET = 0x0,
            SHATTERDAMAGE_MELEE = 0x1,
            SHATTERDAMAGE_THROWN = 0x2,
            SHATTERDAMAGE_SCRIPT = 0x3,
            SHATTERDAMAGE_EXPLOSIVE = 0x4
        }
        // Alignment: 1
        // Members count: 5
        public enum ShatterGlassStressType : byte {
            SHATTERGLASS_BLUNT = 0x0,
            SHATTERGLASS_BALLISTIC = 0x1,
            SHATTERGLASS_PULSE = 0x2,
            SHATTERDRYWALL_CHUNKS = 0x3,
            SHATTERGLASS_EXPLOSIVE = 0x4
        }
        // Alignment: 1
        // Members count: 3
        public enum OnFrame : byte {
            ONFRAME_UNKNOWN = 0x0,
            ONFRAME_TRUE = 0x1,
            ONFRAME_FALSE = 0x2
        }
        // Alignment: 1
        // Members count: 2
        public enum ShardSolid_t : byte {
            SHARD_SOLID = 0x0,
            SHARD_DEBRIS = 0x1
        }
        // Alignment: 4
        // Members count: 5
        public enum AnimLoopMode_t : uint {
            ANIM_LOOP_MODE_INVALID = 0xFFFFFFFFFFFFFFFF,
            ANIM_LOOP_MODE_NOT_LOOPING = 0x0,
            ANIM_LOOP_MODE_LOOPING = 0x1,
            ANIM_LOOP_MODE_USE_SEQUENCE_SETTINGS = 0x2,
            ANIM_LOOP_MODE_COUNT = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum EntitySubclassScope_t : uint {
            SUBCLASS_SCOPE_NONE = 0xFFFFFFFFFFFFFFFF,
            SUBCLASS_SCOPE_PRECIPITATION = 0x0,
            SUBCLASS_SCOPE_PLAYER_WEAPONS = 0x1,
            SUBCLASS_SCOPE_COUNT = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum SubclassVDataChangeType_t : uint {
            SUBCLASS_VDATA_CREATED = 0x0,
            SUBCLASS_VDATA_SUBCLASS_CHANGED = 0x1,
            SUBCLASS_VDATA_RELOADED = 0x2
        }
        // Alignment: 4
        // Members count: 7
        public enum PlayerConnectedState : uint {
            PlayerNeverConnected = 0xFFFFFFFFFFFFFFFF,
            PlayerConnected = 0x0,
            PlayerConnecting = 0x1,
            PlayerReconnecting = 0x2,
            PlayerDisconnecting = 0x3,
            PlayerDisconnected = 0x4,
            PlayerReserved = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum WeaponSwitchReason_t : uint {
            eDrawn = 0x0,
            eEquipped = 0x1,
            eUserInitiatedSwitchToLast = 0x2
        }
        // Alignment: 4
        // Members count: 4
        public enum WeaponAttackType_t : uint {
            eInvalid = 0xFFFFFFFFFFFFFFFF,
            ePrimary = 0x0,
            eSecondary = 0x1,
            eCount = 0x2
        }
        // Alignment: 4
        // Members count: 35
        public enum vote_create_failed_t : uint {
            VOTE_FAILED_GENERIC = 0x0,
            VOTE_FAILED_TRANSITIONING_PLAYERS = 0x1,
            VOTE_FAILED_RATE_EXCEEDED = 0x2,
            VOTE_FAILED_YES_MUST_EXCEED_NO = 0x3,
            VOTE_FAILED_QUORUM_FAILURE = 0x4,
            VOTE_FAILED_ISSUE_DISABLED = 0x5,
            VOTE_FAILED_MAP_NOT_FOUND = 0x6,
            VOTE_FAILED_MAP_NAME_REQUIRED = 0x7,
            VOTE_FAILED_FAILED_RECENTLY = 0x8,
            VOTE_FAILED_TEAM_CANT_CALL = 0x9,
            VOTE_FAILED_WAITINGFORPLAYERS = 0xA,
            VOTE_FAILED_PLAYERNOTFOUND = 0xB,
            VOTE_FAILED_CANNOT_KICK_ADMIN = 0xC,
            VOTE_FAILED_SCRAMBLE_IN_PROGRESS = 0xD,
            VOTE_FAILED_SPECTATOR = 0xE,
            VOTE_FAILED_FAILED_RECENT_KICK = 0xF,
            VOTE_FAILED_FAILED_RECENT_CHANGEMAP = 0x10,
            VOTE_FAILED_FAILED_RECENT_SWAPTEAMS = 0x11,
            VOTE_FAILED_FAILED_RECENT_SCRAMBLETEAMS = 0x12,
            VOTE_FAILED_FAILED_RECENT_RESTART = 0x13,
            VOTE_FAILED_SWAP_IN_PROGRESS = 0x14,
            VOTE_FAILED_DISABLED = 0x15,
            VOTE_FAILED_NEXTLEVEL_SET = 0x16,
            VOTE_FAILED_TOO_EARLY_SURRENDER = 0x17,
            VOTE_FAILED_MATCH_PAUSED = 0x18,
            VOTE_FAILED_MATCH_NOT_PAUSED = 0x19,
            VOTE_FAILED_NOT_IN_WARMUP = 0x1A,
            VOTE_FAILED_NOT_10_PLAYERS = 0x1B,
            VOTE_FAILED_TIMEOUT_ACTIVE = 0x1C,
            VOTE_FAILED_TIMEOUT_INACTIVE = 0x1D,
            VOTE_FAILED_TIMEOUT_EXHAUSTED = 0x1E,
            VOTE_FAILED_CANT_ROUND_END = 0x1F,
            VOTE_FAILED_REMATCH = 0x20,
            VOTE_FAILED_CONTINUE = 0x21,
            VOTE_FAILED_MAX = 0x22
        }
        // Alignment: 1
        // Members count: 9
        public enum ItemFlagTypes_t : byte {
            ITEM_FLAG_NONE = 0x0,
            ITEM_FLAG_CAN_SELECT_WITHOUT_AMMO = 0x1,
            ITEM_FLAG_NOAUTORELOAD = 0x2,
            ITEM_FLAG_NOAUTOSWITCHEMPTY = 0x4,
            ITEM_FLAG_LIMITINWORLD = 0x8,
            ITEM_FLAG_EXHAUSTIBLE = 0x10,
            ITEM_FLAG_DOHITLOCATIONDMG = 0x20,
            ITEM_FLAG_NOAMMOPICKUPS = 0x40,
            ITEM_FLAG_NOITEMPICKUP = 0x80
        }
        // Alignment: 4
        // Members count: 5
        public enum EntityDisolveType_t : uint {
            ENTITY_DISSOLVE_INVALID = 0xFFFFFFFFFFFFFFFF,
            ENTITY_DISSOLVE_NORMAL = 0x0,
            ENTITY_DISSOLVE_ELECTRICAL = 0x1,
            ENTITY_DISSOLVE_ELECTRICAL_LIGHT = 0x2,
            ENTITY_DISSOLVE_CORE = 0x3
        }
        // Alignment: 4
        // Members count: 14
        public enum HitGroup_t : uint {
            HITGROUP_INVALID = 0xFFFFFFFFFFFFFFFF,
            HITGROUP_GENERIC = 0x0,
            HITGROUP_HEAD = 0x1,
            HITGROUP_CHEST = 0x2,
            HITGROUP_STOMACH = 0x3,
            HITGROUP_LEFTARM = 0x4,
            HITGROUP_RIGHTARM = 0x5,
            HITGROUP_LEFTLEG = 0x6,
            HITGROUP_RIGHTLEG = 0x7,
            HITGROUP_NECK = 0x8,
            HITGROUP_UNUSED = 0x9,
            HITGROUP_GEAR = 0xA,
            HITGROUP_SPECIAL = 0xB,
            HITGROUP_COUNT = 0xC
        }
        // Alignment: 1
        // Members count: 7
        public enum WaterLevel_t : byte {
            WL_NotInWater = 0x0,
            WL_Feet = 0x1,
            WL_Knees = 0x2,
            WL_Waist = 0x3,
            WL_Chest = 0x4,
            WL_FullyUnderwater = 0x5,
            WL_Count = 0x6
        }
        // Alignment: 4
        // Members count: 5
        public enum DoorState_t : uint {
            DOOR_STATE_CLOSED = 0x0,
            DOOR_STATE_OPENING = 0x1,
            DOOR_STATE_OPEN = 0x2,
            DOOR_STATE_CLOSING = 0x3,
            DOOR_STATE_AJAR = 0x4
        }
        // Alignment: 4
        // Members count: 2
        public enum ShadowType_t : uint {
            SHADOWS_NONE = 0x0,
            SHADOWS_SIMPLE = 0x1
        }
        // Alignment: 4
        // Members count: 10
        public enum Class_T : uint {
            CLASS_NONE = 0x0,
            CLASS_PLAYER = 0x1,
            CLASS_PLAYER_ALLY = 0x2,
            CLASS_BOMB = 0x3,
            CLASS_FOOT_CONTACT_SHADOW = 0x4,
            CLASS_WEAPON = 0x5,
            CLASS_WATER_SPLASHER = 0x6,
            CLASS_WEAPON_VIEWMODEL = 0x7,
            CLASS_DOOR = 0x8,
            NUM_CLASSIFY_CLASSES = 0x9
        }
        // Alignment: 4
        // Members count: 10
        public enum Disposition_t : uint {
            D_ER = 0x0,
            D_HT = 0x1,
            D_FR = 0x2,
            D_LI = 0x3,
            D_NU = 0x4,
            D_ERROR = 0x0,
            D_HATE = 0x1,
            D_FEAR = 0x2,
            D_LIKE = 0x3,
            D_NEUTRAL = 0x4
        }
        // Alignment: 4
        // Members count: 6
        public enum LatchDirtyPermission_t : uint {
            LATCH_DIRTY_DISALLOW = 0x0,
            LATCH_DIRTY_SERVER_CONTROLLED = 0x1,
            LATCH_DIRTY_CLIENT_SIMULATED = 0x2,
            LATCH_DIRTY_PREDICTION = 0x3,
            LATCH_DIRTY_FRAMESIMULATE = 0x4,
            LATCH_DIRTY_PARTICLE_SIMULATE = 0x5
        }
        // Alignment: 4
        // Members count: 5
        public enum LifeState_t : uint {
            LIFE_ALIVE = 0x0,
            LIFE_DYING = 0x1,
            LIFE_DEAD = 0x2,
            LIFE_RESPAWNABLE = 0x3,
            LIFE_RESPAWNING = 0x4
        }
        // Alignment: 4
        // Members count: 5
        public enum StanceType_t : uint {
            STANCE_CURRENT = 0xFFFFFFFFFFFFFFFF,
            STANCE_DEFAULT = 0x0,
            STANCE_CROUCHING = 0x1,
            STANCE_PRONE = 0x2,
            NUM_STANCES = 0x3
        }
        // Alignment: 4
        // Members count: 2
        public enum ModifyDamageReturn_t : uint {
            CONTINUE_TO_APPLY_DAMAGE = 0x0,
            ABORT_DO_NOT_APPLY_DAMAGE = 0x1
        }
        // Alignment: 1
        // Members count: 3
        public enum BeginDeathLifeStateTransition_t : byte {
            NO_CHANGE_IN_LIFESTATE = 0x0,
            TRANSITION_TO_LIFESTATE_DYING = 0x1,
            TRANSITION_TO_LIFESTATE_DEAD = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum WorldTextPanelHorizontalAlign_t : uint {
            WORLDTEXT_HORIZONTAL_ALIGN_LEFT = 0x0,
            WORLDTEXT_HORIZONTAL_ALIGN_CENTER = 0x1,
            WORLDTEXT_HORIZONTAL_ALIGN_RIGHT = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum WorldTextPanelVerticalAlign_t : uint {
            WORLDTEXT_VERTICAL_ALIGN_TOP = 0x0,
            WORLDTEXT_VERTICAL_ALIGN_CENTER = 0x1,
            WORLDTEXT_VERTICAL_ALIGN_BOTTOM = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum WorldTextPanelOrientation_t : uint {
            WORLDTEXT_ORIENTATION_DEFAULT = 0x0,
            WORLDTEXT_ORIENTATION_FACEUSER = 0x1,
            WORLDTEXT_ORIENTATION_FACEUSER_UPRIGHT = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum attributeprovidertypes_t : uint {
            PROVIDER_GENERIC = 0x0,
            PROVIDER_WEAPON = 0x1
        }
        // Alignment: 4
        // Members count: 4
        public enum SpawnPointCoopEnemy__BotDefaultBehavior_t : uint {
            DEFEND_AREA = 0x0,
            HUNT = 0x1,
            CHARGE_ENEMY = 0x2,
            DEFEND_INVESTIGATE = 0x3
        }
        // Alignment: 4
        // Members count: 4
        public enum MoveMountingAmount_t : uint {
            MOVE_MOUNT_NONE = 0x0,
            MOVE_MOUNT_LOW = 0x1,
            MOVE_MOUNT_HIGH = 0x2,
            MOVE_MOUNT_MAXCOUNT = 0x3
        }
        // Alignment: 4
        // Members count: 10
        public enum CSPlayerState : uint {
            STATE_ACTIVE = 0x0,
            STATE_WELCOME = 0x1,
            STATE_PICKINGTEAM = 0x2,
            STATE_PICKINGCLASS = 0x3,
            STATE_DEATH_ANIM = 0x4,
            STATE_DEATH_WAIT_FOR_KEY = 0x5,
            STATE_OBSERVER_MODE = 0x6,
            STATE_GUNGAME_RESPAWN = 0x7,
            STATE_DORMANT = 0x8,
            NUM_PLAYER_STATES = 0x9
        }
        // Alignment: 4
        // Members count: 18
        public enum CSPlayerBlockingUseAction_t : uint {
            k_CSPlayerBlockingUseAction_None = 0x0,
            k_CSPlayerBlockingUseAction_DefusingDefault = 0x1,
            k_CSPlayerBlockingUseAction_DefusingWithKit = 0x2,
            k_CSPlayerBlockingUseAction_HostageGrabbing = 0x3,
            k_CSPlayerBlockingUseAction_HostageDropping = 0x4,
            k_CSPlayerBlockingUseAction_OpeningSafe = 0x5,
            k_CSPlayerBlockingUseAction_EquippingParachute = 0x6,
            k_CSPlayerBlockingUseAction_EquippingHeavyArmor = 0x7,
            k_CSPlayerBlockingUseAction_EquippingContract = 0x8,
            k_CSPlayerBlockingUseAction_EquippingTabletUpgrade = 0x9,
            k_CSPlayerBlockingUseAction_TakingOffHeavyArmor = 0xA,
            k_CSPlayerBlockingUseAction_PayingToOpenDoor = 0xB,
            k_CSPlayerBlockingUseAction_CancelingSpawnRappelling = 0xC,
            k_CSPlayerBlockingUseAction_EquippingExoJump = 0xD,
            k_CSPlayerBlockingUseAction_PickingUpBumpMine = 0xE,
            k_CSPlayerBlockingUseAction_MapLongUseEntity_Pickup = 0xF,
            k_CSPlayerBlockingUseAction_MapLongUseEntity_Place = 0x10,
            k_CSPlayerBlockingUseAction_MaxCount = 0x11
        }
        // Alignment: 4
        // Members count: 8
        public enum GrenadeType_t : uint {
            GRENADE_TYPE_EXPLOSIVE = 0x0,
            GRENADE_TYPE_FLASH = 0x1,
            GRENADE_TYPE_FIRE = 0x2,
            GRENADE_TYPE_DECOY = 0x3,
            GRENADE_TYPE_SMOKE = 0x4,
            GRENADE_TYPE_SENSOR = 0x5,
            GRENADE_TYPE_SNOWBALL = 0x6,
            GRENADE_TYPE_TOTAL = 0x7
        }
        // Alignment: 4
        // Members count: 13
        public enum QuestProgress__Reason : uint {
            QUEST_NONINITIALIZED = 0x0,
            QUEST_OK = 0x1,
            QUEST_NOT_ENOUGH_PLAYERS = 0x2,
            QUEST_WARMUP = 0x3,
            QUEST_NOT_CONNECTED_TO_STEAM = 0x4,
            QUEST_NONOFFICIAL_SERVER = 0x5,
            QUEST_NO_ENTITLEMENT = 0x6,
            QUEST_NO_QUEST = 0x7,
            QUEST_PLAYER_IS_BOT = 0x8,
            QUEST_WRONG_MAP = 0x9,
            QUEST_WRONG_MODE = 0xA,
            QUEST_NOT_SYNCED_WITH_SERVER = 0xB,
            QUEST_REASON_MAX = 0xC
        }
        // Alignment: 4
        // Members count: 74
        public enum loadout_slot_t : uint {
            LOADOUT_SLOT_PROMOTED = 0xFFFFFFFFFFFFFFFE,
            LOADOUT_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
            LOADOUT_SLOT_MELEE = 0x0,
            LOADOUT_SLOT_C4 = 0x1,
            LOADOUT_SLOT_FIRST_AUTO_BUY_WEAPON = 0x0,
            LOADOUT_SLOT_LAST_AUTO_BUY_WEAPON = 0x1,
            LOADOUT_SLOT_SECONDARY0 = 0x2,
            LOADOUT_SLOT_SECONDARY1 = 0x3,
            LOADOUT_SLOT_SECONDARY2 = 0x4,
            LOADOUT_SLOT_SECONDARY3 = 0x5,
            LOADOUT_SLOT_SECONDARY4 = 0x6,
            LOADOUT_SLOT_SECONDARY5 = 0x7,
            LOADOUT_SLOT_SMG0 = 0x8,
            LOADOUT_SLOT_SMG1 = 0x9,
            LOADOUT_SLOT_SMG2 = 0xA,
            LOADOUT_SLOT_SMG3 = 0xB,
            LOADOUT_SLOT_SMG4 = 0xC,
            LOADOUT_SLOT_SMG5 = 0xD,
            LOADOUT_SLOT_RIFLE0 = 0xE,
            LOADOUT_SLOT_RIFLE1 = 0xF,
            LOADOUT_SLOT_RIFLE2 = 0x10,
            LOADOUT_SLOT_RIFLE3 = 0x11,
            LOADOUT_SLOT_RIFLE4 = 0x12,
            LOADOUT_SLOT_RIFLE5 = 0x13,
            LOADOUT_SLOT_HEAVY0 = 0x14,
            LOADOUT_SLOT_HEAVY1 = 0x15,
            LOADOUT_SLOT_HEAVY2 = 0x16,
            LOADOUT_SLOT_HEAVY3 = 0x17,
            LOADOUT_SLOT_HEAVY4 = 0x18,
            LOADOUT_SLOT_HEAVY5 = 0x19,
            LOADOUT_SLOT_FIRST_WHEEL_WEAPON = 0x2,
            LOADOUT_SLOT_LAST_WHEEL_WEAPON = 0x19,
            LOADOUT_SLOT_FIRST_PRIMARY_WEAPON = 0x8,
            LOADOUT_SLOT_LAST_PRIMARY_WEAPON = 0x19,
            LOADOUT_SLOT_FIRST_WHEEL_GRENADE = 0x1A,
            LOADOUT_SLOT_GRENADE0 = 0x1A,
            LOADOUT_SLOT_GRENADE1 = 0x1B,
            LOADOUT_SLOT_GRENADE2 = 0x1C,
            LOADOUT_SLOT_GRENADE3 = 0x1D,
            LOADOUT_SLOT_GRENADE4 = 0x1E,
            LOADOUT_SLOT_GRENADE5 = 0x1F,
            LOADOUT_SLOT_LAST_WHEEL_GRENADE = 0x1F,
            LOADOUT_SLOT_EQUIPMENT0 = 0x20,
            LOADOUT_SLOT_EQUIPMENT1 = 0x21,
            LOADOUT_SLOT_EQUIPMENT2 = 0x22,
            LOADOUT_SLOT_EQUIPMENT3 = 0x23,
            LOADOUT_SLOT_EQUIPMENT4 = 0x24,
            LOADOUT_SLOT_EQUIPMENT5 = 0x25,
            LOADOUT_SLOT_FIRST_WHEEL_EQUIPMENT = 0x20,
            LOADOUT_SLOT_LAST_WHEEL_EQUIPMENT = 0x25,
            LOADOUT_SLOT_CLOTHING_CUSTOMPLAYER = 0x26,
            LOADOUT_SLOT_PET = 0x27,
            LOADOUT_SLOT_CLOTHING_FACEMASK = 0x28,
            LOADOUT_SLOT_CLOTHING_HANDS = 0x29,
            LOADOUT_SLOT_FIRST_COSMETIC = 0x29,
            LOADOUT_SLOT_LAST_COSMETIC = 0x29,
            LOADOUT_SLOT_CLOTHING_EYEWEAR = 0x2A,
            LOADOUT_SLOT_CLOTHING_HAT = 0x2B,
            LOADOUT_SLOT_CLOTHING_LOWERBODY = 0x2C,
            LOADOUT_SLOT_CLOTHING_TORSO = 0x2D,
            LOADOUT_SLOT_CLOTHING_APPEARANCE = 0x2E,
            LOADOUT_SLOT_MISC0 = 0x2F,
            LOADOUT_SLOT_MISC1 = 0x30,
            LOADOUT_SLOT_MISC2 = 0x31,
            LOADOUT_SLOT_MISC3 = 0x32,
            LOADOUT_SLOT_MISC4 = 0x33,
            LOADOUT_SLOT_MISC5 = 0x34,
            LOADOUT_SLOT_MISC6 = 0x35,
            LOADOUT_SLOT_MUSICKIT = 0x36,
            LOADOUT_SLOT_FLAIR0 = 0x37,
            LOADOUT_SLOT_SPRAY0 = 0x38,
            LOADOUT_SLOT_FIRST_ALL_CHARACTER = 0x36,
            LOADOUT_SLOT_LAST_ALL_CHARACTER = 0x38,
            LOADOUT_SLOT_COUNT = 0x39
        }
        // Alignment: 1
        // Members count: 8
        public enum EKillTypes_t : byte {
            KILL_NONE = 0x0,
            KILL_DEFAULT = 0x1,
            KILL_HEADSHOT = 0x2,
            KILL_BLAST = 0x3,
            KILL_BURN = 0x4,
            KILL_SLASH = 0x5,
            KILL_SHOCK = 0x6,
            KILLTYPE_COUNT = 0x7
        }
        // Alignment: 4
        // Members count: 9
        public enum PreviewCharacterMode : uint {
            DIORAMA = 0x0,
            MAIN_MENU = 0x1,
            BUY_MENU = 0x2,
            TEAM_SELECT = 0x3,
            END_OF_MATCH = 0x4,
            INVENTORY_INSPECT = 0x5,
            WALKING = 0x6,
            TEAM_INTRO = 0x7,
            WINGMAN_INTRO = 0x8
        }
        // Alignment: 4
        // Members count: 6
        public enum PreviewWeaponState : uint {
            DROPPED = 0x0,
            HOLSTERED = 0x1,
            DEPLOYED = 0x2,
            PLANTED = 0x3,
            INSPECT = 0x4,
            ICON = 0x5
        }
        // Alignment: 4
        // Members count: 23
        public enum PreviewEOMCelebration : uint {
            WALKUP = 0x0,
            PUNCHING = 0x1,
            SWAGGER = 0x2,
            DROPDOWN = 0x3,
            STRETCH = 0x4,
            SWAT_FEMALE = 0x5,
            MASK_F = 0x6,
            GUERILLA = 0x7,
            GUERILLA02 = 0x8,
            GENDARMERIE = 0x9,
            SCUBA_FEMALE = 0xA,
            SCUBA_MALE = 0xB,
            AVA_DEFEAT = 0xC,
            GENDARMERIE_DEFEAT = 0xD,
            MAE_DEFEAT = 0xE,
            RICKSAW_DEFEAT = 0xF,
            SCUBA_FEMALE_DEFEAT = 0x10,
            SCUBA_MALE_DEFEAT = 0x11,
            CRASSWATER_DEFEAT = 0x12,
            DARRYL_DEFEAT = 0x13,
            DOCTOR_DEFEAT = 0x14,
            MUHLIK_DEFEAT = 0x15,
            VYPA_DEFEAT = 0x16
        }
        // Alignment: 4
        // Members count: 20
        public enum CSWeaponType : uint {
            WEAPONTYPE_KNIFE = 0x0,
            WEAPONTYPE_PISTOL = 0x1,
            WEAPONTYPE_SUBMACHINEGUN = 0x2,
            WEAPONTYPE_RIFLE = 0x3,
            WEAPONTYPE_SHOTGUN = 0x4,
            WEAPONTYPE_SNIPER_RIFLE = 0x5,
            WEAPONTYPE_MACHINEGUN = 0x6,
            WEAPONTYPE_C4 = 0x7,
            WEAPONTYPE_TASER = 0x8,
            WEAPONTYPE_GRENADE = 0x9,
            WEAPONTYPE_EQUIPMENT = 0xA,
            WEAPONTYPE_STACKABLEITEM = 0xB,
            WEAPONTYPE_FISTS = 0xC,
            WEAPONTYPE_BREACHCHARGE = 0xD,
            WEAPONTYPE_BUMPMINE = 0xE,
            WEAPONTYPE_TABLET = 0xF,
            WEAPONTYPE_MELEE = 0x10,
            WEAPONTYPE_SHIELD = 0x11,
            WEAPONTYPE_ZONE_REPULSOR = 0x12,
            WEAPONTYPE_UNKNOWN = 0x13
        }
        // Alignment: 4
        // Members count: 7
        public enum CSWeaponCategory : uint {
            WEAPONCATEGORY_OTHER = 0x0,
            WEAPONCATEGORY_MELEE = 0x1,
            WEAPONCATEGORY_SECONDARY = 0x2,
            WEAPONCATEGORY_SMG = 0x3,
            WEAPONCATEGORY_RIFLE = 0x4,
            WEAPONCATEGORY_HEAVY = 0x5,
            WEAPONCATEGORY_COUNT = 0x6
        }
        // Alignment: 4
        // Members count: 3
        public enum CSWeaponSilencerType : uint {
            WEAPONSILENCER_NONE = 0x0,
            WEAPONSILENCER_DETACHABLE = 0x1,
            WEAPONSILENCER_INTEGRATED = 0x2
        }
        // Alignment: 4
        // Members count: 24
        public enum PlayerAnimEvent_t : uint {
            PLAYERANIMEVENT_FIRE_GUN_PRIMARY = 0x0,
            PLAYERANIMEVENT_FIRE_GUN_SECONDARY = 0x1,
            PLAYERANIMEVENT_GRENADE_PULL_PIN = 0x2,
            PLAYERANIMEVENT_THROW_GRENADE = 0x3,
            PLAYERANIMEVENT_JUMP = 0x4,
            PLAYERANIMEVENT_RELOAD = 0x5,
            PLAYERANIMEVENT_CLEAR_FIRING = 0x6,
            PLAYERANIMEVENT_DEPLOY = 0x7,
            PLAYERANIMEVENT_SILENCER_STATE = 0x8,
            PLAYERANIMEVENT_SILENCER_TOGGLE = 0x9,
            PLAYERANIMEVENT_THROW_GRENADE_UNDERHAND = 0xA,
            PLAYERANIMEVENT_CATCH_WEAPON = 0xB,
            PLAYERANIMEVENT_LOOKATWEAPON_REQUEST = 0xC,
            PLAYERANIMEVENT_RELOAD_CANCEL_LOOKATWEAPON = 0xD,
            PLAYERANIMEVENT_HAULBACK = 0xE,
            PLAYERANIMEVENT_IDLE = 0xF,
            PLAYERANIMEVENT_STRIKE_HIT = 0x10,
            PLAYERANIMEVENT_STRIKE_MISS = 0x11,
            PLAYERANIMEVENT_BACKSTAB = 0x12,
            PLAYERANIMEVENT_DRYFIRE = 0x13,
            PLAYERANIMEVENT_FIDGET = 0x14,
            PLAYERANIMEVENT_RELEASE = 0x15,
            PLAYERANIMEVENT_TAUNT = 0x16,
            PLAYERANIMEVENT_COUNT = 0x17
        }
        // Alignment: 4
        // Members count: 5
        public enum MedalRank_t : uint {
            MEDAL_RANK_NONE = 0x0,
            MEDAL_RANK_BRONZE = 0x1,
            MEDAL_RANK_SILVER = 0x2,
            MEDAL_RANK_GOLD = 0x3,
            MEDAL_RANK_COUNT = 0x4
        }
        // Alignment: 4
        // Members count: 3
        public enum CSWeaponState_t : uint {
            WEAPON_NOT_CARRIED = 0x0,
            WEAPON_IS_CARRIED_BY_PLAYER = 0x1,
            WEAPON_IS_ACTIVE = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum CSWeaponMode : uint {
            Primary_Mode = 0x0,
            Secondary_Mode = 0x1,
            WeaponMode_MAX = 0x2
        }
        // Alignment: 4
        // Members count: 3
        public enum C4LightEffect_t : uint {
            eLightEffectNone = 0x0,
            eLightEffectDropped = 0x1,
            eLightEffectThirdPersonHeld = 0x2
        }
        // Alignment: 4
        // Members count: 17
        public enum gear_slot_t : uint {
            GEAR_SLOT_INVALID = 0xFFFFFFFFFFFFFFFF,
            GEAR_SLOT_RIFLE = 0x0,
            GEAR_SLOT_PISTOL = 0x1,
            GEAR_SLOT_KNIFE = 0x2,
            GEAR_SLOT_GRENADES = 0x3,
            GEAR_SLOT_C4 = 0x4,
            GEAR_SLOT_RESERVED_SLOT6 = 0x5,
            GEAR_SLOT_RESERVED_SLOT7 = 0x6,
            GEAR_SLOT_RESERVED_SLOT8 = 0x7,
            GEAR_SLOT_RESERVED_SLOT9 = 0x8,
            GEAR_SLOT_RESERVED_SLOT10 = 0x9,
            GEAR_SLOT_RESERVED_SLOT11 = 0xA,
            GEAR_SLOT_BOOSTS = 0xB,
            GEAR_SLOT_UTILITY = 0xC,
            GEAR_SLOT_COUNT = 0xD,
            GEAR_SLOT_FIRST = 0x0,
            GEAR_SLOT_LAST = 0xC
        }
        // Alignment: 4
        // Members count: 7
        public enum ChickenActivity : uint {
            IDLE = 0x0,
            WALK = 0x1,
            RUN = 0x2,
            HOP = 0x3,
            JUMP = 0x4,
            GLIDE = 0x5,
            LAND = 0x6
        }
        // Parent: None
        // Fields count: 1
        public static class CRangeFloat {
            public const nint m_pValue = 0x0; // float32[2]
        }
        // Parent: None
        // Fields count: 1
        public static class CRangeInt {
            public const nint m_pValue = 0x0; // int32[2]
        }
        // Parent: None
        // Fields count: 2
        public static class Extent {
            public const nint lo = 0x0; // 
            public const nint hi = 0xC; // 
        }
        // Parent: None
        // Fields count: 2
        public static class NavGravity_t {
            public const nint m_vGravity = 0x0; // 
            public const nint m_bDefault = 0xC; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CNavVolume {
        }
        // Parent: CNavVolume
        // Fields count: 1
        public static class CNavVolumeVector {
            public const nint m_bHasBeenPreFiltered = 0x78; // bool
        }
        // Parent: CNavVolumeVector
        // Fields count: 0
        public static class CNavVolumeAll {
        }
        // Parent: CNavVolume
        // Fields count: 2
        public static class CNavVolumeSphere {
            public const nint m_vCenter = 0x70; // 
            public const nint m_flRadius = 0x7C; // float32
        }
        // Parent: CNavVolumeSphere
        // Fields count: 1
        public static class CNavVolumeSphericalShell {
            public const nint m_flRadiusInner = 0x80; // float32
        }
        // Parent: None
        // Fields count: 11
        public static class CNavHullVData {
            public const nint m_bAgentEnabled = 0x0; // bool
            public const nint m_agentRadius = 0x4; // float32
            public const nint m_agentHeight = 0x8; // float32
            public const nint m_agentShortHeightEnabled = 0xC; // bool
            public const nint m_agentShortHeight = 0x10; // float32
            public const nint m_agentMaxClimb = 0x14; // float32
            public const nint m_agentMaxSlope = 0x18; // int32
            public const nint m_agentMaxJumpDownDist = 0x1C; // float32
            public const nint m_agentMaxJumpHorizDistBase = 0x20; // float32
            public const nint m_agentMaxJumpUpDist = 0x24; // float32
            public const nint m_agentBorderErosion = 0x28; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class CNavHullPresetVData {
            public const nint m_vecNavHulls = 0x0; // CUtlVector<CUtlString>
        }
        // Parent: None
        // Fields count: 0
        public static class CEntityComponent {
        }
        // Parent: None
        // Fields count: 11
        public static class CEntityIdentity {
            public const nint m_nameStringableIndex = 0x14; // int32
            public const nint m_name = 0x18; // CUtlSymbolLarge
            public const nint m_designerName = 0x20; // CUtlSymbolLarge
            public const nint m_flags = 0x30; // uint32
            public const nint m_worldGroupId = 0x38; // WorldGroupId_t
            public const nint m_fDataObjectTypes = 0x3C; // uint32
            public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
            public const nint m_pPrev = 0x58; // CEntityIdentity*
            public const nint m_pNext = 0x60; // CEntityIdentity*
            public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
            public const nint m_pNextByClass = 0x70; // CEntityIdentity*
        }
        // Parent: None
        // Fields count: 4
        public static class CEntityInstance {
            public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
            public const nint m_pEntity = 0x10; // CEntityIdentity*
            public const nint m_CScriptComponent = 0x28; // CScriptComponent*
            public const nint m_bVisibleinPVS = 0x30; // bool
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CScriptComponent {
            public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
        }
        // Parent: CEntityComponent
        // Fields count: 2
        public static class CBodyComponent {
            public const nint m_pSceneNode = 0x8; // CGameSceneNode*
            public const nint __m_pChainEntity = 0x20; // CNetworkVarChainer
        }
        // Parent: CBodyComponent
        // Fields count: 2
        public static class CBodyComponentPoint {
            public const nint m_sceneNode = 0x50; // CGameSceneNode
            public const nint __m_pChainEntity = 0x1A0; // CNetworkVarChainer
        }
        // Parent: CBodyComponent
        // Fields count: 2
        public static class CBodyComponentSkeletonInstance {
            public const nint m_skeletonInstance = 0x50; // CSkeletonInstance
            public const nint __m_pChainEntity = 0x430; // CNetworkVarChainer
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CHitboxComponent {
            public const nint m_bvDisabledHitGroups = 0x24; // uint32[1]
        }
        // Parent: CEntityComponent
        // Fields count: 67
        public static class CLightComponent {
            public const nint __m_pChainEntity = 0x48; // CNetworkVarChainer
            public const nint m_Color = 0x85; // Color
            public const nint m_SecondaryColor = 0x89; // Color
            public const nint m_flBrightness = 0x90; // float32
            public const nint m_flBrightnessScale = 0x94; // float32
            public const nint m_flBrightnessMult = 0x98; // float32
            public const nint m_flRange = 0x9C; // float32
            public const nint m_flFalloff = 0xA0; // float32
            public const nint m_flAttenuation0 = 0xA4; // float32
            public const nint m_flAttenuation1 = 0xA8; // float32
            public const nint m_flAttenuation2 = 0xAC; // float32
            public const nint m_flTheta = 0xB0; // float32
            public const nint m_flPhi = 0xB4; // float32
            public const nint m_hLightCookie = 0xB8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_nCascades = 0xC0; // int32
            public const nint m_nCastShadows = 0xC4; // int32
            public const nint m_nShadowWidth = 0xC8; // int32
            public const nint m_nShadowHeight = 0xCC; // int32
            public const nint m_bRenderDiffuse = 0xD0; // bool
            public const nint m_nRenderSpecular = 0xD4; // int32
            public const nint m_bRenderTransmissive = 0xD8; // bool
            public const nint m_flOrthoLightWidth = 0xDC; // float32
            public const nint m_flOrthoLightHeight = 0xE0; // float32
            public const nint m_nStyle = 0xE4; // int32
            public const nint m_Pattern = 0xE8; // CUtlString
            public const nint m_nCascadeRenderStaticObjects = 0xF0; // int32
            public const nint m_flShadowCascadeCrossFade = 0xF4; // float32
            public const nint m_flShadowCascadeDistanceFade = 0xF8; // float32
            public const nint m_flShadowCascadeDistance0 = 0xFC; // float32
            public const nint m_flShadowCascadeDistance1 = 0x100; // float32
            public const nint m_flShadowCascadeDistance2 = 0x104; // float32
            public const nint m_flShadowCascadeDistance3 = 0x108; // float32
            public const nint m_nShadowCascadeResolution0 = 0x10C; // int32
            public const nint m_nShadowCascadeResolution1 = 0x110; // int32
            public const nint m_nShadowCascadeResolution2 = 0x114; // int32
            public const nint m_nShadowCascadeResolution3 = 0x118; // int32
            public const nint m_bUsesBakedShadowing = 0x11C; // bool
            public const nint m_nShadowPriority = 0x120; // int32
            public const nint m_nBakedShadowIndex = 0x124; // int32
            public const nint m_bRenderToCubemaps = 0x128; // bool
            public const nint m_nDirectLight = 0x12C; // int32
            public const nint m_nIndirectLight = 0x130; // int32
            public const nint m_flFadeMinDist = 0x134; // float32
            public const nint m_flFadeMaxDist = 0x138; // float32
            public const nint m_flShadowFadeMinDist = 0x13C; // float32
            public const nint m_flShadowFadeMaxDist = 0x140; // float32
            public const nint m_bEnabled = 0x144; // bool
            public const nint m_bFlicker = 0x145; // bool
            public const nint m_bPrecomputedFieldsValid = 0x146; // bool
            public const nint m_vPrecomputedBoundsMins = 0x148; // 
            public const nint m_vPrecomputedBoundsMaxs = 0x154; // 
            public const nint m_vPrecomputedOBBOrigin = 0x160; // 
            public const nint m_vPrecomputedOBBAngles = 0x16C; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0x178; // 
            public const nint m_flPrecomputedMaxRange = 0x184; // float32
            public const nint m_nFogLightingMode = 0x188; // int32
            public const nint m_flFogContributionStength = 0x18C; // float32
            public const nint m_flNearClipPlane = 0x190; // float32
            public const nint m_SkyColor = 0x194; // Color
            public const nint m_flSkyIntensity = 0x198; // float32
            public const nint m_SkyAmbientBounce = 0x19C; // Color
            public const nint m_bUseSecondaryColor = 0x1A0; // bool
            public const nint m_bMixedShadows = 0x1A1; // bool
            public const nint m_flLightStyleStartTime = 0x1A4; // GameTime_t
            public const nint m_flCapsuleLength = 0x1A8; // float32
            public const nint m_flMinRoughness = 0x1AC; // float32
            public const nint m_bPvsModifyEntity = 0x1C0; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class CNetworkTransmitComponent {
            public const nint m_nTransmitStateOwnedCounter = 0x16C; // uint8
        }
        // Parent: CEntityComponent
        // Fields count: 5
        public static class CRenderComponent {
            public const nint __m_pChainEntity = 0x10; // CNetworkVarChainer
            public const nint m_bIsRenderingWithViewModels = 0x50; // bool
            public const nint m_nSplitscreenFlags = 0x54; // uint32
            public const nint m_bEnableRendering = 0x60; // bool
            public const nint m_bInterpolationReadyToDraw = 0xB0; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CAnimEventListenerBase {
        }
        // Parent: CAnimEventListenerBase
        // Fields count: 0
        public static class CAnimEventListener {
        }
        // Parent: CAnimEventListenerBase
        // Fields count: 0
        public static class CAnimEventQueueListener {
        }
        // Parent: None
        // Fields count: 1
        public static class CBuoyancyHelper {
            public const nint m_flFluidDensity = 0x18; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CSkillFloat {
            public const nint m_pValue = 0x0; // float32[4]
        }
        // Parent: None
        // Fields count: 1
        public static class CSkillInt {
            public const nint m_pValue = 0x0; // int32[4]
        }
        // Parent: None
        // Fields count: 2
        public static class CSkillDamage {
            public const nint m_flDamage = 0x0; // CSkillFloat
            public const nint m_flPhysicsForceDamage = 0x10; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class CRemapFloat {
            public const nint m_pValue = 0x0; // float32[4]
        }
        // Parent: None
        // Fields count: 2
        public static class CScriptUniformRandomStream {
            public const nint m_hScriptScope = 0x8; // HSCRIPT
            public const nint m_nInitialSeed = 0x9C; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class CBasePlayerControllerAPI {
        }
        // Parent: None
        // Fields count: 3
        public static class ViewAngleServerChange_t {
            public const nint nType = 0x30; // FixAngleSet_t
            public const nint qAngle = 0x34; // QAngle
            public const nint nIndex = 0x40; // uint32
        }
        // Parent: None
        // Fields count: 2
        public static class CBreakableStageHelper {
            public const nint m_nCurrentStage = 0x8; // int32
            public const nint m_nStageCount = 0xC; // int32
        }
        // Parent: None
        // Fields count: 12
        public static class CommandToolCommand_t {
            public const nint m_bEnabled = 0x0; // bool
            public const nint m_bOpened = 0x1; // bool
            public const nint m_InternalId = 0x4; // uint32
            public const nint m_ShortName = 0x8; // CUtlString
            public const nint m_ExecMode = 0x10; // CommandExecMode_t
            public const nint m_SpawnGroup = 0x18; // CUtlString
            public const nint m_PeriodicExecDelay = 0x20; // float32
            public const nint m_SpecType = 0x24; // CommandEntitySpecType_t
            public const nint m_EntitySpec = 0x28; // CUtlString
            public const nint m_Commands = 0x30; // CUtlString
            public const nint m_SetDebugBits = 0x38; // DebugOverlayBits_t
            public const nint m_ClearDebugBits = 0x40; // DebugOverlayBits_t
        }
        // Parent: None
        // Fields count: 0
        public static class CDynamicPropAPI {
        }
        // Parent: None
        // Fields count: 1
        public static class CPlayerPawnComponent {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
        }
        // Parent: None
        // Fields count: 1
        public static class CPlayerControllerComponent {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_AutoaimServices {
        }
        // Parent: None
        // Fields count: 5
        public static class audioparams_t {
            public const nint localSound = 0x8; // Vector[8]
            public const nint soundscapeIndex = 0x68; // int32
            public const nint localBits = 0x6C; // uint8
            public const nint soundscapeEntityListIndex = 0x70; // int32
            public const nint soundEventHash = 0x74; // uint32
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 12
        public static class CPlayer_CameraServices {
            public const nint m_vecCsViewPunchAngle = 0x40; // QAngle
            public const nint m_nCsViewPunchAngleTick = 0x4C; // GameTick_t
            public const nint m_flCsViewPunchAngleTickRatio = 0x50; // float32
            public const nint m_PlayerFog = 0x58; // fogplayerparams_t
            public const nint m_hColorCorrectionCtrl = 0x98; // CHandle<CColorCorrection>
            public const nint m_hViewEntity = 0x9C; // CHandle<CBaseEntity>
            public const nint m_hTonemapController = 0xA0; // CHandle<CTonemapController2>
            public const nint m_audio = 0xA8; // audioparams_t
            public const nint m_PostProcessingVolumes = 0x120; // CNetworkUtlVectorBase<CHandle<CPostProcessingVolume>>
            public const nint m_flOldPlayerZ = 0x138; // float32
            public const nint m_flOldPlayerViewOffsetZ = 0x13C; // float32
            public const nint m_hTriggerSoundscapeList = 0x158; // CUtlVector<CHandle<CEnvSoundscapeTriggerable>>
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_FlashlightServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_ItemServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 15
        public static class CPlayer_MovementServices {
            public const nint m_nImpulse = 0x40; // int32
            public const nint m_nButtons = 0x48; // CInButtonState
            public const nint m_nQueuedButtonDownMask = 0x68; // uint64
            public const nint m_nQueuedButtonChangeMask = 0x70; // uint64
            public const nint m_nButtonDoublePressed = 0x78; // uint64
            public const nint m_pButtonPressedCmdNumber = 0x80; // uint32[64]
            public const nint m_nLastCommandNumberProcessed = 0x180; // uint32
            public const nint m_nToggleButtonDownMask = 0x188; // uint64
            public const nint m_flMaxspeed = 0x198; // float32
            public const nint m_arrForceSubtickMoveWhen = 0x19C; // float32[4]
            public const nint m_flForwardMove = 0x1AC; // float32
            public const nint m_flLeftMove = 0x1B0; // float32
            public const nint m_flUpMove = 0x1B4; // float32
            public const nint m_vecLastMovementImpulses = 0x1B8; // 
            public const nint m_vecOldViewAngles = 0x1C4; // QAngle
        }
        // Parent: CPlayer_MovementServices
        // Fields count: 14
        public static class CPlayer_MovementServices_Humanoid {
            public const nint m_flStepSoundTime = 0x1D8; // float32
            public const nint m_flFallVelocity = 0x1DC; // float32
            public const nint m_bInCrouch = 0x1E0; // bool
            public const nint m_nCrouchState = 0x1E4; // uint32
            public const nint m_flCrouchTransitionStartTime = 0x1E8; // GameTime_t
            public const nint m_bDucked = 0x1EC; // bool
            public const nint m_bDucking = 0x1ED; // bool
            public const nint m_bInDuckJump = 0x1EE; // bool
            public const nint m_groundNormal = 0x1F0; // 
            public const nint m_flSurfaceFriction = 0x1FC; // float32
            public const nint m_surfaceProps = 0x200; // CUtlStringToken
            public const nint m_nStepside = 0x210; // int32
            public const nint m_iTargetVolume = 0x214; // int32
            public const nint m_vecSmoothedVelocity = 0x218; // 
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 4
        public static class CPlayer_ObserverServices {
            public const nint m_iObserverMode = 0x40; // uint8
            public const nint m_hObserverTarget = 0x44; // CHandle<CBaseEntity>
            public const nint m_iObserverLastMode = 0x48; // ObserverMode_t
            public const nint m_bForcedObserverMode = 0x4C; // bool
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_UseServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_WaterServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 5
        public static class CPlayer_WeaponServices {
            public const nint m_hMyWeapons = 0x40; // CNetworkUtlVectorBase<CHandle<CBasePlayerWeapon>>
            public const nint m_hActiveWeapon = 0x58; // CHandle<CBasePlayerWeapon>
            public const nint m_hLastWeapon = 0x5C; // CHandle<CBasePlayerWeapon>
            public const nint m_iAmmo = 0x60; // uint16[32]
            public const nint m_bPreventWeaponPickup = 0xA0; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class AmmoTypeInfo_t {
            public const nint m_nMaxCarry = 0x10; // int32
            public const nint m_nSplashSize = 0x1C; // CRangeInt
            public const nint m_nFlags = 0x24; // AmmoFlags_t
            public const nint m_flMass = 0x28; // float32
            public const nint m_flSpeed = 0x2C; // CRangeFloat
        }
        // Parent: None
        // Fields count: 0
        public static class CAnimGraphControllerBase {
        }
        // Parent: CBodyComponentSkeletonInstance
        // Fields count: 2
        public static class CBodyComponentBaseAnimGraph {
            public const nint m_animationController = 0x460; // CBaseAnimGraphController
            public const nint __m_pChainEntity = 0x950; // CNetworkVarChainer
        }
        // Parent: None
        // Fields count: 2
        public static class EntityRenderAttribute_t {
            public const nint m_ID = 0x30; // CUtlStringToken
            public const nint m_Values = 0x34; // Vector4D
        }
        // Parent: None
        // Fields count: 1
        public static class ModelConfigHandle_t {
            public const nint m_Value = 0x0; // uint32
        }
        // Parent: None
        // Fields count: 4
        public static class ActiveModelConfig_t {
            public const nint m_Handle = 0x28; // ModelConfigHandle_t
            public const nint m_Name = 0x30; // CUtlSymbolLarge
            public const nint m_AssociatedEntities = 0x38; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
            public const nint m_AssociatedEntityNames = 0x50; // CNetworkUtlVectorBase<CUtlSymbolLarge>
        }
        // Parent: CBodyComponentSkeletonInstance
        // Fields count: 1
        public static class CBodyComponentBaseModelEntity {
            public const nint __m_pChainEntity = 0x460; // CNetworkVarChainer
        }
        // Parent: None
        // Fields count: 7
        public static class CNetworkOriginCellCoordQuantizedVector {
            public const nint m_cellX = 0x10; // uint16
            public const nint m_cellY = 0x12; // uint16
            public const nint m_cellZ = 0x14; // uint16
            public const nint m_nOutsideWorld = 0x16; // uint16
            public const nint m_vecX = 0x18; // CNetworkedQuantizedFloat
            public const nint m_vecY = 0x20; // CNetworkedQuantizedFloat
            public const nint m_vecZ = 0x28; // CNetworkedQuantizedFloat
        }
        // Parent: None
        // Fields count: 3
        public static class CNetworkOriginQuantizedVector {
            public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
            public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
            public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
        }
        // Parent: None
        // Fields count: 3
        public static class CNetworkVelocityVector {
            public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
            public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
            public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
        }
        // Parent: None
        // Fields count: 3
        public static class CNetworkViewOffsetVector {
            public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
            public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
            public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
        }
        // Parent: None
        // Fields count: 1
        public static class GameTime_t {
            public const nint m_Value = 0x0; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class GameTick_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class CRopeOverlapHit {
            public const nint m_hEntity = 0x0; // CHandle<CBaseEntity>
            public const nint m_vecOverlappingLinks = 0x8; // CUtlVector<int32>
        }
        // Parent: None
        // Fields count: 2
        public static class CGameSceneNodeHandle {
            public const nint m_hOwner = 0x8; // CEntityHandle
            public const nint m_name = 0xC; // CUtlStringToken
        }
        // Parent: None
        // Fields count: 32
        public static class CGameSceneNode {
            public const nint m_nodeToWorld = 0x10; // CTransform
            public const nint m_pOwner = 0x30; // CEntityInstance*
            public const nint m_pParent = 0x38; // CGameSceneNode*
            public const nint m_pChild = 0x40; // CGameSceneNode*
            public const nint m_pNextSibling = 0x48; // CGameSceneNode*
            public const nint m_hParent = 0x70; // CGameSceneNodeHandle
            public const nint m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
            public const nint m_angRotation = 0xB8; // QAngle
            public const nint m_flScale = 0xC4; // float32
            public const nint m_vecAbsOrigin = 0xC8; // 
            public const nint m_angAbsRotation = 0xD4; // QAngle
            public const nint m_flAbsScale = 0xE0; // float32
            public const nint m_nParentAttachmentOrBone = 0xE4; // int16
            public const nint m_bDebugAbsOriginChanges = 0xE6; // bool
            public const nint m_bDormant = 0xE7; // bool
            public const nint m_bForceParentToBeNetworked = 0xE8; // bool
            public const nint m_bDirtyHierarchy = 0x0; // bitfield:1
            public const nint m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
            public const nint m_bNetworkedPositionChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedAnglesChanged = 0x0; // bitfield:1
            public const nint m_bNetworkedScaleChanged = 0x0; // bitfield:1
            public const nint m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
            public const nint m_bBoneMergeFlex = 0x0; // bitfield:1
            public const nint m_nLatchAbsOrigin = 0x0; // bitfield:2
            public const nint m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
            public const nint m_nHierarchicalDepth = 0xEB; // uint8
            public const nint m_nHierarchyType = 0xEC; // uint8
            public const nint m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xED; // uint8
            public const nint m_name = 0xF0; // CUtlStringToken
            public const nint m_hierarchyAttachName = 0x130; // CUtlStringToken
            public const nint m_flZOffset = 0x134; // float32
            public const nint m_vRenderOrigin = 0x138; // 
        }
        // Parent: None
        // Fields count: 0
        public static class IChoreoServices {
        }
        // Parent: None
        // Fields count: 1
        public static class CInButtonState {
            public const nint m_pButtonStates = 0x8; // uint64[3]
        }
        // Parent: None
        // Fields count: 6
        public static class SequenceHistory_t {
            public const nint m_hSequence = 0x0; // HSequence
            public const nint m_flSeqStartTime = 0x4; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x8; // float32
            public const nint m_nSeqLoopMode = 0xC; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x10; // float32
            public const nint m_flCyclesPerSecond = 0x14; // float32
        }
        // Parent: None
        // Fields count: 0
        public static class ISkeletonAnimationController {
        }
        // Parent: ISkeletonAnimationController
        // Fields count: 1
        public static class CSkeletonAnimationController {
            public const nint m_pSkeletonInstance = 0x8; // CSkeletonInstance*
        }
        // Parent: None
        // Fields count: 8
        public static class CNetworkedSequenceOperation {
            public const nint m_hSequence = 0x8; // HSequence
            public const nint m_flPrevCycle = 0xC; // float32
            public const nint m_flCycle = 0x10; // float32
            public const nint m_flWeight = 0x14; // CNetworkedQuantizedFloat
            public const nint m_bSequenceChangeNetworked = 0x1C; // bool
            public const nint m_bDiscontinuity = 0x1D; // bool
            public const nint m_flPrevCycleFromDiscontinuity = 0x20; // float32
            public const nint m_flPrevCycleForAnimEventDetection = 0x24; // float32
        }
        // Parent: None
        // Fields count: 7
        public static class CModelState {
            public const nint m_hModel = 0xA0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_ModelName = 0xA8; // CUtlSymbolLarge
            public const nint m_bClientClothCreationSuppressed = 0xE8; // bool
            public const nint m_MeshGroupMask = 0x180; // uint64
            public const nint m_nIdealMotionType = 0x202; // int8
            public const nint m_nForceLOD = 0x203; // int8
            public const nint m_nClothUpdateFlags = 0x204; // int8
        }
        // Parent: CGameSceneNode
        // Fields count: 8
        public static class CSkeletonInstance {
            public const nint m_modelState = 0x160; // CModelState
            public const nint m_bIsAnimationEnabled = 0x370; // bool
            public const nint m_bUseParentRenderBounds = 0x371; // bool
            public const nint m_bDisableSolidCollisionsForHierarchy = 0x372; // bool
            public const nint m_bDirtyMotionType = 0x0; // bitfield:1
            public const nint m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
            public const nint m_materialGroup = 0x374; // CUtlStringToken
            public const nint m_nHitboxSet = 0x378; // uint8
        }
        // Parent: None
        // Fields count: 2
        public static class IntervalTimer {
            public const nint m_timestamp = 0x8; // GameTime_t
            public const nint m_nWorldGroupId = 0xC; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 4
        public static class CountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // GameTime_t
            public const nint m_timescale = 0x10; // float32
            public const nint m_nWorldGroupId = 0x14; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 3
        public static class EngineCountdownTimer {
            public const nint m_duration = 0x8; // float32
            public const nint m_timestamp = 0xC; // float32
            public const nint m_timescale = 0x10; // float32
        }
        // Parent: IntervalTimer
        // Fields count: 7
        public static class CTimeline {
            public const nint m_flValues = 0x10; // float32[64]
            public const nint m_nValueCounts = 0x110; // int32[64]
            public const nint m_nBucketCount = 0x210; // int32
            public const nint m_flInterval = 0x214; // float32
            public const nint m_flFinalValue = 0x218; // float32
            public const nint m_nCompressionType = 0x21C; // TimelineCompression_t
            public const nint m_bStopped = 0x220; // bool
        }
        // Parent: None
        // Fields count: 24
        public static class CAnimGraphNetworkedVariables {
            public const nint m_PredNetBoolVariables = 0x8; // CNetworkUtlVectorBase<uint32>
            public const nint m_PredNetByteVariables = 0x20; // CNetworkUtlVectorBase<uint8>
            public const nint m_PredNetUInt16Variables = 0x38; // CNetworkUtlVectorBase<uint16>
            public const nint m_PredNetIntVariables = 0x50; // CNetworkUtlVectorBase<int32>
            public const nint m_PredNetUInt32Variables = 0x68; // CNetworkUtlVectorBase<uint32>
            public const nint m_PredNetUInt64Variables = 0x80; // CNetworkUtlVectorBase<uint64>
            public const nint m_PredNetFloatVariables = 0x98; // CNetworkUtlVectorBase<float32>
            public const nint m_PredNetVectorVariables = 0xB0; // CNetworkUtlVectorBase<Vector>
            public const nint m_PredNetQuaternionVariables = 0xC8; // CNetworkUtlVectorBase<Quaternion>
            public const nint m_PredNetGlobalSymbolVariables = 0xE0; // CNetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_OwnerOnlyPredNetBoolVariables = 0xF8; // CNetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetByteVariables = 0x110; // CNetworkUtlVectorBase<uint8>
            public const nint m_OwnerOnlyPredNetUInt16Variables = 0x128; // CNetworkUtlVectorBase<uint16>
            public const nint m_OwnerOnlyPredNetIntVariables = 0x140; // CNetworkUtlVectorBase<int32>
            public const nint m_OwnerOnlyPredNetUInt32Variables = 0x158; // CNetworkUtlVectorBase<uint32>
            public const nint m_OwnerOnlyPredNetUInt64Variables = 0x170; // CNetworkUtlVectorBase<uint64>
            public const nint m_OwnerOnlyPredNetFloatVariables = 0x188; // CNetworkUtlVectorBase<float32>
            public const nint m_OwnerOnlyPredNetVectorVariables = 0x1A0; // CNetworkUtlVectorBase<Vector>
            public const nint m_OwnerOnlyPredNetQuaternionVariables = 0x1B8; // CNetworkUtlVectorBase<Quaternion>
            public const nint m_OwnerOnlyPredNetGlobalSymbolVariables = 0x1D0; // CNetworkUtlVectorBase<CGlobalSymbol>
            public const nint m_nBoolVariablesCount = 0x1E8; // int32
            public const nint m_nOwnerOnlyBoolVariablesCount = 0x1EC; // int32
            public const nint m_nRandomSeedOffset = 0x1F0; // int32
            public const nint m_flLastTeleportTime = 0x1F4; // float32
        }
        // Parent: None
        // Fields count: 0
        public static class CFootstepTableHandle {
        }
        // Parent: None
        // Fields count: 8
        public static class ResponseFollowup {
            public const nint followup_concept = 0x0; // char*
            public const nint followup_contexts = 0x8; // char*
            public const nint followup_delay = 0x10; // float32
            public const nint followup_target = 0x14; // char*
            public const nint followup_entityiotarget = 0x1C; // char*
            public const nint followup_entityioinput = 0x24; // char*
            public const nint followup_entityiodelay = 0x2C; // float32
            public const nint bFired = 0x30; // bool
        }
        // Parent: None
        // Fields count: 3
        public static class ResponseParams {
            public const nint odds = 0x10; // int16
            public const nint flags = 0x12; // int16
            public const nint m_pFollowup = 0x18; // ResponseFollowup*
        }
        // Parent: None
        // Fields count: 2
        public static class CResponseCriteriaSet {
            public const nint m_nNumPrefixedContexts = 0x28; // int32
            public const nint m_bOverrideOnAppend = 0x2C; // bool
        }
        // Parent: None
        // Fields count: 10
        public static class CRR_Response {
            public const nint m_Type = 0x0; // uint8
            public const nint m_szResponseName = 0x1; // char[192]
            public const nint m_szMatchingRule = 0xC1; // char[128]
            public const nint m_Params = 0x148; // ResponseParams
            public const nint m_fMatchScore = 0x168; // float32
            public const nint m_szSpeakerContext = 0x170; // char*
            public const nint m_szWorldContext = 0x178; // char*
            public const nint m_Followup = 0x180; // ResponseFollowup
            public const nint m_pchCriteriaNames = 0x1B8; // CUtlVector<CUtlSymbol>
            public const nint m_pchCriteriaValues = 0x1D0; // CUtlVector<char*>
        }
        // Parent: None
        // Fields count: 2
        public static class ConceptHistory_t {
            public const nint timeSpoken = 0x0; // float32
            public const nint m_response = 0x8; // CRR_Response
        }
        // Parent: None
        // Fields count: 9
        public static class CAI_Expresser {
            public const nint m_flStopTalkTime = 0x38; // GameTime_t
            public const nint m_flStopTalkTimeWithoutDelay = 0x3C; // GameTime_t
            public const nint m_flBlockedTalkTime = 0x40; // GameTime_t
            public const nint m_voicePitch = 0x44; // int32
            public const nint m_flLastTimeAcceptedSpeak = 0x48; // GameTime_t
            public const nint m_bAllowSpeakingInterrupts = 0x4C; // bool
            public const nint m_bConsiderSceneInvolvementAsSpeech = 0x4D; // bool
            public const nint m_nLastSpokenPriority = 0x50; // int32
            public const nint m_pOuter = 0x58; // CBaseFlex*
        }
        // Parent: None
        // Fields count: 1
        public static class CResponseQueue {
            public const nint m_ExpresserTargets = 0x48; // CUtlVector<CAI_Expresser*>
        }
        // Parent: None
        // Fields count: 5
        public static class CResponseQueue__CDeferredResponse {
            public const nint m_contexts = 0x8; // CResponseCriteriaSet
            public const nint m_fDispatchTime = 0x38; // float32
            public const nint m_hIssuer = 0x3C; // CHandle<CBaseEntity>
            public const nint m_response = 0x48; // CRR_Response
            public const nint m_bResponseValid = 0x230; // bool
        }
        // Parent: CAI_Expresser
        // Fields count: 1
        public static class CAI_ExpresserWithFollowup {
            public const nint m_pPostponedFollowup = 0x60; // ResponseFollowup*
        }
        // Parent: CAI_ExpresserWithFollowup
        // Fields count: 1
        public static class CMultiplayer_Expresser {
            public const nint m_bAllowMultipleScenes = 0x70; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CBaseEntityAPI {
        }
        // Parent: None
        // Fields count: 10
        public static class CCommentarySystem {
            public const nint m_bCommentaryConvarsChanging = 0x11; // bool
            public const nint m_bCommentaryEnabledMidGame = 0x12; // bool
            public const nint m_flNextTeleportTime = 0x14; // GameTime_t
            public const nint m_iTeleportStage = 0x18; // int32
            public const nint m_bCheatState = 0x1C; // bool
            public const nint m_bIsFirstSpawnGroupToLoad = 0x1D; // bool
            public const nint m_hCurrentNode = 0x38; // CHandle<CPointCommentaryNode>
            public const nint m_hActiveCommentaryNode = 0x3C; // CHandle<CPointCommentaryNode>
            public const nint m_hLastCommentaryNode = 0x40; // CHandle<CPointCommentaryNode>
            public const nint m_vecNodes = 0x48; // CUtlVector<CHandle<CPointCommentaryNode>>
        }
        // Parent: None
        // Fields count: 1
        public static class CPhysicsShake {
            public const nint m_force = 0x8; // 
        }
        // Parent: None
        // Fields count: 16
        public static class CGameScriptedMoveData {
            public const nint m_vAccumulatedRootMotion = 0x0; // 
            public const nint m_vDest = 0xC; // 
            public const nint m_vSrc = 0x18; // 
            public const nint m_angSrc = 0x24; // QAngle
            public const nint m_angDst = 0x30; // QAngle
            public const nint m_angCurrent = 0x3C; // QAngle
            public const nint m_flAngRate = 0x48; // float32
            public const nint m_flDuration = 0x4C; // float32
            public const nint m_flStartTime = 0x50; // GameTime_t
            public const nint m_bActive = 0x54; // bool
            public const nint m_bTeleportOnEnd = 0x55; // bool
            public const nint m_bIgnoreRotation = 0x56; // bool
            public const nint m_nType = 0x58; // ScriptedMoveType_t
            public const nint m_bSuccess = 0x5C; // bool
            public const nint m_nForcedCrouchState = 0x60; // ForcedCrouchState_t
            public const nint m_bIgnoreCollisions = 0x64; // bool
        }
        // Parent: IChoreoServices
        // Fields count: 5
        public static class CGameChoreoServices {
            public const nint m_hOwner = 0x8; // CHandle<CBaseAnimGraph>
            public const nint m_hScriptedSequence = 0xC; // CHandle<CScriptedSequence>
            public const nint m_scriptState = 0x10; // IChoreoServices::ScriptState_t
            public const nint m_choreoState = 0x14; // IChoreoServices::ChoreoState_t
            public const nint m_flTimeStartedState = 0x18; // GameTime_t
        }
        // Parent: None
        // Fields count: 10
        public static class HullFlags_t {
            public const nint m_bHull_Human = 0x0; // bool
            public const nint m_bHull_SmallCentered = 0x1; // bool
            public const nint m_bHull_WideHuman = 0x2; // bool
            public const nint m_bHull_Tiny = 0x3; // bool
            public const nint m_bHull_Medium = 0x4; // bool
            public const nint m_bHull_TinyCentered = 0x5; // bool
            public const nint m_bHull_Large = 0x6; // bool
            public const nint m_bHull_LargeCentered = 0x7; // bool
            public const nint m_bHull_MediumTall = 0x8; // bool
            public const nint m_bHull_Small = 0x9; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class CConstantForceController {
            public const nint m_linear = 0xC; // 
            public const nint m_angular = 0x18; // RotationVector
            public const nint m_linearSave = 0x24; // 
            public const nint m_angularSave = 0x30; // RotationVector
        }
        // Parent: None
        // Fields count: 4
        public static class CMotorController {
            public const nint m_speed = 0x8; // float32
            public const nint m_maxTorque = 0xC; // float32
            public const nint m_axis = 0x10; // 
            public const nint m_inertiaFactor = 0x1C; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class CSoundEnvelope {
            public const nint m_current = 0x0; // float32
            public const nint m_target = 0x4; // float32
            public const nint m_rate = 0x8; // float32
            public const nint m_forceupdate = 0xC; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CCopyRecipientFilter {
            public const nint m_Flags = 0x8; // int32
            public const nint m_Recipients = 0x10; // CUtlVector<CPlayerSlot>
        }
        // Parent: None
        // Fields count: 13
        public static class CSoundPatch {
            public const nint m_pitch = 0x8; // CSoundEnvelope
            public const nint m_volume = 0x18; // CSoundEnvelope
            public const nint m_shutdownTime = 0x30; // float32
            public const nint m_flLastTime = 0x34; // float32
            public const nint m_iszSoundScriptName = 0x38; // CUtlSymbolLarge
            public const nint m_hEnt = 0x40; // CHandle<CBaseEntity>
            public const nint m_soundEntityIndex = 0x44; // CEntityIndex
            public const nint m_soundOrigin = 0x48; // 
            public const nint m_isPlaying = 0x54; // int32
            public const nint m_Filter = 0x58; // CCopyRecipientFilter
            public const nint m_flCloseCaptionDuration = 0x80; // float32
            public const nint m_bUpdatedSoundOrigin = 0x84; // bool
            public const nint m_iszClassName = 0x88; // CUtlSymbolLarge
        }
        // Parent: None
        // Fields count: 0
        public static class CTakeDamageInfoAPI {
        }
        // Parent: CPulseExecCursor
        // Fields count: 0
        public static class CPulseServerCursor {
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 1
        public static class CPulseGraphInstance_ServerEntity {
            public const nint m_pComponent = 0xD8; // CPulseGraphComponentBase*
        }
        // Parent: CPulseGraphInstance_ServerEntity
        // Fields count: 0
        public static class CPulseGraphInstance_ServerPointEntity {
        }
        // Parent: None
        // Fields count: 4
        public static class CPulseGraphComponentBase {
            public const nint m_hOwner = 0x8; // CHandle<CBaseEntity>
            public const nint m_sNameFixupStaticPrefix = 0x10; // CUtlSymbolLarge
            public const nint m_sNameFixupParent = 0x18; // CUtlSymbolLarge
            public const nint m_sNameFixupLocal = 0x20; // CUtlSymbolLarge
        }
        // Parent: CPulseGraphComponentBase
        // Fields count: 0
        public static class CPulseGraphComponentPointServer {
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 1
        public static class CPulseCell_Value_FindEntByClassNameWithin {
            public const nint m_EntityType = 0x48; // CUtlString
        }
        // Parent: CPulseCell_BaseValue
        // Fields count: 1
        public static class CPulseCell_Value_FindEntByName {
            public const nint m_EntityType = 0x48; // CUtlString
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 2
        public static class CPulseCell_Step_FollowEntity {
            public const nint m_ParamBoneOrAttachName = 0x48; // CUtlString
            public const nint m_ParamBoneOrAttachNameChild = 0x50; // CUtlString
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_Step_EntFire {
            public const nint m_Input = 0x48; // CUtlString
        }
        // Parent: CPulseCell_Inflow_BaseEntrypoint
        // Fields count: 1
        public static class CPulseCell_Inflow_GameEvent {
            public const nint m_EventName = 0x70; // CBufferString
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseServerFuncs {
        }
        // Parent: CPulseCell_BaseFlow
        // Fields count: 1
        public static class CPulseCell_SoundEventStart {
            public const nint m_Type = 0x48; // SoundEventStartType_t
        }
        // Parent: None
        // Fields count: 0
        public static class CPulseServerFuncs_Sounds {
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 3
        public static class CPulseCell_Outflow_PlaySceneBase {
            public const nint m_OnFinished = 0x48; // CPulse_ResumePoint
            public const nint m_OnCanceled = 0x58; // CPulse_ResumePoint
            public const nint m_Triggers = 0x68; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Fields count: 1
        public static class CPulseCell_Outflow_PlaySceneBase__CursorState_t {
            public const nint m_sceneInstance = 0x0; // CHandle<CBaseEntity>
        }
        // Parent: CPulseCell_Outflow_PlaySceneBase
        // Fields count: 1
        public static class CPulseCell_Outflow_PlayVCD {
            public const nint m_vcdFilename = 0x80; // CUtlString
        }
        // Parent: CPulseCell_Outflow_PlaySceneBase
        // Fields count: 1
        public static class CPulseCell_Outflow_PlaySequence {
            public const nint m_ParamSequenceName = 0x80; // CUtlString
        }
        // Parent: None
        // Fields count: 9
        public static class PulseScriptedSequenceData_t {
            public const nint m_nActorID = 0x0; // int32
            public const nint m_szPreIdleSequence = 0x8; // CUtlString
            public const nint m_szEntrySequence = 0x10; // CUtlString
            public const nint m_szSequence = 0x18; // CUtlString
            public const nint m_szExitSequence = 0x20; // CUtlString
            public const nint m_bLoopPreIdleSequence = 0x28; // bool
            public const nint m_bLoopActionSequence = 0x29; // bool
            public const nint m_bLoopPostIdleSequence = 0x2A; // bool
            public const nint m_bIgnoreLookAt = 0x2B; // bool
        }
        // Parent: CPulseCell_BaseYieldingInflow
        // Fields count: 5
        public static class CPulseCell_Outflow_ScriptedSequence {
            public const nint m_scriptedSequenceDataMain = 0x48; // PulseScriptedSequenceData_t
            public const nint m_vecAdditionalActors = 0x78; // CUtlVector<PulseScriptedSequenceData_t>
            public const nint m_OnFinished = 0x90; // CPulse_ResumePoint
            public const nint m_OnCanceled = 0xA0; // CPulse_ResumePoint
            public const nint m_Triggers = 0xB0; // CUtlVector<CPulse_OutflowConnection>
        }
        // Parent: None
        // Fields count: 1
        public static class CPulseCell_Outflow_ScriptedSequence__CursorState_t {
            public const nint m_scriptedSequence = 0x0; // CHandle<CBaseEntity>
        }
        // Parent: CEntityComponent
        // Fields count: 0
        public static class CTouchExpansionComponent {
        }
        // Parent: None
        // Fields count: 25
        public static class dynpitchvol_base_t {
            public const nint preset = 0x0; // int32
            public const nint pitchrun = 0x4; // int32
            public const nint pitchstart = 0x8; // int32
            public const nint spinup = 0xC; // int32
            public const nint spindown = 0x10; // int32
            public const nint volrun = 0x14; // int32
            public const nint volstart = 0x18; // int32
            public const nint fadein = 0x1C; // int32
            public const nint fadeout = 0x20; // int32
            public const nint lfotype = 0x24; // int32
            public const nint lforate = 0x28; // int32
            public const nint lfomodpitch = 0x2C; // int32
            public const nint lfomodvol = 0x30; // int32
            public const nint cspinup = 0x34; // int32
            public const nint cspincount = 0x38; // int32
            public const nint pitch = 0x3C; // int32
            public const nint spinupsav = 0x40; // int32
            public const nint spindownsav = 0x44; // int32
            public const nint pitchfrac = 0x48; // int32
            public const nint vol = 0x4C; // int32
            public const nint fadeinsav = 0x50; // int32
            public const nint fadeoutsav = 0x54; // int32
            public const nint volfrac = 0x58; // int32
            public const nint lfofrac = 0x5C; // int32
            public const nint lfomult = 0x60; // int32
        }
        // Parent: dynpitchvol_base_t
        // Fields count: 0
        public static class dynpitchvol_t {
        }
        // Parent: None
        // Fields count: 3
        public static class ResponseContext_t {
            public const nint m_iszName = 0x0; // CUtlSymbolLarge
            public const nint m_iszValue = 0x8; // CUtlSymbolLarge
            public const nint m_fExpirationTime = 0x10; // GameTime_t
        }
        // Parent: None
        // Fields count: 2
        public static class Relationship_t {
            public const nint disposition = 0x0; // Disposition_t
            public const nint priority = 0x4; // int32
        }
        // Parent: CEntityInstance
        // Fields count: 75
        public static class CBaseEntity {
            public const nint m_CBodyComponent = 0x38; // CBodyComponent*
            public const nint m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
            public const nint m_aThinkFunctions = 0x230; // CUtlVector<thinkfunc_t>
            public const nint m_iCurrentThinkContext = 0x248; // int32
            public const nint m_nLastThinkTick = 0x24C; // GameTick_t
            public const nint m_nDisableContextThinkStartTick = 0x250; // GameTick_t
            public const nint m_isSteadyState = 0x260; // CBitVec<64>
            public const nint m_lastNetworkChange = 0x268; // float32
            public const nint m_ResponseContexts = 0x278; // CUtlVector<ResponseContext_t>
            public const nint m_iszResponseContext = 0x290; // CUtlSymbolLarge
            public const nint m_iHealth = 0x2B8; // int32
            public const nint m_iMaxHealth = 0x2BC; // int32
            public const nint m_lifeState = 0x2C0; // uint8
            public const nint m_flDamageAccumulator = 0x2C4; // float32
            public const nint m_bTakesDamage = 0x2C8; // bool
            public const nint m_nTakeDamageFlags = 0x2CC; // TakeDamageFlags_t
            public const nint m_bIsPlatform = 0x2D0; // bool
            public const nint m_MoveCollide = 0x2D2; // MoveCollide_t
            public const nint m_MoveType = 0x2D3; // MoveType_t
            public const nint m_nActualMoveType = 0x2D4; // MoveType_t
            public const nint m_nWaterTouch = 0x2D5; // uint8
            public const nint m_nSlimeTouch = 0x2D6; // uint8
            public const nint m_bRestoreInHierarchy = 0x2D7; // bool
            public const nint m_target = 0x2D8; // CUtlSymbolLarge
            public const nint m_hDamageFilter = 0x2E0; // CHandle<CBaseFilter>
            public const nint m_iszDamageFilterName = 0x2E8; // CUtlSymbolLarge
            public const nint m_flMoveDoneTime = 0x2F0; // float32
            public const nint m_nSubclassID = 0x2F4; // CUtlStringToken
            public const nint m_flAnimTime = 0x300; // float32
            public const nint m_flSimulationTime = 0x304; // float32
            public const nint m_flCreateTime = 0x308; // GameTime_t
            public const nint m_bClientSideRagdoll = 0x30C; // bool
            public const nint m_ubInterpolationFrame = 0x30D; // uint8
            public const nint m_vPrevVPhysicsUpdatePos = 0x310; // 
            public const nint m_iTeamNum = 0x31C; // uint8
            public const nint m_iGlobalname = 0x320; // CUtlSymbolLarge
            public const nint m_iSentToClients = 0x328; // int32
            public const nint m_flSpeed = 0x32C; // float32
            public const nint m_sUniqueHammerID = 0x330; // CUtlString
            public const nint m_spawnflags = 0x338; // uint32
            public const nint m_nNextThinkTick = 0x33C; // GameTick_t
            public const nint m_nSimulationTick = 0x340; // int32
            public const nint m_OnKilled = 0x348; // CEntityIOOutput
            public const nint m_fFlags = 0x370; // uint32
            public const nint m_vecAbsVelocity = 0x374; // 
            public const nint m_vecVelocity = 0x380; // CNetworkVelocityVector
            public const nint m_vecBaseVelocity = 0x3B0; // 
            public const nint m_nPushEnumCount = 0x3BC; // int32
            public const nint m_pCollision = 0x3C0; // CCollisionProperty*
            public const nint m_hEffectEntity = 0x3C8; // CHandle<CBaseEntity>
            public const nint m_hOwnerEntity = 0x3CC; // CHandle<CBaseEntity>
            public const nint m_fEffects = 0x3D0; // uint32
            public const nint m_hGroundEntity = 0x3D4; // CHandle<CBaseEntity>
            public const nint m_flFriction = 0x3D8; // float32
            public const nint m_flElasticity = 0x3DC; // float32
            public const nint m_flGravityScale = 0x3E0; // float32
            public const nint m_flTimeScale = 0x3E4; // float32
            public const nint m_flWaterLevel = 0x3E8; // float32
            public const nint m_bAnimatedEveryTick = 0x3EC; // bool
            public const nint m_bDisableLowViolence = 0x3ED; // bool
            public const nint m_nWaterType = 0x3EE; // uint8
            public const nint m_iEFlags = 0x3F0; // int32
            public const nint m_OnUser1 = 0x3F8; // CEntityIOOutput
            public const nint m_OnUser2 = 0x420; // CEntityIOOutput
            public const nint m_OnUser3 = 0x448; // CEntityIOOutput
            public const nint m_OnUser4 = 0x470; // CEntityIOOutput
            public const nint m_iInitialTeamNum = 0x498; // int32
            public const nint m_flNavIgnoreUntilTime = 0x49C; // GameTime_t
            public const nint m_vecAngVelocity = 0x4A0; // QAngle
            public const nint m_bNetworkQuantizeOriginAndAngles = 0x4AC; // bool
            public const nint m_bLagCompensate = 0x4AD; // bool
            public const nint m_flOverriddenFriction = 0x4B0; // float32
            public const nint m_pBlocker = 0x4B4; // CHandle<CBaseEntity>
            public const nint m_flLocalTime = 0x4B8; // float32
            public const nint m_flVPhysicsUpdateLocalTime = 0x4BC; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CServerOnlyEntity {
        }
        // Parent: CServerOnlyEntity
        // Fields count: 0
        public static class CServerOnlyPointEntity {
        }
        // Parent: CServerOnlyEntity
        // Fields count: 0
        public static class CLogicalEntity {
        }
        // Parent: CBaseEntity
        // Fields count: 17
        public static class CColorCorrection {
            public const nint m_flFadeInDuration = 0x4C0; // float32
            public const nint m_flFadeOutDuration = 0x4C4; // float32
            public const nint m_flStartFadeInWeight = 0x4C8; // float32
            public const nint m_flStartFadeOutWeight = 0x4CC; // float32
            public const nint m_flTimeStartFadeIn = 0x4D0; // GameTime_t
            public const nint m_flTimeStartFadeOut = 0x4D4; // GameTime_t
            public const nint m_flMaxWeight = 0x4D8; // float32
            public const nint m_bStartDisabled = 0x4DC; // bool
            public const nint m_bEnabled = 0x4DD; // bool
            public const nint m_bMaster = 0x4DE; // bool
            public const nint m_bClientSide = 0x4DF; // bool
            public const nint m_bExclusive = 0x4E0; // bool
            public const nint m_MinFalloff = 0x4E4; // float32
            public const nint m_MaxFalloff = 0x4E8; // float32
            public const nint m_flCurWeight = 0x4EC; // float32
            public const nint m_netlookupFilename = 0x4F0; // char[512]
            public const nint m_lookupFilename = 0x6F0; // CUtlSymbolLarge
        }
        // Parent: CBaseEntity
        // Fields count: 11
        public static class CEntityFlame {
            public const nint m_hEntAttached = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_bCheapEffect = 0x4C4; // bool
            public const nint m_flSize = 0x4C8; // float32
            public const nint m_bUseHitboxes = 0x4CC; // bool
            public const nint m_iNumHitboxFires = 0x4D0; // int32
            public const nint m_flHitboxFireScale = 0x4D4; // float32
            public const nint m_flLifetime = 0x4D8; // GameTime_t
            public const nint m_hAttacker = 0x4DC; // CHandle<CBaseEntity>
            public const nint m_iDangerSound = 0x4E0; // int32
            public const nint m_flDirectDamagePerSecond = 0x4E4; // float32
            public const nint m_iCustomDamageType = 0x4E8; // int32
        }
        // Parent: CLogicalEntity
        // Fields count: 3
        public static class CBaseFilter {
            public const nint m_bNegated = 0x4C0; // bool
            public const nint m_OnPass = 0x4C8; // CEntityIOOutput
            public const nint m_OnFail = 0x4F0; // CEntityIOOutput
        }
        // Parent: CBaseFilter
        // Fields count: 4
        public static class CFilterMultiple {
            public const nint m_nFilterType = 0x518; // filter_t
            public const nint m_iFilterName = 0x520; // CUtlSymbolLarge[10]
            public const nint m_hFilter = 0x570; // CHandle<CBaseEntity>[10]
            public const nint m_nFilterCount = 0x598; // int32
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterProximity {
            public const nint m_flRadius = 0x518; // float32
        }
        // Parent: CBaseFilter
        // Fields count: 0
        public static class CFilterLOS {
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterClass {
            public const nint m_iFilterClass = 0x518; // CUtlSymbolLarge
        }
        // Parent: CBaseEntity
        // Fields count: 4
        public static class CBaseFire {
            public const nint m_flScale = 0x4C0; // float32
            public const nint m_flStartScale = 0x4C4; // float32
            public const nint m_flScaleTime = 0x4C8; // float32
            public const nint m_nFlags = 0x4CC; // uint32
        }
        // Parent: CBaseFire
        // Fields count: 2
        public static class CFireSmoke {
            public const nint m_nFlameModelIndex = 0x4D0; // int32
            public const nint m_nFlameFromAboveModelIndex = 0x4D4; // int32
        }
        // Parent: CBaseEntity
        // Fields count: 7
        public static class CFishPool {
            public const nint m_fishCount = 0x4D0; // int32
            public const nint m_maxRange = 0x4D4; // float32
            public const nint m_swimDepth = 0x4D8; // float32
            public const nint m_waterLevel = 0x4DC; // float32
            public const nint m_isDormant = 0x4E0; // bool
            public const nint m_fishes = 0x4E8; // CUtlVector<CHandle<CFish>>
            public const nint m_visTimer = 0x500; // CountdownTimer
        }
        // Parent: CServerOnlyEntity
        // Fields count: 0
        public static class CInfoData {
        }
        // Parent: None
        // Fields count: 3
        public static class locksound_t {
            public const nint sLockedSound = 0x8; // CUtlSymbolLarge
            public const nint sUnlockedSound = 0x10; // CUtlSymbolLarge
            public const nint flwaitSound = 0x18; // GameTime_t
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CLogicBranch {
            public const nint m_bInValue = 0x4C0; // bool
            public const nint m_Listeners = 0x4C8; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_OnTrue = 0x4E0; // CEntityIOOutput
            public const nint m_OnFalse = 0x508; // CEntityIOOutput
        }
        // Parent: CLogicalEntity
        // Fields count: 7
        public static class CLogicDistanceCheck {
            public const nint m_iszEntityA = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszEntityB = 0x4C8; // CUtlSymbolLarge
            public const nint m_flZone1Distance = 0x4D0; // float32
            public const nint m_flZone2Distance = 0x4D4; // float32
            public const nint m_InZone1 = 0x4D8; // CEntityIOOutput
            public const nint m_InZone2 = 0x500; // CEntityIOOutput
            public const nint m_InZone3 = 0x528; // CEntityIOOutput
        }
        // Parent: None
        // Fields count: 3
        public static class VelocitySampler {
            public const nint m_prevSample = 0x0; // 
            public const nint m_fPrevSampleTime = 0xC; // GameTime_t
            public const nint m_fIdealSampleRate = 0x10; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class SimpleConstraintSoundProfile {
            public const nint eKeypoints = 0x8; // SimpleConstraintSoundProfile::SimpleConstraintsSoundProfileKeypoints_t
            public const nint m_keyPoints = 0xC; // float32[2]
            public const nint m_reversalSoundThresholds = 0x14; // float32[3]
        }
        // Parent: None
        // Fields count: 8
        public static class ConstraintSoundInfo {
            public const nint m_vSampler = 0x8; // VelocitySampler
            public const nint m_soundProfile = 0x20; // SimpleConstraintSoundProfile
            public const nint m_forwardAxis = 0x40; // 
            public const nint m_iszTravelSoundFwd = 0x50; // CUtlSymbolLarge
            public const nint m_iszTravelSoundBack = 0x58; // CUtlSymbolLarge
            public const nint m_iszReversalSounds = 0x68; // CUtlSymbolLarge[3]
            public const nint m_bPlayTravelSound = 0x80; // bool
            public const nint m_bPlayReversalSound = 0x81; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class CSmoothFunc {
            public const nint m_flSmoothAmplitude = 0x8; // float32
            public const nint m_flSmoothBias = 0xC; // float32
            public const nint m_flSmoothDuration = 0x10; // float32
            public const nint m_flSmoothRemainingTime = 0x14; // float32
            public const nint m_nSmoothDir = 0x18; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class magnetted_objects_t {
            public const nint hEntity = 0x8; // CHandle<CBaseEntity>
        }
        // Parent: CServerOnlyPointEntity
        // Fields count: 6
        public static class CPointPrefab {
            public const nint m_targetMapName = 0x4C0; // CUtlSymbolLarge
            public const nint m_forceWorldGroupID = 0x4C8; // CUtlSymbolLarge
            public const nint m_associatedRelayTargetName = 0x4D0; // CUtlSymbolLarge
            public const nint m_fixupNames = 0x4D8; // bool
            public const nint m_bLoadDynamic = 0x4D9; // bool
            public const nint m_associatedRelayEntity = 0x4DC; // CHandle<CPointPrefab>
        }
        // Parent: CBaseEntity
        // Fields count: 2
        public static class CSkyboxReference {
            public const nint m_worldGroupId = 0x4C0; // WorldGroupId_t
            public const nint m_hSkyCamera = 0x4C4; // CHandle<CSkyCamera>
        }
        // Parent: CBaseEntity
        // Fields count: 4
        public static class CSkyCamera {
            public const nint m_skyboxData = 0x4C0; // sky3dparams_t
            public const nint m_skyboxSlotToken = 0x550; // CUtlStringToken
            public const nint m_bUseAngles = 0x554; // bool
            public const nint m_pNext = 0x558; // CSkyCamera*
        }
        // Parent: None
        // Fields count: 12
        public static class CSound {
            public const nint m_hOwner = 0x0; // CHandle<CBaseEntity>
            public const nint m_hTarget = 0x4; // CHandle<CBaseEntity>
            public const nint m_iVolume = 0x8; // int32
            public const nint m_flOcclusionScale = 0xC; // float32
            public const nint m_iType = 0x10; // int32
            public const nint m_iNextAudible = 0x14; // int32
            public const nint m_flExpireTime = 0x18; // GameTime_t
            public const nint m_iNext = 0x1C; // int16
            public const nint m_bNoExpirationTime = 0x1E; // bool
            public const nint m_ownerChannelIndex = 0x20; // int32
            public const nint m_vecOrigin = 0x24; // 
            public const nint m_bHasOwner = 0x30; // bool
        }
        // Parent: CServerOnlyEntity
        // Fields count: 11
        public static class CEnvSoundscape {
            public const nint m_OnPlay = 0x4C0; // CEntityIOOutput
            public const nint m_flRadius = 0x4E8; // float32
            public const nint m_soundscapeName = 0x4F0; // CUtlSymbolLarge
            public const nint m_soundEventName = 0x4F8; // CUtlSymbolLarge
            public const nint m_bOverrideWithEvent = 0x500; // bool
            public const nint m_soundscapeIndex = 0x504; // int32
            public const nint m_soundscapeEntityListId = 0x508; // int32
            public const nint m_soundEventHash = 0x50C; // uint32
            public const nint m_positionNames = 0x510; // CUtlSymbolLarge[8]
            public const nint m_hProxySoundscape = 0x550; // CHandle<CEnvSoundscape>
            public const nint m_bDisabled = 0x554; // bool
        }
        // Parent: CEnvSoundscape
        // Fields count: 1
        public static class CEnvSoundscapeProxy {
            public const nint m_MainSoundscapeName = 0x558; // CUtlSymbolLarge
        }
        // Parent: CEnvSoundscape
        // Fields count: 0
        public static class CEnvSoundscapeTriggerable {
        }
        // Parent: None
        // Fields count: 6
        public static class lerpdata_t {
            public const nint m_hEnt = 0x0; // CHandle<CBaseEntity>
            public const nint m_MoveType = 0x4; // MoveType_t
            public const nint m_flStartTime = 0x8; // GameTime_t
            public const nint m_vecStartOrigin = 0xC; // 
            public const nint m_qStartRot = 0x20; // Quaternion
            public const nint m_nFXIndex = 0x30; // ParticleIndex_t
        }
        // Parent: None
        // Fields count: 2
        public static class CNavLinkAnimgraphVar {
            public const nint m_strAnimgraphVar = 0x0; // CUtlString
            public const nint m_unAlignmentDegrees = 0x8; // uint32
        }
        // Parent: None
        // Fields count: 3
        public static class CNavLinkMovementVData {
            public const nint m_bIsInterpolated = 0x0; // bool
            public const nint m_unRecommendedDistance = 0x4; // uint32
            public const nint m_vecAnimgraphVars = 0x8; // CUtlVector<CNavLinkAnimgraphVar>
        }
        // Parent: CNavVolume
        // Fields count: 0
        public static class CNavVolumeMarkupVolume {
        }
        // Parent: CNavVolume
        // Fields count: 0
        public static class CNavVolumeCalculatedVector {
        }
        // Parent: CNavVolumeCalculatedVector
        // Fields count: 2
        public static class CNavVolumeBreadthFirstSearch {
            public const nint m_vStartPos = 0xA0; // 
            public const nint m_flSearchDist = 0xAC; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class VPhysicsCollisionAttribute_t {
            public const nint m_nInteractsAs = 0x8; // uint64
            public const nint m_nInteractsWith = 0x10; // uint64
            public const nint m_nInteractsExclude = 0x18; // uint64
            public const nint m_nEntityId = 0x20; // uint32
            public const nint m_nOwnerId = 0x24; // uint32
            public const nint m_nHierarchyId = 0x28; // uint16
            public const nint m_nCollisionGroup = 0x2A; // uint8
            public const nint m_nCollisionFunctionMask = 0x2B; // uint8
        }
        // Parent: None
        // Fields count: 17
        public static class CCollisionProperty {
            public const nint m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
            public const nint m_vecMins = 0x40; // 
            public const nint m_vecMaxs = 0x4C; // 
            public const nint m_usSolidFlags = 0x5A; // uint8
            public const nint m_nSolidType = 0x5B; // SolidType_t
            public const nint m_triggerBloat = 0x5C; // uint8
            public const nint m_nSurroundType = 0x5D; // SurroundingBoundsType_t
            public const nint m_CollisionGroup = 0x5E; // uint8
            public const nint m_nEnablePhysics = 0x5F; // uint8
            public const nint m_flBoundingRadius = 0x60; // float32
            public const nint m_vecSpecifiedSurroundingMins = 0x64; // 
            public const nint m_vecSpecifiedSurroundingMaxs = 0x70; // 
            public const nint m_vecSurroundingMaxs = 0x7C; // 
            public const nint m_vecSurroundingMins = 0x88; // 
            public const nint m_vCapsuleCenter1 = 0x94; // 
            public const nint m_vCapsuleCenter2 = 0xA0; // 
            public const nint m_flCapsuleRadius = 0xAC; // float32
        }
        // Parent: None
        // Fields count: 21
        public static class CEffectData {
            public const nint m_vOrigin = 0x8; // 
            public const nint m_vStart = 0x14; // 
            public const nint m_vNormal = 0x20; // 
            public const nint m_vAngles = 0x2C; // QAngle
            public const nint m_hEntity = 0x38; // CEntityHandle
            public const nint m_hOtherEntity = 0x3C; // CEntityHandle
            public const nint m_flScale = 0x40; // float32
            public const nint m_flMagnitude = 0x44; // float32
            public const nint m_flRadius = 0x48; // float32
            public const nint m_nSurfaceProp = 0x4C; // CUtlStringToken
            public const nint m_nEffectIndex = 0x50; // CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nDamageType = 0x58; // uint32
            public const nint m_nPenetrate = 0x5C; // uint8
            public const nint m_nMaterial = 0x5E; // uint16
            public const nint m_nHitBox = 0x60; // uint16
            public const nint m_nColor = 0x62; // uint8
            public const nint m_fFlags = 0x63; // uint8
            public const nint m_nAttachmentIndex = 0x64; // AttachmentHandle_t
            public const nint m_nAttachmentName = 0x68; // CUtlStringToken
            public const nint m_iEffectName = 0x6C; // uint16
            public const nint m_nExplosionType = 0x6E; // uint8
        }
        // Parent: CBaseEntity
        // Fields count: 2
        public static class CEnvDetailController {
            public const nint m_flFadeStartDist = 0x4C0; // float32
            public const nint m_flFadeEndDist = 0x4C4; // float32
        }
        // Parent: None
        // Fields count: 31
        public static class CEnvWindShared {
            public const nint m_flStartTime = 0x8; // GameTime_t
            public const nint m_iWindSeed = 0xC; // uint32
            public const nint m_iMinWind = 0x10; // uint16
            public const nint m_iMaxWind = 0x12; // uint16
            public const nint m_windRadius = 0x14; // int32
            public const nint m_iMinGust = 0x18; // uint16
            public const nint m_iMaxGust = 0x1A; // uint16
            public const nint m_flMinGustDelay = 0x1C; // float32
            public const nint m_flMaxGustDelay = 0x20; // float32
            public const nint m_flGustDuration = 0x24; // float32
            public const nint m_iGustDirChange = 0x28; // uint16
            public const nint m_location = 0x2C; // 
            public const nint m_iszGustSound = 0x38; // int32
            public const nint m_iWindDir = 0x3C; // int32
            public const nint m_flWindSpeed = 0x40; // float32
            public const nint m_currentWindVector = 0x44; // 
            public const nint m_CurrentSwayVector = 0x50; // 
            public const nint m_PrevSwayVector = 0x5C; // 
            public const nint m_iInitialWindDir = 0x68; // uint16
            public const nint m_flInitialWindSpeed = 0x6C; // float32
            public const nint m_OnGustStart = 0x70; // CEntityIOOutput
            public const nint m_OnGustEnd = 0x98; // CEntityIOOutput
            public const nint m_flVariationTime = 0xC0; // GameTime_t
            public const nint m_flSwayTime = 0xC4; // GameTime_t
            public const nint m_flSimTime = 0xC8; // GameTime_t
            public const nint m_flSwitchTime = 0xCC; // GameTime_t
            public const nint m_flAveWindSpeed = 0xD0; // float32
            public const nint m_bGusting = 0xD4; // bool
            public const nint m_flWindAngleVariation = 0xD8; // float32
            public const nint m_flWindSpeedVariation = 0xDC; // float32
            public const nint m_iEntIndex = 0xE0; // CEntityIndex
        }
        // Parent: None
        // Fields count: 2
        public static class CEnvWindShared__WindAveEvent_t {
            public const nint m_flStartWindSpeed = 0x0; // float32
            public const nint m_flAveWindSpeed = 0x4; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CEnvWindShared__WindVariationEvent_t {
            public const nint m_flWindAngleVariation = 0x0; // float32
            public const nint m_flWindSpeedVariation = 0x4; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CInfoLadderDismount {
        }
        // Parent: None
        // Fields count: 12
        public static class shard_model_desc_t {
            public const nint m_nModelID = 0x8; // int32
            public const nint m_hMaterial = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_solid = 0x18; // ShardSolid_t
            public const nint m_ShatterPanelMode = 0x19; // ShatterPanelMode
            public const nint m_vecPanelSize = 0x1C; // Vector2D
            public const nint m_vecStressPositionA = 0x24; // Vector2D
            public const nint m_vecStressPositionB = 0x2C; // Vector2D
            public const nint m_vecPanelVertices = 0x38; // CNetworkUtlVectorBase<Vector2D>
            public const nint m_flGlassHalfThickness = 0x50; // float32
            public const nint m_bHasParent = 0x54; // bool
            public const nint m_bParentFrozen = 0x55; // bool
            public const nint m_SurfacePropStringToken = 0x58; // CUtlStringToken
        }
        // Parent: None
        // Fields count: 30
        public static class CShatterGlassShard {
            public const nint m_hShardHandle = 0x8; // uint32
            public const nint m_vecPanelVertices = 0x10; // CUtlVector<Vector2D>
            public const nint m_vLocalPanelSpaceOrigin = 0x28; // Vector2D
            public const nint m_hModel = 0x30; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_hPhysicsEntity = 0x38; // CHandle<CShatterGlassShardPhysics>
            public const nint m_hParentPanel = 0x3C; // CHandle<CFuncShatterglass>
            public const nint m_hParentShard = 0x40; // uint32
            public const nint m_ShatterStressType = 0x44; // ShatterGlassStressType
            public const nint m_vecStressVelocity = 0x48; // 
            public const nint m_bCreatedModel = 0x54; // bool
            public const nint m_flLongestEdge = 0x58; // float32
            public const nint m_flShortestEdge = 0x5C; // float32
            public const nint m_flLongestAcross = 0x60; // float32
            public const nint m_flShortestAcross = 0x64; // float32
            public const nint m_flSumOfAllEdges = 0x68; // float32
            public const nint m_flArea = 0x6C; // float32
            public const nint m_nOnFrameEdge = 0x70; // OnFrame
            public const nint m_nParentPanelsNthShard = 0x74; // int32
            public const nint m_nSubShardGeneration = 0x78; // int32
            public const nint m_vecAverageVertPosition = 0x7C; // Vector2D
            public const nint m_bAverageVertPositionIsValid = 0x84; // bool
            public const nint m_vecPanelSpaceStressPositionA = 0x88; // Vector2D
            public const nint m_vecPanelSpaceStressPositionB = 0x90; // Vector2D
            public const nint m_bStressPositionAIsValid = 0x98; // bool
            public const nint m_bStressPositionBIsValid = 0x99; // bool
            public const nint m_bFlaggedForRemoval = 0x9A; // bool
            public const nint m_flPhysicsEntitySpawnedAtTime = 0x9C; // GameTime_t
            public const nint m_bShatterRateLimited = 0xA0; // bool
            public const nint m_hEntityHittingMe = 0xA4; // CHandle<CBaseEntity>
            public const nint m_vecNeighbors = 0xA8; // CUtlVector<uint32>
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CGameRulesProxy {
        }
        // Parent: None
        // Fields count: 2
        public static class CGameRules {
            public const nint m_szQuestName = 0x8; // char[128]
            public const nint m_nQuestPhase = 0x88; // int32
        }
        // Parent: None
        // Fields count: 11
        public static class CGlowProperty {
            public const nint m_fGlowColor = 0x8; // 
            public const nint m_iGlowType = 0x30; // int32
            public const nint m_iGlowTeam = 0x34; // int32
            public const nint m_nGlowRange = 0x38; // int32
            public const nint m_nGlowRangeMin = 0x3C; // int32
            public const nint m_glowColorOverride = 0x40; // Color
            public const nint m_bFlashing = 0x44; // bool
            public const nint m_flGlowTime = 0x48; // float32
            public const nint m_flGlowStartTime = 0x4C; // float32
            public const nint m_bEligibleForScreenHighlight = 0x50; // bool
            public const nint m_bGlowing = 0x51; // bool
        }
        // Parent: CGameRules
        // Fields count: 0
        public static class CMultiplayRules {
        }
        // Parent: None
        // Fields count: 25
        public static class fogparams_t {
            public const nint dirPrimary = 0x8; // 
            public const nint colorPrimary = 0x14; // Color
            public const nint colorSecondary = 0x18; // Color
            public const nint colorPrimaryLerpTo = 0x1C; // Color
            public const nint colorSecondaryLerpTo = 0x20; // Color
            public const nint start = 0x24; // float32
            public const nint end = 0x28; // float32
            public const nint farz = 0x2C; // float32
            public const nint maxdensity = 0x30; // float32
            public const nint exponent = 0x34; // float32
            public const nint HDRColorScale = 0x38; // float32
            public const nint skyboxFogFactor = 0x3C; // float32
            public const nint skyboxFogFactorLerpTo = 0x40; // float32
            public const nint startLerpTo = 0x44; // float32
            public const nint endLerpTo = 0x48; // float32
            public const nint maxdensityLerpTo = 0x4C; // float32
            public const nint lerptime = 0x50; // GameTime_t
            public const nint duration = 0x54; // float32
            public const nint blendtobackground = 0x58; // float32
            public const nint scattering = 0x5C; // float32
            public const nint locallightscale = 0x60; // float32
            public const nint enable = 0x64; // bool
            public const nint blend = 0x65; // bool
            public const nint m_bNoReflectionFog = 0x66; // bool
            public const nint m_bPadding = 0x67; // bool
        }
        // Parent: None
        // Fields count: 14
        public static class fogplayerparams_t {
            public const nint m_hCtrl = 0x8; // CHandle<CFogController>
            public const nint m_flTransitionTime = 0xC; // float32
            public const nint m_OldColor = 0x10; // Color
            public const nint m_flOldStart = 0x14; // float32
            public const nint m_flOldEnd = 0x18; // float32
            public const nint m_flOldMaxDensity = 0x1C; // float32
            public const nint m_flOldHDRColorScale = 0x20; // float32
            public const nint m_flOldFarZ = 0x24; // float32
            public const nint m_NewColor = 0x28; // Color
            public const nint m_flNewStart = 0x2C; // float32
            public const nint m_flNewEnd = 0x30; // float32
            public const nint m_flNewMaxDensity = 0x34; // float32
            public const nint m_flNewHDRColorScale = 0x38; // float32
            public const nint m_flNewFarZ = 0x3C; // float32
        }
        // Parent: None
        // Fields count: 6
        public static class sky3dparams_t {
            public const nint scale = 0x8; // int16
            public const nint origin = 0xC; // 
            public const nint bClip3DSkyBoxNearToWorldFar = 0x18; // bool
            public const nint flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
            public const nint fog = 0x20; // fogparams_t
            public const nint m_nWorldGroupID = 0x88; // WorldGroupId_t
        }
        // Parent: None
        // Fields count: 5
        public static class sndopvarlatchdata_t {
            public const nint m_iszStack = 0x8; // CUtlSymbolLarge
            public const nint m_iszOperator = 0x10; // CUtlSymbolLarge
            public const nint m_iszOpvar = 0x18; // CUtlSymbolLarge
            public const nint m_flVal = 0x20; // float32
            public const nint m_vPos = 0x24; // 
        }
        // Parent: None
        // Fields count: 0
        public static class IRagdoll {
        }
        // Parent: None
        // Fields count: 3
        public static class ragdollelement_t {
            public const nint originParentSpace = 0x0; // 
            public const nint parentIndex = 0x20; // int32
            public const nint m_flRadius = 0x24; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class ragdoll_t {
            public const nint list = 0x0; // CUtlVector<ragdollelement_t>
            public const nint boneIndex = 0x18; // CUtlVector<int32>
            public const nint allowStretch = 0x30; // bool
            public const nint unused = 0x31; // bool
        }
        // Parent: None
        // Fields count: 3
        public static class PhysicsRagdollPose_t {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
            public const nint m_Transforms = 0x30; // CNetworkUtlVectorBase<CTransform>
            public const nint m_hOwner = 0x48; // CHandle<CBaseEntity>
        }
        // Parent: None
        // Fields count: 13
        public static class CSceneEventInfo {
            public const nint m_iLayer = 0x0; // int32
            public const nint m_iPriority = 0x4; // int32
            public const nint m_hSequence = 0x8; // HSequence
            public const nint m_flWeight = 0xC; // float32
            public const nint m_bHasArrived = 0x10; // bool
            public const nint m_nType = 0x14; // int32
            public const nint m_flNext = 0x18; // GameTime_t
            public const nint m_bIsGesture = 0x1C; // bool
            public const nint m_bShouldRemove = 0x1D; // bool
            public const nint m_hTarget = 0x44; // CHandle<CBaseEntity>
            public const nint m_nSceneEventId = 0x48; // uint32
            public const nint m_bClientSide = 0x4C; // bool
            public const nint m_bStarted = 0x4D; // bool
        }
        // Parent: None
        // Fields count: 1
        public static class ParticleIndex_t {
            public const nint m_Value = 0x0; // int32
        }
        // Parent: None
        // Fields count: 1
        public static class AmmoIndex_t {
            public const nint m_Value = 0x0; // int8
        }
        // Parent: None
        // Fields count: 0
        public static class CEntitySubclassVDataBase {
        }
        // Parent: None
        // Fields count: 4
        public static class thinkfunc_t {
            public const nint m_hFn = 0x8; // HSCRIPT
            public const nint m_nContext = 0x10; // CUtlStringToken
            public const nint m_nNextThinkTick = 0x14; // GameTick_t
            public const nint m_nLastThinkTick = 0x18; // GameTick_t
        }
        // Parent: None
        // Fields count: 2
        public static class RagdollCreationParams_t {
            public const nint m_vForce = 0x0; // 
            public const nint m_nForceBone = 0xC; // int32
        }
        // Parent: None
        // Fields count: 6
        public static class hudtextparms_t {
            public const nint color1 = 0x0; // Color
            public const nint color2 = 0x4; // Color
            public const nint effect = 0x8; // uint8
            public const nint channel = 0x9; // uint8
            public const nint x = 0xC; // float32
            public const nint y = 0x10; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CSimpleSimTimer {
            public const nint m_next = 0x0; // GameTime_t
            public const nint m_nWorldGroupId = 0x4; // WorldGroupId_t
        }
        // Parent: CSimpleSimTimer
        // Fields count: 1
        public static class CSimTimer {
            public const nint m_interval = 0x8; // float32
        }
        // Parent: CSimpleSimTimer
        // Fields count: 2
        public static class CRandSimTimer {
            public const nint m_minInterval = 0x8; // float32
            public const nint m_maxInterval = 0xC; // float32
        }
        // Parent: CSimpleSimTimer
        // Fields count: 1
        public static class CStopwatchBase {
            public const nint m_fIsRunning = 0x8; // bool
        }
        // Parent: CStopwatchBase
        // Fields count: 0
        public static class CSimpleStopwatch {
        }
        // Parent: CStopwatchBase
        // Fields count: 1
        public static class CStopwatch {
            public const nint m_interval = 0xC; // float32
        }
        // Parent: CStopwatchBase
        // Fields count: 2
        public static class CRandStopwatch {
            public const nint m_minInterval = 0xC; // float32
            public const nint m_maxInterval = 0x10; // float32
        }
        // Parent: CGameRules
        // Fields count: 1
        public static class CSingleplayRules {
            public const nint m_bSinglePlayerGameEnding = 0x90; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 9
        public static class CSoundOpvarSetPointBase {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_hSource = 0x4C4; // CEntityHandle
            public const nint m_iszSourceEntityName = 0x4D0; // CUtlSymbolLarge
            public const nint m_vLastPosition = 0x528; // 
            public const nint m_iszStackName = 0x538; // CUtlSymbolLarge
            public const nint m_iszOperatorName = 0x540; // CUtlSymbolLarge
            public const nint m_iszOpvarName = 0x548; // CUtlSymbolLarge
            public const nint m_iOpvarIndex = 0x550; // int32
            public const nint m_bUseAutoCompare = 0x554; // bool
        }
        // Parent: CSoundOpvarSetPointBase
        // Fields count: 23
        public static class CSoundOpvarSetPointEntity {
            public const nint m_OnEnter = 0x558; // CEntityIOOutput
            public const nint m_OnExit = 0x580; // CEntityIOOutput
            public const nint m_bAutoDisable = 0x5A8; // bool
            public const nint m_flDistanceMin = 0x5EC; // float32
            public const nint m_flDistanceMax = 0x5F0; // float32
            public const nint m_flDistanceMapMin = 0x5F4; // float32
            public const nint m_flDistanceMapMax = 0x5F8; // float32
            public const nint m_flOcclusionRadius = 0x5FC; // float32
            public const nint m_flOcclusionMin = 0x600; // float32
            public const nint m_flOcclusionMax = 0x604; // float32
            public const nint m_flValSetOnDisable = 0x608; // float32
            public const nint m_bSetValueOnDisable = 0x60C; // bool
            public const nint m_nSimulationMode = 0x610; // int32
            public const nint m_nVisibilitySamples = 0x614; // int32
            public const nint m_vDynamicProxyPoint = 0x618; // 
            public const nint m_flDynamicMaximumOcclusion = 0x624; // float32
            public const nint m_hDynamicEntity = 0x628; // CEntityHandle
            public const nint m_iszDynamicEntityName = 0x630; // CUtlSymbolLarge
            public const nint m_flPathingDistanceNormFactor = 0x638; // float32
            public const nint m_vPathingSourcePos = 0x63C; // 
            public const nint m_vPathingListenerPos = 0x648; // 
            public const nint m_vPathingDirection = 0x654; // 
            public const nint m_nPathingSourceIndex = 0x660; // int32
        }
        // Parent: CSoundOpvarSetPointEntity
        // Fields count: 9
        public static class CSoundOpvarSetAABBEntity {
            public const nint m_vDistanceInnerMins = 0x668; // 
            public const nint m_vDistanceInnerMaxs = 0x674; // 
            public const nint m_vDistanceOuterMins = 0x680; // 
            public const nint m_vDistanceOuterMaxs = 0x68C; // 
            public const nint m_nAABBDirection = 0x698; // int32
            public const nint m_vInnerMins = 0x69C; // 
            public const nint m_vInnerMaxs = 0x6A8; // 
            public const nint m_vOuterMins = 0x6B4; // 
            public const nint m_vOuterMaxs = 0x6C0; // 
        }
        // Parent: CSoundOpvarSetAABBEntity
        // Fields count: 0
        public static class CSoundOpvarSetOBBEntity {
        }
        // Parent: CSoundOpvarSetPointEntity
        // Fields count: 3
        public static class CSoundOpvarSetPathCornerEntity {
            public const nint m_flDistMinSqr = 0x680; // float32
            public const nint m_flDistMaxSqr = 0x684; // float32
            public const nint m_iszPathCornerEntityName = 0x688; // CUtlSymbolLarge
        }
        // Parent: None
        // Fields count: 3
        public static class SoundOpvarTraceResult_t {
            public const nint vPos = 0x0; // 
            public const nint bDidHit = 0xC; // bool
            public const nint flDistSqrToCenter = 0x10; // float32
        }
        // Parent: CSoundOpvarSetPointEntity
        // Fields count: 4
        public static class CSoundOpvarSetAutoRoomEntity {
            public const nint m_traceResults = 0x668; // CUtlVector<SoundOpvarTraceResult_t>
            public const nint m_flSize = 0x698; // float32
            public const nint m_flHeightTolerance = 0x69C; // float32
            public const nint m_flSizeSqr = 0x6A0; // float32
        }
        // Parent: CSoundOpvarSetPointBase
        // Fields count: 8
        public static class CSoundOpvarSetOBBWindEntity {
            public const nint m_vMins = 0x558; // 
            public const nint m_vMaxs = 0x564; // 
            public const nint m_vDistanceMins = 0x570; // 
            public const nint m_vDistanceMaxs = 0x57C; // 
            public const nint m_flWindMin = 0x588; // float32
            public const nint m_flWindMax = 0x58C; // float32
            public const nint m_flWindMapMin = 0x590; // float32
            public const nint m_flWindMapMax = 0x594; // float32
        }
        // Parent: None
        // Fields count: 18
        public static class CTakeDamageInfo {
            public const nint m_vecDamageForce = 0x8; // 
            public const nint m_vecDamagePosition = 0x14; // 
            public const nint m_vecReportedPosition = 0x20; // 
            public const nint m_vecDamageDirection = 0x2C; // 
            public const nint m_hInflictor = 0x38; // CHandle<CBaseEntity>
            public const nint m_hAttacker = 0x3C; // CHandle<CBaseEntity>
            public const nint m_hAbility = 0x40; // CHandle<CBaseEntity>
            public const nint m_flDamage = 0x44; // float32
            public const nint m_bitsDamageType = 0x48; // int32
            public const nint m_iDamageCustom = 0x4C; // int32
            public const nint m_iAmmoType = 0x50; // AmmoIndex_t
            public const nint m_flOriginalDamage = 0x60; // float32
            public const nint m_bShouldBleed = 0x64; // bool
            public const nint m_bShouldSpark = 0x65; // bool
            public const nint m_nDamageFlags = 0x70; // TakeDamageFlags_t
            public const nint m_nNumObjectsPenetrated = 0x74; // int32
            public const nint m_hScriptInstance = 0x78; // HSCRIPT
            public const nint m_bInTakeDamageFlow = 0x94; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class CTakeDamageResult {
            public const nint m_nHealthLost = 0x0; // int32
            public const nint m_nDamageTaken = 0x4; // int32
        }
        // Parent: None
        // Fields count: 4
        public static class SummaryTakeDamageInfo_t {
            public const nint nSummarisedCount = 0x0; // int32
            public const nint info = 0x8; // CTakeDamageInfo
            public const nint result = 0xA0; // CTakeDamageResult
            public const nint hTarget = 0xA8; // CHandle<CBaseEntity>
        }
        // Parent: None
        // Fields count: 1
        public static class CTakeDamageSummaryScopeGuard {
            public const nint m_vecSummaries = 0x8; // CUtlVector<SummaryTakeDamageInfo_t*>
        }
        // Parent: CMultiplayRules
        // Fields count: 0
        public static class CTeamplayRules {
        }
        // Parent: None
        // Fields count: 2
        public static class CAttributeList {
            public const nint m_Attributes = 0x8; // CUtlVectorEmbeddedNetworkVar<CEconItemAttribute>
            public const nint m_pManager = 0x58; // CAttributeManager*
        }
        // Parent: None
        // Fields count: 5
        public static class CEconItemAttribute {
            public const nint m_iAttributeDefinitionIndex = 0x30; // uint16
            public const nint m_flValue = 0x34; // float32
            public const nint m_flInitialValue = 0x38; // float32
            public const nint m_nRefundableCurrency = 0x3C; // int32
            public const nint m_bSetBonus = 0x40; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class IEconItemInterface {
        }
        // Parent: None
        // Fields count: 6
        public static class CAttributeManager {
            public const nint m_Providers = 0x8; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_iReapplyProvisionParity = 0x20; // int32
            public const nint m_hOuter = 0x24; // CHandle<CBaseEntity>
            public const nint m_bPreventLoopback = 0x28; // bool
            public const nint m_ProviderType = 0x2C; // attributeprovidertypes_t
            public const nint m_CachedResults = 0x30; // CUtlVector<CAttributeManager::cached_attribute_float_t>
        }
        // Parent: None
        // Fields count: 3
        public static class CAttributeManager__cached_attribute_float_t {
            public const nint flIn = 0x0; // float32
            public const nint iAttribHook = 0x8; // CUtlSymbolLarge
            public const nint flOut = 0x10; // float32
        }
        // Parent: CAttributeManager
        // Fields count: 1
        public static class CAttributeContainer {
            public const nint m_Item = 0x50; // CEconItemView
        }
        // Parent: None
        // Fields count: 0
        public static class IHasAttributes {
        }
        // Parent: AmmoTypeInfo_t
        // Fields count: 2
        public static class GameAmmoTypeInfo_t {
            public const nint m_nBuySize = 0x38; // int32
            public const nint m_nCost = 0x3C; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class EntitySpottedState_t {
            public const nint m_bSpotted = 0x8; // bool
            public const nint m_bSpottedByMask = 0xC; // uint32[2]
        }
        // Parent: CServerOnlyPointEntity
        // Fields count: 3
        public static class SpawnPoint {
            public const nint m_iPriority = 0x4C0; // int32
            public const nint m_bEnabled = 0x4C4; // bool
            public const nint m_nType = 0x4C8; // int32
        }
        // Parent: SpawnPoint
        // Fields count: 9
        public static class SpawnPointCoopEnemy {
            public const nint m_szWeaponsToGive = 0x4D0; // CUtlSymbolLarge
            public const nint m_szPlayerModelToUse = 0x4D8; // CUtlSymbolLarge
            public const nint m_nArmorToSpawnWith = 0x4E0; // int32
            public const nint m_nDefaultBehavior = 0x4E4; // SpawnPointCoopEnemy::BotDefaultBehavior_t
            public const nint m_nBotDifficulty = 0x4E8; // int32
            public const nint m_bIsAgressive = 0x4EC; // bool
            public const nint m_bStartAsleep = 0x4ED; // bool
            public const nint m_flHideRadius = 0x4F0; // float32
            public const nint m_szBehaviorTreeFile = 0x500; // CUtlSymbolLarge
        }
        // Parent: CGameRulesProxy
        // Fields count: 1
        public static class CCSGameRulesProxy {
            public const nint m_pGameRules = 0x4C0; // CCSGameRules*
        }
        // Parent: CTeamplayRules
        // Fields count: 215
        public static class CCSGameRules {
            public const nint __m_pChainEntity = 0x98; // CNetworkVarChainer
            public const nint m_coopMissionManager = 0xC0; // CHandle<CBaseEntity>
            public const nint m_bFreezePeriod = 0xC4; // bool
            public const nint m_bWarmupPeriod = 0xC5; // bool
            public const nint m_fWarmupPeriodEnd = 0xC8; // GameTime_t
            public const nint m_fWarmupPeriodStart = 0xCC; // GameTime_t
            public const nint m_nTotalPausedTicks = 0xD0; // int32
            public const nint m_nPauseStartTick = 0xD4; // int32
            public const nint m_bServerPaused = 0xD8; // bool
            public const nint m_bGamePaused = 0xD9; // bool
            public const nint m_bTerroristTimeOutActive = 0xDA; // bool
            public const nint m_bCTTimeOutActive = 0xDB; // bool
            public const nint m_flTerroristTimeOutRemaining = 0xDC; // float32
            public const nint m_flCTTimeOutRemaining = 0xE0; // float32
            public const nint m_nTerroristTimeOuts = 0xE4; // int32
            public const nint m_nCTTimeOuts = 0xE8; // int32
            public const nint m_bTechnicalTimeOut = 0xEC; // bool
            public const nint m_bMatchWaitingForResume = 0xED; // bool
            public const nint m_iRoundTime = 0xF0; // int32
            public const nint m_fMatchStartTime = 0xF4; // float32
            public const nint m_fRoundStartTime = 0xF8; // GameTime_t
            public const nint m_flRestartRoundTime = 0xFC; // GameTime_t
            public const nint m_bGameRestart = 0x100; // bool
            public const nint m_flGameStartTime = 0x104; // float32
            public const nint m_timeUntilNextPhaseStarts = 0x108; // float32
            public const nint m_gamePhase = 0x10C; // int32
            public const nint m_totalRoundsPlayed = 0x110; // int32
            public const nint m_nRoundsPlayedThisPhase = 0x114; // int32
            public const nint m_nOvertimePlaying = 0x118; // int32
            public const nint m_iHostagesRemaining = 0x11C; // int32
            public const nint m_bAnyHostageReached = 0x120; // bool
            public const nint m_bMapHasBombTarget = 0x121; // bool
            public const nint m_bMapHasRescueZone = 0x122; // bool
            public const nint m_bMapHasBuyZone = 0x123; // bool
            public const nint m_bIsQueuedMatchmaking = 0x124; // bool
            public const nint m_nQueuedMatchmakingMode = 0x128; // int32
            public const nint m_bIsValveDS = 0x12C; // bool
            public const nint m_bLogoMap = 0x12D; // bool
            public const nint m_bPlayAllStepSoundsOnServer = 0x12E; // bool
            public const nint m_iSpectatorSlotCount = 0x130; // int32
            public const nint m_MatchDevice = 0x134; // int32
            public const nint m_bHasMatchStarted = 0x138; // bool
            public const nint m_nNextMapInMapgroup = 0x13C; // int32
            public const nint m_szTournamentEventName = 0x140; // char[512]
            public const nint m_szTournamentEventStage = 0x340; // char[512]
            public const nint m_szMatchStatTxt = 0x540; // char[512]
            public const nint m_szTournamentPredictionsTxt = 0x740; // char[512]
            public const nint m_nTournamentPredictionsPct = 0x940; // int32
            public const nint m_flCMMItemDropRevealStartTime = 0x944; // GameTime_t
            public const nint m_flCMMItemDropRevealEndTime = 0x948; // GameTime_t
            public const nint m_bIsDroppingItems = 0x94C; // bool
            public const nint m_bIsQuestEligible = 0x94D; // bool
            public const nint m_bIsHltvActive = 0x94E; // bool
            public const nint m_nGuardianModeWaveNumber = 0x950; // int32
            public const nint m_nGuardianModeSpecialKillsRemaining = 0x954; // int32
            public const nint m_nGuardianModeSpecialWeaponNeeded = 0x958; // int32
            public const nint m_nGuardianGrenadesToGiveBots = 0x95C; // int32
            public const nint m_nNumHeaviesToSpawn = 0x960; // int32
            public const nint m_numGlobalGiftsGiven = 0x964; // uint32
            public const nint m_numGlobalGifters = 0x968; // uint32
            public const nint m_numGlobalGiftsPeriodSeconds = 0x96C; // uint32
            public const nint m_arrFeaturedGiftersAccounts = 0x970; // uint32[4]
            public const nint m_arrFeaturedGiftersGifts = 0x980; // uint32[4]
            public const nint m_arrProhibitedItemIndices = 0x990; // uint16[100]
            public const nint m_arrTournamentActiveCasterAccounts = 0xA58; // uint32[4]
            public const nint m_numBestOfMaps = 0xA68; // int32
            public const nint m_nHalloweenMaskListSeed = 0xA6C; // int32
            public const nint m_bBombDropped = 0xA70; // bool
            public const nint m_bBombPlanted = 0xA71; // bool
            public const nint m_iRoundWinStatus = 0xA74; // int32
            public const nint m_eRoundWinReason = 0xA78; // int32
            public const nint m_bTCantBuy = 0xA7C; // bool
            public const nint m_bCTCantBuy = 0xA7D; // bool
            public const nint m_flGuardianBuyUntilTime = 0xA80; // GameTime_t
            public const nint m_iMatchStats_RoundResults = 0xA84; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_CT = 0xAFC; // int32[30]
            public const nint m_iMatchStats_PlayersAlive_T = 0xB74; // int32[30]
            public const nint m_TeamRespawnWaveTimes = 0xBEC; // float32[32]
            public const nint m_flNextRespawnWave = 0xC6C; // GameTime_t[32]
            public const nint m_nServerQuestID = 0xCEC; // int32
            public const nint m_vMinimapMins = 0xCF0; // 
            public const nint m_vMinimapMaxs = 0xCFC; // 
            public const nint m_MinimapVerticalSectionHeights = 0xD08; // float32[8]
            public const nint m_bDontIncrementCoopWave = 0xD28; // bool
            public const nint m_bSpawnedTerrorHuntHeavy = 0xD29; // bool
            public const nint m_nEndMatchMapGroupVoteTypes = 0xD2C; // int32[10]
            public const nint m_nEndMatchMapGroupVoteOptions = 0xD54; // int32[10]
            public const nint m_nEndMatchMapVoteWinner = 0xD7C; // int32
            public const nint m_iNumConsecutiveCTLoses = 0xD80; // int32
            public const nint m_iNumConsecutiveTerroristLoses = 0xD84; // int32
            public const nint m_bHasHostageBeenTouched = 0xDA0; // bool
            public const nint m_flIntermissionStartTime = 0xDA4; // GameTime_t
            public const nint m_flIntermissionEndTime = 0xDA8; // GameTime_t
            public const nint m_bLevelInitialized = 0xDAC; // bool
            public const nint m_iTotalRoundsPlayed = 0xDB0; // int32
            public const nint m_iUnBalancedRounds = 0xDB4; // int32
            public const nint m_endMatchOnRoundReset = 0xDB8; // bool
            public const nint m_endMatchOnThink = 0xDB9; // bool
            public const nint m_iFreezeTime = 0xDBC; // int32
            public const nint m_iNumTerrorist = 0xDC0; // int32
            public const nint m_iNumCT = 0xDC4; // int32
            public const nint m_iNumSpawnableTerrorist = 0xDC8; // int32
            public const nint m_iNumSpawnableCT = 0xDCC; // int32
            public const nint m_arrSelectedHostageSpawnIndices = 0xDD0; // CUtlVector<int32>
            public const nint m_nSpawnPointsRandomSeed = 0xDE8; // int32
            public const nint m_bFirstConnected = 0xDEC; // bool
            public const nint m_bCompleteReset = 0xDED; // bool
            public const nint m_bPickNewTeamsOnReset = 0xDEE; // bool
            public const nint m_bScrambleTeamsOnRestart = 0xDEF; // bool
            public const nint m_bSwapTeamsOnRestart = 0xDF0; // bool
            public const nint m_nEndMatchTiedVotes = 0xDF8; // CUtlVector<int32>
            public const nint m_bNeedToAskPlayersForContinueVote = 0xE14; // bool
            public const nint m_numQueuedMatchmakingAccounts = 0xE18; // uint32
            public const nint m_pQueuedMatchmakingReservationString = 0xE20; // char*
            public const nint m_numTotalTournamentDrops = 0xE28; // uint32
            public const nint m_numSpectatorsCountMax = 0xE2C; // uint32
            public const nint m_numSpectatorsCountMaxTV = 0xE30; // uint32
            public const nint m_numSpectatorsCountMaxLnk = 0xE34; // uint32
            public const nint m_bForceTeamChangeSilent = 0xE40; // bool
            public const nint m_bLoadingRoundBackupData = 0xE41; // bool
            public const nint m_nMatchInfoShowType = 0xE78; // int32
            public const nint m_flMatchInfoDecidedTime = 0xE7C; // float32
            public const nint m_flCoopRespawnAndHealTime = 0xE98; // float32
            public const nint m_coopBonusCoinsFound = 0xE9C; // int32
            public const nint m_coopBonusPistolsOnly = 0xEA0; // bool
            public const nint m_coopPlayersInDeploymentZone = 0xEA1; // bool
            public const nint m_coopMissionDeadPlayerRespawnEnabled = 0xEA2; // bool
            public const nint mTeamDMLastWinningTeamNumber = 0xEA4; // int32
            public const nint mTeamDMLastThinkTime = 0xEA8; // float32
            public const nint m_flTeamDMLastAnnouncementTime = 0xEAC; // float32
            public const nint m_iAccountTerrorist = 0xEB0; // int32
            public const nint m_iAccountCT = 0xEB4; // int32
            public const nint m_iSpawnPointCount_Terrorist = 0xEB8; // int32
            public const nint m_iSpawnPointCount_CT = 0xEBC; // int32
            public const nint m_iMaxNumTerrorists = 0xEC0; // int32
            public const nint m_iMaxNumCTs = 0xEC4; // int32
            public const nint m_iLoserBonus = 0xEC8; // int32
            public const nint m_iLoserBonusMostRecentTeam = 0xECC; // int32
            public const nint m_tmNextPeriodicThink = 0xED0; // float32
            public const nint m_bVoiceWonMatchBragFired = 0xED4; // bool
            public const nint m_fWarmupNextChatNoticeTime = 0xED8; // float32
            public const nint m_iHostagesRescued = 0xEE0; // int32
            public const nint m_iHostagesTouched = 0xEE4; // int32
            public const nint m_flNextHostageAnnouncement = 0xEE8; // float32
            public const nint m_bNoTerroristsKilled = 0xEEC; // bool
            public const nint m_bNoCTsKilled = 0xEED; // bool
            public const nint m_bNoEnemiesKilled = 0xEEE; // bool
            public const nint m_bCanDonateWeapons = 0xEEF; // bool
            public const nint m_firstKillTime = 0xEF4; // float32
            public const nint m_firstBloodTime = 0xEFC; // float32
            public const nint m_hostageWasInjured = 0xF18; // bool
            public const nint m_hostageWasKilled = 0xF19; // bool
            public const nint m_bVoteCalled = 0xF28; // bool
            public const nint m_bServerVoteOnReset = 0xF29; // bool
            public const nint m_flVoteCheckThrottle = 0xF2C; // float32
            public const nint m_bBuyTimeEnded = 0xF30; // bool
            public const nint m_nLastFreezeEndBeep = 0xF34; // int32
            public const nint m_bTargetBombed = 0xF38; // bool
            public const nint m_bBombDefused = 0xF39; // bool
            public const nint m_bMapHasBombZone = 0xF3A; // bool
            public const nint m_vecMainCTSpawnPos = 0xF58; // 
            public const nint m_CTSpawnPointsMasterList = 0xF68; // CUtlVector<SpawnPoint*>
            public const nint m_TerroristSpawnPointsMasterList = 0xF80; // CUtlVector<SpawnPoint*>
            public const nint m_bRespawningAllRespawnablePlayers = 0xF98; // bool
            public const nint m_iNextCTSpawnPoint = 0xF9C; // int32
            public const nint m_flCTSpawnPointUsedTime = 0xFA0; // float32
            public const nint m_iNextTerroristSpawnPoint = 0xFA4; // int32
            public const nint m_flTerroristSpawnPointUsedTime = 0xFA8; // float32
            public const nint m_CTSpawnPoints = 0xFB0; // CUtlVector<SpawnPoint*>
            public const nint m_TerroristSpawnPoints = 0xFC8; // CUtlVector<SpawnPoint*>
            public const nint m_bIsUnreservedGameServer = 0xFE0; // bool
            public const nint m_fAutobalanceDisplayTime = 0xFE4; // float32
            public const nint m_bAllowWeaponSwitch = 0x1250; // bool
            public const nint m_bRoundTimeWarningTriggered = 0x1251; // bool
            public const nint m_phaseChangeAnnouncementTime = 0x1254; // GameTime_t
            public const nint m_fNextUpdateTeamClanNamesTime = 0x1258; // float32
            public const nint m_flLastThinkTime = 0x125C; // GameTime_t
            public const nint m_fAccumulatedRoundOffDamage = 0x1260; // float32
            public const nint m_nShorthandedBonusLastEvalRound = 0x1264; // int32
            public const nint m_nMatchAbortedEarlyReason = 0x14E0; // int32
            public const nint m_bHasTriggeredRoundStartMusic = 0x14E4; // bool
            public const nint m_bHasTriggeredCoopSpawnReset = 0x14E5; // bool
            public const nint m_bSwitchingTeamsAtRoundReset = 0x14E6; // bool
            public const nint m_pGameModeRules = 0x1500; // CCSGameModeRules*
            public const nint m_BtGlobalBlackboard = 0x1508; // KeyValues3
            public const nint m_hPlayerResource = 0x1570; // CHandle<CBaseEntity>
            public const nint m_RetakeRules = 0x1578; // CRetakeGameRules
            public const nint m_GuardianBotSkillLevelMax = 0x175C; // int32
            public const nint m_GuardianBotSkillLevelMin = 0x1760; // int32
            public const nint m_arrTeamUniqueKillWeaponsMatch = 0x1768; // CUtlVector<int32>[4]
            public const nint m_bTeamLastKillUsedUniqueWeaponMatch = 0x17C8; // bool[4]
            public const nint m_nMatchEndCount = 0x17F0; // uint8
            public const nint m_nTTeamIntroVariant = 0x17F4; // int32
            public const nint m_nCTTeamIntroVariant = 0x17F8; // int32
            public const nint m_bTeamIntroPeriod = 0x17FC; // bool
            public const nint m_fTeamIntroPeriodEnd = 0x1800; // GameTime_t
            public const nint m_bPlayedTeamIntroVO = 0x1804; // bool
            public const nint m_iRoundEndWinnerTeam = 0x1808; // int32
            public const nint m_eRoundEndReason = 0x180C; // int32
            public const nint m_bRoundEndShowTimerDefend = 0x1810; // bool
            public const nint m_iRoundEndTimerTime = 0x1814; // int32
            public const nint m_sRoundEndFunFactToken = 0x1818; // CUtlString
            public const nint m_iRoundEndFunFactPlayerSlot = 0x1820; // CPlayerSlot
            public const nint m_iRoundEndFunFactData1 = 0x1824; // int32
            public const nint m_iRoundEndFunFactData2 = 0x1828; // int32
            public const nint m_iRoundEndFunFactData3 = 0x182C; // int32
            public const nint m_sRoundEndMessage = 0x1830; // CUtlString
            public const nint m_iRoundEndPlayerCount = 0x1838; // int32
            public const nint m_bRoundEndNoMusic = 0x183C; // bool
            public const nint m_iRoundEndLegacy = 0x1840; // int32
            public const nint m_nRoundEndCount = 0x1844; // uint8
            public const nint m_iRoundStartRoundNumber = 0x1848; // int32
            public const nint m_nRoundStartCount = 0x184C; // uint8
            public const nint m_flLastPerfSampleTime = 0x5858; // float64
            public const nint m_bSkipNextServerPerfSample = 0x5860; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CCSTakeDamageInfoAPI {
        }
        // Parent: None
        // Fields count: 1
        public static class CCSGameModeRules {
            public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
        }
        // Parent: CCSGameModeRules
        // Fields count: 0
        public static class CCSGameModeRules_Noop {
        }
        // Parent: CBasePulseGraphInstance
        // Fields count: 0
        public static class CCSGameModeScript {
        }
        // Parent: None
        // Fields count: 0
        public static class CCSGameModeScript_ConVars {
        }
        // Parent: CCSGameModeRules
        // Fields count: 1
        public static class CCSGameModeRules_ArmsRace {
            public const nint m_WeaponSequence = 0x38; // CNetworkUtlVectorBase<CUtlString>
        }
        // Parent: CCSGameModeScript
        // Fields count: 1
        public static class CCSArmsRaceScript {
            public const nint m_pOuter = 0xD8; // CCSGameModeRules_ArmsRace*
        }
        // Parent: CCSGameModeRules
        // Fields count: 3
        public static class CCSGameModeRules_Deathmatch {
            public const nint m_flDMBonusStartTime = 0x38; // GameTime_t
            public const nint m_flDMBonusTimeLength = 0x3C; // float32
            public const nint m_nDMBonusWeaponLoadoutSlot = 0x40; // int16
        }
        // Parent: CCSGameModeScript
        // Fields count: 1
        public static class CCSDeathmatchScript {
            public const nint m_pOuter = 0xD8; // CCSGameModeRules_Deathmatch*
        }
        // Parent: None
        // Fields count: 0
        public static class CCSDeathmatchScript_ConVars {
        }
        // Parent: None
        // Fields count: 5
        public static class CRetakeGameRules {
            public const nint m_nMatchSeed = 0xF8; // int32
            public const nint m_bBlockersPresent = 0xFC; // bool
            public const nint m_bRoundInProgress = 0xFD; // bool
            public const nint m_iFirstSecondHalfRound = 0x100; // int32
            public const nint m_iBombSite = 0x104; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class QuestProgress {
        }
        // Parent: None
        // Fields count: 13
        public static class CSPerRoundStats_t {
            public const nint m_iKills = 0x30; // int32
            public const nint m_iDeaths = 0x34; // int32
            public const nint m_iAssists = 0x38; // int32
            public const nint m_iDamage = 0x3C; // int32
            public const nint m_iEquipmentValue = 0x40; // int32
            public const nint m_iMoneySaved = 0x44; // int32
            public const nint m_iKillReward = 0x48; // int32
            public const nint m_iLiveTime = 0x4C; // int32
            public const nint m_iHeadShotKills = 0x50; // int32
            public const nint m_iObjective = 0x54; // int32
            public const nint m_iCashEarned = 0x58; // int32
            public const nint m_iUtilityDamage = 0x5C; // int32
            public const nint m_iEnemiesFlashed = 0x60; // int32
        }
        // Parent: CSPerRoundStats_t
        // Fields count: 21
        public static class CSMatchStats_t {
            public const nint m_iEnemy5Ks = 0x68; // int32
            public const nint m_iEnemy4Ks = 0x6C; // int32
            public const nint m_iEnemy3Ks = 0x70; // int32
            public const nint m_iEnemyKnifeKills = 0x74; // int32
            public const nint m_iEnemyTaserKills = 0x78; // int32
            public const nint m_iEnemy2Ks = 0x7C; // int32
            public const nint m_iUtility_Count = 0x80; // int32
            public const nint m_iUtility_Successes = 0x84; // int32
            public const nint m_iUtility_Enemies = 0x88; // int32
            public const nint m_iFlash_Count = 0x8C; // int32
            public const nint m_iFlash_Successes = 0x90; // int32
            public const nint m_nHealthPointsRemovedTotal = 0x94; // int32
            public const nint m_nHealthPointsDealtTotal = 0x98; // int32
            public const nint m_nShotsFiredTotal = 0x9C; // int32
            public const nint m_nShotsOnTargetTotal = 0xA0; // int32
            public const nint m_i1v1Count = 0xA4; // int32
            public const nint m_i1v1Wins = 0xA8; // int32
            public const nint m_i1v2Count = 0xAC; // int32
            public const nint m_i1v2Wins = 0xB0; // int32
            public const nint m_iEntryCount = 0xB4; // int32
            public const nint m_iEntryWins = 0xB8; // int32
        }
        // Parent: CBaseEntity
        // Fields count: 8
        public static class CCSGO_TeamPreviewCharacterPosition {
            public const nint m_nVariant = 0x4C0; // int32
            public const nint m_nRandom = 0x4C4; // int32
            public const nint m_nOrdinal = 0x4C8; // int32
            public const nint m_sWeaponName = 0x4D0; // CUtlString
            public const nint m_xuid = 0x4D8; // uint64
            public const nint m_agentItem = 0x4E0; // CEconItemView
            public const nint m_glovesItem = 0x758; // CEconItemView
            public const nint m_weaponItem = 0x9D0; // CEconItemView
        }
        // Parent: CCSGO_TeamPreviewCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamSelectCharacterPosition {
        }
        // Parent: CCSGO_TeamSelectCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamSelectTerroristPosition {
        }
        // Parent: CCSGO_TeamSelectCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamSelectCounterTerroristPosition {
        }
        // Parent: CCSGO_TeamPreviewCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamIntroCharacterPosition {
        }
        // Parent: CCSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamIntroTerroristPosition {
        }
        // Parent: CCSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_TeamIntroCounterTerroristPosition {
        }
        // Parent: CCSGO_TeamIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroCharacterPosition {
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroTerroristPosition {
        }
        // Parent: CCSGO_WingmanIntroCharacterPosition
        // Fields count: 0
        public static class CCSGO_WingmanIntroCounterTerroristPosition {
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CCSMinimapBoundary {
        }
        // Parent: None
        // Fields count: 0
        public static class CCSGOPlayerAnimGraphState {
        }
        // Parent: CBaseEntity
        // Fields count: 5
        public static class CPlayerPing {
            public const nint m_hPlayer = 0x4C8; // CHandle<CCSPlayerPawn>
            public const nint m_hPingedEntity = 0x4CC; // CHandle<CBaseEntity>
            public const nint m_iType = 0x4D0; // int32
            public const nint m_bUrgent = 0x4D4; // bool
            public const nint m_szPlaceName = 0x4D5; // char[18]
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 2
        public static class CCSPlayer_PingServices {
            public const nint m_flPlayerPingTokens = 0x40; // GameTime_t[5]
            public const nint m_hPlayerPing = 0x54; // CHandle<CBaseEntity>
        }
        // Parent: CBaseEntity
        // Fields count: 10
        public static class CCSPlayerResource {
            public const nint m_bHostageAlive = 0x4C0; // bool[12]
            public const nint m_isHostageFollowingSomeone = 0x4CC; // bool[12]
            public const nint m_iHostageEntityIDs = 0x4D8; // CEntityIndex[12]
            public const nint m_bombsiteCenterA = 0x508; // 
            public const nint m_bombsiteCenterB = 0x514; // 
            public const nint m_hostageRescueX = 0x520; // int32[4]
            public const nint m_hostageRescueY = 0x530; // int32[4]
            public const nint m_hostageRescueZ = 0x540; // int32[4]
            public const nint m_bEndMatchNextMapAllVoted = 0x550; // bool
            public const nint m_foundGoalPositions = 0x551; // bool
        }
        // Parent: None
        // Fields count: 0
        public static class CCSPlayerControllerAPI {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CPlayer_ViewModelServices {
        }
        // Parent: CPlayer_CameraServices
        // Fields count: 7
        public static class CCSPlayerBase_CameraServices {
            public const nint m_iFOV = 0x170; // uint32
            public const nint m_iFOVStart = 0x174; // uint32
            public const nint m_flFOVTime = 0x178; // GameTime_t
            public const nint m_flFOVRate = 0x17C; // float32
            public const nint m_hZoomOwner = 0x180; // CHandle<CBaseEntity>
            public const nint m_hTriggerFogList = 0x188; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_hLastFogTrigger = 0x1A0; // CHandle<CBaseEntity>
        }
        // Parent: None
        // Fields count: 2
        public static class WeaponPurchaseCount_t {
            public const nint m_nItemDefIndex = 0x30; // uint16
            public const nint m_nCount = 0x32; // uint16
        }
        // Parent: None
        // Fields count: 1
        public static class WeaponPurchaseTracker_t {
            public const nint m_weaponPurchases = 0x8; // CUtlVectorEmbeddedNetworkVar<WeaponPurchaseCount_t>
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 4
        public static class CCSPlayer_ActionTrackingServices {
            public const nint m_hLastWeaponBeforeC4AutoSwitch = 0x208; // CHandle<CBasePlayerWeapon>
            public const nint m_bIsRescuing = 0x23C; // bool
            public const nint m_weaponPurchasesThisMatch = 0x240; // WeaponPurchaseTracker_t
            public const nint m_weaponPurchasesThisRound = 0x298; // WeaponPurchaseTracker_t
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 1
        public static class CCSPlayer_BulletServices {
            public const nint m_totalHitsOnServer = 0x40; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class SellbackPurchaseEntry_t {
            public const nint m_unDefIdx = 0x30; // uint16
            public const nint m_nCost = 0x34; // int32
            public const nint m_nPrevArmor = 0x38; // int32
            public const nint m_bPrevHelmet = 0x3C; // bool
            public const nint m_hItem = 0x40; // CEntityHandle
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 1
        public static class CCSPlayer_BuyServices {
            public const nint m_vecSellbackPurchaseEntries = 0xC8; // CUtlVectorEmbeddedNetworkVar<SellbackPurchaseEntry_t>
        }
        // Parent: CCSPlayerBase_CameraServices
        // Fields count: 0
        public static class CCSPlayer_CameraServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 2
        public static class CCSPlayer_HostageServices {
            public const nint m_hCarriedHostage = 0x40; // CHandle<CBaseEntity>
            public const nint m_hCarriedHostageProp = 0x44; // CHandle<CBaseEntity>
        }
        // Parent: CPlayer_ItemServices
        // Fields count: 3
        public static class CCSPlayer_ItemServices {
            public const nint m_bHasDefuser = 0x40; // bool
            public const nint m_bHasHelmet = 0x41; // bool
            public const nint m_bHasHeavyArmor = 0x42; // bool
        }
        // Parent: CPlayer_MovementServices_Humanoid
        // Fields count: 39
        public static class CCSPlayer_MovementServices {
            public const nint m_flMaxFallVelocity = 0x228; // float32
            public const nint m_vecLadderNormal = 0x22C; // 
            public const nint m_nLadderSurfacePropIndex = 0x238; // int32
            public const nint m_flDuckAmount = 0x23C; // float32
            public const nint m_flDuckSpeed = 0x240; // float32
            public const nint m_bDuckOverride = 0x244; // bool
            public const nint m_bDesiresDuck = 0x245; // bool
            public const nint m_flDuckOffset = 0x248; // float32
            public const nint m_nDuckTimeMsecs = 0x24C; // uint32
            public const nint m_nDuckJumpTimeMsecs = 0x250; // uint32
            public const nint m_nJumpTimeMsecs = 0x254; // uint32
            public const nint m_flLastDuckTime = 0x258; // float32
            public const nint m_vecLastPositionAtFullCrouchSpeed = 0x268; // Vector2D
            public const nint m_duckUntilOnGround = 0x270; // bool
            public const nint m_bHasWalkMovedSinceLastJump = 0x271; // bool
            public const nint m_bInStuckTest = 0x272; // bool
            public const nint m_flStuckCheckTime = 0x280; // 
            public const nint m_nTraceCount = 0x480; // int32
            public const nint m_StuckLast = 0x484; // int32
            public const nint m_bSpeedCropped = 0x488; // bool
            public const nint m_nOldWaterLevel = 0x48C; // int32
            public const nint m_flWaterEntryTime = 0x490; // float32
            public const nint m_vecForward = 0x494; // 
            public const nint m_vecLeft = 0x4A0; // 
            public const nint m_vecUp = 0x4AC; // 
            public const nint m_nGameCodeHasMovedPlayerAfterCommand = 0x4B8; // int32
            public const nint m_bMadeFootstepNoise = 0x4BC; // bool
            public const nint m_iFootsteps = 0x4C0; // int32
            public const nint m_bOldJumpPressed = 0x4C4; // bool
            public const nint m_flJumpPressedTime = 0x4C8; // float32
            public const nint m_flJumpUntil = 0x4CC; // float32
            public const nint m_flJumpVel = 0x4D0; // float32
            public const nint m_fStashGrenadeParameterWhen = 0x4D4; // GameTime_t
            public const nint m_nButtonDownMaskPrev = 0x4D8; // uint64
            public const nint m_flOffsetTickCompleteTime = 0x4E0; // float32
            public const nint m_flOffsetTickStashedSpeed = 0x4E4; // float32
            public const nint m_flStamina = 0x4E8; // float32
            public const nint m_flHeightAtJumpStart = 0x4EC; // float32
            public const nint m_flMaxJumpHeightThisJump = 0x4F0; // float32
        }
        // Parent: CPlayer_UseServices
        // Fields count: 4
        public static class CCSPlayer_UseServices {
            public const nint m_hLastKnownUseEntity = 0x40; // CHandle<CBaseEntity>
            public const nint m_flLastUseTimeStamp = 0x44; // GameTime_t
            public const nint m_flTimeStartedHoldingUse = 0x48; // GameTime_t
            public const nint m_flTimeLastUsedWindow = 0x4C; // GameTime_t
        }
        // Parent: CPlayer_ViewModelServices
        // Fields count: 1
        public static class CCSPlayer_ViewModelServices {
            public const nint m_hViewModel = 0x40; // CHandle<CBaseViewModel>[3]
        }
        // Parent: CPlayer_WaterServices
        // Fields count: 6
        public static class CCSPlayer_WaterServices {
            public const nint m_NextDrownDamageTime = 0x40; // float32
            public const nint m_nDrownDmgRate = 0x44; // int32
            public const nint m_AirFinishedTime = 0x48; // GameTime_t
            public const nint m_flWaterJumpTime = 0x4C; // float32
            public const nint m_vecWaterJumpVel = 0x50; // 
            public const nint m_flSwimSoundTime = 0x5C; // float32
        }
        // Parent: CPlayer_WeaponServices
        // Fields count: 14
        public static class CCSPlayer_WeaponServices {
            public const nint m_flNextAttack = 0xA8; // GameTime_t
            public const nint m_bIsLookingAtWeapon = 0xAC; // bool
            public const nint m_bIsHoldingLookAtWeapon = 0xAD; // bool
            public const nint m_hSavedWeapon = 0xB0; // CHandle<CBasePlayerWeapon>
            public const nint m_nTimeToMelee = 0xB4; // int32
            public const nint m_nTimeToSecondary = 0xB8; // int32
            public const nint m_nTimeToPrimary = 0xBC; // int32
            public const nint m_nTimeToSniperRifle = 0xC0; // int32
            public const nint m_bIsBeingGivenItem = 0xC4; // bool
            public const nint m_bIsPickingUpItemWithUse = 0xC5; // bool
            public const nint m_bPickedUpWeapon = 0xC6; // bool
            public const nint m_bDisableAutoDeploy = 0xC7; // bool
            public const nint m_nOldShootPositionHistoryCount = 0xC8; // uint32
            public const nint m_nOldInputHistoryCount = 0x460; // uint32
        }
        // Parent: CPlayer_ObserverServices
        // Fields count: 0
        public static class CCSObserver_ObserverServices {
        }
        // Parent: CCSPlayerBase_CameraServices
        // Fields count: 0
        public static class CCSObserver_CameraServices {
        }
        // Parent: CPlayer_MovementServices
        // Fields count: 0
        public static class CCSObserver_MovementServices {
        }
        // Parent: CPlayer_UseServices
        // Fields count: 0
        public static class CCSObserver_UseServices {
        }
        // Parent: CPlayer_ViewModelServices
        // Fields count: 0
        public static class CCSObserver_ViewModelServices {
        }
        // Parent: None
        // Fields count: 5
        public static class CSAdditionalPerRoundStats_t {
            public const nint m_numChickensKilled = 0x0; // int32
            public const nint m_killsWhileBlind = 0x4; // int32
            public const nint m_bombCarrierkills = 0x8; // int32
            public const nint m_iBurnDamageInflicted = 0xC; // int32
            public const nint m_iDinks = 0x10; // int32
        }
        // Parent: CSAdditionalPerRoundStats_t
        // Fields count: 12
        public static class CSAdditionalMatchStats_t {
            public const nint m_numRoundsSurvived = 0x14; // int32
            public const nint m_maxNumRoundsSurvived = 0x18; // int32
            public const nint m_numRoundsSurvivedTotal = 0x1C; // int32
            public const nint m_iRoundsWonWithoutPurchase = 0x20; // int32
            public const nint m_iRoundsWonWithoutPurchaseTotal = 0x24; // int32
            public const nint m_numFirstKills = 0x28; // int32
            public const nint m_numClutchKills = 0x2C; // int32
            public const nint m_numPistolKills = 0x30; // int32
            public const nint m_numSniperKills = 0x34; // int32
            public const nint m_iNumSuicides = 0x38; // int32
            public const nint m_iNumTeamKills = 0x3C; // int32
            public const nint m_iTeamDamage = 0x40; // int32
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 5
        public static class CCSPlayerController_ActionTrackingServices {
            public const nint m_perRoundStats = 0x40; // CUtlVectorEmbeddedNetworkVar<CSPerRoundStats_t>
            public const nint m_matchStats = 0x90; // CSMatchStats_t
            public const nint m_iNumRoundKills = 0x150; // int32
            public const nint m_iNumRoundKillsHeadshots = 0x154; // int32
            public const nint m_unTotalRoundDamageDealt = 0x158; // uint32
        }
        // Parent: None
        // Fields count: 14
        public static class CDamageRecord {
            public const nint m_PlayerDamager = 0x28; // CHandle<CCSPlayerPawnBase>
            public const nint m_PlayerRecipient = 0x2C; // CHandle<CCSPlayerPawnBase>
            public const nint m_hPlayerControllerDamager = 0x30; // CHandle<CCSPlayerController>
            public const nint m_hPlayerControllerRecipient = 0x34; // CHandle<CCSPlayerController>
            public const nint m_szPlayerDamagerName = 0x38; // CUtlString
            public const nint m_szPlayerRecipientName = 0x40; // CUtlString
            public const nint m_DamagerXuid = 0x48; // uint64
            public const nint m_RecipientXuid = 0x50; // uint64
            public const nint m_iDamage = 0x58; // int32
            public const nint m_iActualHealthRemoved = 0x5C; // int32
            public const nint m_iNumHits = 0x60; // int32
            public const nint m_iLastBulletUpdate = 0x64; // int32
            public const nint m_bIsOtherEnemy = 0x68; // bool
            public const nint m_killType = 0x69; // EKillTypes_t
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 2
        public static class CCSPlayerController_DamageServices {
            public const nint m_nSendUpdate = 0x40; // int32
            public const nint m_DamageList = 0x48; // CUtlVectorEmbeddedNetworkVar<CDamageRecord>
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 6
        public static class CCSPlayerController_InGameMoneyServices {
            public const nint m_bReceivesMoneyNextRound = 0x40; // bool
            public const nint m_iAccountMoneyEarnedForNextRound = 0x44; // int32
            public const nint m_iAccount = 0x48; // int32
            public const nint m_iStartAccount = 0x4C; // int32
            public const nint m_iTotalCashSpent = 0x50; // int32
            public const nint m_iCashSpentThisRound = 0x54; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class ServerAuthoritativeWeaponSlot_t {
            public const nint unClass = 0x28; // uint16
            public const nint unSlot = 0x2A; // uint16
            public const nint unItemDefIdx = 0x2C; // uint16
        }
        // Parent: CPlayerControllerComponent
        // Fields count: 9
        public static class CCSPlayerController_InventoryServices {
            public const nint m_unMusicID = 0x40; // uint16
            public const nint m_rank = 0x44; // MedalRank_t[6]
            public const nint m_nPersonaDataPublicLevel = 0x5C; // int32
            public const nint m_nPersonaDataPublicCommendsLeader = 0x60; // int32
            public const nint m_nPersonaDataPublicCommendsTeacher = 0x64; // int32
            public const nint m_nPersonaDataPublicCommendsFriendly = 0x68; // int32
            public const nint m_nPersonaDataXpTrailLevel = 0x6C; // int32
            public const nint m_unEquippedPlayerSprayIDs = 0xF48; // uint32[1]
            public const nint m_vecServerAuthoritativeWeaponSlots = 0xF50; // CUtlVectorEmbeddedNetworkVar<ServerAuthoritativeWeaponSlot_t>
        }
        // Parent: None
        // Fields count: 0
        public static class CCSWeaponBaseVDataAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CCSWeaponBaseAPI {
        }
        // Parent: None
        // Fields count: 1
        public static class CFiringModeFloat {
            public const nint m_flValues = 0x0; // float32[2]
        }
        // Parent: None
        // Fields count: 1
        public static class CFiringModeInt {
            public const nint m_nValues = 0x0; // int32[2]
        }
        // Parent: None
        // Fields count: 4
        public static class CIronSightController {
            public const nint m_bIronSightAvailable = 0x8; // bool
            public const nint m_flIronSightAmount = 0xC; // float32
            public const nint m_flIronSightAmountGained = 0x10; // float32
            public const nint m_flIronSightAmountBiased = 0x14; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CHintMessage {
            public const nint m_hintString = 0x0; // char*
            public const nint m_args = 0x8; // CUtlVector<char*>
            public const nint m_duration = 0x20; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class CHintMessageQueue {
            public const nint m_tmMessageEnd = 0x0; // float32
            public const nint m_messages = 0x8; // CUtlVector<CHintMessage*>
            public const nint m_pPlayerController = 0x20; // CBasePlayerController*
        }
        // Parent: None
        // Fields count: 0
        public static class CCSObserverPawnAPI {
        }
        // Parent: None
        // Fields count: 0
        public static class CCSPlayerPawnAPI {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 0
        public static class CCSPlayer_DamageReactServices {
        }
        // Parent: CPlayerPawnComponent
        // Fields count: 5
        public static class CCSPlayer_RadioServices {
            public const nint m_flGotHostageTalkTimer = 0x40; // GameTime_t
            public const nint m_flDefusingTalkTimer = 0x44; // GameTime_t
            public const nint m_flC4PlantTalkTimer = 0x48; // GameTime_t
            public const nint m_flRadioTokenSlots = 0x4C; // GameTime_t[3]
            public const nint m_bIgnoreRadio = 0x58; // bool
        }
        // Parent: None
        // Fields count: 6
        public static class CBaseIssue {
            public const nint m_szTypeString = 0x20; // char[64]
            public const nint m_szDetailsString = 0x60; // char[260]
            public const nint m_iNumYesVotes = 0x164; // int32
            public const nint m_iNumNoVotes = 0x168; // int32
            public const nint m_iNumPotentialVotes = 0x16C; // int32
            public const nint m_pVoteController = 0x170; // CVoteController*
        }
        // Parent: CBaseEntity
        // Fields count: 14
        public static class CVoteController {
            public const nint m_iActiveIssueIndex = 0x4C0; // int32
            public const nint m_iOnlyTeamToVote = 0x4C4; // int32
            public const nint m_nVoteOptionCount = 0x4C8; // int32[5]
            public const nint m_nPotentialVotes = 0x4DC; // int32
            public const nint m_bIsYesNoVote = 0x4E0; // bool
            public const nint m_acceptingVotesTimer = 0x4E8; // CountdownTimer
            public const nint m_executeCommandTimer = 0x500; // CountdownTimer
            public const nint m_resetVoteTimer = 0x518; // CountdownTimer
            public const nint m_nVotesCast = 0x530; // int32[64]
            public const nint m_playerHoldingVote = 0x630; // CPlayerSlot
            public const nint m_playerOverrideForVote = 0x634; // CPlayerSlot
            public const nint m_nHighestCountIndex = 0x638; // int32
            public const nint m_potentialIssues = 0x640; // CUtlVector<CBaseIssue*>
            public const nint m_VoteOptions = 0x658; // CUtlVector<char*>
        }
        // Parent: CBaseEntity
        // Fields count: 24
        public static class CMapVetoPickController {
            public const nint m_bPlayedIntroVcd = 0x4C0; // bool
            public const nint m_bNeedToPlayFiveSecondsRemaining = 0x4C1; // bool
            public const nint m_dblPreMatchDraftSequenceTime = 0x4E0; // float64
            public const nint m_bPreMatchDraftStateChanged = 0x4E8; // bool
            public const nint m_nDraftType = 0x4EC; // int32
            public const nint m_nTeamWinningCoinToss = 0x4F0; // int32
            public const nint m_nTeamWithFirstChoice = 0x4F4; // int32[64]
            public const nint m_nVoteMapIdsList = 0x5F4; // int32[7]
            public const nint m_nAccountIDs = 0x610; // int32[64]
            public const nint m_nMapId0 = 0x710; // int32[64]
            public const nint m_nMapId1 = 0x810; // int32[64]
            public const nint m_nMapId2 = 0x910; // int32[64]
            public const nint m_nMapId3 = 0xA10; // int32[64]
            public const nint m_nMapId4 = 0xB10; // int32[64]
            public const nint m_nMapId5 = 0xC10; // int32[64]
            public const nint m_nStartingSide0 = 0xD10; // int32[64]
            public const nint m_nCurrentPhase = 0xE10; // int32
            public const nint m_nPhaseStartTick = 0xE14; // int32
            public const nint m_nPhaseDurationTicks = 0xE18; // int32
            public const nint m_OnMapVetoed = 0xE20; // CEntityOutputTemplate<CUtlSymbolLarge>
            public const nint m_OnMapPicked = 0xE48; // CEntityOutputTemplate<CUtlSymbolLarge>
            public const nint m_OnSidesPicked = 0xE70; // CEntityOutputTemplate<int32>
            public const nint m_OnNewPhaseStarted = 0xE98; // CEntityOutputTemplate<int32>
            public const nint m_OnLevelTransition = 0xEC0; // CEntityOutputTemplate<int32>
        }
        // Parent: None
        // Fields count: 0
        public static class CCSPulseServerFuncs_Globals {
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CLogicEventListener {
            public const nint m_strEventName = 0x4D0; // CUtlString
            public const nint m_bIsEnabled = 0x4D8; // bool
            public const nint m_nTeam = 0x4DC; // int32
            public const nint m_OnEventFired = 0x4E0; // CEntityIOOutput
        }
        // Parent: CAnimGraphControllerBase
        // Fields count: 1
        public static class CChicken_GraphController {
            public const nint m_pszActivity = 0x18; // CAnimGraphParamRef<char*>
        }
        // Parent: None
        // Fields count: 13
        public static class CBot {
            public const nint m_pController = 0x10; // CCSPlayerController*
            public const nint m_pPlayer = 0x18; // CCSPlayerPawn*
            public const nint m_bHasSpawned = 0x20; // bool
            public const nint m_id = 0x24; // uint32
            public const nint m_isRunning = 0xB0; // bool
            public const nint m_isCrouching = 0xB1; // bool
            public const nint m_forwardSpeed = 0xB4; // float32
            public const nint m_leftSpeed = 0xB8; // float32
            public const nint m_verticalSpeed = 0xBC; // float32
            public const nint m_buttonFlags = 0xC0; // uint64
            public const nint m_jumpTimestamp = 0xC8; // float32
            public const nint m_viewForward = 0xCC; // 
            public const nint m_postureStackIndex = 0xE8; // int32
        }
        // Parent: None
        // Fields count: 0
        public static class CBtNode {
        }
        // Parent: CBtNode
        // Fields count: 0
        public static class CBtNodeDecorator {
        }
        // Parent: CBtNode
        // Fields count: 0
        public static class CBtNodeComposite {
        }
        // Parent: CBtNode
        // Fields count: 12
        public static class CBtActionAim {
            public const nint m_szSensorInputKey = 0x68; // CUtlString
            public const nint m_szAimReadyKey = 0x80; // CUtlString
            public const nint m_flZoomCooldownTimestamp = 0x88; // float32
            public const nint m_bDoneAiming = 0x8C; // bool
            public const nint m_flLerpStartTime = 0x90; // float32
            public const nint m_flNextLookTargetLerpTime = 0x94; // float32
            public const nint m_flPenaltyReductionRatio = 0x98; // float32
            public const nint m_NextLookTarget = 0x9C; // QAngle
            public const nint m_AimTimer = 0xA8; // CountdownTimer
            public const nint m_SniperHoldTimer = 0xC0; // CountdownTimer
            public const nint m_FocusIntervalTimer = 0xD8; // CountdownTimer
            public const nint m_bAcquired = 0xF0; // bool
        }
        // Parent: CBtNode
        // Fields count: 4
        public static class CBtActionCombatPositioning {
            public const nint m_szSensorInputKey = 0x68; // CUtlString
            public const nint m_szIsAttackingKey = 0x80; // CUtlString
            public const nint m_ActionTimer = 0x88; // CountdownTimer
            public const nint m_bCrouching = 0xA0; // bool
        }
        // Parent: CBtNode
        // Fields count: 14
        public static class CBtActionMoveTo {
            public const nint m_szDestinationInputKey = 0x60; // CUtlString
            public const nint m_szHidingSpotInputKey = 0x68; // CUtlString
            public const nint m_szThreatInputKey = 0x70; // CUtlString
            public const nint m_vecDestination = 0x78; // 
            public const nint m_bAutoLookAdjust = 0x84; // bool
            public const nint m_bComputePath = 0x85; // bool
            public const nint m_flDamagingAreasPenaltyCost = 0x88; // float32
            public const nint m_CheckApproximateCornersTimer = 0x90; // CountdownTimer
            public const nint m_CheckHighPriorityItem = 0xA8; // CountdownTimer
            public const nint m_RepathTimer = 0xC0; // CountdownTimer
            public const nint m_flArrivalEpsilon = 0xD8; // float32
            public const nint m_flAdditionalArrivalEpsilon2D = 0xDC; // float32
            public const nint m_flHidingSpotCheckDistanceThreshold = 0xE0; // float32
            public const nint m_flNearestAreaDistanceThreshold = 0xE4; // float32
        }
        // Parent: CBtNode
        // Fields count: 1
        public static class CBtActionParachutePositioning {
            public const nint m_ActionTimer = 0x58; // CountdownTimer
        }
        // Parent: CBtNodeDecorator
        // Fields count: 1
        public static class CBtNodeCondition {
            public const nint m_bNegated = 0x58; // bool
        }
        // Parent: CBtNodeCondition
        // Fields count: 3
        public static class CBtNodeConditionInactive {
            public const nint m_flRoundStartThresholdSeconds = 0x78; // float32
            public const nint m_flSensorInactivityThresholdSeconds = 0x7C; // float32
            public const nint m_SensorInactivityTimer = 0x80; // CountdownTimer
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CPointEntity {
        }
        // Parent: CBaseEntity
        // Fields count: 24
        public static class CEnvCombinedLightProbeVolume {
            public const nint m_Color = 0x1518; // Color
            public const nint m_flBrightness = 0x151C; // float32
            public const nint m_hCubemapTexture = 0x1520; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bCustomCubemapTexture = 0x1528; // bool
            public const nint m_hLightProbeTexture = 0x1530; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightIndicesTexture = 0x1538; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightScalarsTexture = 0x1540; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightShadowsTexture = 0x1548; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vBoxMins = 0x1550; // 
            public const nint m_vBoxMaxs = 0x155C; // 
            public const nint m_bMoveable = 0x1568; // bool
            public const nint m_nHandshake = 0x156C; // int32
            public const nint m_nEnvCubeMapArrayIndex = 0x1570; // int32
            public const nint m_nPriority = 0x1574; // int32
            public const nint m_bStartDisabled = 0x1578; // bool
            public const nint m_flEdgeFadeDist = 0x157C; // float32
            public const nint m_vEdgeFadeDists = 0x1580; // 
            public const nint m_nLightProbeSizeX = 0x158C; // int32
            public const nint m_nLightProbeSizeY = 0x1590; // int32
            public const nint m_nLightProbeSizeZ = 0x1594; // int32
            public const nint m_nLightProbeAtlasX = 0x1598; // int32
            public const nint m_nLightProbeAtlasY = 0x159C; // int32
            public const nint m_nLightProbeAtlasZ = 0x15A0; // int32
            public const nint m_bEnabled = 0x15B9; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 18
        public static class CEnvCubemap {
            public const nint m_hCubemapTexture = 0x540; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bCustomCubemapTexture = 0x548; // bool
            public const nint m_flInfluenceRadius = 0x54C; // float32
            public const nint m_vBoxProjectMins = 0x550; // 
            public const nint m_vBoxProjectMaxs = 0x55C; // 
            public const nint m_bMoveable = 0x568; // bool
            public const nint m_nHandshake = 0x56C; // int32
            public const nint m_nEnvCubeMapArrayIndex = 0x570; // int32
            public const nint m_nPriority = 0x574; // int32
            public const nint m_flEdgeFadeDist = 0x578; // float32
            public const nint m_vEdgeFadeDists = 0x57C; // 
            public const nint m_flDiffuseScale = 0x588; // float32
            public const nint m_bStartDisabled = 0x58C; // bool
            public const nint m_bDefaultEnvMap = 0x58D; // bool
            public const nint m_bDefaultSpecEnvMap = 0x58E; // bool
            public const nint m_bIndoorCubeMap = 0x58F; // bool
            public const nint m_bCopyDiffuseFromDefaultCubemap = 0x590; // bool
            public const nint m_bEnabled = 0x5A0; // bool
        }
        // Parent: CEnvCubemap
        // Fields count: 0
        public static class CEnvCubemapBox {
        }
        // Parent: CBaseEntity
        // Fields count: 18
        public static class CEnvCubemapFog {
            public const nint m_flEndDistance = 0x4C0; // float32
            public const nint m_flStartDistance = 0x4C4; // float32
            public const nint m_flFogFalloffExponent = 0x4C8; // float32
            public const nint m_bHeightFogEnabled = 0x4CC; // bool
            public const nint m_flFogHeightWidth = 0x4D0; // float32
            public const nint m_flFogHeightEnd = 0x4D4; // float32
            public const nint m_flFogHeightStart = 0x4D8; // float32
            public const nint m_flFogHeightExponent = 0x4DC; // float32
            public const nint m_flLODBias = 0x4E0; // float32
            public const nint m_bActive = 0x4E4; // bool
            public const nint m_bStartDisabled = 0x4E5; // bool
            public const nint m_flFogMaxOpacity = 0x4E8; // float32
            public const nint m_nCubemapSourceType = 0x4EC; // int32
            public const nint m_hSkyMaterial = 0x4F0; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_iszSkyEntity = 0x4F8; // CUtlSymbolLarge
            public const nint m_hFogCubemapTexture = 0x500; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_bHasHeightFogEnd = 0x508; // bool
            public const nint m_bFirstTime = 0x509; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 16
        public static class CGradientFog {
            public const nint m_hGradientFogTexture = 0x4C0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_flFogStartDistance = 0x4C8; // float32
            public const nint m_flFogEndDistance = 0x4CC; // float32
            public const nint m_bHeightFogEnabled = 0x4D0; // bool
            public const nint m_flFogStartHeight = 0x4D4; // float32
            public const nint m_flFogEndHeight = 0x4D8; // float32
            public const nint m_flFarZ = 0x4DC; // float32
            public const nint m_flFogMaxOpacity = 0x4E0; // float32
            public const nint m_flFogFalloffExponent = 0x4E4; // float32
            public const nint m_flFogVerticalExponent = 0x4E8; // float32
            public const nint m_fogColor = 0x4EC; // Color
            public const nint m_flFogStrength = 0x4F0; // float32
            public const nint m_flFadeTime = 0x4F4; // float32
            public const nint m_bStartDisabled = 0x4F8; // bool
            public const nint m_bIsEnabled = 0x4F9; // bool
            public const nint m_bGradientFogNeedsTextures = 0x4FA; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 17
        public static class CEnvLightProbeVolume {
            public const nint m_hLightProbeTexture = 0x1498; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightIndicesTexture = 0x14A0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightScalarsTexture = 0x14A8; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hLightProbeDirectLightShadowsTexture = 0x14B0; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vBoxMins = 0x14B8; // 
            public const nint m_vBoxMaxs = 0x14C4; // 
            public const nint m_bMoveable = 0x14D0; // bool
            public const nint m_nHandshake = 0x14D4; // int32
            public const nint m_nPriority = 0x14D8; // int32
            public const nint m_bStartDisabled = 0x14DC; // bool
            public const nint m_nLightProbeSizeX = 0x14E0; // int32
            public const nint m_nLightProbeSizeY = 0x14E4; // int32
            public const nint m_nLightProbeSizeZ = 0x14E8; // int32
            public const nint m_nLightProbeAtlasX = 0x14EC; // int32
            public const nint m_nLightProbeAtlasY = 0x14F0; // int32
            public const nint m_nLightProbeAtlasZ = 0x14F4; // int32
            public const nint m_bEnabled = 0x1501; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 6
        public static class CPlayerVisibility {
            public const nint m_flVisibilityStrength = 0x4C0; // float32
            public const nint m_flFogDistanceMultiplier = 0x4C4; // float32
            public const nint m_flFogMaxDensityMultiplier = 0x4C8; // float32
            public const nint m_flFadeTime = 0x4CC; // float32
            public const nint m_bStartDisabled = 0x4D0; // bool
            public const nint m_bIsEnabled = 0x4D1; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 8
        public static class CTonemapController2 {
            public const nint m_flAutoExposureMin = 0x4C0; // float32
            public const nint m_flAutoExposureMax = 0x4C4; // float32
            public const nint m_flTonemapPercentTarget = 0x4C8; // float32
            public const nint m_flTonemapPercentBrightPixels = 0x4CC; // float32
            public const nint m_flTonemapMinAvgLum = 0x4D0; // float32
            public const nint m_flExposureAdaptationSpeedUp = 0x4D4; // float32
            public const nint m_flExposureAdaptationSpeedDown = 0x4D8; // float32
            public const nint m_flTonemapEVSmoothingRange = 0x4DC; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 28
        public static class CEnvVolumetricFogController {
            public const nint m_flScattering = 0x4C0; // float32
            public const nint m_flAnisotropy = 0x4C4; // float32
            public const nint m_flFadeSpeed = 0x4C8; // float32
            public const nint m_flDrawDistance = 0x4CC; // float32
            public const nint m_flFadeInStart = 0x4D0; // float32
            public const nint m_flFadeInEnd = 0x4D4; // float32
            public const nint m_flIndirectStrength = 0x4D8; // float32
            public const nint m_nIndirectTextureDimX = 0x4DC; // int32
            public const nint m_nIndirectTextureDimY = 0x4E0; // int32
            public const nint m_nIndirectTextureDimZ = 0x4E4; // int32
            public const nint m_vBoxMins = 0x4E8; // 
            public const nint m_vBoxMaxs = 0x4F4; // 
            public const nint m_bActive = 0x500; // bool
            public const nint m_flStartAnisoTime = 0x504; // GameTime_t
            public const nint m_flStartScatterTime = 0x508; // GameTime_t
            public const nint m_flStartDrawDistanceTime = 0x50C; // GameTime_t
            public const nint m_flStartAnisotropy = 0x510; // float32
            public const nint m_flStartScattering = 0x514; // float32
            public const nint m_flStartDrawDistance = 0x518; // float32
            public const nint m_flDefaultAnisotropy = 0x51C; // float32
            public const nint m_flDefaultScattering = 0x520; // float32
            public const nint m_flDefaultDrawDistance = 0x524; // float32
            public const nint m_bStartDisabled = 0x528; // bool
            public const nint m_bEnableIndirect = 0x529; // bool
            public const nint m_bIsMaster = 0x52A; // bool
            public const nint m_hFogIndirectTexture = 0x530; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_nForceRefreshCount = 0x538; // int32
            public const nint m_bFirstTime = 0x53C; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 7
        public static class CEnvVolumetricFogVolume {
            public const nint m_bActive = 0x4C0; // bool
            public const nint m_vBoxMins = 0x4C4; // 
            public const nint m_vBoxMaxs = 0x4D0; // 
            public const nint m_bStartDisabled = 0x4DC; // bool
            public const nint m_flStrength = 0x4E0; // float32
            public const nint m_nFalloffShape = 0x4E4; // int32
            public const nint m_flFalloffExponent = 0x4E8; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CFogController {
            public const nint m_fog = 0x4C0; // fogparams_t
            public const nint m_bUseAngles = 0x528; // bool
            public const nint m_iChangedVariables = 0x52C; // int32
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoTarget {
        }
        // Parent: CServerOnlyPointEntity
        // Fields count: 0
        public static class CInfoTargetServerOnly {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoParticleTarget {
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CInfoVisibilityBox {
            public const nint m_nMode = 0x4C4; // int32
            public const nint m_vBoxSize = 0x4C8; // 
            public const nint m_bEnabled = 0x4D4; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 7
        public static class CInfoWorldLayer {
            public const nint m_pOutputOnEntitiesSpawned = 0x4C0; // CEntityIOOutput
            public const nint m_worldName = 0x4E8; // CUtlSymbolLarge
            public const nint m_layerName = 0x4F0; // CUtlSymbolLarge
            public const nint m_bWorldLayerVisible = 0x4F8; // bool
            public const nint m_bEntitiesSpawned = 0x4F9; // bool
            public const nint m_bCreateAsChildSpawnGroup = 0x4FA; // bool
            public const nint m_hLayerSpawnGroup = 0x4FC; // uint32
        }
        // Parent: CLogicalEntity
        // Fields count: 8
        public static class CMultiLightProxy {
            public const nint m_iszLightNameFilter = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszLightClassFilter = 0x4C8; // CUtlSymbolLarge
            public const nint m_flLightRadiusFilter = 0x4D0; // float32
            public const nint m_flBrightnessDelta = 0x4D4; // float32
            public const nint m_bPerformScreenFade = 0x4D8; // bool
            public const nint m_flTargetBrightnessMultiplier = 0x4DC; // float32
            public const nint m_flCurrentBrightnessMultiplier = 0x4E0; // float32
            public const nint m_vecLights = 0x4E8; // CUtlVector<CHandle<CLightEntity>>
        }
        // Parent: CBaseEntity
        // Fields count: 25
        public static class CPointCamera {
            public const nint m_FOV = 0x4C0; // float32
            public const nint m_Resolution = 0x4C4; // float32
            public const nint m_bFogEnable = 0x4C8; // bool
            public const nint m_FogColor = 0x4C9; // Color
            public const nint m_flFogStart = 0x4D0; // float32
            public const nint m_flFogEnd = 0x4D4; // float32
            public const nint m_flFogMaxDensity = 0x4D8; // float32
            public const nint m_bActive = 0x4DC; // bool
            public const nint m_bUseScreenAspectRatio = 0x4DD; // bool
            public const nint m_flAspectRatio = 0x4E0; // float32
            public const nint m_bNoSky = 0x4E4; // bool
            public const nint m_fBrightness = 0x4E8; // float32
            public const nint m_flZFar = 0x4EC; // float32
            public const nint m_flZNear = 0x4F0; // float32
            public const nint m_bCanHLTVUse = 0x4F4; // bool
            public const nint m_bDofEnabled = 0x4F5; // bool
            public const nint m_flDofNearBlurry = 0x4F8; // float32
            public const nint m_flDofNearCrisp = 0x4FC; // float32
            public const nint m_flDofFarCrisp = 0x500; // float32
            public const nint m_flDofFarBlurry = 0x504; // float32
            public const nint m_flDofTiltToGround = 0x508; // float32
            public const nint m_TargetFOV = 0x50C; // float32
            public const nint m_DegreesPerSecond = 0x510; // float32
            public const nint m_bIsOn = 0x514; // bool
            public const nint m_pNext = 0x518; // CPointCamera*
        }
        // Parent: CPointCamera
        // Fields count: 1
        public static class CPointCameraVFOV {
            public const nint m_flVerticalFOV = 0x520; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 12
        public static class CPointTemplate {
            public const nint m_iszWorldName = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszSource2EntityLumpName = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszEntityFilterName = 0x4D0; // CUtlSymbolLarge
            public const nint m_flTimeoutInterval = 0x4D8; // float32
            public const nint m_bAsynchronouslySpawnEntities = 0x4DC; // bool
            public const nint m_pOutputOnSpawned = 0x4E0; // CEntityIOOutput
            public const nint m_clientOnlyEntityBehavior = 0x508; // PointTemplateClientOnlyEntityBehavior_t
            public const nint m_ownerSpawnGroupType = 0x50C; // PointTemplateOwnerSpawnGroupType_t
            public const nint m_createdSpawnGroupHandles = 0x510; // CUtlVector<uint32>
            public const nint m_SpawnedEntityHandles = 0x528; // CUtlVector<CEntityHandle>
            public const nint m_ScriptSpawnCallback = 0x540; // HSCRIPT
            public const nint m_ScriptCallbackScope = 0x548; // HSCRIPT
        }
        // Parent: CBaseEntity
        // Fields count: 4
        public static class CGameGibManager {
            public const nint m_bAllowNewGibs = 0x4E0; // bool
            public const nint m_iCurrentMaxPieces = 0x4E4; // int32
            public const nint m_iMaxPieces = 0x4E8; // int32
            public const nint m_iLastFrame = 0x4EC; // int32
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CSoundAreaEntityBase {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_iszSoundAreaType = 0x4C8; // CUtlSymbolLarge
            public const nint m_vPos = 0x4D0; // 
        }
        // Parent: CSoundAreaEntityBase
        // Fields count: 1
        public static class CSoundAreaEntitySphere {
            public const nint m_flRadius = 0x4E0; // float32
        }
        // Parent: CSoundAreaEntityBase
        // Fields count: 2
        public static class CSoundAreaEntityOrientedBox {
            public const nint m_vMin = 0x4E0; // 
            public const nint m_vMax = 0x4EC; // 
        }
        // Parent: CBaseEntity
        // Fields count: 4
        public static class CTeam {
            public const nint m_aPlayerControllers = 0x4C0; // CNetworkUtlVectorBase<CHandle<CBasePlayerController>>
            public const nint m_aPlayers = 0x4D8; // CNetworkUtlVectorBase<CHandle<CBasePlayerPawn>>
            public const nint m_iScore = 0x4F0; // int32
            public const nint m_szTeamname = 0x4F4; // char[129]
        }
        // Parent: CBaseEntity
        // Fields count: 25
        public static class CBasePlayerController {
            public const nint m_nInButtonsWhichAreToggles = 0x4C8; // uint64
            public const nint m_nTickBase = 0x4D0; // uint32
            public const nint m_hPawn = 0x500; // CHandle<CBasePlayerPawn>
            public const nint m_nSplitScreenSlot = 0x504; // CSplitScreenSlot
            public const nint m_hSplitOwner = 0x508; // CHandle<CBasePlayerController>
            public const nint m_hSplitScreenPlayers = 0x510; // CUtlVector<CHandle<CBasePlayerController>>
            public const nint m_bIsHLTV = 0x528; // bool
            public const nint m_iConnected = 0x52C; // PlayerConnectedState
            public const nint m_iszPlayerName = 0x530; // char[128]
            public const nint m_szNetworkIDString = 0x5B0; // CUtlString
            public const nint m_fLerpTime = 0x5B8; // float32
            public const nint m_bLagCompensation = 0x5BC; // bool
            public const nint m_bPredict = 0x5BD; // bool
            public const nint m_bAutoKickDisabled = 0x5BE; // bool
            public const nint m_bIsLowViolence = 0x5BF; // bool
            public const nint m_bGamePaused = 0x5C0; // bool
            public const nint m_nLastRealCommandNumberExecuted = 0x654; // int32
            public const nint m_nLastLateCommandExecuted = 0x658; // int32
            public const nint m_iIgnoreGlobalChat = 0x670; // ChatIgnoreType_t
            public const nint m_flLastPlayerTalkTime = 0x674; // float32
            public const nint m_flLastEntitySteadyState = 0x678; // float32
            public const nint m_nAvailableEntitySteadyState = 0x67C; // int32
            public const nint m_bHasAnySteadyStateEnts = 0x680; // bool
            public const nint m_steamID = 0x690; // uint64
            public const nint m_iDesiredFOV = 0x698; // uint32
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 14
        public static class CBasePlayerVData {
            public const nint m_sModelName = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_flHeadDamageMultiplier = 0x108; // CSkillFloat
            public const nint m_flChestDamageMultiplier = 0x118; // CSkillFloat
            public const nint m_flStomachDamageMultiplier = 0x128; // CSkillFloat
            public const nint m_flArmDamageMultiplier = 0x138; // CSkillFloat
            public const nint m_flLegDamageMultiplier = 0x148; // CSkillFloat
            public const nint m_flHoldBreathTime = 0x158; // float32
            public const nint m_flDrowningDamageInterval = 0x15C; // float32
            public const nint m_nDrowningDamageInitial = 0x160; // int32
            public const nint m_nDrowningDamageMax = 0x164; // int32
            public const nint m_nWaterSpeed = 0x168; // int32
            public const nint m_flUseRange = 0x16C; // float32
            public const nint m_flUseAngleTolerance = 0x170; // float32
            public const nint m_flCrouchTime = 0x174; // float32
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 20
        public static class CBasePlayerWeaponVData {
            public const nint m_szWorldModel = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_bBuiltRightHanded = 0x108; // bool
            public const nint m_bAllowFlipping = 0x109; // bool
            public const nint m_sMuzzleAttachment = 0x110; // CUtlString
            public const nint m_szMuzzleFlashParticle = 0x118; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_iFlags = 0x1F8; // ItemFlagTypes_t
            public const nint m_nPrimaryAmmoType = 0x1F9; // AmmoIndex_t
            public const nint m_nSecondaryAmmoType = 0x1FA; // AmmoIndex_t
            public const nint m_iMaxClip1 = 0x1FC; // int32
            public const nint m_iMaxClip2 = 0x200; // int32
            public const nint m_iDefaultClip1 = 0x204; // int32
            public const nint m_iDefaultClip2 = 0x208; // int32
            public const nint m_iWeight = 0x20C; // int32
            public const nint m_bAutoSwitchTo = 0x210; // bool
            public const nint m_bAutoSwitchFrom = 0x211; // bool
            public const nint m_iRumbleEffect = 0x214; // RumbleEffect_t
            public const nint m_bLinkedCooldowns = 0x218; // bool
            public const nint m_aShootSounds = 0x220; // CUtlMap<WeaponSound_t,CSoundEventName>
            public const nint m_iSlot = 0x240; // int32
            public const nint m_iPosition = 0x244; // int32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CInfoGameEventProxy {
            public const nint m_iszEventName = 0x4C0; // CUtlSymbolLarge
            public const nint m_flRange = 0x4C8; // float32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CProjectedDecal {
            public const nint m_nTexture = 0x4C0; // int32
            public const nint m_flDistance = 0x4C4; // float32
        }
        // Parent: CSkeletonAnimationController
        // Fields count: 13
        public static class CBaseAnimGraphController {
            public const nint m_animGraphNetworkedVars = 0x18; // CAnimGraphNetworkedVariables
            public const nint m_bSequenceFinished = 0x220; // bool
            public const nint m_flSoundSyncTime = 0x224; // float32
            public const nint m_hSequence = 0x228; // HSequence
            public const nint m_flSeqStartTime = 0x22C; // GameTime_t
            public const nint m_flSeqFixedCycle = 0x230; // float32
            public const nint m_nAnimLoopMode = 0x234; // AnimLoopMode_t
            public const nint m_flPlaybackRate = 0x238; // CNetworkedQuantizedFloat
            public const nint m_nNotifyState = 0x244; // SequenceFinishNotifyState_t
            public const nint m_bNetworkedAnimationInputsChanged = 0x246; // bool
            public const nint m_bNetworkedSequenceChanged = 0x247; // bool
            public const nint m_bLastUpdateSkipped = 0x248; // bool
            public const nint m_flPrevAnimUpdateTime = 0x24C; // GameTime_t
        }
        // Parent: CBaseEntity
        // Fields count: 25
        public static class CBaseModelEntity {
            public const nint m_CRenderComponent = 0x4C0; // CRenderComponent*
            public const nint m_CHitboxComponent = 0x4C8; // CHitboxComponent
            public const nint m_flDissolveStartTime = 0x4F0; // GameTime_t
            public const nint m_OnIgnite = 0x4F8; // CEntityIOOutput
            public const nint m_nRenderMode = 0x520; // RenderMode_t
            public const nint m_nRenderFX = 0x521; // RenderFx_t
            public const nint m_bAllowFadeInView = 0x522; // bool
            public const nint m_clrRender = 0x523; // Color
            public const nint m_vecRenderAttributes = 0x528; // CUtlVectorEmbeddedNetworkVar<EntityRenderAttribute_t>
            public const nint m_bRenderToCubemaps = 0x578; // bool
            public const nint m_Collision = 0x580; // CCollisionProperty
            public const nint m_Glow = 0x630; // CGlowProperty
            public const nint m_flGlowBackfaceMult = 0x688; // float32
            public const nint m_fadeMinDist = 0x68C; // float32
            public const nint m_fadeMaxDist = 0x690; // float32
            public const nint m_flFadeScale = 0x694; // float32
            public const nint m_flShadowStrength = 0x698; // float32
            public const nint m_nObjectCulling = 0x69C; // uint8
            public const nint m_nAddDecal = 0x6A0; // int32
            public const nint m_vDecalPosition = 0x6A4; // 
            public const nint m_vDecalForwardAxis = 0x6B0; // 
            public const nint m_flDecalHealBloodRate = 0x6BC; // float32
            public const nint m_flDecalHealHeightRate = 0x6C0; // float32
            public const nint m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x6C8; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
            public const nint m_vecViewOffset = 0x6E0; // CNetworkViewOffsetVector
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CServerOnlyModelEntity {
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CModelPointEntity {
        }
        // Parent: CLogicalEntity
        // Fields count: 7
        public static class CLogicRelay {
            public const nint m_OnTrigger = 0x4C0; // CEntityIOOutput
            public const nint m_OnSpawn = 0x4E8; // CEntityIOOutput
            public const nint m_bDisabled = 0x510; // bool
            public const nint m_bWaitForRefire = 0x511; // bool
            public const nint m_bTriggerOnce = 0x512; // bool
            public const nint m_bFastRetrigger = 0x513; // bool
            public const nint m_bPassthoughCaller = 0x514; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 22
        public static class CParticleSystem {
            public const nint m_szSnapshotFileName = 0x710; // char[512]
            public const nint m_bActive = 0x910; // bool
            public const nint m_bFrozen = 0x911; // bool
            public const nint m_flFreezeTransitionDuration = 0x914; // float32
            public const nint m_nStopType = 0x918; // int32
            public const nint m_bAnimateDuringGameplayPause = 0x91C; // bool
            public const nint m_iEffectIndex = 0x920; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_flStartTime = 0x928; // GameTime_t
            public const nint m_flPreSimTime = 0x92C; // float32
            public const nint m_vServerControlPoints = 0x930; // Vector[4]
            public const nint m_iServerControlPointAssignments = 0x960; // uint8[4]
            public const nint m_hControlPointEnts = 0x964; // CHandle<CBaseEntity>[64]
            public const nint m_bNoSave = 0xA64; // bool
            public const nint m_bNoFreeze = 0xA65; // bool
            public const nint m_bNoRamp = 0xA66; // bool
            public const nint m_bStartActive = 0xA67; // bool
            public const nint m_iszEffectName = 0xA68; // CUtlSymbolLarge
            public const nint m_iszControlPointNames = 0xA70; // CUtlSymbolLarge[64]
            public const nint m_nDataCP = 0xC70; // int32
            public const nint m_vecDataCPValue = 0xC74; // 
            public const nint m_nTintCP = 0xC80; // int32
            public const nint m_clrTint = 0xC84; // Color
        }
        // Parent: CBaseEntity
        // Fields count: 16
        public static class CPathParticleRope {
            public const nint m_bStartActive = 0x4C0; // bool
            public const nint m_flMaxSimulationTime = 0x4C4; // float32
            public const nint m_iszEffectName = 0x4C8; // CUtlSymbolLarge
            public const nint m_PathNodes_Name = 0x4D0; // CUtlVector<CUtlSymbolLarge>
            public const nint m_flParticleSpacing = 0x4E8; // float32
            public const nint m_flSlack = 0x4EC; // float32
            public const nint m_flRadius = 0x4F0; // float32
            public const nint m_ColorTint = 0x4F4; // Color
            public const nint m_nEffectState = 0x4F8; // int32
            public const nint m_iEffectIndex = 0x500; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_PathNodes_Position = 0x508; // CNetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentIn = 0x520; // CNetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_TangentOut = 0x538; // CNetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_Color = 0x550; // CNetworkUtlVectorBase<Vector>
            public const nint m_PathNodes_PinEnabled = 0x568; // CNetworkUtlVectorBase<bool>
            public const nint m_PathNodes_RadiusScale = 0x580; // CNetworkUtlVectorBase<float32>
        }
        // Parent: CPathParticleRope
        // Fields count: 0
        public static class CPathParticleRopeAlias_path_particle_rope_clientside {
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CFuncWall {
            public const nint m_nState = 0x710; // int32
        }
        // Parent: CFuncWall
        // Fields count: 0
        public static class CFuncWallToggle {
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CFuncVehicleClip {
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CFuncIllusionary {
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CFuncVPhysicsClip {
            public const nint m_bDisabled = 0x710; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 3
        public static class CFuncInteractionLayerClip {
            public const nint m_bDisabled = 0x710; // bool
            public const nint m_iszInteractsAs = 0x718; // CUtlSymbolLarge
            public const nint m_iszInteractsWith = 0x720; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CPointClientCommand {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CPointServerCommand {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CPointBroadcastClientCommand {
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CCommentaryAuto {
            public const nint m_OnCommentaryNewGame = 0x4C0; // CEntityIOOutput
            public const nint m_OnCommentaryMidGame = 0x4E8; // CEntityIOOutput
            public const nint m_OnCommentaryMultiplayerSpawn = 0x510; // CEntityIOOutput
        }
        // Parent: CBaseModelEntity
        // Fields count: 9
        public static class CDynamicLight {
            public const nint m_ActualFlags = 0x710; // uint8
            public const nint m_Flags = 0x711; // uint8
            public const nint m_LightStyle = 0x712; // uint8
            public const nint m_On = 0x713; // bool
            public const nint m_Radius = 0x714; // float32
            public const nint m_Exponent = 0x718; // int32
            public const nint m_InnerAngle = 0x71C; // float32
            public const nint m_OuterAngle = 0x720; // float32
            public const nint m_SpotRadius = 0x724; // float32
        }
        // Parent: CBaseModelEntity
        // Fields count: 3
        public static class CBubbling {
            public const nint m_density = 0x710; // int32
            public const nint m_frequency = 0x714; // int32
            public const nint m_state = 0x718; // int32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CEnvTracer {
            public const nint m_vecEnd = 0x4C0; // 
            public const nint m_flDelay = 0x4CC; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 5
        public static class CTestEffect {
            public const nint m_iLoop = 0x4C0; // int32
            public const nint m_iBeam = 0x4C4; // int32
            public const nint m_pBeam = 0x4C8; // CBeam*[24]
            public const nint m_flBeamTime = 0x588; // GameTime_t[24]
            public const nint m_flStartTime = 0x5E8; // GameTime_t
        }
        // Parent: CPointEntity
        // Fields count: 4
        public static class CBlood {
            public const nint m_vecSprayAngles = 0x4C0; // QAngle
            public const nint m_vecSprayDir = 0x4CC; // 
            public const nint m_flAmount = 0x4D8; // float32
            public const nint m_Color = 0x4DC; // int32
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CEnvFunnel {
        }
        // Parent: CBaseEntity
        // Fields count: 2
        public static class CEnvBeverage {
            public const nint m_CanInDispenser = 0x4C0; // bool
            public const nint m_nBeverageType = 0x4C4; // int32
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CPrecipitationBlocker {
        }
        // Parent: CBaseEntity
        // Fields count: 1
        public static class CEnvWind {
            public const nint m_EnvWindShared = 0x4C0; // CEnvWindShared
        }
        // Parent: CBaseEntity
        // Fields count: 1
        public static class CPhysicsWire {
            public const nint m_nDensity = 0x4C0; // int32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CEnvMuzzleFlash {
            public const nint m_flScale = 0x4C0; // float32
            public const nint m_iszParentAttachment = 0x4C8; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CEnvSplash {
            public const nint m_flScale = 0x4C0; // float32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CEnvViewPunch {
            public const nint m_flRadius = 0x4C0; // float32
            public const nint m_angViewPunch = 0x4C4; // QAngle
        }
        // Parent: CBaseEntity
        // Fields count: 1
        public static class CEnvEntityIgniter {
            public const nint m_flLifetime = 0x4C0; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 1
        public static class CDebugHistory {
            public const nint m_nNpcEvents = 0x1F4500; // int32
        }
        // Parent: CPointEntity
        // Fields count: 12
        public static class CEnvEntityMaker {
            public const nint m_vecEntityMins = 0x4C0; // 
            public const nint m_vecEntityMaxs = 0x4CC; // 
            public const nint m_hCurrentInstance = 0x4D8; // CHandle<CBaseEntity>
            public const nint m_hCurrentBlocker = 0x4DC; // CHandle<CBaseEntity>
            public const nint m_vecBlockerOrigin = 0x4E0; // 
            public const nint m_angPostSpawnDirection = 0x4EC; // QAngle
            public const nint m_flPostSpawnDirectionVariance = 0x4F8; // float32
            public const nint m_flPostSpawnSpeed = 0x4FC; // float32
            public const nint m_bPostSpawnUseAngles = 0x500; // bool
            public const nint m_iszTemplate = 0x508; // CUtlSymbolLarge
            public const nint m_pOutputOnSpawned = 0x510; // CEntityIOOutput
            public const nint m_pOutputOnFailedSpawn = 0x538; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoInstructorHintTarget {
        }
        // Parent: CPointEntity
        // Fields count: 24
        public static class CEnvInstructorHint {
            public const nint m_iszName = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszReplace_Key = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszHintTargetEntity = 0x4D0; // CUtlSymbolLarge
            public const nint m_iTimeout = 0x4D8; // int32
            public const nint m_iDisplayLimit = 0x4DC; // int32
            public const nint m_iszIcon_Onscreen = 0x4E0; // CUtlSymbolLarge
            public const nint m_iszIcon_Offscreen = 0x4E8; // CUtlSymbolLarge
            public const nint m_iszCaption = 0x4F0; // CUtlSymbolLarge
            public const nint m_iszActivatorCaption = 0x4F8; // CUtlSymbolLarge
            public const nint m_Color = 0x500; // Color
            public const nint m_fIconOffset = 0x504; // float32
            public const nint m_fRange = 0x508; // float32
            public const nint m_iPulseOption = 0x50C; // uint8
            public const nint m_iAlphaOption = 0x50D; // uint8
            public const nint m_iShakeOption = 0x50E; // uint8
            public const nint m_bStatic = 0x50F; // bool
            public const nint m_bNoOffscreen = 0x510; // bool
            public const nint m_bForceCaption = 0x511; // bool
            public const nint m_iInstanceType = 0x514; // int32
            public const nint m_bSuppressRest = 0x518; // bool
            public const nint m_iszBinding = 0x520; // CUtlSymbolLarge
            public const nint m_bAllowNoDrawTarget = 0x528; // bool
            public const nint m_bAutoStart = 0x529; // bool
            public const nint m_bLocalPlayerOnly = 0x52A; // bool
        }
        // Parent: CPointEntity
        // Fields count: 9
        public static class CEnvInstructorVRHint {
            public const nint m_iszName = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszHintTargetEntity = 0x4C8; // CUtlSymbolLarge
            public const nint m_iTimeout = 0x4D0; // int32
            public const nint m_iszCaption = 0x4D8; // CUtlSymbolLarge
            public const nint m_iszStartSound = 0x4E0; // CUtlSymbolLarge
            public const nint m_iLayoutFileType = 0x4E8; // int32
            public const nint m_iszCustomLayoutFile = 0x4F0; // CUtlSymbolLarge
            public const nint m_iAttachType = 0x4F8; // int32
            public const nint m_flHeightOffset = 0x4FC; // float32
        }
        // Parent: CPointEntity
        // Fields count: 3
        public static class CInstructorEventEntity {
            public const nint m_iszName = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszHintTargetEntity = 0x4C8; // CUtlSymbolLarge
            public const nint m_hTargetPlayer = 0x4D0; // CHandle<CBasePlayerPawn>
        }
        // Parent: CPointEntity
        // Fields count: 5
        public static class CEnvScreenOverlay {
            public const nint m_iszOverlayNames = 0x4C0; // CUtlSymbolLarge[10]
            public const nint m_flOverlayTimes = 0x510; // float32[10]
            public const nint m_flStartTime = 0x538; // GameTime_t
            public const nint m_iDesiredOverlay = 0x53C; // int32
            public const nint m_bIsActive = 0x540; // bool
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CEnvFade {
            public const nint m_fadeColor = 0x4C0; // Color
            public const nint m_Duration = 0x4C4; // float32
            public const nint m_HoldDuration = 0x4C8; // float32
            public const nint m_OnBeginFade = 0x4D0; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 3
        public static class CCredits {
            public const nint m_OnCreditsDone = 0x4C0; // CEntityIOOutput
            public const nint m_bRolledOutroCredits = 0x4E8; // bool
            public const nint m_flLogoLength = 0x4EC; // float32
        }
        // Parent: CPointEntity
        // Fields count: 10
        public static class CEnvShake {
            public const nint m_limitToEntity = 0x4C0; // CUtlSymbolLarge
            public const nint m_Amplitude = 0x4C8; // float32
            public const nint m_Frequency = 0x4CC; // float32
            public const nint m_Duration = 0x4D0; // float32
            public const nint m_Radius = 0x4D4; // float32
            public const nint m_stopTime = 0x4D8; // GameTime_t
            public const nint m_nextShake = 0x4DC; // GameTime_t
            public const nint m_currentAmp = 0x4E0; // float32
            public const nint m_maxForce = 0x4E4; // 
            public const nint m_shakeCallback = 0x4F8; // CPhysicsShake
        }
        // Parent: CPointEntity
        // Fields count: 4
        public static class CEnvTilt {
            public const nint m_Duration = 0x4C0; // float32
            public const nint m_Radius = 0x4C4; // float32
            public const nint m_TiltTime = 0x4C8; // float32
            public const nint m_stopTime = 0x4CC; // GameTime_t
        }
        // Parent: CPointEntity
        // Fields count: 5
        public static class CEnvSpark {
            public const nint m_flDelay = 0x4C0; // float32
            public const nint m_nMagnitude = 0x4C4; // int32
            public const nint m_nTrailLength = 0x4C8; // int32
            public const nint m_nType = 0x4CC; // int32
            public const nint m_OnSpark = 0x4D0; // CEntityIOOutput
        }
        // Parent: CModelPointEntity
        // Fields count: 0
        public static class CShower {
        }
        // Parent: CModelPointEntity
        // Fields count: 15
        public static class CEnvExplosion {
            public const nint m_iMagnitude = 0x710; // int32
            public const nint m_flPlayerDamage = 0x714; // float32
            public const nint m_iRadiusOverride = 0x718; // int32
            public const nint m_flInnerRadius = 0x71C; // float32
            public const nint m_spriteScale = 0x720; // int32
            public const nint m_flDamageForce = 0x724; // float32
            public const nint m_hInflictor = 0x728; // CHandle<CBaseEntity>
            public const nint m_iCustomDamageType = 0x72C; // int32
            public const nint m_iszExplosionType = 0x738; // CUtlSymbolLarge
            public const nint m_iszCustomEffectName = 0x740; // CUtlSymbolLarge
            public const nint m_iszCustomSoundName = 0x748; // CUtlSymbolLarge
            public const nint m_iClassIgnore = 0x750; // Class_T
            public const nint m_iClassIgnore2 = 0x754; // Class_T
            public const nint m_iszEntityIgnoreName = 0x758; // CUtlSymbolLarge
            public const nint m_hEntityIgnore = 0x760; // CHandle<CBaseEntity>
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterName {
            public const nint m_iFilterName = 0x518; // CUtlSymbolLarge
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterModel {
            public const nint m_iFilterModel = 0x518; // CUtlSymbolLarge
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterContext {
            public const nint m_iFilterContext = 0x518; // CUtlSymbolLarge
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class FilterTeam {
            public const nint m_iFilterTeam = 0x518; // int32
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterMassGreater {
            public const nint m_fFilterMass = 0x518; // float32
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class FilterDamageType {
            public const nint m_iDamageType = 0x518; // int32
        }
        // Parent: CBaseFilter
        // Fields count: 3
        public static class FilterHealth {
            public const nint m_bAdrenalineActive = 0x518; // bool
            public const nint m_iHealthMin = 0x51C; // int32
            public const nint m_iHealthMax = 0x520; // int32
        }
        // Parent: CBaseFilter
        // Fields count: 5
        public static class CFilterEnemy {
            public const nint m_iszEnemyName = 0x518; // CUtlSymbolLarge
            public const nint m_flRadius = 0x520; // float32
            public const nint m_flOuterRadius = 0x524; // float32
            public const nint m_nMaxSquadmatesPerEnemy = 0x528; // int32
            public const nint m_iszPlayerName = 0x530; // CUtlSymbolLarge
        }
        // Parent: CBaseFilter
        // Fields count: 1
        public static class CFilterAttributeInt {
            public const nint m_sAttributeName = 0x518; // CUtlStringToken
        }
        // Parent: CBaseModelEntity
        // Fields count: 19
        public static class CFire {
            public const nint m_hEffect = 0x710; // CHandle<CBaseFire>
            public const nint m_hOwner = 0x714; // CHandle<CBaseEntity>
            public const nint m_nFireType = 0x718; // int32
            public const nint m_flFuel = 0x71C; // float32
            public const nint m_flDamageTime = 0x720; // GameTime_t
            public const nint m_lastDamage = 0x724; // GameTime_t
            public const nint m_flFireSize = 0x728; // float32
            public const nint m_flLastNavUpdateTime = 0x72C; // GameTime_t
            public const nint m_flHeatLevel = 0x730; // float32
            public const nint m_flHeatAbsorb = 0x734; // float32
            public const nint m_flDamageScale = 0x738; // float32
            public const nint m_flMaxHeat = 0x73C; // float32
            public const nint m_flLastHeatLevel = 0x740; // float32
            public const nint m_flAttackTime = 0x744; // float32
            public const nint m_bEnabled = 0x748; // bool
            public const nint m_bStartDisabled = 0x749; // bool
            public const nint m_bDidActivate = 0x74A; // bool
            public const nint m_OnIgnited = 0x750; // CEntityIOOutput
            public const nint m_OnExtinguished = 0x778; // CEntityIOOutput
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CEnvFireSource {
            public const nint m_bEnabled = 0x4C0; // bool
            public const nint m_radius = 0x4C4; // float32
            public const nint m_damage = 0x4C8; // float32
        }
        // Parent: CBaseEntity
        // Fields count: 8
        public static class CEnvFireSensor {
            public const nint m_bEnabled = 0x4C0; // bool
            public const nint m_bHeatAtLevel = 0x4C1; // bool
            public const nint m_radius = 0x4C4; // float32
            public const nint m_targetLevel = 0x4C8; // float32
            public const nint m_targetTime = 0x4CC; // float32
            public const nint m_levelTime = 0x4D0; // float32
            public const nint m_OnHeatLevelStart = 0x4D8; // CEntityIOOutput
            public const nint m_OnHeatLevelEnd = 0x500; // CEntityIOOutput
        }
        // Parent: CBaseEntity
        // Fields count: 5
        public static class CFuncTimescale {
            public const nint m_flDesiredTimescale = 0x4C0; // float32
            public const nint m_flAcceleration = 0x4C4; // float32
            public const nint m_flMinBlendRate = 0x4C8; // float32
            public const nint m_flBlendDeltaMultiplier = 0x4CC; // float32
            public const nint m_isStarted = 0x4D0; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 7
        public static class CLightGlow {
            public const nint m_nHorizontalSize = 0x710; // uint32
            public const nint m_nVerticalSize = 0x714; // uint32
            public const nint m_nMinDist = 0x718; // uint32
            public const nint m_nMaxDist = 0x71C; // uint32
            public const nint m_nOuterMaxDist = 0x720; // uint32
            public const nint m_flGlowProxySize = 0x724; // float32
            public const nint m_flHDRColorScale = 0x728; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 3
        public static class CLogicAchievement {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_iszAchievementEventID = 0x4C8; // CUtlSymbolLarge
            public const nint m_OnFired = 0x4D0; // CEntityIOOutput
        }
        // Parent: CLogicalEntity
        // Fields count: 5
        public static class CLogicGameEventListener {
            public const nint m_OnEventFired = 0x4D0; // CEntityIOOutput
            public const nint m_iszGameEventName = 0x4F8; // CUtlSymbolLarge
            public const nint m_iszGameEventItem = 0x500; // CUtlSymbolLarge
            public const nint m_bEnabled = 0x508; // bool
            public const nint m_bStartDisabled = 0x509; // bool
        }
        // Parent: CLogicalEntity
        // Fields count: 9
        public static class CLogicMeasureMovement {
            public const nint m_strMeasureTarget = 0x4C0; // CUtlSymbolLarge
            public const nint m_strMeasureReference = 0x4C8; // CUtlSymbolLarge
            public const nint m_strTargetReference = 0x4D0; // CUtlSymbolLarge
            public const nint m_hMeasureTarget = 0x4D8; // CHandle<CBaseEntity>
            public const nint m_hMeasureReference = 0x4DC; // CHandle<CBaseEntity>
            public const nint m_hTarget = 0x4E0; // CHandle<CBaseEntity>
            public const nint m_hTargetReference = 0x4E4; // CHandle<CBaseEntity>
            public const nint m_flScale = 0x4E8; // float32
            public const nint m_nMeasureType = 0x4EC; // int32
        }
        // Parent: CLogicalEntity
        // Fields count: 2
        public static class CLogicNavigation {
            public const nint m_isOn = 0x4C8; // bool
            public const nint m_navProperty = 0x4CC; // navproperties_t
        }
        // Parent: CBaseEntity
        // Fields count: 48
        public static class CLogicNPCCounter {
            public const nint m_OnMinCountAll = 0x4C0; // CEntityIOOutput
            public const nint m_OnMaxCountAll = 0x4E8; // CEntityIOOutput
            public const nint m_OnFactorAll = 0x510; // CEntityOutputTemplate<float32>
            public const nint m_OnMinPlayerDistAll = 0x538; // CEntityOutputTemplate<float32>
            public const nint m_OnMinCount_1 = 0x560; // CEntityIOOutput
            public const nint m_OnMaxCount_1 = 0x588; // CEntityIOOutput
            public const nint m_OnFactor_1 = 0x5B0; // CEntityOutputTemplate<float32>
            public const nint m_OnMinPlayerDist_1 = 0x5D8; // CEntityOutputTemplate<float32>
            public const nint m_OnMinCount_2 = 0x600; // CEntityIOOutput
            public const nint m_OnMaxCount_2 = 0x628; // CEntityIOOutput
            public const nint m_OnFactor_2 = 0x650; // CEntityOutputTemplate<float32>
            public const nint m_OnMinPlayerDist_2 = 0x678; // CEntityOutputTemplate<float32>
            public const nint m_OnMinCount_3 = 0x6A0; // CEntityIOOutput
            public const nint m_OnMaxCount_3 = 0x6C8; // CEntityIOOutput
            public const nint m_OnFactor_3 = 0x6F0; // CEntityOutputTemplate<float32>
            public const nint m_OnMinPlayerDist_3 = 0x718; // CEntityOutputTemplate<float32>
            public const nint m_hSource = 0x740; // CEntityHandle
            public const nint m_iszSourceEntityName = 0x748; // CUtlSymbolLarge
            public const nint m_flDistanceMax = 0x750; // float32
            public const nint m_bDisabled = 0x754; // bool
            public const nint m_nMinCountAll = 0x758; // int32
            public const nint m_nMaxCountAll = 0x75C; // int32
            public const nint m_nMinFactorAll = 0x760; // int32
            public const nint m_nMaxFactorAll = 0x764; // int32
            public const nint m_iszNPCClassname_1 = 0x770; // CUtlSymbolLarge
            public const nint m_nNPCState_1 = 0x778; // int32
            public const nint m_bInvertState_1 = 0x77C; // bool
            public const nint m_nMinCount_1 = 0x780; // int32
            public const nint m_nMaxCount_1 = 0x784; // int32
            public const nint m_nMinFactor_1 = 0x788; // int32
            public const nint m_nMaxFactor_1 = 0x78C; // int32
            public const nint m_flDefaultDist_1 = 0x794; // float32
            public const nint m_iszNPCClassname_2 = 0x798; // CUtlSymbolLarge
            public const nint m_nNPCState_2 = 0x7A0; // int32
            public const nint m_bInvertState_2 = 0x7A4; // bool
            public const nint m_nMinCount_2 = 0x7A8; // int32
            public const nint m_nMaxCount_2 = 0x7AC; // int32
            public const nint m_nMinFactor_2 = 0x7B0; // int32
            public const nint m_nMaxFactor_2 = 0x7B4; // int32
            public const nint m_flDefaultDist_2 = 0x7BC; // float32
            public const nint m_iszNPCClassname_3 = 0x7C0; // CUtlSymbolLarge
            public const nint m_nNPCState_3 = 0x7C8; // int32
            public const nint m_bInvertState_3 = 0x7CC; // bool
            public const nint m_nMinCount_3 = 0x7D0; // int32
            public const nint m_nMaxCount_3 = 0x7D4; // int32
            public const nint m_nMinFactor_3 = 0x7D8; // int32
            public const nint m_nMaxFactor_3 = 0x7DC; // int32
            public const nint m_flDefaultDist_3 = 0x7E4; // float32
        }
        // Parent: CLogicNPCCounter
        // Fields count: 4
        public static class CLogicNPCCounterAABB {
            public const nint m_vDistanceOuterMins = 0x800; // 
            public const nint m_vDistanceOuterMaxs = 0x80C; // 
            public const nint m_vOuterMins = 0x818; // 
            public const nint m_vOuterMaxs = 0x824; // 
        }
        // Parent: CLogicNPCCounterAABB
        // Fields count: 0
        public static class CLogicNPCCounterOBB {
        }
        // Parent: CLogicalEntity
        // Fields count: 5
        public static class CLogicPlayerProxy {
            public const nint m_hPlayer = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_PlayerHasAmmo = 0x4C8; // CEntityIOOutput
            public const nint m_PlayerHasNoAmmo = 0x4F0; // CEntityIOOutput
            public const nint m_PlayerDied = 0x518; // CEntityIOOutput
            public const nint m_RequestedPlayerHealth = 0x540; // CEntityOutputTemplate<int32>
        }
        // Parent: CBaseEntity
        // Fields count: 11
        public static class CLogicAuto {
            public const nint m_OnMapSpawn = 0x4C0; // CEntityIOOutput
            public const nint m_OnDemoMapSpawn = 0x4E8; // CEntityIOOutput
            public const nint m_OnNewGame = 0x510; // CEntityIOOutput
            public const nint m_OnLoadGame = 0x538; // CEntityIOOutput
            public const nint m_OnMapTransition = 0x560; // CEntityIOOutput
            public const nint m_OnBackgroundMap = 0x588; // CEntityIOOutput
            public const nint m_OnMultiNewMap = 0x5B0; // CEntityIOOutput
            public const nint m_OnMultiNewRound = 0x5D8; // CEntityIOOutput
            public const nint m_OnVREnabled = 0x600; // CEntityIOOutput
            public const nint m_OnVRNotEnabled = 0x628; // CEntityIOOutput
            public const nint m_globalstate = 0x650; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CLogicScript {
        }
        // Parent: CLogicalEntity
        // Fields count: 13
        public static class CTimerEntity {
            public const nint m_OnTimer = 0x4C0; // CEntityIOOutput
            public const nint m_OnTimerHigh = 0x4E8; // CEntityIOOutput
            public const nint m_OnTimerLow = 0x510; // CEntityIOOutput
            public const nint m_iDisabled = 0x538; // int32
            public const nint m_flInitialDelay = 0x53C; // float32
            public const nint m_flRefireTime = 0x540; // float32
            public const nint m_bUpDownState = 0x544; // bool
            public const nint m_iUseRandomTime = 0x548; // int32
            public const nint m_bPauseAfterFiring = 0x54C; // bool
            public const nint m_flLowerRandomBound = 0x550; // float32
            public const nint m_flUpperRandomBound = 0x554; // float32
            public const nint m_flRemainingTime = 0x558; // float32
            public const nint m_bPaused = 0x55C; // bool
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CLogicLineToEntity {
            public const nint m_Line = 0x4C0; // CEntityOutputTemplate<Vector>
            public const nint m_SourceName = 0x4E8; // CUtlSymbolLarge
            public const nint m_StartEntity = 0x4F0; // CHandle<CBaseEntity>
            public const nint m_EndEntity = 0x4F4; // CHandle<CBaseEntity>
        }
        // Parent: CLogicalEntity
        // Fields count: 11
        public static class CMathRemap {
            public const nint m_flInMin = 0x4C0; // float32
            public const nint m_flInMax = 0x4C4; // float32
            public const nint m_flOut1 = 0x4C8; // float32
            public const nint m_flOut2 = 0x4CC; // float32
            public const nint m_flOldInValue = 0x4D0; // float32
            public const nint m_bEnabled = 0x4D4; // bool
            public const nint m_OutValue = 0x4D8; // CEntityOutputTemplate<float32>
            public const nint m_OnRoseAboveMin = 0x500; // CEntityIOOutput
            public const nint m_OnRoseAboveMax = 0x528; // CEntityIOOutput
            public const nint m_OnFellBelowMin = 0x550; // CEntityIOOutput
            public const nint m_OnFellBelowMax = 0x578; // CEntityIOOutput
        }
        // Parent: CLogicalEntity
        // Fields count: 5
        public static class CMathColorBlend {
            public const nint m_flInMin = 0x4C0; // float32
            public const nint m_flInMax = 0x4C4; // float32
            public const nint m_OutColor1 = 0x4C8; // Color
            public const nint m_OutColor2 = 0x4CC; // Color
            public const nint m_OutValue = 0x4D0; // CEntityOutputTemplate<Color>
        }
        // Parent: CLogicalEntity
        // Fields count: 5
        public static class CEnvGlobal {
            public const nint m_outCounter = 0x4C0; // CEntityOutputTemplate<int32>
            public const nint m_globalstate = 0x4E8; // CUtlSymbolLarge
            public const nint m_triggermode = 0x4F0; // int32
            public const nint m_initialstate = 0x4F4; // int32
            public const nint m_counter = 0x4F8; // int32
        }
        // Parent: CLogicalEntity
        // Fields count: 5
        public static class CMultiSource {
            public const nint m_rgEntities = 0x4C0; // CHandle<CBaseEntity>[32]
            public const nint m_rgTriggered = 0x540; // int32[32]
            public const nint m_OnTrigger = 0x5C0; // CEntityIOOutput
            public const nint m_iTotal = 0x5E8; // int32
            public const nint m_globalstate = 0x5F0; // CUtlSymbolLarge
        }
        // Parent: CLogicalEntity
        // Fields count: 11
        public static class CMathCounter {
            public const nint m_flMin = 0x4C0; // float32
            public const nint m_flMax = 0x4C4; // float32
            public const nint m_bHitMin = 0x4C8; // bool
            public const nint m_bHitMax = 0x4C9; // bool
            public const nint m_bDisabled = 0x4CA; // bool
            public const nint m_OutValue = 0x4D0; // CEntityOutputTemplate<float32>
            public const nint m_OnGetValue = 0x4F8; // CEntityOutputTemplate<float32>
            public const nint m_OnHitMin = 0x520; // CEntityIOOutput
            public const nint m_OnHitMax = 0x548; // CEntityIOOutput
            public const nint m_OnChangedFromMin = 0x570; // CEntityIOOutput
            public const nint m_OnChangedFromMax = 0x598; // CEntityIOOutput
        }
        // Parent: CLogicalEntity
        // Fields count: 6
        public static class CLogicCase {
            public const nint m_nCase = 0x4C0; // CUtlSymbolLarge[32]
            public const nint m_nShuffleCases = 0x5C0; // int32
            public const nint m_nLastShuffleCase = 0x5C4; // int32
            public const nint m_uchShuffleCaseMap = 0x5C8; // uint8[32]
            public const nint m_OnCase = 0x5E8; // CEntityIOOutput[32]
            public const nint m_OnDefault = 0xAE8; // CEntityOutputTemplate<CVariantBase<CVariantDefaultAllocator>>
        }
        // Parent: CLogicalEntity
        // Fields count: 6
        public static class CLogicCompare {
            public const nint m_flInValue = 0x4C0; // float32
            public const nint m_flCompareValue = 0x4C4; // float32
            public const nint m_OnLessThan = 0x4C8; // CEntityOutputTemplate<float32>
            public const nint m_OnEqualTo = 0x4F0; // CEntityOutputTemplate<float32>
            public const nint m_OnNotEqualTo = 0x518; // CEntityOutputTemplate<float32>
            public const nint m_OnGreaterThan = 0x540; // CEntityOutputTemplate<float32>
        }
        // Parent: CLogicalEntity
        // Fields count: 3
        public static class CLogicAutosave {
            public const nint m_bForceNewLevelUnit = 0x4C0; // bool
            public const nint m_minHitPoints = 0x4C4; // int32
            public const nint m_minHitPointsToCommit = 0x4C8; // int32
        }
        // Parent: CLogicAutosave
        // Fields count: 4
        public static class CLogicActiveAutosave {
            public const nint m_TriggerHitPoints = 0x4D0; // int32
            public const nint m_flTimeToTrigger = 0x4D4; // float32
            public const nint m_flStartTime = 0x4D8; // GameTime_t
            public const nint m_flDangerousTime = 0x4DC; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 6
        public static class CLogicDistanceAutosave {
            public const nint m_iszTargetEntity = 0x4C0; // CUtlSymbolLarge
            public const nint m_flDistanceToPlayer = 0x4C8; // float32
            public const nint m_bForceNewLevelUnit = 0x4CC; // bool
            public const nint m_bCheckCough = 0x4CD; // bool
            public const nint m_bThinkDangerous = 0x4CE; // bool
            public const nint m_flDangerousTime = 0x4D0; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CLogicCollisionPair {
            public const nint m_nameAttach1 = 0x4C0; // CUtlSymbolLarge
            public const nint m_nameAttach2 = 0x4C8; // CUtlSymbolLarge
            public const nint m_disabled = 0x4D0; // bool
            public const nint m_succeeded = 0x4D1; // bool
        }
        // Parent: CLogicalEntity
        // Fields count: 6
        public static class CLogicBranchList {
            public const nint m_nLogicBranchNames = 0x4C0; // CUtlSymbolLarge[16]
            public const nint m_LogicBranchList = 0x540; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_eLastState = 0x558; // CLogicBranchList::LogicBranchListenerLastState_t
            public const nint m_OnAllTrue = 0x560; // CEntityIOOutput
            public const nint m_OnAllFalse = 0x588; // CEntityIOOutput
            public const nint m_OnMixed = 0x5B0; // CEntityIOOutput
        }
        // Parent: CLogicalEntity
        // Fields count: 1
        public static class CLogicGameEvent {
            public const nint m_iszEventName = 0x4C0; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 5
        public static class CMessageEntity {
            public const nint m_radius = 0x4C0; // int32
            public const nint m_messageText = 0x4C8; // CUtlSymbolLarge
            public const nint m_drawText = 0x4D0; // bool
            public const nint m_bDeveloperOnly = 0x4D1; // bool
            public const nint m_bEnabled = 0x4D2; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 5
        public static class CTriggerBrush {
            public const nint m_OnStartTouch = 0x710; // CEntityIOOutput
            public const nint m_OnEndTouch = 0x738; // CEntityIOOutput
            public const nint m_OnUse = 0x760; // CEntityIOOutput
            public const nint m_iInputFilter = 0x788; // int32
            public const nint m_iDontMessageParent = 0x78C; // int32
        }
        // Parent: CLogicalEntity
        // Fields count: 8
        public static class CPathKeyFrame {
            public const nint m_Origin = 0x4C0; // 
            public const nint m_Angles = 0x4CC; // QAngle
            public const nint m_qAngle = 0x4E0; // Quaternion
            public const nint m_iNextKey = 0x4F0; // CUtlSymbolLarge
            public const nint m_flNextTime = 0x4F8; // float32
            public const nint m_pNextKey = 0x500; // CPathKeyFrame*
            public const nint m_pPrevKey = 0x508; // CPathKeyFrame*
            public const nint m_flSpeed = 0x510; // float32
        }
        // Parent: CPathKeyFrame
        // Fields count: 11
        public static class CBaseMoveBehavior {
            public const nint m_iPositionInterpolator = 0x520; // int32
            public const nint m_iRotationInterpolator = 0x524; // int32
            public const nint m_flAnimStartTime = 0x528; // float32
            public const nint m_flAnimEndTime = 0x52C; // float32
            public const nint m_flAverageSpeedAcrossFrame = 0x530; // float32
            public const nint m_pCurrentKeyFrame = 0x538; // CPathKeyFrame*
            public const nint m_pTargetKeyFrame = 0x540; // CPathKeyFrame*
            public const nint m_pPreKeyFrame = 0x548; // CPathKeyFrame*
            public const nint m_pPostKeyFrame = 0x550; // CPathKeyFrame*
            public const nint m_flTimeIntoFrame = 0x558; // float32
            public const nint m_iDirection = 0x55C; // int32
        }
        // Parent: CPointEntity
        // Fields count: 3
        public static class CPathCorner {
            public const nint m_flWait = 0x4C0; // float32
            public const nint m_flRadius = 0x4C4; // float32
            public const nint m_OnPass = 0x4C8; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 6
        public static class CPhysForce {
            public const nint m_nameAttach = 0x4C8; // CUtlSymbolLarge
            public const nint m_force = 0x4D0; // float32
            public const nint m_forceTime = 0x4D4; // float32
            public const nint m_attachedObject = 0x4D8; // CHandle<CBaseEntity>
            public const nint m_wasRestored = 0x4DC; // bool
            public const nint m_integrator = 0x4E0; // CConstantForceController
        }
        // Parent: CPhysForce
        // Fields count: 1
        public static class CPhysThruster {
            public const nint m_localOrigin = 0x520; // 
        }
        // Parent: CPhysForce
        // Fields count: 1
        public static class CPhysTorque {
            public const nint m_axis = 0x520; // 
        }
        // Parent: CLogicalEntity
        // Fields count: 7
        public static class CPhysMotor {
            public const nint m_nameAttach = 0x4C0; // CUtlSymbolLarge
            public const nint m_hAttachedObject = 0x4C8; // CHandle<CBaseEntity>
            public const nint m_spinUp = 0x4CC; // float32
            public const nint m_additionalAcceleration = 0x4D0; // float32
            public const nint m_angularAcceleration = 0x4D4; // float32
            public const nint m_lastTime = 0x4D8; // GameTime_t
            public const nint m_motor = 0x4F0; // CMotorController
        }
        // Parent: CPointEntity
        // Fields count: 7
        public static class CKeepUpright {
            public const nint m_worldGoalAxis = 0x4C8; // 
            public const nint m_localTestAxis = 0x4D4; // 
            public const nint m_nameAttach = 0x4E8; // CUtlSymbolLarge
            public const nint m_attachedObject = 0x4F0; // CHandle<CBaseEntity>
            public const nint m_angularLimit = 0x4F4; // float32
            public const nint m_bActive = 0x4F8; // bool
            public const nint m_bDampAllRotation = 0x4F9; // bool
        }
        // Parent: CLogicalEntity
        // Fields count: 8
        public static class CPhysConstraint {
            public const nint m_nameAttach1 = 0x4C8; // CUtlSymbolLarge
            public const nint m_nameAttach2 = 0x4D0; // CUtlSymbolLarge
            public const nint m_breakSound = 0x4D8; // CUtlSymbolLarge
            public const nint m_forceLimit = 0x4E0; // float32
            public const nint m_torqueLimit = 0x4E4; // float32
            public const nint m_teleportTick = 0x4E8; // uint32
            public const nint m_minTeleportDistance = 0x4EC; // float32
            public const nint m_OnBreak = 0x4F0; // CEntityIOOutput
        }
        // Parent: CPhysConstraint
        // Fields count: 18
        public static class CPhysHinge {
            public const nint m_soundInfo = 0x520; // ConstraintSoundInfo
            public const nint m_NotifyMinLimitReached = 0x5A8; // CEntityIOOutput
            public const nint m_NotifyMaxLimitReached = 0x5D0; // CEntityIOOutput
            public const nint m_bAtMinLimit = 0x5F8; // bool
            public const nint m_bAtMaxLimit = 0x5F9; // bool
            public const nint m_hinge = 0x5FC; // constraint_hingeparams_t
            public const nint m_hingeFriction = 0x63C; // float32
            public const nint m_systemLoadScale = 0x640; // float32
            public const nint m_bIsAxisLocal = 0x644; // bool
            public const nint m_flMinRotation = 0x648; // float32
            public const nint m_flMaxRotation = 0x64C; // float32
            public const nint m_flInitialRotation = 0x650; // float32
            public const nint m_flMotorFrequency = 0x654; // float32
            public const nint m_flMotorDampingRatio = 0x658; // float32
            public const nint m_flAngleSpeed = 0x65C; // float32
            public const nint m_flAngleSpeedThreshold = 0x660; // float32
            public const nint m_OnStartMoving = 0x668; // CEntityIOOutput
            public const nint m_OnStopMoving = 0x690; // CEntityIOOutput
        }
        // Parent: CPhysHinge
        // Fields count: 0
        public static class CPhysHingeAlias_phys_hinge_local {
        }
        // Parent: CPhysConstraint
        // Fields count: 6
        public static class CPhysBallSocket {
            public const nint m_flFriction = 0x518; // float32
            public const nint m_bEnableSwingLimit = 0x51C; // bool
            public const nint m_flSwingLimit = 0x520; // float32
            public const nint m_bEnableTwistLimit = 0x524; // bool
            public const nint m_flMinTwistAngle = 0x528; // float32
            public const nint m_flMaxTwistAngle = 0x52C; // float32
        }
        // Parent: CPhysConstraint
        // Fields count: 10
        public static class CPhysSlideConstraint {
            public const nint m_axisEnd = 0x520; // 
            public const nint m_slideFriction = 0x52C; // float32
            public const nint m_systemLoadScale = 0x530; // float32
            public const nint m_initialOffset = 0x534; // float32
            public const nint m_bEnableLinearConstraint = 0x538; // bool
            public const nint m_bEnableAngularConstraint = 0x539; // bool
            public const nint m_flMotorFrequency = 0x53C; // float32
            public const nint m_flMotorDampingRatio = 0x540; // float32
            public const nint m_bUseEntityPivot = 0x544; // bool
            public const nint m_soundInfo = 0x548; // ConstraintSoundInfo
        }
        // Parent: CPhysConstraint
        // Fields count: 6
        public static class CPhysFixed {
            public const nint m_flLinearFrequency = 0x518; // float32
            public const nint m_flLinearDampingRatio = 0x51C; // float32
            public const nint m_flAngularFrequency = 0x520; // float32
            public const nint m_flAngularDampingRatio = 0x524; // float32
            public const nint m_bEnableLinearConstraint = 0x528; // bool
            public const nint m_bEnableAngularConstraint = 0x529; // bool
        }
        // Parent: CPhysConstraint
        // Fields count: 4
        public static class CPhysPulley {
            public const nint m_position2 = 0x518; // 
            public const nint m_offset = 0x524; // Vector[2]
            public const nint m_addLength = 0x53C; // float32
            public const nint m_gearRatio = 0x540; // float32
        }
        // Parent: CPhysConstraint
        // Fields count: 6
        public static class CPhysLength {
            public const nint m_offset = 0x518; // Vector[2]
            public const nint m_vecAttach = 0x530; // 
            public const nint m_addLength = 0x53C; // float32
            public const nint m_minLength = 0x540; // float32
            public const nint m_totalLength = 0x544; // float32
            public const nint m_bEnableCollision = 0x548; // bool
        }
        // Parent: CPhysConstraint
        // Fields count: 9
        public static class CRagdollConstraint {
            public const nint m_xmin = 0x518; // float32
            public const nint m_xmax = 0x51C; // float32
            public const nint m_ymin = 0x520; // float32
            public const nint m_ymax = 0x524; // float32
            public const nint m_zmin = 0x528; // float32
            public const nint m_zmax = 0x52C; // float32
            public const nint m_xfriction = 0x530; // float32
            public const nint m_yfriction = 0x534; // float32
            public const nint m_zfriction = 0x538; // float32
        }
        // Parent: CPhysConstraint
        // Fields count: 48
        public static class CGenericConstraint {
            public const nint m_nLinearMotionX = 0x520; // JointMotion_t
            public const nint m_nLinearMotionY = 0x524; // JointMotion_t
            public const nint m_nLinearMotionZ = 0x528; // JointMotion_t
            public const nint m_flLinearFrequencyX = 0x52C; // float32
            public const nint m_flLinearFrequencyY = 0x530; // float32
            public const nint m_flLinearFrequencyZ = 0x534; // float32
            public const nint m_flLinearDampingRatioX = 0x538; // float32
            public const nint m_flLinearDampingRatioY = 0x53C; // float32
            public const nint m_flLinearDampingRatioZ = 0x540; // float32
            public const nint m_flMaxLinearImpulseX = 0x544; // float32
            public const nint m_flMaxLinearImpulseY = 0x548; // float32
            public const nint m_flMaxLinearImpulseZ = 0x54C; // float32
            public const nint m_flBreakAfterTimeX = 0x550; // float32
            public const nint m_flBreakAfterTimeY = 0x554; // float32
            public const nint m_flBreakAfterTimeZ = 0x558; // float32
            public const nint m_flBreakAfterTimeStartTimeX = 0x55C; // GameTime_t
            public const nint m_flBreakAfterTimeStartTimeY = 0x560; // GameTime_t
            public const nint m_flBreakAfterTimeStartTimeZ = 0x564; // GameTime_t
            public const nint m_flBreakAfterTimeThresholdX = 0x568; // float32
            public const nint m_flBreakAfterTimeThresholdY = 0x56C; // float32
            public const nint m_flBreakAfterTimeThresholdZ = 0x570; // float32
            public const nint m_flNotifyForceX = 0x574; // float32
            public const nint m_flNotifyForceY = 0x578; // float32
            public const nint m_flNotifyForceZ = 0x57C; // float32
            public const nint m_flNotifyForceMinTimeX = 0x580; // float32
            public const nint m_flNotifyForceMinTimeY = 0x584; // float32
            public const nint m_flNotifyForceMinTimeZ = 0x588; // float32
            public const nint m_flNotifyForceLastTimeX = 0x58C; // GameTime_t
            public const nint m_flNotifyForceLastTimeY = 0x590; // GameTime_t
            public const nint m_flNotifyForceLastTimeZ = 0x594; // GameTime_t
            public const nint m_bAxisNotifiedX = 0x598; // bool
            public const nint m_bAxisNotifiedY = 0x599; // bool
            public const nint m_bAxisNotifiedZ = 0x59A; // bool
            public const nint m_nAngularMotionX = 0x59C; // JointMotion_t
            public const nint m_nAngularMotionY = 0x5A0; // JointMotion_t
            public const nint m_nAngularMotionZ = 0x5A4; // JointMotion_t
            public const nint m_flAngularFrequencyX = 0x5A8; // float32
            public const nint m_flAngularFrequencyY = 0x5AC; // float32
            public const nint m_flAngularFrequencyZ = 0x5B0; // float32
            public const nint m_flAngularDampingRatioX = 0x5B4; // float32
            public const nint m_flAngularDampingRatioY = 0x5B8; // float32
            public const nint m_flAngularDampingRatioZ = 0x5BC; // float32
            public const nint m_flMaxAngularImpulseX = 0x5C0; // float32
            public const nint m_flMaxAngularImpulseY = 0x5C4; // float32
            public const nint m_flMaxAngularImpulseZ = 0x5C8; // float32
            public const nint m_NotifyForceReachedX = 0x5D0; // CEntityIOOutput
            public const nint m_NotifyForceReachedY = 0x5F8; // CEntityIOOutput
            public const nint m_NotifyForceReachedZ = 0x620; // CEntityIOOutput
        }
        // Parent: CPhysConstraint
        // Fields count: 0
        public static class CSplineConstraint {
        }
        // Parent: CPhysConstraint
        // Fields count: 11
        public static class CPhysWheelConstraint {
            public const nint m_flSuspensionFrequency = 0x518; // float32
            public const nint m_flSuspensionDampingRatio = 0x51C; // float32
            public const nint m_flSuspensionHeightOffset = 0x520; // float32
            public const nint m_bEnableSuspensionLimit = 0x524; // bool
            public const nint m_flMinSuspensionOffset = 0x528; // float32
            public const nint m_flMaxSuspensionOffset = 0x52C; // float32
            public const nint m_bEnableSteeringLimit = 0x530; // bool
            public const nint m_flMinSteeringAngle = 0x534; // float32
            public const nint m_flMaxSteeringAngle = 0x538; // float32
            public const nint m_flSteeringAxisFriction = 0x53C; // float32
            public const nint m_flSpinAxisFriction = 0x540; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 4
        public static class CPhysicsEntitySolver {
            public const nint m_hMovingEntity = 0x4C8; // CHandle<CBaseEntity>
            public const nint m_hPhysicsBlocker = 0x4CC; // CHandle<CBaseEntity>
            public const nint m_separationDuration = 0x4D0; // float32
            public const nint m_cancelTime = 0x4D4; // GameTime_t
        }
        // Parent: CBaseEntity
        // Fields count: 8
        public static class CPhysicsSpring {
            public const nint m_flFrequency = 0x4C8; // float32
            public const nint m_flDampingRatio = 0x4CC; // float32
            public const nint m_flRestLength = 0x4D0; // float32
            public const nint m_nameAttachStart = 0x4D8; // CUtlSymbolLarge
            public const nint m_nameAttachEnd = 0x4E0; // CUtlSymbolLarge
            public const nint m_start = 0x4E8; // 
            public const nint m_end = 0x4F4; // 
            public const nint m_teleportTick = 0x500; // uint32
        }
        // Parent: CPointEntity
        // Fields count: 7
        public static class CPointPush {
            public const nint m_bEnabled = 0x4C0; // bool
            public const nint m_flMagnitude = 0x4C4; // float32
            public const nint m_flRadius = 0x4C8; // float32
            public const nint m_flInnerRadius = 0x4CC; // float32
            public const nint m_flConeOfInfluence = 0x4D0; // float32
            public const nint m_iszFilterName = 0x4D8; // CUtlSymbolLarge
            public const nint m_hFilter = 0x4E0; // CHandle<CBaseFilter>
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CInfoPlayerStart {
            public const nint m_bDisabled = 0x4C0; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 7
        public static class CPointEntityFinder {
            public const nint m_hEntity = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_iFilterName = 0x4C8; // CUtlSymbolLarge
            public const nint m_hFilter = 0x4D0; // CHandle<CBaseFilter>
            public const nint m_iRefName = 0x4D8; // CUtlSymbolLarge
            public const nint m_hReference = 0x4E0; // CHandle<CBaseEntity>
            public const nint m_FindMethod = 0x4E4; // EntFinderMethod_t
            public const nint m_OnFoundEntity = 0x4E8; // CEntityIOOutput
        }
        // Parent: CBaseEntity
        // Fields count: 44
        public static class CPointValueRemapper {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_bUpdateOnClient = 0x4C1; // bool
            public const nint m_nInputType = 0x4C4; // ValueRemapperInputType_t
            public const nint m_iszRemapLineStartName = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszRemapLineEndName = 0x4D0; // CUtlSymbolLarge
            public const nint m_hRemapLineStart = 0x4D8; // CHandle<CBaseEntity>
            public const nint m_hRemapLineEnd = 0x4DC; // CHandle<CBaseEntity>
            public const nint m_flMaximumChangePerSecond = 0x4E0; // float32
            public const nint m_flDisengageDistance = 0x4E4; // float32
            public const nint m_flEngageDistance = 0x4E8; // float32
            public const nint m_bRequiresUseKey = 0x4EC; // bool
            public const nint m_nOutputType = 0x4F0; // ValueRemapperOutputType_t
            public const nint m_iszOutputEntityName = 0x4F8; // CUtlSymbolLarge
            public const nint m_iszOutputEntity2Name = 0x500; // CUtlSymbolLarge
            public const nint m_iszOutputEntity3Name = 0x508; // CUtlSymbolLarge
            public const nint m_iszOutputEntity4Name = 0x510; // CUtlSymbolLarge
            public const nint m_hOutputEntities = 0x518; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
            public const nint m_nHapticsType = 0x530; // ValueRemapperHapticsType_t
            public const nint m_nMomentumType = 0x534; // ValueRemapperMomentumType_t
            public const nint m_flMomentumModifier = 0x538; // float32
            public const nint m_flSnapValue = 0x53C; // float32
            public const nint m_flCurrentMomentum = 0x540; // float32
            public const nint m_nRatchetType = 0x544; // ValueRemapperRatchetType_t
            public const nint m_flRatchetOffset = 0x548; // float32
            public const nint m_flInputOffset = 0x54C; // float32
            public const nint m_bEngaged = 0x550; // bool
            public const nint m_bFirstUpdate = 0x551; // bool
            public const nint m_flPreviousValue = 0x554; // float32
            public const nint m_flPreviousUpdateTickTime = 0x558; // GameTime_t
            public const nint m_vecPreviousTestPoint = 0x55C; // 
            public const nint m_hUsingPlayer = 0x568; // CHandle<CBasePlayerPawn>
            public const nint m_flCustomOutputValue = 0x56C; // float32
            public const nint m_iszSoundEngage = 0x570; // CUtlSymbolLarge
            public const nint m_iszSoundDisengage = 0x578; // CUtlSymbolLarge
            public const nint m_iszSoundReachedValueZero = 0x580; // CUtlSymbolLarge
            public const nint m_iszSoundReachedValueOne = 0x588; // CUtlSymbolLarge
            public const nint m_iszSoundMovingLoop = 0x590; // CUtlSymbolLarge
            public const nint m_Position = 0x5A0; // CEntityOutputTemplate<float32>
            public const nint m_PositionDelta = 0x5C8; // CEntityOutputTemplate<float32>
            public const nint m_OnReachedValueZero = 0x5F0; // CEntityIOOutput
            public const nint m_OnReachedValueOne = 0x618; // CEntityIOOutput
            public const nint m_OnReachedValueCustom = 0x640; // CEntityIOOutput
            public const nint m_OnEngage = 0x668; // CEntityIOOutput
            public const nint m_OnDisengage = 0x690; // CEntityIOOutput
        }
        // Parent: CModelPointEntity
        // Fields count: 11
        public static class CPointWorldText {
            public const nint m_messageText = 0x710; // char[512]
            public const nint m_FontName = 0x910; // char[64]
            public const nint m_bEnabled = 0x950; // bool
            public const nint m_bFullbright = 0x951; // bool
            public const nint m_flWorldUnitsPerPx = 0x954; // float32
            public const nint m_flFontSize = 0x958; // float32
            public const nint m_flDepthOffset = 0x95C; // float32
            public const nint m_Color = 0x960; // Color
            public const nint m_nJustifyHorizontal = 0x964; // PointWorldTextJustifyHorizontal_t
            public const nint m_nJustifyVertical = 0x968; // PointWorldTextJustifyVertical_t
            public const nint m_nReorientMode = 0x96C; // PointWorldTextReorientMode_t
        }
        // Parent: CPointEntity
        // Fields count: 12
        public static class CPointAngleSensor {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_nLookAtName = 0x4C8; // CUtlSymbolLarge
            public const nint m_hTargetEntity = 0x4D0; // CHandle<CBaseEntity>
            public const nint m_hLookAtEntity = 0x4D4; // CHandle<CBaseEntity>
            public const nint m_flDuration = 0x4D8; // float32
            public const nint m_flDotTolerance = 0x4DC; // float32
            public const nint m_flFacingTime = 0x4E0; // GameTime_t
            public const nint m_bFired = 0x4E4; // bool
            public const nint m_OnFacingLookat = 0x4E8; // CEntityIOOutput
            public const nint m_OnNotFacingLookat = 0x510; // CEntityIOOutput
            public const nint m_TargetDir = 0x538; // CEntityOutputTemplate<Vector>
            public const nint m_FacingPercentage = 0x560; // CEntityOutputTemplate<float32>
        }
        // Parent: CPointEntity
        // Fields count: 3
        public static class CPointProximitySensor {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_hTargetEntity = 0x4C4; // CHandle<CBaseEntity>
            public const nint m_Distance = 0x4C8; // CEntityOutputTemplate<float32>
        }
        // Parent: CPointEntity
        // Fields count: 16
        public static class CPointAngularVelocitySensor {
            public const nint m_hTargetEntity = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_flThreshold = 0x4C4; // float32
            public const nint m_nLastCompareResult = 0x4C8; // int32
            public const nint m_nLastFireResult = 0x4CC; // int32
            public const nint m_flFireTime = 0x4D0; // GameTime_t
            public const nint m_flFireInterval = 0x4D4; // float32
            public const nint m_flLastAngVelocity = 0x4D8; // float32
            public const nint m_lastOrientation = 0x4DC; // QAngle
            public const nint m_vecAxis = 0x4E8; // 
            public const nint m_bUseHelper = 0x4F4; // bool
            public const nint m_AngularVelocity = 0x4F8; // CEntityOutputTemplate<float32>
            public const nint m_OnLessThan = 0x520; // CEntityIOOutput
            public const nint m_OnLessThanOrEqualTo = 0x548; // CEntityIOOutput
            public const nint m_OnGreaterThan = 0x570; // CEntityIOOutput
            public const nint m_OnGreaterThanOrEqualTo = 0x598; // CEntityIOOutput
            public const nint m_OnEqualTo = 0x5C0; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 6
        public static class CPointVelocitySensor {
            public const nint m_hTargetEntity = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_vecAxis = 0x4C4; // 
            public const nint m_bEnabled = 0x4D0; // bool
            public const nint m_fPrevVelocity = 0x4D4; // float32
            public const nint m_flAvgInterval = 0x4D8; // float32
            public const nint m_Velocity = 0x4E0; // CEntityOutputTemplate<float32>
        }
        // Parent: CPointEntity
        // Fields count: 6
        public static class CPointHurt {
            public const nint m_nDamage = 0x4C0; // int32
            public const nint m_bitsDamageType = 0x4C4; // int32
            public const nint m_flRadius = 0x4C8; // float32
            public const nint m_flDelay = 0x4CC; // float32
            public const nint m_strTarget = 0x4D0; // CUtlSymbolLarge
            public const nint m_pActivator = 0x4D8; // CHandle<CBaseEntity>
        }
        // Parent: CServerOnlyPointEntity
        // Fields count: 4
        public static class CPointTeleport {
            public const nint m_vSaveOrigin = 0x4C0; // 
            public const nint m_vSaveAngles = 0x4CC; // QAngle
            public const nint m_bTeleportParentedEntities = 0x4D8; // bool
            public const nint m_bTeleportUseCurrentAngle = 0x4D9; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CEnableMotionFixup {
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CFuncPropRespawnZone {
        }
        // Parent: CBaseEntity
        // Fields count: 3
        public static class CRagdollManager {
            public const nint m_iCurrentMaxRagdollCount = 0x4C0; // int8
            public const nint m_iMaxRagdollCount = 0x4C4; // int32
            public const nint m_bSaveImportant = 0x4C8; // bool
        }
        // Parent: CModelPointEntity
        // Fields count: 3
        public static class CRevertSaved {
            public const nint m_loadTime = 0x710; // float32
            public const nint m_Duration = 0x714; // float32
            public const nint m_HoldTime = 0x718; // float32
        }
        // Parent: CLogicalEntity
        // Fields count: 3
        public static class CSceneListManager {
            public const nint m_hListManagers = 0x4C0; // CUtlVector<CHandle<CSceneListManager>>
            public const nint m_iszScenes = 0x4D8; // CUtlSymbolLarge[16]
            public const nint m_hScenes = 0x558; // CHandle<CBaseEntity>[16]
        }
        // Parent: CPointEntity
        // Fields count: 64
        public static class CSceneEntity {
            public const nint m_iszSceneFile = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszResumeSceneFile = 0x4D0; // CUtlSymbolLarge
            public const nint m_iszTarget1 = 0x4D8; // CUtlSymbolLarge
            public const nint m_iszTarget2 = 0x4E0; // CUtlSymbolLarge
            public const nint m_iszTarget3 = 0x4E8; // CUtlSymbolLarge
            public const nint m_iszTarget4 = 0x4F0; // CUtlSymbolLarge
            public const nint m_iszTarget5 = 0x4F8; // CUtlSymbolLarge
            public const nint m_iszTarget6 = 0x500; // CUtlSymbolLarge
            public const nint m_iszTarget7 = 0x508; // CUtlSymbolLarge
            public const nint m_iszTarget8 = 0x510; // CUtlSymbolLarge
            public const nint m_hTarget1 = 0x518; // CHandle<CBaseEntity>
            public const nint m_hTarget2 = 0x51C; // CHandle<CBaseEntity>
            public const nint m_hTarget3 = 0x520; // CHandle<CBaseEntity>
            public const nint m_hTarget4 = 0x524; // CHandle<CBaseEntity>
            public const nint m_hTarget5 = 0x528; // CHandle<CBaseEntity>
            public const nint m_hTarget6 = 0x52C; // CHandle<CBaseEntity>
            public const nint m_hTarget7 = 0x530; // CHandle<CBaseEntity>
            public const nint m_hTarget8 = 0x534; // CHandle<CBaseEntity>
            public const nint m_bIsPlayingBack = 0x538; // bool
            public const nint m_bPaused = 0x539; // bool
            public const nint m_bMultiplayer = 0x53A; // bool
            public const nint m_bAutogenerated = 0x53B; // bool
            public const nint m_flForceClientTime = 0x53C; // float32
            public const nint m_flCurrentTime = 0x540; // float32
            public const nint m_flFrameTime = 0x544; // float32
            public const nint m_bCancelAtNextInterrupt = 0x548; // bool
            public const nint m_fPitch = 0x54C; // float32
            public const nint m_bAutomated = 0x550; // bool
            public const nint m_nAutomatedAction = 0x554; // int32
            public const nint m_flAutomationDelay = 0x558; // float32
            public const nint m_flAutomationTime = 0x55C; // float32
            public const nint m_hWaitingForThisResumeScene = 0x560; // CHandle<CBaseEntity>
            public const nint m_bWaitingForResumeScene = 0x564; // bool
            public const nint m_bPausedViaInput = 0x565; // bool
            public const nint m_bPauseAtNextInterrupt = 0x566; // bool
            public const nint m_bWaitingForActor = 0x567; // bool
            public const nint m_bWaitingForInterrupt = 0x568; // bool
            public const nint m_bInterruptedActorsScenes = 0x569; // bool
            public const nint m_bBreakOnNonIdle = 0x56A; // bool
            public const nint m_hActorList = 0x570; // CNetworkUtlVectorBase<CHandle<CBaseFlex>>
            public const nint m_hRemoveActorList = 0x588; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_nSceneFlushCounter = 0x5D0; // int32
            public const nint m_nSceneStringIndex = 0x5D4; // uint16
            public const nint m_OnStart = 0x5D8; // CEntityIOOutput
            public const nint m_OnCompletion = 0x600; // CEntityIOOutput
            public const nint m_OnCanceled = 0x628; // CEntityIOOutput
            public const nint m_OnPaused = 0x650; // CEntityIOOutput
            public const nint m_OnResumed = 0x678; // CEntityIOOutput
            public const nint m_OnTrigger = 0x6A0; // CEntityIOOutput[16]
            public const nint m_hInterruptScene = 0x9B0; // CHandle<CSceneEntity>
            public const nint m_nInterruptCount = 0x9B4; // int32
            public const nint m_bSceneMissing = 0x9B8; // bool
            public const nint m_bInterrupted = 0x9B9; // bool
            public const nint m_bCompletedEarly = 0x9BA; // bool
            public const nint m_bInterruptSceneFinished = 0x9BB; // bool
            public const nint m_bRestoring = 0x9BC; // bool
            public const nint m_hNotifySceneCompletion = 0x9C0; // CUtlVector<CHandle<CSceneEntity>>
            public const nint m_hListManagers = 0x9D8; // CUtlVector<CHandle<CSceneListManager>>
            public const nint m_iszSoundName = 0x9F0; // CUtlSymbolLarge
            public const nint m_iszSequenceName = 0x9F8; // CUtlSymbolLarge
            public const nint m_hActor = 0xA00; // CHandle<CBaseFlex>
            public const nint m_hActivator = 0xA04; // CHandle<CBaseEntity>
            public const nint m_BusyActor = 0xA08; // int32
            public const nint m_iPlayerDeathBehavior = 0xA0C; // SceneOnPlayerDeath_t
        }
        // Parent: CBaseEntity
        // Fields count: 60
        public static class CScriptedSequence {
            public const nint m_iszEntry = 0x4C0; // CUtlSymbolLarge
            public const nint m_iszPreIdle = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszPlay = 0x4D0; // CUtlSymbolLarge
            public const nint m_iszPostIdle = 0x4D8; // CUtlSymbolLarge
            public const nint m_iszModifierToAddOnPlay = 0x4E0; // CUtlSymbolLarge
            public const nint m_iszNextScript = 0x4E8; // CUtlSymbolLarge
            public const nint m_iszEntity = 0x4F0; // CUtlSymbolLarge
            public const nint m_iszSyncGroup = 0x4F8; // CUtlSymbolLarge
            public const nint m_nMoveTo = 0x500; // ScriptedMoveTo_t
            public const nint m_bIsPlayingPreIdle = 0x504; // bool
            public const nint m_bIsPlayingEntry = 0x505; // bool
            public const nint m_bIsPlayingAction = 0x506; // bool
            public const nint m_bIsPlayingPostIdle = 0x507; // bool
            public const nint m_bLoopPreIdleSequence = 0x508; // bool
            public const nint m_bLoopActionSequence = 0x509; // bool
            public const nint m_bLoopPostIdleSequence = 0x50A; // bool
            public const nint m_bSynchPostIdles = 0x50B; // bool
            public const nint m_bIgnoreLookAt = 0x50C; // bool
            public const nint m_bIgnoreGravity = 0x50D; // bool
            public const nint m_bDisableNPCCollisions = 0x50E; // bool
            public const nint m_bKeepAnimgraphLockedPost = 0x50F; // bool
            public const nint m_bDontAddModifiers = 0x510; // bool
            public const nint m_flRadius = 0x514; // float32
            public const nint m_flRepeat = 0x518; // float32
            public const nint m_flPlayAnimFadeInTime = 0x51C; // float32
            public const nint m_flMoveInterpTime = 0x520; // float32
            public const nint m_flAngRate = 0x524; // float32
            public const nint m_nNotReadySequenceCount = 0x528; // int32
            public const nint m_startTime = 0x52C; // GameTime_t
            public const nint m_bWaitForBeginSequence = 0x530; // bool
            public const nint m_saved_effects = 0x534; // int32
            public const nint m_savedFlags = 0x538; // int32
            public const nint m_savedCollisionGroup = 0x53C; // int32
            public const nint m_interruptable = 0x540; // bool
            public const nint m_sequenceStarted = 0x541; // bool
            public const nint m_bPositionRelativeToOtherEntity = 0x542; // bool
            public const nint m_hTargetEnt = 0x544; // CHandle<CBaseEntity>
            public const nint m_hNextCine = 0x548; // CHandle<CScriptedSequence>
            public const nint m_bThinking = 0x54C; // bool
            public const nint m_bInitiatedSelfDelete = 0x54D; // bool
            public const nint m_bIsTeleportingDueToMoveTo = 0x54E; // bool
            public const nint m_bAllowCustomInterruptConditions = 0x54F; // bool
            public const nint m_hLastFoundEntity = 0x550; // CHandle<CBaseEntity>
            public const nint m_hForcedTarget = 0x554; // CHandle<CBaseAnimGraph>
            public const nint m_bDontCancelOtherSequences = 0x558; // bool
            public const nint m_bForceSynch = 0x559; // bool
            public const nint m_bPreventUpdateYawOnFinish = 0x55A; // bool
            public const nint m_bEnsureOnNavmeshOnFinish = 0x55B; // bool
            public const nint m_onDeathBehavior = 0x55C; // ScriptedOnDeath_t
            public const nint m_ConflictResponse = 0x560; // ScriptedConflictResponse_t
            public const nint m_OnBeginSequence = 0x568; // CEntityIOOutput
            public const nint m_OnActionStartOrLoop = 0x590; // CEntityIOOutput
            public const nint m_OnEndSequence = 0x5B8; // CEntityIOOutput
            public const nint m_OnPostIdleEndSequence = 0x5E0; // CEntityIOOutput
            public const nint m_OnCancelSequence = 0x608; // CEntityIOOutput
            public const nint m_OnCancelFailedSequence = 0x630; // CEntityIOOutput
            public const nint m_OnScriptEvent = 0x658; // CEntityIOOutput[8]
            public const nint m_matOtherToMain = 0x7A0; // CTransform
            public const nint m_hInteractionMainEntity = 0x7C0; // CHandle<CBaseEntity>
            public const nint m_iPlayerDeathBehavior = 0x7C4; // int32
        }
        // Parent: CBaseEntity
        // Fields count: 8
        public static class CSoundOpvarSetEntity {
            public const nint m_iszStackName = 0x4C8; // CUtlSymbolLarge
            public const nint m_iszOperatorName = 0x4D0; // CUtlSymbolLarge
            public const nint m_iszOpvarName = 0x4D8; // CUtlSymbolLarge
            public const nint m_nOpvarType = 0x4E0; // int32
            public const nint m_nOpvarIndex = 0x4E4; // int32
            public const nint m_flOpvarValue = 0x4E8; // float32
            public const nint m_OpvarValueString = 0x4F0; // CUtlSymbolLarge
            public const nint m_bSetOnSpawn = 0x4F8; // bool
        }
        // Parent: CPointEntity
        // Fields count: 6
        public static class CAISound {
            public const nint m_iSoundType = 0x4C0; // int32
            public const nint m_iSoundContext = 0x4C4; // int32
            public const nint m_iVolume = 0x4C8; // int32
            public const nint m_iSoundIndex = 0x4CC; // int32
            public const nint m_flDuration = 0x4D0; // float32
            public const nint m_iszProxyEntityName = 0x4D8; // CUtlSymbolLarge
        }
        // Parent: CLogicalEntity
        // Fields count: 1
        public static class CSoundStackSave {
            public const nint m_iszStackName = 0x4C0; // CUtlSymbolLarge
        }
        // Parent: CBaseEntity
        // Fields count: 12
        public static class CSoundEventEntity {
            public const nint m_bStartOnSpawn = 0x4C0; // bool
            public const nint m_bToLocalPlayer = 0x4C1; // bool
            public const nint m_bStopOnNew = 0x4C2; // bool
            public const nint m_bSaveRestore = 0x4C3; // bool
            public const nint m_bSavedIsPlaying = 0x4C4; // bool
            public const nint m_flSavedElapsedTime = 0x4C8; // float32
            public const nint m_iszSourceEntityName = 0x4D0; // CUtlSymbolLarge
            public const nint m_iszAttachmentName = 0x4D8; // CUtlSymbolLarge
            public const nint m_onGUIDChanged = 0x4E0; // CEntityOutputTemplate<uint64>
            public const nint m_onSoundFinished = 0x508; // CEntityIOOutput
            public const nint m_iszSoundName = 0x550; // CUtlSymbolLarge
            public const nint m_hSource = 0x560; // CEntityHandle
        }
        // Parent: CSoundEventEntity
        // Fields count: 0
        public static class CSoundEventEntityAlias_snd_event_point {
        }
        // Parent: CSoundEventEntity
        // Fields count: 2
        public static class CSoundEventAABBEntity {
            public const nint m_vMins = 0x568; // 
            public const nint m_vMaxs = 0x574; // 
        }
        // Parent: CSoundEventEntity
        // Fields count: 2
        public static class CSoundEventOBBEntity {
            public const nint m_vMins = 0x568; // 
            public const nint m_vMaxs = 0x574; // 
        }
        // Parent: CSoundEventEntity
        // Fields count: 6
        public static class CSoundEventPathCornerEntity {
            public const nint m_iszPathCorner = 0x568; // CUtlSymbolLarge
            public const nint m_iCountMax = 0x570; // int32
            public const nint m_flDistanceMax = 0x574; // float32
            public const nint m_flDistMaxSqr = 0x578; // float32
            public const nint m_flDotProductMax = 0x57C; // float32
            public const nint bPlaying = 0x580; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 2
        public static class CSoundEventParameter {
            public const nint m_iszParamName = 0x4C8; // CUtlSymbolLarge
            public const nint m_flFloatValue = 0x4D0; // float32
        }
        // Parent: CEnvSoundscapeProxy
        // Fields count: 0
        public static class CEnvSoundscapeProxyAlias_snd_soundscape_proxy {
        }
        // Parent: CEnvSoundscape
        // Fields count: 0
        public static class CEnvSoundscapeAlias_snd_soundscape {
        }
        // Parent: CEnvSoundscapeTriggerable
        // Fields count: 0
        public static class CEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable {
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CNullEntity {
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CBaseDMStart {
            public const nint m_Master = 0x4C0; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoLandmark {
        }
        // Parent: CBaseModelEntity
        // Fields count: 14
        public static class CSun {
            public const nint m_vDirection = 0x710; // 
            public const nint m_clrOverlay = 0x71C; // Color
            public const nint m_iszEffectName = 0x720; // CUtlSymbolLarge
            public const nint m_iszSSEffectName = 0x728; // CUtlSymbolLarge
            public const nint m_bOn = 0x730; // bool
            public const nint m_bmaxColor = 0x731; // bool
            public const nint m_flSize = 0x734; // float32
            public const nint m_flRotation = 0x738; // float32
            public const nint m_flHazeScale = 0x73C; // float32
            public const nint m_flAlphaHaze = 0x740; // float32
            public const nint m_flAlphaHdr = 0x744; // float32
            public const nint m_flAlphaScale = 0x748; // float32
            public const nint m_flHDRColorScale = 0x74C; // float32
            public const nint m_flFarZScale = 0x750; // float32
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CTankTargetChange {
            public const nint m_newTarget = 0x4C0; // CVariantBase<CVariantDefaultAllocator>
            public const nint m_newTargetName = 0x4D0; // CUtlSymbolLarge
        }
        // Parent: CPointEntity
        // Fields count: 7
        public static class CTankTrainAI {
            public const nint m_hTrain = 0x4C0; // CHandle<CFuncTrackTrain>
            public const nint m_hTargetEntity = 0x4C4; // CHandle<CBaseEntity>
            public const nint m_soundPlaying = 0x4C8; // int32
            public const nint m_startSoundName = 0x4E0; // CUtlSymbolLarge
            public const nint m_engineSoundName = 0x4E8; // CUtlSymbolLarge
            public const nint m_movementSoundName = 0x4F0; // CUtlSymbolLarge
            public const nint m_targetEntityName = 0x4F8; // CUtlSymbolLarge
        }
        // Parent: CBaseEntity
        // Fields count: 2
        public static class CHandleTest {
            public const nint m_Handle = 0x4C0; // CHandle<CBaseEntity>
            public const nint m_bSendHandle = 0x4C4; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CHandleDummy {
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CPlatTrigger {
            public const nint m_pPlatform = 0x710; // CHandle<CFuncPlat>
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CFuncTrainControls {
        }
        // Parent: CBaseModelEntity
        // Fields count: 2
        public static class CTriggerVolume {
            public const nint m_iFilterName = 0x710; // CUtlSymbolLarge
            public const nint m_hFilter = 0x718; // CHandle<CBaseFilter>
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoTeleportDestination {
        }
        // Parent: CBaseEntity
        // Fields count: 4
        public static class CAI_ChangeHintGroup {
            public const nint m_iSearchType = 0x4C0; // int32
            public const nint m_strSearchName = 0x4C8; // CUtlSymbolLarge
            public const nint m_strNewHintGroup = 0x4D0; // CUtlSymbolLarge
            public const nint m_flRadius = 0x4D8; // float32
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CLogicProximity {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoSpawnGroupLandmark {
        }
        // Parent: CLogicalEntity
        // Fields count: 11
        public static class CInfoSpawnGroupLoadUnload {
            public const nint m_OnSpawnGroupLoadStarted = 0x4C0; // CEntityIOOutput
            public const nint m_OnSpawnGroupLoadFinished = 0x4E8; // CEntityIOOutput
            public const nint m_OnSpawnGroupUnloadStarted = 0x510; // CEntityIOOutput
            public const nint m_OnSpawnGroupUnloadFinished = 0x538; // CEntityIOOutput
            public const nint m_iszSpawnGroupName = 0x560; // CUtlSymbolLarge
            public const nint m_iszSpawnGroupFilterName = 0x568; // CUtlSymbolLarge
            public const nint m_iszLandmarkName = 0x570; // CUtlSymbolLarge
            public const nint m_sFixedSpawnGroupName = 0x578; // CUtlString
            public const nint m_flTimeoutInterval = 0x580; // float32
            public const nint m_bStreamingStarted = 0x584; // bool
            public const nint m_bUnloadingStarted = 0x585; // bool
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CPointPulse {
        }
        // Parent: CBaseEntity
        // Fields count: 0
        public static class CPointScriptEntity {
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CFuncNavObstruction {
            public const nint m_bDisabled = 0x718; // bool
        }
        // Parent: CPointEntity
        // Fields count: 10
        public static class CAmbientGeneric {
            public const nint m_radius = 0x4C0; // float32
            public const nint m_flMaxRadius = 0x4C4; // float32
            public const nint m_iSoundLevel = 0x4C8; // soundlevel_t
            public const nint m_dpv = 0x4CC; // dynpitchvol_t
            public const nint m_fActive = 0x530; // bool
            public const nint m_fLooping = 0x531; // bool
            public const nint m_iszSound = 0x538; // CUtlSymbolLarge
            public const nint m_sSourceEntName = 0x540; // CUtlSymbolLarge
            public const nint m_hSoundSource = 0x548; // CHandle<CBaseEntity>
            public const nint m_nSoundSourceEntIndex = 0x54C; // CEntityIndex
        }
        // Parent: Relationship_t
        // Fields count: 2
        public static class RelationshipOverride_t {
            public const nint entity = 0x8; // CHandle<CBaseEntity>
            public const nint classType = 0xC; // Class_T
        }
        // Parent: CBaseModelEntity
        // Fields count: 16
        public static class CBaseToggle {
            public const nint m_toggle_state = 0x710; // TOGGLE_STATE
            public const nint m_flMoveDistance = 0x714; // float32
            public const nint m_flWait = 0x718; // float32
            public const nint m_flLip = 0x71C; // float32
            public const nint m_bAlwaysFireBlockedOutputs = 0x720; // bool
            public const nint m_vecPosition1 = 0x724; // 
            public const nint m_vecPosition2 = 0x730; // 
            public const nint m_vecMoveAng = 0x73C; // QAngle
            public const nint m_vecAngle1 = 0x748; // QAngle
            public const nint m_vecAngle2 = 0x754; // QAngle
            public const nint m_flHeight = 0x760; // float32
            public const nint m_hActivator = 0x764; // CHandle<CBaseEntity>
            public const nint m_vecFinalDest = 0x768; // 
            public const nint m_vecFinalAngle = 0x774; // QAngle
            public const nint m_movementType = 0x780; // int32
            public const nint m_sMaster = 0x788; // CUtlSymbolLarge
        }
        // Parent: CBaseToggle
        // Fields count: 24
        public static class CBaseButton {
            public const nint m_angMoveEntitySpace = 0x790; // QAngle
            public const nint m_fStayPushed = 0x79C; // bool
            public const nint m_fRotating = 0x79D; // bool
            public const nint m_ls = 0x7A0; // locksound_t
            public const nint m_sUseSound = 0x7C0; // CUtlSymbolLarge
            public const nint m_sLockedSound = 0x7C8; // CUtlSymbolLarge
            public const nint m_sUnlockedSound = 0x7D0; // CUtlSymbolLarge
            public const nint m_bLocked = 0x7D8; // bool
            public const nint m_bDisabled = 0x7D9; // bool
            public const nint m_flUseLockedTime = 0x7DC; // GameTime_t
            public const nint m_bSolidBsp = 0x7E0; // bool
            public const nint m_OnDamaged = 0x7E8; // CEntityIOOutput
            public const nint m_OnPressed = 0x810; // CEntityIOOutput
            public const nint m_OnUseLocked = 0x838; // CEntityIOOutput
            public const nint m_OnIn = 0x860; // CEntityIOOutput
            public const nint m_OnOut = 0x888; // CEntityIOOutput
            public const nint m_nState = 0x8B0; // int32
            public const nint m_hConstraint = 0x8B4; // CEntityHandle
            public const nint m_hConstraintParent = 0x8B8; // CEntityHandle
            public const nint m_bForceNpcExclude = 0x8BC; // bool
            public const nint m_sGlowEntity = 0x8C0; // CUtlSymbolLarge
            public const nint m_glowEntity = 0x8C8; // CHandle<CBaseModelEntity>
            public const nint m_usable = 0x8CC; // bool
            public const nint m_szDisplayText = 0x8D0; // CUtlSymbolLarge
        }
        // Parent: CBaseButton
        // Fields count: 0
        public static class CPhysicalButton {
        }
        // Parent: CBaseButton
        // Fields count: 0
        public static class CRotButton {
        }
        // Parent: CRotButton
        // Fields count: 14
        public static class CMomentaryRotButton {
            public const nint m_Position = 0x8D8; // CEntityOutputTemplate<float32>
            public const nint m_OnUnpressed = 0x900; // CEntityIOOutput
            public const nint m_OnFullyOpen = 0x928; // CEntityIOOutput
            public const nint m_OnFullyClosed = 0x950; // CEntityIOOutput
            public const nint m_OnReachedPosition = 0x978; // CEntityIOOutput
            public const nint m_lastUsed = 0x9A0; // int32
            public const nint m_start = 0x9A4; // QAngle
            public const nint m_end = 0x9B0; // QAngle
            public const nint m_IdealYaw = 0x9BC; // float32
            public const nint m_sNoise = 0x9C0; // CUtlSymbolLarge
            public const nint m_bUpdateTarget = 0x9C8; // bool
            public const nint m_direction = 0x9CC; // int32
            public const nint m_returnSpeed = 0x9D0; // float32
            public const nint m_flStartPosition = 0x9D4; // float32
        }
        // Parent: CPointEntity
        // Fields count: 4
        public static class CRagdollMagnet {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_radius = 0x4C4; // float32
            public const nint m_force = 0x4C8; // float32
            public const nint m_axis = 0x4CC; // 
        }
        // Parent: CBaseToggle
        // Fields count: 27
        public static class CBaseDoor {
            public const nint m_angMoveEntitySpace = 0x7A0; // QAngle
            public const nint m_vecMoveDirParentSpace = 0x7AC; // 
            public const nint m_ls = 0x7B8; // locksound_t
            public const nint m_bForceClosed = 0x7D8; // bool
            public const nint m_bDoorGroup = 0x7D9; // bool
            public const nint m_bLocked = 0x7DA; // bool
            public const nint m_bIgnoreDebris = 0x7DB; // bool
            public const nint m_eSpawnPosition = 0x7DC; // FuncDoorSpawnPos_t
            public const nint m_flBlockDamage = 0x7E0; // float32
            public const nint m_NoiseMoving = 0x7E8; // CUtlSymbolLarge
            public const nint m_NoiseArrived = 0x7F0; // CUtlSymbolLarge
            public const nint m_NoiseMovingClosed = 0x7F8; // CUtlSymbolLarge
            public const nint m_NoiseArrivedClosed = 0x800; // CUtlSymbolLarge
            public const nint m_ChainTarget = 0x808; // CUtlSymbolLarge
            public const nint m_OnBlockedClosing = 0x810; // CEntityIOOutput
            public const nint m_OnBlockedOpening = 0x838; // CEntityIOOutput
            public const nint m_OnUnblockedClosing = 0x860; // CEntityIOOutput
            public const nint m_OnUnblockedOpening = 0x888; // CEntityIOOutput
            public const nint m_OnFullyClosed = 0x8B0; // CEntityIOOutput
            public const nint m_OnFullyOpen = 0x8D8; // CEntityIOOutput
            public const nint m_OnClose = 0x900; // CEntityIOOutput
            public const nint m_OnOpen = 0x928; // CEntityIOOutput
            public const nint m_OnLockedUse = 0x950; // CEntityIOOutput
            public const nint m_bLoopMoveSound = 0x978; // bool
            public const nint m_bCreateNavObstacle = 0x990; // bool
            public const nint m_isChaining = 0x991; // bool
            public const nint m_bIsUsable = 0x992; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CEntityBlocker {
        }
        // Parent: CBaseModelEntity
        // Fields count: 10
        public static class CEntityDissolve {
            public const nint m_flFadeInStart = 0x710; // float32
            public const nint m_flFadeInLength = 0x714; // float32
            public const nint m_flFadeOutModelStart = 0x718; // float32
            public const nint m_flFadeOutModelLength = 0x71C; // float32
            public const nint m_flFadeOutStart = 0x720; // float32
            public const nint m_flFadeOutLength = 0x724; // float32
            public const nint m_flStartTime = 0x728; // GameTime_t
            public const nint m_nDissolveType = 0x72C; // EntityDisolveType_t
            public const nint m_vDissolverOrigin = 0x730; // 
            public const nint m_nMagnitude = 0x73C; // uint32
        }
        // Parent: CModelPointEntity
        // Fields count: 30
        public static class CEnvProjectedTexture {
            public const nint m_hTargetEntity = 0x710; // CHandle<CBaseEntity>
            public const nint m_bState = 0x714; // bool
            public const nint m_bAlwaysUpdate = 0x715; // bool
            public const nint m_flLightFOV = 0x718; // float32
            public const nint m_bEnableShadows = 0x71C; // bool
            public const nint m_bSimpleProjection = 0x71D; // bool
            public const nint m_bLightOnlyTarget = 0x71E; // bool
            public const nint m_bLightWorld = 0x71F; // bool
            public const nint m_bCameraSpace = 0x720; // bool
            public const nint m_flBrightnessScale = 0x724; // float32
            public const nint m_LightColor = 0x728; // Color
            public const nint m_flIntensity = 0x72C; // float32
            public const nint m_flLinearAttenuation = 0x730; // float32
            public const nint m_flQuadraticAttenuation = 0x734; // float32
            public const nint m_bVolumetric = 0x738; // bool
            public const nint m_flNoiseStrength = 0x73C; // float32
            public const nint m_flFlashlightTime = 0x740; // float32
            public const nint m_nNumPlanes = 0x744; // uint32
            public const nint m_flPlaneOffset = 0x748; // float32
            public const nint m_flVolumetricIntensity = 0x74C; // float32
            public const nint m_flColorTransitionTime = 0x750; // float32
            public const nint m_flAmbient = 0x754; // float32
            public const nint m_SpotlightTextureName = 0x758; // char[512]
            public const nint m_nSpotlightTextureFrame = 0x958; // int32
            public const nint m_nShadowQuality = 0x95C; // uint32
            public const nint m_flNearZ = 0x960; // float32
            public const nint m_flFarZ = 0x964; // float32
            public const nint m_flProjectionSize = 0x968; // float32
            public const nint m_flRotation = 0x96C; // float32
            public const nint m_bFlipHorizontal = 0x970; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 9
        public static class CEnvDecal {
            public const nint m_hDecalMaterial = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_flWidth = 0x718; // float32
            public const nint m_flHeight = 0x71C; // float32
            public const nint m_flDepth = 0x720; // float32
            public const nint m_nRenderOrder = 0x724; // uint32
            public const nint m_bProjectOnWorld = 0x728; // bool
            public const nint m_bProjectOnCharacters = 0x729; // bool
            public const nint m_bProjectOnWater = 0x72A; // bool
            public const nint m_flDepthSortBias = 0x72C; // float32
        }
        // Parent: CPointEntity
        // Fields count: 6
        public static class CMessage {
            public const nint m_iszMessage = 0x4C0; // CUtlSymbolLarge
            public const nint m_MessageVolume = 0x4C8; // float32
            public const nint m_MessageAttenuation = 0x4CC; // int32
            public const nint m_Radius = 0x4D0; // float32
            public const nint m_sNoise = 0x4D8; // CUtlSymbolLarge
            public const nint m_OnShowMessage = 0x4E0; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 17
        public static class CEnvMicrophone {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_hMeasureTarget = 0x4C4; // CHandle<CBaseEntity>
            public const nint m_nSoundMask = 0x4C8; // int32
            public const nint m_flSensitivity = 0x4CC; // float32
            public const nint m_flSmoothFactor = 0x4D0; // float32
            public const nint m_flMaxRange = 0x4D4; // float32
            public const nint m_iszSpeakerName = 0x4D8; // CUtlSymbolLarge
            public const nint m_hSpeaker = 0x4E0; // CHandle<CBaseEntity>
            public const nint m_bAvoidFeedback = 0x4E4; // bool
            public const nint m_iSpeakerDSPPreset = 0x4E8; // int32
            public const nint m_iszListenFilter = 0x4F0; // CUtlSymbolLarge
            public const nint m_hListenFilter = 0x4F8; // CHandle<CBaseFilter>
            public const nint m_SoundLevel = 0x500; // CEntityOutputTemplate<float32>
            public const nint m_OnRoutedSound = 0x528; // CEntityIOOutput
            public const nint m_OnHeardSound = 0x550; // CEntityIOOutput
            public const nint m_szLastSound = 0x578; // char[256]
            public const nint m_iLastRoutedFrame = 0x678; // int32
        }
        // Parent: CBaseModelEntity
        // Fields count: 21
        public static class CBreakable {
            public const nint m_Material = 0x720; // Materials
            public const nint m_hBreaker = 0x724; // CHandle<CBaseEntity>
            public const nint m_Explosion = 0x728; // Explosions
            public const nint m_iszSpawnObject = 0x730; // CUtlSymbolLarge
            public const nint m_flPressureDelay = 0x738; // float32
            public const nint m_iMinHealthDmg = 0x73C; // int32
            public const nint m_iszPropData = 0x740; // CUtlSymbolLarge
            public const nint m_impactEnergyScale = 0x748; // float32
            public const nint m_nOverrideBlockLOS = 0x74C; // EOverrideBlockLOS_t
            public const nint m_OnBreak = 0x750; // CEntityIOOutput
            public const nint m_OnHealthChanged = 0x778; // CEntityOutputTemplate<float32>
            public const nint m_flDmgModBullet = 0x7A0; // float32
            public const nint m_flDmgModClub = 0x7A4; // float32
            public const nint m_flDmgModExplosive = 0x7A8; // float32
            public const nint m_flDmgModFire = 0x7AC; // float32
            public const nint m_iszPhysicsDamageTableName = 0x7B0; // CUtlSymbolLarge
            public const nint m_iszBasePropData = 0x7B8; // CUtlSymbolLarge
            public const nint m_iInteractions = 0x7C0; // int32
            public const nint m_PerformanceMode = 0x7C4; // PerformanceMode_t
            public const nint m_hPhysicsAttacker = 0x7C8; // CHandle<CBasePlayerPawn>
            public const nint m_flLastPhysicsInfluenceTime = 0x7CC; // GameTime_t
        }
        // Parent: CBaseToggle
        // Fields count: 13
        public static class CFuncMoveLinear {
            public const nint m_authoredPosition = 0x790; // MoveLinearAuthoredPos_t
            public const nint m_angMoveEntitySpace = 0x794; // QAngle
            public const nint m_vecMoveDirParentSpace = 0x7A0; // 
            public const nint m_soundStart = 0x7B0; // CUtlSymbolLarge
            public const nint m_soundStop = 0x7B8; // CUtlSymbolLarge
            public const nint m_currentSound = 0x7C0; // CUtlSymbolLarge
            public const nint m_flBlockDamage = 0x7C8; // float32
            public const nint m_flStartPosition = 0x7CC; // float32
            public const nint m_flMoveDistance = 0x7D0; // float32
            public const nint m_OnFullyOpen = 0x7E0; // CEntityIOOutput
            public const nint m_OnFullyClosed = 0x808; // CEntityIOOutput
            public const nint m_bCreateMovableNavMesh = 0x830; // bool
            public const nint m_bCreateNavObstacle = 0x831; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 19
        public static class CFuncRotating {
            public const nint m_OnStopped = 0x710; // CEntityIOOutput
            public const nint m_OnStarted = 0x738; // CEntityIOOutput
            public const nint m_OnReachedStart = 0x760; // CEntityIOOutput
            public const nint m_localRotationVector = 0x788; // RotationVector
            public const nint m_flFanFriction = 0x794; // float32
            public const nint m_flAttenuation = 0x798; // float32
            public const nint m_flVolume = 0x79C; // float32
            public const nint m_flTargetSpeed = 0x7A0; // float32
            public const nint m_flMaxSpeed = 0x7A4; // float32
            public const nint m_flBlockDamage = 0x7A8; // float32
            public const nint m_flTimeScale = 0x7AC; // float32
            public const nint m_NoiseRunning = 0x7B0; // CUtlSymbolLarge
            public const nint m_bReversed = 0x7B8; // bool
            public const nint m_bAccelDecel = 0x7B9; // bool
            public const nint m_prevLocalAngles = 0x7C4; // QAngle
            public const nint m_angStart = 0x7D0; // QAngle
            public const nint m_bStopAtStartPos = 0x7DC; // bool
            public const nint m_vecClientOrigin = 0x7E0; // 
            public const nint m_vecClientAngles = 0x7EC; // QAngle
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CItemGenericTriggerHelper {
            public const nint m_hParentItem = 0x710; // CHandle<CItemGeneric>
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CRuleEntity {
            public const nint m_iszMaster = 0x710; // CUtlSymbolLarge
        }
        // Parent: CRuleEntity
        // Fields count: 1
        public static class CRulePointEntity {
            public const nint m_Score = 0x718; // int32
        }
        // Parent: CRulePointEntity
        // Fields count: 0
        public static class CGamePlayerEquip {
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CMarkupVolume {
            public const nint m_bEnabled = 0x710; // bool
        }
        // Parent: CMarkupVolume
        // Fields count: 5
        public static class CMarkupVolumeTagged {
            public const nint m_bIsGroup = 0x748; // bool
            public const nint m_bGroupByPrefab = 0x749; // bool
            public const nint m_bGroupByVolume = 0x74A; // bool
            public const nint m_bGroupOtherGroups = 0x74B; // bool
            public const nint m_bIsInGroup = 0x74C; // bool
        }
        // Parent: CMarkupVolumeTagged
        // Fields count: 3
        public static class CMarkupVolumeWithRef {
            public const nint m_bUseRef = 0x750; // bool
            public const nint m_vRefPos = 0x754; // 
            public const nint m_flRefDot = 0x760; // float32
        }
        // Parent: CBaseModelEntity
        // Fields count: 6
        public static class CFuncBrush {
            public const nint m_iSolidity = 0x710; // BrushSolidities_e
            public const nint m_iDisabled = 0x714; // int32
            public const nint m_bSolidBsp = 0x718; // bool
            public const nint m_iszExcludedClass = 0x720; // CUtlSymbolLarge
            public const nint m_bInvertExclusion = 0x728; // bool
            public const nint m_bScriptedMovement = 0x729; // bool
        }
        // Parent: CPointEntity
        // Fields count: 9
        public static class CPathTrack {
            public const nint m_pnext = 0x4C0; // CPathTrack*
            public const nint m_pprevious = 0x4C8; // CPathTrack*
            public const nint m_paltpath = 0x4D0; // CPathTrack*
            public const nint m_flRadius = 0x4D8; // float32
            public const nint m_length = 0x4DC; // float32
            public const nint m_altName = 0x4E0; // CUtlSymbolLarge
            public const nint m_nIterVal = 0x4E8; // int32
            public const nint m_eOrientationType = 0x4EC; // TrackOrientationType_t
            public const nint m_OnPass = 0x4F0; // CEntityIOOutput
        }
        // Parent: CBreakable
        // Fields count: 15
        public static class CPhysBox {
            public const nint m_damageType = 0x7D0; // int32
            public const nint m_massScale = 0x7D4; // float32
            public const nint m_damageToEnableMotion = 0x7D8; // int32
            public const nint m_flForceToEnableMotion = 0x7DC; // float32
            public const nint m_angPreferredCarryAngles = 0x7E0; // QAngle
            public const nint m_bNotSolidToWorld = 0x7EC; // bool
            public const nint m_bEnableUseOutput = 0x7ED; // bool
            public const nint m_iExploitableByPlayer = 0x7F0; // int32
            public const nint m_flTouchOutputPerEntityDelay = 0x7F4; // float32
            public const nint m_OnDamaged = 0x7F8; // CEntityIOOutput
            public const nint m_OnAwakened = 0x820; // CEntityIOOutput
            public const nint m_OnMotionEnabled = 0x848; // CEntityIOOutput
            public const nint m_OnPlayerUse = 0x870; // CEntityIOOutput
            public const nint m_OnStartTouch = 0x898; // CEntityIOOutput
            public const nint m_hCarryingPlayer = 0x8C0; // CHandle<CBasePlayerPawn>
        }
        // Parent: CPointEntity
        // Fields count: 9
        public static class CPhysExplosion {
            public const nint m_bExplodeOnSpawn = 0x4C0; // bool
            public const nint m_flMagnitude = 0x4C4; // float32
            public const nint m_flDamage = 0x4C8; // float32
            public const nint m_radius = 0x4CC; // float32
            public const nint m_targetEntityName = 0x4D0; // CUtlSymbolLarge
            public const nint m_flInnerRadius = 0x4D8; // float32
            public const nint m_flPushScale = 0x4DC; // float32
            public const nint m_bConvertToDebrisWhenPossible = 0x4E0; // bool
            public const nint m_OnPushedPlayer = 0x4E8; // CEntityIOOutput
        }
        // Parent: CPointEntity
        // Fields count: 3
        public static class CPhysImpact {
            public const nint m_damage = 0x4C0; // float32
            public const nint m_distance = 0x4C4; // float32
            public const nint m_directionEntityName = 0x4C8; // CUtlSymbolLarge
        }
        // Parent: CBaseModelEntity
        // Fields count: 21
        public static class CRopeKeyframe {
            public const nint m_RopeFlags = 0x718; // uint16
            public const nint m_iNextLinkName = 0x720; // CUtlSymbolLarge
            public const nint m_Slack = 0x728; // int16
            public const nint m_Width = 0x72C; // float32
            public const nint m_TextureScale = 0x730; // float32
            public const nint m_nSegments = 0x734; // uint8
            public const nint m_bConstrainBetweenEndpoints = 0x735; // bool
            public const nint m_strRopeMaterialModel = 0x738; // CUtlSymbolLarge
            public const nint m_iRopeMaterialModelIndex = 0x740; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_Subdiv = 0x748; // uint8
            public const nint m_nChangeCount = 0x749; // uint8
            public const nint m_RopeLength = 0x74A; // int16
            public const nint m_fLockedPoints = 0x74C; // uint8
            public const nint m_bCreatedFromMapFile = 0x74D; // bool
            public const nint m_flScrollSpeed = 0x750; // float32
            public const nint m_bStartPointValid = 0x754; // bool
            public const nint m_bEndPointValid = 0x755; // bool
            public const nint m_hStartPoint = 0x758; // CHandle<CBaseEntity>
            public const nint m_hEndPoint = 0x75C; // CHandle<CBaseEntity>
            public const nint m_iStartAttachment = 0x760; // AttachmentHandle_t
            public const nint m_iEndAttachment = 0x761; // AttachmentHandle_t
        }
        // Parent: CPointEntity
        // Fields count: 4
        public static class CSoundEnt {
            public const nint m_iFreeSound = 0x4C0; // int32
            public const nint m_iActiveSound = 0x4C4; // int32
            public const nint m_cLastActiveSounds = 0x4C8; // int32
            public const nint m_SoundPool = 0x4CC; // CSound[128]
        }
        // Parent: CBaseModelEntity
        // Fields count: 4
        public static class CSpotlightEnd {
            public const nint m_flLightScale = 0x710; // float32
            public const nint m_Radius = 0x714; // float32
            public const nint m_vSpotlightDir = 0x718; // 
            public const nint m_vSpotlightOrg = 0x724; // 
        }
        // Parent: CBaseModelEntity
        // Fields count: 38
        public static class CFuncTrackTrain {
            public const nint m_ppath = 0x710; // CHandle<CPathTrack>
            public const nint m_length = 0x714; // float32
            public const nint m_vPosPrev = 0x718; // 
            public const nint m_angPrev = 0x724; // QAngle
            public const nint m_controlMins = 0x730; // 
            public const nint m_controlMaxs = 0x73C; // 
            public const nint m_lastBlockPos = 0x748; // 
            public const nint m_lastBlockTick = 0x754; // int32
            public const nint m_flVolume = 0x758; // float32
            public const nint m_flBank = 0x75C; // float32
            public const nint m_oldSpeed = 0x760; // float32
            public const nint m_flBlockDamage = 0x764; // float32
            public const nint m_height = 0x768; // float32
            public const nint m_maxSpeed = 0x76C; // float32
            public const nint m_dir = 0x770; // float32
            public const nint m_iszSoundMove = 0x778; // CUtlSymbolLarge
            public const nint m_iszSoundMovePing = 0x780; // CUtlSymbolLarge
            public const nint m_iszSoundStart = 0x788; // CUtlSymbolLarge
            public const nint m_iszSoundStop = 0x790; // CUtlSymbolLarge
            public const nint m_strPathTarget = 0x798; // CUtlSymbolLarge
            public const nint m_flMoveSoundMinDuration = 0x7A0; // float32
            public const nint m_flMoveSoundMaxDuration = 0x7A4; // float32
            public const nint m_flNextMoveSoundTime = 0x7A8; // GameTime_t
            public const nint m_flMoveSoundMinPitch = 0x7AC; // float32
            public const nint m_flMoveSoundMaxPitch = 0x7B0; // float32
            public const nint m_eOrientationType = 0x7B4; // TrainOrientationType_t
            public const nint m_eVelocityType = 0x7B8; // TrainVelocityType_t
            public const nint m_OnStart = 0x7C8; // CEntityIOOutput
            public const nint m_OnNext = 0x7F0; // CEntityIOOutput
            public const nint m_OnArrivedAtDestinationNode = 0x818; // CEntityIOOutput
            public const nint m_bManualSpeedChanges = 0x840; // bool
            public const nint m_flDesiredSpeed = 0x844; // float32
            public const nint m_flSpeedChangeTime = 0x848; // GameTime_t
            public const nint m_flAccelSpeed = 0x84C; // float32
            public const nint m_flDecelSpeed = 0x850; // float32
            public const nint m_bAccelToSpeed = 0x854; // bool
            public const nint m_flTimeScale = 0x858; // float32
            public const nint m_flNextMPSoundTime = 0x85C; // GameTime_t
        }
        // Parent: CBaseToggle
        // Fields count: 11
        public static class CBaseTrigger {
            public const nint m_bDisabled = 0x790; // bool
            public const nint m_iFilterName = 0x798; // CUtlSymbolLarge
            public const nint m_hFilter = 0x7A0; // CHandle<CBaseFilter>
            public const nint m_OnStartTouch = 0x7A8; // CEntityIOOutput
            public const nint m_OnStartTouchAll = 0x7D0; // CEntityIOOutput
            public const nint m_OnEndTouch = 0x7F8; // CEntityIOOutput
            public const nint m_OnEndTouchAll = 0x820; // CEntityIOOutput
            public const nint m_OnTouching = 0x848; // CEntityIOOutput
            public const nint m_OnNotTouching = 0x870; // CEntityIOOutput
            public const nint m_hTouchingEntities = 0x898; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_bClientSidePredicted = 0x8B0; // bool
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CTriggerMultiple {
            public const nint m_OnTrigger = 0x8B8; // CEntityIOOutput
        }
        // Parent: CBaseTrigger
        // Fields count: 15
        public static class CTriggerSndSosOpvar {
            public const nint m_hTouchingPlayers = 0x8B8; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_flPosition = 0x8D0; // 
            public const nint m_flCenterSize = 0x8DC; // float32
            public const nint m_flMinVal = 0x8E0; // float32
            public const nint m_flMaxVal = 0x8E4; // float32
            public const nint m_flWait = 0x8E8; // float32
            public const nint m_opvarName = 0x8F0; // CUtlSymbolLarge
            public const nint m_stackName = 0x8F8; // CUtlSymbolLarge
            public const nint m_operatorName = 0x900; // CUtlSymbolLarge
            public const nint m_bVolIs2D = 0x908; // bool
            public const nint m_opvarNameChar = 0x909; // char[256]
            public const nint m_stackNameChar = 0xA09; // char[256]
            public const nint m_operatorNameChar = 0xB09; // char[256]
            public const nint m_VecNormPos = 0xC0C; // 
            public const nint m_flNormCenterSize = 0xC18; // float32
        }
        // Parent: CBaseTrigger
        // Fields count: 14
        public static class CTriggerHurt {
            public const nint m_flOriginalDamage = 0x8B8; // float32
            public const nint m_flDamage = 0x8BC; // float32
            public const nint m_flDamageCap = 0x8C0; // float32
            public const nint m_flLastDmgTime = 0x8C4; // GameTime_t
            public const nint m_flForgivenessDelay = 0x8C8; // float32
            public const nint m_bitsDamageInflict = 0x8CC; // int32
            public const nint m_damageModel = 0x8D0; // int32
            public const nint m_bNoDmgForce = 0x8D4; // bool
            public const nint m_vDamageForce = 0x8D8; // 
            public const nint m_thinkAlways = 0x8E4; // bool
            public const nint m_hurtThinkPeriod = 0x8E8; // float32
            public const nint m_OnHurt = 0x8F0; // CEntityIOOutput
            public const nint m_OnHurtPlayer = 0x918; // CEntityIOOutput
            public const nint m_hurtEntities = 0x940; // CUtlVector<CHandle<CBaseEntity>>
        }
        // Parent: CTriggerHurt
        // Fields count: 0
        public static class CTriggerHurtGhost {
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CTriggerCallback {
        }
        // Parent: CBaseTrigger
        // Fields count: 14
        public static class CTriggerLerpObject {
            public const nint m_iszLerpTarget = 0x8B8; // CUtlSymbolLarge
            public const nint m_hLerpTarget = 0x8C0; // CHandle<CBaseEntity>
            public const nint m_iszLerpTargetAttachment = 0x8C8; // CUtlSymbolLarge
            public const nint m_hLerpTargetAttachment = 0x8D0; // AttachmentHandle_t
            public const nint m_flLerpDuration = 0x8D4; // float32
            public const nint m_bLerpRestoreMoveType = 0x8D8; // bool
            public const nint m_bSingleLerpObject = 0x8D9; // bool
            public const nint m_vecLerpingObjects = 0x8E0; // CUtlVector<lerpdata_t>
            public const nint m_iszLerpEffect = 0x8F8; // CUtlSymbolLarge
            public const nint m_iszLerpSound = 0x900; // CUtlSymbolLarge
            public const nint m_bAttachTouchingObject = 0x908; // bool
            public const nint m_hEntityToWaitForDisconnect = 0x90C; // CHandle<CBaseEntity>
            public const nint m_OnLerpStarted = 0x910; // CEntityIOOutput
            public const nint m_OnLerpFinished = 0x938; // CEntityIOOutput
        }
        // Parent: CBaseTrigger
        // Fields count: 7
        public static class CChangeLevel {
            public const nint m_sMapName = 0x8B8; // CUtlString
            public const nint m_sLandmarkName = 0x8C0; // CUtlString
            public const nint m_OnChangeLevel = 0x8C8; // CEntityIOOutput
            public const nint m_bTouched = 0x8F0; // bool
            public const nint m_bNoTouch = 0x8F1; // bool
            public const nint m_bNewChapter = 0x8F2; // bool
            public const nint m_bOnChangeLevelFired = 0x8F3; // bool
        }
        // Parent: CBaseTrigger
        // Fields count: 3
        public static class CTriggerTeleport {
            public const nint m_iLandmark = 0x8B8; // CUtlSymbolLarge
            public const nint m_bUseLandmarkAngles = 0x8C0; // bool
            public const nint m_bMirrorPlayer = 0x8C1; // bool
        }
        // Parent: CBaseTrigger
        // Fields count: 12
        public static class CTriggerFan {
            public const nint m_vFanOrigin = 0x8B8; // 
            public const nint m_vFanEnd = 0x8C4; // 
            public const nint m_vNoise = 0x8D0; // 
            public const nint m_flForce = 0x8DC; // float32
            public const nint m_flRopeForceScale = 0x8E0; // float32
            public const nint m_flPlayerForce = 0x8E4; // float32
            public const nint m_flRampTime = 0x8E8; // float32
            public const nint m_bFalloff = 0x8EC; // bool
            public const nint m_bPushPlayer = 0x8ED; // bool
            public const nint m_bRampDown = 0x8EE; // bool
            public const nint m_bAddNoise = 0x8EF; // bool
            public const nint m_RampTimer = 0x8F0; // CountdownTimer
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CNavWalkable {
        }
        // Parent: CBaseModelEntity
        // Fields count: 2
        public static class CFuncNavBlocker {
            public const nint m_bDisabled = 0x710; // bool
            public const nint m_nBlockedTeamNumber = 0x714; // int32
        }
        // Parent: CPointEntity
        // Fields count: 13
        public static class CNavLinkAreaEntity {
            public const nint m_flWidth = 0x4C0; // float32
            public const nint m_vLocatorOffset = 0x4C4; // 
            public const nint m_qLocatorAnglesOffset = 0x4D0; // QAngle
            public const nint m_strMovementForward = 0x4E0; // CUtlSymbolLarge
            public const nint m_strMovementReverse = 0x4E8; // CUtlSymbolLarge
            public const nint m_nNavLinkIdForward = 0x4F0; // int32
            public const nint m_nNavLinkIdReverse = 0x4F4; // int32
            public const nint m_bEnabled = 0x4F8; // bool
            public const nint m_strFilterName = 0x500; // CUtlSymbolLarge
            public const nint m_hFilter = 0x508; // CHandle<CBaseFilter>
            public const nint m_OnNavLinkStart = 0x510; // CEntityIOOutput
            public const nint m_OnNavLinkFinish = 0x538; // CEntityIOOutput
            public const nint m_bIsTerminus = 0x560; // bool
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CNavSpaceInfo {
            public const nint m_bCreateFlightSpace = 0x4C0; // bool
        }
        // Parent: CBaseModelEntity
        // Fields count: 24
        public static class CBeam {
            public const nint m_flFrameRate = 0x710; // float32
            public const nint m_flHDRColorScale = 0x714; // float32
            public const nint m_flFireTime = 0x718; // GameTime_t
            public const nint m_flDamage = 0x71C; // float32
            public const nint m_nNumBeamEnts = 0x720; // uint8
            public const nint m_hBaseMaterial = 0x728; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nHaloIndex = 0x730; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nBeamType = 0x738; // BeamType_t
            public const nint m_nBeamFlags = 0x73C; // uint32
            public const nint m_hAttachEntity = 0x740; // CHandle<CBaseEntity>[10]
            public const nint m_nAttachIndex = 0x768; // AttachmentHandle_t[10]
            public const nint m_fWidth = 0x774; // float32
            public const nint m_fEndWidth = 0x778; // float32
            public const nint m_fFadeLength = 0x77C; // float32
            public const nint m_fHaloScale = 0x780; // float32
            public const nint m_fAmplitude = 0x784; // float32
            public const nint m_fStartFrame = 0x788; // float32
            public const nint m_fSpeed = 0x78C; // float32
            public const nint m_flFrame = 0x790; // float32
            public const nint m_nClipStyle = 0x794; // BeamClipStyle_t
            public const nint m_bTurnedOff = 0x798; // bool
            public const nint m_vecEndPos = 0x79C; // 
            public const nint m_hEndEntity = 0x7A8; // CHandle<CBaseEntity>
            public const nint m_nDissolveType = 0x7AC; // int32
        }
        // Parent: CBaseModelEntity
        // Fields count: 12
        public static class CFuncLadder {
            public const nint m_vecLadderDir = 0x710; // 
            public const nint m_Dismounts = 0x720; // CUtlVector<CHandle<CInfoLadderDismount>>
            public const nint m_vecLocalTop = 0x738; // 
            public const nint m_vecPlayerMountPositionTop = 0x744; // 
            public const nint m_vecPlayerMountPositionBottom = 0x750; // 
            public const nint m_flAutoRideSpeed = 0x75C; // float32
            public const nint m_bDisabled = 0x760; // bool
            public const nint m_bFakeLadder = 0x761; // bool
            public const nint m_bHasSlack = 0x762; // bool
            public const nint m_surfacePropName = 0x768; // CUtlSymbolLarge
            public const nint m_OnPlayerGotOnLadder = 0x770; // CEntityIOOutput
            public const nint m_OnPlayerGotOffLadder = 0x798; // CEntityIOOutput
        }
        // Parent: CBaseModelEntity
        // Fields count: 32
        public static class CFuncShatterglass {
            public const nint m_hGlassMaterialDamaged = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hGlassMaterialUndamaged = 0x718; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hConcreteMaterialEdgeFace = 0x720; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hConcreteMaterialEdgeCaps = 0x728; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hConcreteMaterialEdgeFins = 0x730; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_matPanelTransform = 0x738; // matrix3x4_t
            public const nint m_matPanelTransformWsTemp = 0x768; // matrix3x4_t
            public const nint m_vecShatterGlassShards = 0x798; // CUtlVector<uint32>
            public const nint m_PanelSize = 0x7B0; // Vector2D
            public const nint m_vecPanelNormalWs = 0x7B8; // 
            public const nint m_nNumShardsEverCreated = 0x7C4; // int32
            public const nint m_flLastShatterSoundEmitTime = 0x7C8; // GameTime_t
            public const nint m_flLastCleanupTime = 0x7CC; // GameTime_t
            public const nint m_flInitAtTime = 0x7D0; // GameTime_t
            public const nint m_flGlassThickness = 0x7D4; // float32
            public const nint m_flSpawnInvulnerability = 0x7D8; // float32
            public const nint m_bBreakSilent = 0x7DC; // bool
            public const nint m_bBreakShardless = 0x7DD; // bool
            public const nint m_bBroken = 0x7DE; // bool
            public const nint m_bHasRateLimitedShards = 0x7DF; // bool
            public const nint m_bGlassNavIgnore = 0x7E0; // bool
            public const nint m_bGlassInFrame = 0x7E1; // bool
            public const nint m_bStartBroken = 0x7E2; // bool
            public const nint m_iInitialDamageType = 0x7E3; // uint8
            public const nint m_szDamagePositioningEntityName01 = 0x7E8; // CUtlSymbolLarge
            public const nint m_szDamagePositioningEntityName02 = 0x7F0; // CUtlSymbolLarge
            public const nint m_szDamagePositioningEntityName03 = 0x7F8; // CUtlSymbolLarge
            public const nint m_szDamagePositioningEntityName04 = 0x800; // CUtlSymbolLarge
            public const nint m_vInitialDamagePositions = 0x808; // CUtlVector<Vector>
            public const nint m_vExtraDamagePositions = 0x820; // CUtlVector<Vector>
            public const nint m_OnBroken = 0x838; // CEntityIOOutput
            public const nint m_iSurfaceType = 0x861; // uint8
        }
        // Parent: CEntitySubclassVDataBase
        // Fields count: 7
        public static class CPrecipitationVData {
            public const nint m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_flInnerDistance = 0x108; // float32
            public const nint m_nAttachType = 0x10C; // ParticleAttachment_t
            public const nint m_bBatchSameVolumeType = 0x110; // bool
            public const nint m_nRTEnvCP = 0x114; // int32
            public const nint m_nRTEnvCPComponent = 0x118; // int32
            public const nint m_szModifier = 0x120; // CUtlString
        }
        // Parent: CBaseModelEntity
        // Fields count: 23
        public static class CSprite {
            public const nint m_hSpriteMaterial = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hAttachedToEntity = 0x718; // CHandle<CBaseEntity>
            public const nint m_nAttachment = 0x71C; // AttachmentHandle_t
            public const nint m_flSpriteFramerate = 0x720; // float32
            public const nint m_flFrame = 0x724; // float32
            public const nint m_flDieTime = 0x728; // GameTime_t
            public const nint m_nBrightness = 0x738; // uint32
            public const nint m_flBrightnessDuration = 0x73C; // float32
            public const nint m_flSpriteScale = 0x740; // float32
            public const nint m_flScaleDuration = 0x744; // float32
            public const nint m_bWorldSpaceScale = 0x748; // bool
            public const nint m_flGlowProxySize = 0x74C; // float32
            public const nint m_flHDRColorScale = 0x750; // float32
            public const nint m_flLastTime = 0x754; // GameTime_t
            public const nint m_flMaxFrame = 0x758; // float32
            public const nint m_flStartScale = 0x75C; // float32
            public const nint m_flDestScale = 0x760; // float32
            public const nint m_flScaleTimeStart = 0x764; // GameTime_t
            public const nint m_nStartBrightness = 0x768; // int32
            public const nint m_nDestBrightness = 0x76C; // int32
            public const nint m_flBrightnessTimeStart = 0x770; // GameTime_t
            public const nint m_nSpriteWidth = 0x774; // int32
            public const nint m_nSpriteHeight = 0x778; // int32
        }
        // Parent: CSprite
        // Fields count: 0
        public static class CSpriteOriented {
        }
        // Parent: CBaseModelEntity
        // Fields count: 14
        public static class CBaseClientUIEntity {
            public const nint m_bEnabled = 0x710; // bool
            public const nint m_DialogXMLName = 0x718; // CUtlSymbolLarge
            public const nint m_PanelClassName = 0x720; // CUtlSymbolLarge
            public const nint m_PanelID = 0x728; // CUtlSymbolLarge
            public const nint m_CustomOutput0 = 0x730; // CEntityIOOutput
            public const nint m_CustomOutput1 = 0x758; // CEntityIOOutput
            public const nint m_CustomOutput2 = 0x780; // CEntityIOOutput
            public const nint m_CustomOutput3 = 0x7A8; // CEntityIOOutput
            public const nint m_CustomOutput4 = 0x7D0; // CEntityIOOutput
            public const nint m_CustomOutput5 = 0x7F8; // CEntityIOOutput
            public const nint m_CustomOutput6 = 0x820; // CEntityIOOutput
            public const nint m_CustomOutput7 = 0x848; // CEntityIOOutput
            public const nint m_CustomOutput8 = 0x870; // CEntityIOOutput
            public const nint m_CustomOutput9 = 0x898; // CEntityIOOutput
        }
        // Parent: CBaseClientUIEntity
        // Fields count: 2
        public static class CPointClientUIDialog {
            public const nint m_hActivator = 0x8C0; // CHandle<CBaseEntity>
            public const nint m_bStartEnabled = 0x8C4; // bool
        }
        // Parent: CBaseClientUIEntity
        // Fields count: 23
        public static class CPointClientUIWorldPanel {
            public const nint m_bIgnoreInput = 0x8C0; // bool
            public const nint m_bLit = 0x8C1; // bool
            public const nint m_bFollowPlayerAcrossTeleport = 0x8C2; // bool
            public const nint m_flWidth = 0x8C4; // float32
            public const nint m_flHeight = 0x8C8; // float32
            public const nint m_flDPI = 0x8CC; // float32
            public const nint m_flInteractDistance = 0x8D0; // float32
            public const nint m_flDepthOffset = 0x8D4; // float32
            public const nint m_unOwnerContext = 0x8D8; // uint32
            public const nint m_unHorizontalAlign = 0x8DC; // uint32
            public const nint m_unVerticalAlign = 0x8E0; // uint32
            public const nint m_unOrientation = 0x8E4; // uint32
            public const nint m_bAllowInteractionFromAllSceneWorlds = 0x8E8; // bool
            public const nint m_vecCSSClasses = 0x8F0; // CNetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_bOpaque = 0x908; // bool
            public const nint m_bNoDepth = 0x909; // bool
            public const nint m_bRenderBackface = 0x90A; // bool
            public const nint m_bUseOffScreenIndicator = 0x90B; // bool
            public const nint m_bExcludeFromSaveGames = 0x90C; // bool
            public const nint m_bGrabbable = 0x90D; // bool
            public const nint m_bOnlyRenderToTexture = 0x90E; // bool
            public const nint m_bDisableMipGen = 0x90F; // bool
            public const nint m_nExplicitImageLayout = 0x910; // int32
        }
        // Parent: CPointClientUIWorldPanel
        // Fields count: 1
        public static class CPointClientUIWorldTextPanel {
            public const nint m_messageText = 0x918; // char[512]
        }
        // Parent: CPointEntity
        // Fields count: 10
        public static class CInfoOffscreenPanoramaTexture {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_nResolutionX = 0x4C4; // int32
            public const nint m_nResolutionY = 0x4C8; // int32
            public const nint m_szLayoutFileName = 0x4D0; // CUtlSymbolLarge
            public const nint m_RenderAttrName = 0x4D8; // CUtlSymbolLarge
            public const nint m_TargetEntities = 0x4E0; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
            public const nint m_nTargetChangeCount = 0x4F8; // int32
            public const nint m_vecCSSClasses = 0x500; // CNetworkUtlVectorBase<CUtlSymbolLarge>
            public const nint m_szTargetsName = 0x518; // CUtlSymbolLarge
            public const nint m_AdditionalTargetEntities = 0x520; // CUtlVector<CHandle<CBaseModelEntity>>
        }
        // Parent: IEconItemInterface
        // Fields count: 13
        public static class CEconItemView {
            public const nint m_iItemDefinitionIndex = 0x38; // uint16
            public const nint m_iEntityQuality = 0x3C; // int32
            public const nint m_iEntityLevel = 0x40; // uint32
            public const nint m_iItemID = 0x48; // uint64
            public const nint m_iItemIDHigh = 0x50; // uint32
            public const nint m_iItemIDLow = 0x54; // uint32
            public const nint m_iAccountID = 0x58; // uint32
            public const nint m_iInventoryPosition = 0x5C; // uint32
            public const nint m_bInitialized = 0x68; // bool
            public const nint m_AttributeList = 0x70; // CAttributeList
            public const nint m_NetworkedDynamicAttributes = 0xD0; // CAttributeList
            public const nint m_szCustomName = 0x130; // char[161]
            public const nint m_szCustomNameOverride = 0x1D1; // char[161]
        }
        // Parent: SpawnPoint
        // Fields count: 0
        public static class CInfoPlayerTerrorist {
        }
        // Parent: SpawnPoint
        // Fields count: 0
        public static class CInfoPlayerCounterterrorist {
        }
        // Parent: SpawnPoint
        // Fields count: 0
        public static class CInfoDeathmatchSpawn {
        }
        // Parent: SpawnPointCoopEnemy
        // Fields count: 0
        public static class CInfoEnemyTerroristSpawn {
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CPointGiveAmmo {
            public const nint m_pActivator = 0x4C0; // CHandle<CBaseEntity>
        }
        // Parent: CBaseTrigger
        // Fields count: 9
        public static class CBombTarget {
            public const nint m_OnBombExplode = 0x8B8; // CEntityIOOutput
            public const nint m_OnBombPlanted = 0x8E0; // CEntityIOOutput
            public const nint m_OnBombDefused = 0x908; // CEntityIOOutput
            public const nint m_bIsBombSiteB = 0x930; // bool
            public const nint m_bIsHeistBombTarget = 0x931; // bool
            public const nint m_bBombPlantedHere = 0x932; // bool
            public const nint m_szMountTarget = 0x938; // CUtlSymbolLarge
            public const nint m_hInstructorHint = 0x940; // CHandle<CBaseEntity>
            public const nint m_nBombSiteDesignation = 0x944; // int32
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoInstructorHintBombTargetA {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoInstructorHintBombTargetB {
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CHostageRescueZoneShim {
        }
        // Parent: CHostageRescueZoneShim
        // Fields count: 0
        public static class CHostageRescueZone {
        }
        // Parent: CPointEntity
        // Fields count: 0
        public static class CInfoInstructorHintHostageRescueZone {
        }
        // Parent: CBaseTrigger
        // Fields count: 2
        public static class CTriggerBuoyancy {
            public const nint m_BuoyancyHelper = 0x8B8; // CBuoyancyHelper
            public const nint m_flFluidDensity = 0x8D8; // float32
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CFuncWater {
            public const nint m_BuoyancyHelper = 0x710; // CBuoyancyHelper
        }
        // Parent: CSprite
        // Fields count: 0
        public static class CCSSprite {
        }
        // Parent: CBasePlayerController
        // Fields count: 86
        public static class CCSPlayerController {
            public const nint m_pInGameMoneyServices = 0x6C8; // CCSPlayerController_InGameMoneyServices*
            public const nint m_pInventoryServices = 0x6D0; // CCSPlayerController_InventoryServices*
            public const nint m_pActionTrackingServices = 0x6D8; // CCSPlayerController_ActionTrackingServices*
            public const nint m_pDamageServices = 0x6E0; // CCSPlayerController_DamageServices*
            public const nint m_iPing = 0x6E8; // uint32
            public const nint m_bHasCommunicationAbuseMute = 0x6EC; // bool
            public const nint m_szCrosshairCodes = 0x6F0; // CUtlSymbolLarge
            public const nint m_iPendingTeamNum = 0x6F8; // uint8
            public const nint m_flForceTeamTime = 0x6FC; // GameTime_t
            public const nint m_iCompTeammateColor = 0x700; // int32
            public const nint m_bEverPlayedOnTeam = 0x704; // bool
            public const nint m_bAttemptedToGetColor = 0x705; // bool
            public const nint m_iTeammatePreferredColor = 0x708; // int32
            public const nint m_bTeamChanged = 0x70C; // bool
            public const nint m_bInSwitchTeam = 0x70D; // bool
            public const nint m_bHasSeenJoinGame = 0x70E; // bool
            public const nint m_bJustBecameSpectator = 0x70F; // bool
            public const nint m_bSwitchTeamsOnNextRoundReset = 0x710; // bool
            public const nint m_bRemoveAllItemsOnNextRoundReset = 0x711; // bool
            public const nint m_szClan = 0x718; // CUtlSymbolLarge
            public const nint m_szClanName = 0x720; // char[32]
            public const nint m_iCoachingTeam = 0x740; // int32
            public const nint m_nPlayerDominated = 0x748; // uint64
            public const nint m_nPlayerDominatingMe = 0x750; // uint64
            public const nint m_iCompetitiveRanking = 0x758; // int32
            public const nint m_iCompetitiveWins = 0x75C; // int32
            public const nint m_iCompetitiveRankType = 0x760; // int8
            public const nint m_iCompetitiveRankingPredicted_Win = 0x764; // int32
            public const nint m_iCompetitiveRankingPredicted_Loss = 0x768; // int32
            public const nint m_iCompetitiveRankingPredicted_Tie = 0x76C; // int32
            public const nint m_nEndMatchNextMapVote = 0x770; // int32
            public const nint m_unActiveQuestId = 0x774; // uint16
            public const nint m_nQuestProgressReason = 0x778; // QuestProgress::Reason
            public const nint m_unPlayerTvControlFlags = 0x77C; // uint32
            public const nint m_iDraftIndex = 0x7A8; // int32
            public const nint m_msQueuedModeDisconnectionTimestamp = 0x7AC; // uint32
            public const nint m_uiAbandonRecordedReason = 0x7B0; // uint32
            public const nint m_bCannotBeKicked = 0x7B4; // bool
            public const nint m_bEverFullyConnected = 0x7B5; // bool
            public const nint m_bAbandonAllowsSurrender = 0x7B6; // bool
            public const nint m_bAbandonOffersInstantSurrender = 0x7B7; // bool
            public const nint m_bDisconnection1MinWarningPrinted = 0x7B8; // bool
            public const nint m_bScoreReported = 0x7B9; // bool
            public const nint m_nDisconnectionTick = 0x7BC; // int32
            public const nint m_bControllingBot = 0x7C8; // bool
            public const nint m_bHasControlledBotThisRound = 0x7C9; // bool
            public const nint m_bHasBeenControlledByPlayerThisRound = 0x7CA; // bool
            public const nint m_nBotsControlledThisRound = 0x7CC; // int32
            public const nint m_bCanControlObservedBot = 0x7D0; // bool
            public const nint m_hPlayerPawn = 0x7D4; // CHandle<CCSPlayerPawn>
            public const nint m_hObserverPawn = 0x7D8; // CHandle<CCSObserverPawn>
            public const nint m_DesiredObserverMode = 0x7DC; // int32
            public const nint m_hDesiredObserverTarget = 0x7E0; // CEntityHandle
            public const nint m_bPawnIsAlive = 0x7E4; // bool
            public const nint m_iPawnHealth = 0x7E8; // uint32
            public const nint m_iPawnArmor = 0x7EC; // int32
            public const nint m_bPawnHasDefuser = 0x7F0; // bool
            public const nint m_bPawnHasHelmet = 0x7F1; // bool
            public const nint m_nPawnCharacterDefIndex = 0x7F2; // uint16
            public const nint m_iPawnLifetimeStart = 0x7F4; // int32
            public const nint m_iPawnLifetimeEnd = 0x7F8; // int32
            public const nint m_iPawnBotDifficulty = 0x7FC; // int32
            public const nint m_hOriginalControllerOfCurrentPawn = 0x800; // CHandle<CCSPlayerController>
            public const nint m_iScore = 0x804; // int32
            public const nint m_iRoundScore = 0x808; // int32
            public const nint m_iRoundsWon = 0x80C; // int32
            public const nint m_vecKills = 0x810; // CNetworkUtlVectorBase<EKillTypes_t>
            public const nint m_bMvpNoMusic = 0x828; // bool
            public const nint m_eMvpReason = 0x82C; // int32
            public const nint m_iMusicKitID = 0x830; // int32
            public const nint m_iMusicKitMVPs = 0x834; // int32
            public const nint m_iMVPs = 0x838; // int32
            public const nint m_nUpdateCounter = 0x83C; // int32
            public const nint m_flSmoothedPing = 0x840; // float32
            public const nint m_lastHeldVoteTimer = 0xF8E8; // IntervalTimer
            public const nint m_bShowHints = 0xF900; // bool
            public const nint m_iNextTimeCheck = 0xF904; // int32
            public const nint m_bJustDidTeamKill = 0xF908; // bool
            public const nint m_bPunishForTeamKill = 0xF909; // bool
            public const nint m_bGaveTeamDamageWarning = 0xF90A; // bool
            public const nint m_bGaveTeamDamageWarningThisRound = 0xF90B; // bool
            public const nint m_dblLastReceivedPacketPlatFloatTime = 0xF910; // float64
            public const nint m_LastTeamDamageWarningTime = 0xF918; // GameTime_t
            public const nint m_LastTimePlayerWasDisconnectedForPawnsRemove = 0xF91C; // GameTime_t
            public const nint m_nSuspiciousHitCount = 0xF920; // uint32
            public const nint m_nNonSuspiciousHitStreak = 0xF924; // uint32
        }
        // Parent: CBaseTrigger
        // Fields count: 2
        public static class CFootstepControl {
            public const nint m_source = 0x8B8; // CUtlSymbolLarge
            public const nint m_destination = 0x8C0; // CUtlSymbolLarge
        }
        // Parent: CBasePlayerWeaponVData
        // Fields count: 92
        public static class CCSWeaponBaseVData {
            public const nint m_WeaponType = 0x248; // CSWeaponType
            public const nint m_WeaponCategory = 0x24C; // CSWeaponCategory
            public const nint m_szViewModel = 0x250; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szPlayerModel = 0x330; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szWorldDroppedModel = 0x410; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szAimsightLensMaskModel = 0x4F0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szMagazineModel = 0x5D0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeCModel>>
            public const nint m_szHeatEffect = 0x6B0; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szEjectBrassEffect = 0x790; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashParticleAlt = 0x870; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashThirdPersonParticle = 0x950; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szMuzzleFlashThirdPersonParticleAlt = 0xA30; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_szTracerParticle = 0xB10; // CResourceNameTyped<CWeakHandle<InfoForResourceTypeIParticleSystemDefinition>>
            public const nint m_GearSlot = 0xBF0; // gear_slot_t
            public const nint m_GearSlotPosition = 0xBF4; // int32
            public const nint m_DefaultLoadoutSlot = 0xBF8; // loadout_slot_t
            public const nint m_sWrongTeamMsg = 0xC00; // CUtlString
            public const nint m_nPrice = 0xC08; // int32
            public const nint m_nKillAward = 0xC0C; // int32
            public const nint m_nPrimaryReserveAmmoMax = 0xC10; // int32
            public const nint m_nSecondaryReserveAmmoMax = 0xC14; // int32
            public const nint m_bMeleeWeapon = 0xC18; // bool
            public const nint m_bHasBurstMode = 0xC19; // bool
            public const nint m_bIsRevolver = 0xC1A; // bool
            public const nint m_bCannotShootUnderwater = 0xC1B; // bool
            public const nint m_szName = 0xC20; // CGlobalSymbol
            public const nint m_szAnimExtension = 0xC28; // CUtlString
            public const nint m_eSilencerType = 0xC30; // CSWeaponSilencerType
            public const nint m_nCrosshairMinDistance = 0xC34; // int32
            public const nint m_nCrosshairDeltaDistance = 0xC38; // int32
            public const nint m_bIsFullAuto = 0xC3C; // bool
            public const nint m_nNumBullets = 0xC40; // int32
            public const nint m_flCycleTime = 0xC44; // CFiringModeFloat
            public const nint m_flMaxSpeed = 0xC4C; // CFiringModeFloat
            public const nint m_flSpread = 0xC54; // CFiringModeFloat
            public const nint m_flInaccuracyCrouch = 0xC5C; // CFiringModeFloat
            public const nint m_flInaccuracyStand = 0xC64; // CFiringModeFloat
            public const nint m_flInaccuracyJump = 0xC6C; // CFiringModeFloat
            public const nint m_flInaccuracyLand = 0xC74; // CFiringModeFloat
            public const nint m_flInaccuracyLadder = 0xC7C; // CFiringModeFloat
            public const nint m_flInaccuracyFire = 0xC84; // CFiringModeFloat
            public const nint m_flInaccuracyMove = 0xC8C; // CFiringModeFloat
            public const nint m_flRecoilAngle = 0xC94; // CFiringModeFloat
            public const nint m_flRecoilAngleVariance = 0xC9C; // CFiringModeFloat
            public const nint m_flRecoilMagnitude = 0xCA4; // CFiringModeFloat
            public const nint m_flRecoilMagnitudeVariance = 0xCAC; // CFiringModeFloat
            public const nint m_nTracerFrequency = 0xCB4; // CFiringModeInt
            public const nint m_flInaccuracyJumpInitial = 0xCBC; // float32
            public const nint m_flInaccuracyJumpApex = 0xCC0; // float32
            public const nint m_flInaccuracyReload = 0xCC4; // float32
            public const nint m_nRecoilSeed = 0xCC8; // int32
            public const nint m_nSpreadSeed = 0xCCC; // int32
            public const nint m_flTimeToIdleAfterFire = 0xCD0; // float32
            public const nint m_flIdleInterval = 0xCD4; // float32
            public const nint m_flAttackMovespeedFactor = 0xCD8; // float32
            public const nint m_flHeatPerShot = 0xCDC; // float32
            public const nint m_flInaccuracyPitchShift = 0xCE0; // float32
            public const nint m_flInaccuracyAltSoundThreshold = 0xCE4; // float32
            public const nint m_flBotAudibleRange = 0xCE8; // float32
            public const nint m_szUseRadioSubtitle = 0xCF0; // CUtlString
            public const nint m_bUnzoomsAfterShot = 0xCF8; // bool
            public const nint m_bHideViewModelWhenZoomed = 0xCF9; // bool
            public const nint m_nZoomLevels = 0xCFC; // int32
            public const nint m_nZoomFOV1 = 0xD00; // int32
            public const nint m_nZoomFOV2 = 0xD04; // int32
            public const nint m_flZoomTime0 = 0xD08; // float32
            public const nint m_flZoomTime1 = 0xD0C; // float32
            public const nint m_flZoomTime2 = 0xD10; // float32
            public const nint m_flIronSightPullUpSpeed = 0xD14; // float32
            public const nint m_flIronSightPutDownSpeed = 0xD18; // float32
            public const nint m_flIronSightFOV = 0xD1C; // float32
            public const nint m_flIronSightPivotForward = 0xD20; // float32
            public const nint m_flIronSightLooseness = 0xD24; // float32
            public const nint m_angPivotAngle = 0xD28; // QAngle
            public const nint m_vecIronSightEyePos = 0xD34; // 
            public const nint m_nDamage = 0xD40; // int32
            public const nint m_flHeadshotMultiplier = 0xD44; // float32
            public const nint m_flArmorRatio = 0xD48; // float32
            public const nint m_flPenetration = 0xD4C; // float32
            public const nint m_flRange = 0xD50; // float32
            public const nint m_flRangeModifier = 0xD54; // float32
            public const nint m_flFlinchVelocityModifierLarge = 0xD58; // float32
            public const nint m_flFlinchVelocityModifierSmall = 0xD5C; // float32
            public const nint m_flRecoveryTimeCrouch = 0xD60; // float32
            public const nint m_flRecoveryTimeStand = 0xD64; // float32
            public const nint m_flRecoveryTimeCrouchFinal = 0xD68; // float32
            public const nint m_flRecoveryTimeStandFinal = 0xD6C; // float32
            public const nint m_nRecoveryTransitionStartBullet = 0xD70; // int32
            public const nint m_nRecoveryTransitionEndBullet = 0xD74; // int32
            public const nint m_flThrowVelocity = 0xD78; // float32
            public const nint m_vSmokeColor = 0xD7C; // 
            public const nint m_szAnimClass = 0xD88; // CGlobalSymbol
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CTriggerTripWire {
        }
        // Parent: CPointEntity
        // Fields count: 2
        public static class CPointGamestatsCounter {
            public const nint m_strStatisticName = 0x4C0; // CUtlSymbolLarge
            public const nint m_bDisabled = 0x4C8; // bool
        }
        // Parent: CPointEntity
        // Fields count: 1
        public static class CEnvHudHint {
            public const nint m_iszMessage = 0x4C0; // CUtlSymbolLarge
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CBuyZone {
            public const nint m_LegacyTeamNum = 0x8B8; // int32
        }
        // Parent: CBaseModelEntity
        // Fields count: 9
        public static class CFuncConveyor {
            public const nint m_szConveyorModels = 0x710; // CUtlSymbolLarge
            public const nint m_flTransitionDurationSeconds = 0x718; // float32
            public const nint m_angMoveEntitySpace = 0x71C; // QAngle
            public const nint m_vecMoveDirEntitySpace = 0x728; // 
            public const nint m_flTargetSpeed = 0x734; // float32
            public const nint m_nTransitionStartTick = 0x738; // GameTick_t
            public const nint m_nTransitionDurationTicks = 0x73C; // int32
            public const nint m_flTransitionStartSpeed = 0x740; // float32
            public const nint m_hConveyorModels = 0x748; // CNetworkUtlVectorBase<CHandle<CBaseEntity>>
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CTriggerBombReset {
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CTriggerHostageReset {
        }
        // Parent: CServerOnlyModelEntity
        // Fields count: 1
        public static class CCSPlace {
            public const nint m_name = 0x718; // CUtlSymbolLarge
        }
        // Parent: CRulePointEntity
        // Fields count: 4
        public static class CGameMoney {
            public const nint m_OnMoneySpent = 0x720; // CEntityIOOutput
            public const nint m_OnMoneySpentFail = 0x748; // CEntityIOOutput
            public const nint m_nMoney = 0x770; // int32
            public const nint m_strAwardText = 0x778; // CUtlString
        }
        // Parent: CModelPointEntity
        // Fields count: 15
        public static class CPlayerSprayDecal {
            public const nint m_nUniqueID = 0x710; // int32
            public const nint m_unAccountID = 0x714; // uint32
            public const nint m_unTraceID = 0x718; // uint32
            public const nint m_rtGcTime = 0x71C; // uint32
            public const nint m_vecEndPos = 0x720; // 
            public const nint m_vecStart = 0x72C; // 
            public const nint m_vecLeft = 0x738; // 
            public const nint m_vecNormal = 0x744; // 
            public const nint m_nPlayer = 0x750; // int32
            public const nint m_nEntity = 0x754; // int32
            public const nint m_nHitbox = 0x758; // int32
            public const nint m_flCreationTime = 0x75C; // float32
            public const nint m_nTintID = 0x760; // int32
            public const nint m_nVersion = 0x764; // uint8
            public const nint m_ubSignature = 0x765; // uint8[128]
        }
        // Parent: CBaseModelEntity
        // Fields count: 25
        public static class CInferno {
            public const nint m_firePositions = 0x720; // Vector[64]
            public const nint m_fireParentPositions = 0xA20; // Vector[64]
            public const nint m_bFireIsBurning = 0xD20; // bool[64]
            public const nint m_BurnNormal = 0xD60; // Vector[64]
            public const nint m_fireCount = 0x1060; // int32
            public const nint m_nInfernoType = 0x1064; // int32
            public const nint m_nFireEffectTickBegin = 0x1068; // int32
            public const nint m_nFireLifetime = 0x106C; // float32
            public const nint m_bInPostEffectTime = 0x1070; // bool
            public const nint m_nFiresExtinguishCount = 0x1074; // int32
            public const nint m_bWasCreatedInSmoke = 0x1078; // bool
            public const nint m_extent = 0x1280; // Extent
            public const nint m_damageTimer = 0x1298; // CountdownTimer
            public const nint m_damageRampTimer = 0x12B0; // CountdownTimer
            public const nint m_splashVelocity = 0x12C8; // 
            public const nint m_InitialSplashVelocity = 0x12D4; // 
            public const nint m_startPos = 0x12E0; // 
            public const nint m_vecOriginalSpawnLocation = 0x12EC; // 
            public const nint m_activeTimer = 0x12F8; // IntervalTimer
            public const nint m_fireSpawnOffset = 0x1308; // int32
            public const nint m_nMaxFlames = 0x130C; // int32
            public const nint m_nSpreadCount = 0x1310; // int32
            public const nint m_BookkeepingTimer = 0x1318; // CountdownTimer
            public const nint m_NextSpreadTimer = 0x1330; // CountdownTimer
            public const nint m_nSourceItemDefIndex = 0x1348; // uint16
        }
        // Parent: CInferno
        // Fields count: 0
        public static class CFireCrackerBlast {
        }
        // Parent: CBaseModelEntity
        // Fields count: 52
        public static class CBarnLight {
            public const nint m_bEnabled = 0x710; // bool
            public const nint m_nColorMode = 0x714; // int32
            public const nint m_Color = 0x718; // Color
            public const nint m_flColorTemperature = 0x71C; // float32
            public const nint m_flBrightness = 0x720; // float32
            public const nint m_flBrightnessScale = 0x724; // float32
            public const nint m_nDirectLight = 0x728; // int32
            public const nint m_nBakedShadowIndex = 0x72C; // int32
            public const nint m_nLuminaireShape = 0x730; // int32
            public const nint m_flLuminaireSize = 0x734; // float32
            public const nint m_flLuminaireAnisotropy = 0x738; // float32
            public const nint m_LightStyleString = 0x740; // CUtlString
            public const nint m_flLightStyleStartTime = 0x748; // GameTime_t
            public const nint m_QueuedLightStyleStrings = 0x750; // CNetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleEvents = 0x768; // CNetworkUtlVectorBase<CUtlString>
            public const nint m_LightStyleTargets = 0x780; // CNetworkUtlVectorBase<CHandle<CBaseModelEntity>>
            public const nint m_StyleEvent = 0x798; // CEntityIOOutput[4]
            public const nint m_hLightCookie = 0x858; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_flShape = 0x860; // float32
            public const nint m_flSoftX = 0x864; // float32
            public const nint m_flSoftY = 0x868; // float32
            public const nint m_flSkirt = 0x86C; // float32
            public const nint m_flSkirtNear = 0x870; // float32
            public const nint m_vSizeParams = 0x874; // 
            public const nint m_flRange = 0x880; // float32
            public const nint m_vShear = 0x884; // 
            public const nint m_nBakeSpecularToCubemaps = 0x890; // int32
            public const nint m_vBakeSpecularToCubemapsSize = 0x894; // 
            public const nint m_nCastShadows = 0x8A0; // int32
            public const nint m_nShadowMapSize = 0x8A4; // int32
            public const nint m_nShadowPriority = 0x8A8; // int32
            public const nint m_bContactShadow = 0x8AC; // bool
            public const nint m_nBounceLight = 0x8B0; // int32
            public const nint m_flBounceScale = 0x8B4; // float32
            public const nint m_flMinRoughness = 0x8B8; // float32
            public const nint m_vAlternateColor = 0x8BC; // 
            public const nint m_fAlternateColorBrightness = 0x8C8; // float32
            public const nint m_nFog = 0x8CC; // int32
            public const nint m_flFogStrength = 0x8D0; // float32
            public const nint m_nFogShadows = 0x8D4; // int32
            public const nint m_flFogScale = 0x8D8; // float32
            public const nint m_flFadeSizeStart = 0x8DC; // float32
            public const nint m_flFadeSizeEnd = 0x8E0; // float32
            public const nint m_flShadowFadeSizeStart = 0x8E4; // float32
            public const nint m_flShadowFadeSizeEnd = 0x8E8; // float32
            public const nint m_bPrecomputedFieldsValid = 0x8EC; // bool
            public const nint m_vPrecomputedBoundsMins = 0x8F0; // 
            public const nint m_vPrecomputedBoundsMaxs = 0x8FC; // 
            public const nint m_vPrecomputedOBBOrigin = 0x908; // 
            public const nint m_vPrecomputedOBBAngles = 0x914; // QAngle
            public const nint m_vPrecomputedOBBExtent = 0x920; // 
            public const nint m_bPvsModifyEntity = 0x92C; // bool
        }
        // Parent: CBarnLight
        // Fields count: 1
        public static class CRectLight {
            public const nint m_bShowLight = 0x938; // bool
        }
        // Parent: CBarnLight
        // Fields count: 3
        public static class COmniLight {
            public const nint m_flInnerAngle = 0x938; // float32
            public const nint m_flOuterAngle = 0x93C; // float32
            public const nint m_bShowLight = 0x940; // bool
        }
        // Parent: CTeam
        // Fields count: 14
        public static class CCSTeam {
            public const nint m_nLastRecievedShorthandedRoundBonus = 0x578; // int32
            public const nint m_nShorthandedRoundBonusStartRound = 0x57C; // int32
            public const nint m_bSurrendered = 0x580; // bool
            public const nint m_szTeamMatchStat = 0x581; // char[512]
            public const nint m_numMapVictories = 0x784; // int32
            public const nint m_scoreFirstHalf = 0x788; // int32
            public const nint m_scoreSecondHalf = 0x78C; // int32
            public const nint m_scoreOvertime = 0x790; // int32
            public const nint m_szClanTeamname = 0x794; // char[129]
            public const nint m_iClanID = 0x818; // uint32
            public const nint m_szTeamFlagImage = 0x81C; // char[8]
            public const nint m_szTeamLogoImage = 0x824; // char[8]
            public const nint m_flNextResourceTime = 0x82C; // float32
            public const nint m_iLastUpdateSentAt = 0x830; // int32
        }
        // Parent: CPointEntity
        // Fields count: 8
        public static class CMapInfo {
            public const nint m_iBuyingStatus = 0x4C0; // int32
            public const nint m_flBombRadius = 0x4C4; // float32
            public const nint m_iPetPopulation = 0x4C8; // int32
            public const nint m_bUseNormalSpawnsForDM = 0x4CC; // bool
            public const nint m_bDisableAutoGeneratedDMSpawns = 0x4CD; // bool
            public const nint m_flBotMaxVisionDistance = 0x4D0; // float32
            public const nint m_iHostageCount = 0x4D4; // int32
            public const nint m_bFadePlayerVisibilityFarZ = 0x4D8; // bool
        }
        // Parent: CBot
        // Fields count: 140
        public static class CCSBot {
            public const nint m_lastCoopSpawnPoint = 0xF0; // CHandle<SpawnPointCoopEnemy>
            public const nint m_eyePosition = 0x100; // 
            public const nint m_name = 0x10C; // char[64]
            public const nint m_combatRange = 0x14C; // float32
            public const nint m_isRogue = 0x150; // bool
            public const nint m_rogueTimer = 0x158; // CountdownTimer
            public const nint m_diedLastRound = 0x174; // bool
            public const nint m_safeTime = 0x178; // float32
            public const nint m_wasSafe = 0x17C; // bool
            public const nint m_blindFire = 0x184; // bool
            public const nint m_surpriseTimer = 0x188; // CountdownTimer
            public const nint m_bAllowActive = 0x1A0; // bool
            public const nint m_isFollowing = 0x1A1; // bool
            public const nint m_leader = 0x1A4; // CHandle<CCSPlayerPawn>
            public const nint m_followTimestamp = 0x1A8; // float32
            public const nint m_allowAutoFollowTime = 0x1AC; // float32
            public const nint m_hurryTimer = 0x1B0; // CountdownTimer
            public const nint m_alertTimer = 0x1C8; // CountdownTimer
            public const nint m_sneakTimer = 0x1E0; // CountdownTimer
            public const nint m_panicTimer = 0x1F8; // CountdownTimer
            public const nint m_stateTimestamp = 0x4C8; // float32
            public const nint m_isAttacking = 0x4CC; // bool
            public const nint m_isOpeningDoor = 0x4CD; // bool
            public const nint m_taskEntity = 0x4D4; // CHandle<CBaseEntity>
            public const nint m_goalPosition = 0x4E4; // 
            public const nint m_goalEntity = 0x4F0; // CHandle<CBaseEntity>
            public const nint m_avoid = 0x4F4; // CHandle<CBaseEntity>
            public const nint m_avoidTimestamp = 0x4F8; // float32
            public const nint m_isStopping = 0x4FC; // bool
            public const nint m_hasVisitedEnemySpawn = 0x4FD; // bool
            public const nint m_stillTimer = 0x500; // IntervalTimer
            public const nint m_bEyeAnglesUnderPathFinderControl = 0x510; // bool
            public const nint m_pathIndex = 0x6608; // int32
            public const nint m_areaEnteredTimestamp = 0x660C; // GameTime_t
            public const nint m_repathTimer = 0x6610; // CountdownTimer
            public const nint m_avoidFriendTimer = 0x6628; // CountdownTimer
            public const nint m_isFriendInTheWay = 0x6640; // bool
            public const nint m_politeTimer = 0x6648; // CountdownTimer
            public const nint m_isWaitingBehindFriend = 0x6660; // bool
            public const nint m_pathLadderEnd = 0x668C; // float32
            public const nint m_mustRunTimer = 0x66D8; // CountdownTimer
            public const nint m_waitTimer = 0x66F0; // CountdownTimer
            public const nint m_updateTravelDistanceTimer = 0x6708; // CountdownTimer
            public const nint m_playerTravelDistance = 0x6720; // float32[64]
            public const nint m_travelDistancePhase = 0x6820; // uint8
            public const nint m_hostageEscortCount = 0x69B8; // uint8
            public const nint m_hostageEscortCountTimestamp = 0x69BC; // float32
            public const nint m_desiredTeam = 0x69C0; // int32
            public const nint m_hasJoined = 0x69C4; // bool
            public const nint m_isWaitingForHostage = 0x69C5; // bool
            public const nint m_inhibitWaitingForHostageTimer = 0x69C8; // CountdownTimer
            public const nint m_waitForHostageTimer = 0x69E0; // CountdownTimer
            public const nint m_noisePosition = 0x69F8; // 
            public const nint m_noiseTravelDistance = 0x6A04; // float32
            public const nint m_noiseTimestamp = 0x6A08; // float32
            public const nint m_noiseSource = 0x6A10; // CCSPlayerPawn*
            public const nint m_noiseBendTimer = 0x6A28; // CountdownTimer
            public const nint m_bentNoisePosition = 0x6A40; // 
            public const nint m_bendNoisePositionValid = 0x6A4C; // bool
            public const nint m_lookAroundStateTimestamp = 0x6A50; // float32
            public const nint m_lookAheadAngle = 0x6A54; // float32
            public const nint m_forwardAngle = 0x6A58; // float32
            public const nint m_inhibitLookAroundTimestamp = 0x6A5C; // float32
            public const nint m_lookAtSpot = 0x6A64; // 
            public const nint m_lookAtSpotDuration = 0x6A74; // float32
            public const nint m_lookAtSpotTimestamp = 0x6A78; // float32
            public const nint m_lookAtSpotAngleTolerance = 0x6A7C; // float32
            public const nint m_lookAtSpotClearIfClose = 0x6A80; // bool
            public const nint m_lookAtSpotAttack = 0x6A81; // bool
            public const nint m_lookAtDesc = 0x6A88; // char*
            public const nint m_peripheralTimestamp = 0x6A90; // float32
            public const nint m_approachPointCount = 0x6C18; // uint8
            public const nint m_approachPointViewPosition = 0x6C1C; // 
            public const nint m_viewSteadyTimer = 0x6C28; // IntervalTimer
            public const nint m_tossGrenadeTimer = 0x6C40; // CountdownTimer
            public const nint m_isAvoidingGrenade = 0x6C60; // CountdownTimer
            public const nint m_spotCheckTimestamp = 0x6C80; // float32
            public const nint m_checkedHidingSpotCount = 0x7088; // int32
            public const nint m_lookPitch = 0x708C; // float32
            public const nint m_lookPitchVel = 0x7090; // float32
            public const nint m_lookYaw = 0x7094; // float32
            public const nint m_lookYawVel = 0x7098; // float32
            public const nint m_targetSpot = 0x709C; // 
            public const nint m_targetSpotVelocity = 0x70A8; // 
            public const nint m_targetSpotPredicted = 0x70B4; // 
            public const nint m_aimError = 0x70C0; // QAngle
            public const nint m_aimGoal = 0x70CC; // QAngle
            public const nint m_targetSpotTime = 0x70D8; // GameTime_t
            public const nint m_aimFocus = 0x70DC; // float32
            public const nint m_aimFocusInterval = 0x70E0; // float32
            public const nint m_aimFocusNextUpdate = 0x70E4; // GameTime_t
            public const nint m_ignoreEnemiesTimer = 0x70F0; // CountdownTimer
            public const nint m_enemy = 0x7108; // CHandle<CCSPlayerPawn>
            public const nint m_isEnemyVisible = 0x710C; // bool
            public const nint m_visibleEnemyParts = 0x710D; // uint8
            public const nint m_lastEnemyPosition = 0x7110; // 
            public const nint m_lastSawEnemyTimestamp = 0x711C; // float32
            public const nint m_firstSawEnemyTimestamp = 0x7120; // float32
            public const nint m_currentEnemyAcquireTimestamp = 0x7124; // float32
            public const nint m_enemyDeathTimestamp = 0x7128; // float32
            public const nint m_friendDeathTimestamp = 0x712C; // float32
            public const nint m_isLastEnemyDead = 0x7130; // bool
            public const nint m_nearbyEnemyCount = 0x7134; // int32
            public const nint m_bomber = 0x7340; // CHandle<CCSPlayerPawn>
            public const nint m_nearbyFriendCount = 0x7344; // int32
            public const nint m_closestVisibleFriend = 0x7348; // CHandle<CCSPlayerPawn>
            public const nint m_closestVisibleHumanFriend = 0x734C; // CHandle<CCSPlayerPawn>
            public const nint m_attentionInterval = 0x7350; // IntervalTimer
            public const nint m_attacker = 0x7360; // CHandle<CCSPlayerPawn>
            public const nint m_attackedTimestamp = 0x7364; // float32
            public const nint m_burnedByFlamesTimer = 0x7368; // IntervalTimer
            public const nint m_lastVictimID = 0x7378; // int32
            public const nint m_isAimingAtEnemy = 0x737C; // bool
            public const nint m_isRapidFiring = 0x737D; // bool
            public const nint m_equipTimer = 0x7380; // IntervalTimer
            public const nint m_zoomTimer = 0x7390; // CountdownTimer
            public const nint m_fireWeaponTimestamp = 0x73A8; // GameTime_t
            public const nint m_lookForWeaponsOnGroundTimer = 0x73B0; // CountdownTimer
            public const nint m_bIsSleeping = 0x73C8; // bool
            public const nint m_isEnemySniperVisible = 0x73C9; // bool
            public const nint m_sawEnemySniperTimer = 0x73D0; // CountdownTimer
            public const nint m_enemyQueueIndex = 0x7488; // uint8
            public const nint m_enemyQueueCount = 0x7489; // uint8
            public const nint m_enemyQueueAttendIndex = 0x748A; // uint8
            public const nint m_isStuck = 0x748B; // bool
            public const nint m_stuckTimestamp = 0x748C; // GameTime_t
            public const nint m_stuckSpot = 0x7490; // 
            public const nint m_wiggleTimer = 0x74A0; // CountdownTimer
            public const nint m_stuckJumpTimer = 0x74B8; // CountdownTimer
            public const nint m_nextCleanupCheckTimestamp = 0x74D0; // GameTime_t
            public const nint m_avgVel = 0x74D4; // float32[10]
            public const nint m_avgVelIndex = 0x74FC; // int32
            public const nint m_avgVelCount = 0x7500; // int32
            public const nint m_lastOrigin = 0x7504; // 
            public const nint m_lastRadioRecievedTimestamp = 0x7514; // float32
            public const nint m_lastRadioSentTimestamp = 0x7518; // float32
            public const nint m_radioSubject = 0x751C; // CHandle<CCSPlayerPawn>
            public const nint m_radioPosition = 0x7520; // 
            public const nint m_voiceEndTimestamp = 0x752C; // float32
            public const nint m_lastValidReactionQueueFrame = 0x7538; // int32
        }
        // Parent: CServerOnlyModelEntity
        // Fields count: 5
        public static class CFogVolume {
            public const nint m_fogName = 0x710; // CUtlSymbolLarge
            public const nint m_postProcessName = 0x718; // CUtlSymbolLarge
            public const nint m_colorCorrectionName = 0x720; // CUtlSymbolLarge
            public const nint m_bDisabled = 0x730; // bool
            public const nint m_bInFogVolumesList = 0x731; // bool
        }
        // Parent: CPointEntity
        // Fields count: 5
        public static class CInfoDynamicShadowHint {
            public const nint m_bDisabled = 0x4C0; // bool
            public const nint m_flRange = 0x4C4; // float32
            public const nint m_nImportance = 0x4C8; // int32
            public const nint m_nLightChoice = 0x4CC; // int32
            public const nint m_hLight = 0x4D0; // CHandle<CBaseEntity>
        }
        // Parent: CInfoDynamicShadowHint
        // Fields count: 2
        public static class CInfoDynamicShadowHintBox {
            public const nint m_vBoxMins = 0x4D8; // 
            public const nint m_vBoxMaxs = 0x4E4; // 
        }
        // Parent: CBaseModelEntity
        // Fields count: 12
        public static class CEnvSky {
            public const nint m_hSkyMaterial = 0x710; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_hSkyMaterialLightingOnly = 0x718; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_bStartDisabled = 0x720; // bool
            public const nint m_vTintColor = 0x721; // Color
            public const nint m_vTintColorLightingOnly = 0x725; // Color
            public const nint m_flBrightnessScale = 0x72C; // float32
            public const nint m_nFogType = 0x730; // int32
            public const nint m_flFogMinStart = 0x734; // float32
            public const nint m_flFogMinEnd = 0x738; // float32
            public const nint m_flFogMaxStart = 0x73C; // float32
            public const nint m_flFogMaxEnd = 0x740; // float32
            public const nint m_bEnabled = 0x744; // bool
        }
        // Parent: CTonemapController2
        // Fields count: 0
        public static class CTonemapController2Alias_env_tonemap_controller2 {
        }
        // Parent: CBaseTrigger
        // Fields count: 2
        public static class CTonemapTrigger {
            public const nint m_tonemapControllerName = 0x8B8; // CUtlSymbolLarge
            public const nint m_hTonemapController = 0x8C0; // CEntityHandle
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CFogTrigger {
            public const nint m_fog = 0x8B8; // fogparams_t
        }
        // Parent: CBaseModelEntity
        // Fields count: 1
        public static class CLightEntity {
            public const nint m_CLightComponent = 0x710; // CLightComponent*
        }
        // Parent: CLightEntity
        // Fields count: 0
        public static class CLightSpotEntity {
        }
        // Parent: CLightEntity
        // Fields count: 0
        public static class CLightOrthoEntity {
        }
        // Parent: CLightEntity
        // Fields count: 0
        public static class CLightDirectionalEntity {
        }
        // Parent: CLightDirectionalEntity
        // Fields count: 0
        public static class CLightEnvironmentEntity {
        }
        // Parent: CBaseTrigger
        // Fields count: 16
        public static class CPostProcessingVolume {
            public const nint m_hPostSettings = 0x8C8; // CStrongHandle<InfoForResourceTypeCPostProcessingResource>
            public const nint m_flFadeDuration = 0x8D0; // float32
            public const nint m_flMinLogExposure = 0x8D4; // float32
            public const nint m_flMaxLogExposure = 0x8D8; // float32
            public const nint m_flMinExposure = 0x8DC; // float32
            public const nint m_flMaxExposure = 0x8E0; // float32
            public const nint m_flExposureCompensation = 0x8E4; // float32
            public const nint m_flExposureFadeSpeedUp = 0x8E8; // float32
            public const nint m_flExposureFadeSpeedDown = 0x8EC; // float32
            public const nint m_flTonemapEVSmoothingRange = 0x8F0; // float32
            public const nint m_bMaster = 0x8F4; // bool
            public const nint m_bExposureControl = 0x8F5; // bool
            public const nint m_flRate = 0x8F8; // float32
            public const nint m_flTonemapPercentTarget = 0x8FC; // float32
            public const nint m_flTonemapPercentBrightPixels = 0x900; // float32
            public const nint m_flTonemapMinAvgLum = 0x904; // float32
        }
        // Parent: CParticleSystem
        // Fields count: 5
        public static class CEnvParticleGlow {
            public const nint m_flAlphaScale = 0xC88; // float32
            public const nint m_flRadiusScale = 0xC8C; // float32
            public const nint m_flSelfIllumScale = 0xC90; // float32
            public const nint m_ColorTint = 0xC94; // Color
            public const nint m_hTextureOverride = 0xC98; // CStrongHandle<InfoForResourceTypeCTextureBase>
        }
        // Parent: CBaseModelEntity
        // Fields count: 8
        public static class CTextureBasedAnimatable {
            public const nint m_bLoop = 0x710; // bool
            public const nint m_flFPS = 0x714; // float32
            public const nint m_hPositionKeys = 0x718; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_hRotationKeys = 0x720; // CStrongHandle<InfoForResourceTypeCTextureBase>
            public const nint m_vAnimationBoundsMin = 0x728; // 
            public const nint m_vAnimationBoundsMax = 0x734; // 
            public const nint m_flStartTime = 0x740; // float32
            public const nint m_flStartFrame = 0x744; // float32
        }
        // Parent: CBaseModelEntity
        // Fields count: 0
        public static class CWorld {
        }
        // Parent: CBaseModelEntity
        // Fields count: 10
        public static class CBaseAnimGraph {
            public const nint m_bInitiallyPopulateInterpHistory = 0x788; // bool
            public const nint m_pChoreoServices = 0x790; // IChoreoServices*
            public const nint m_bAnimGraphUpdateEnabled = 0x798; // bool
            public const nint m_flMaxSlopeDistance = 0x79C; // float32
            public const nint m_vLastSlopeCheckPos = 0x7A0; // 
            public const nint m_bAnimationUpdateScheduled = 0x7AC; // bool
            public const nint m_vecForce = 0x7B0; // 
            public const nint m_nForceBone = 0x7BC; // int32
            public const nint m_pRagdollPose = 0x7D0; // PhysicsRagdollPose_t*
            public const nint m_bClientRagdoll = 0x7D8; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 4
        public static class CBaseProp {
            public const nint m_bModelOverrodeBlockLOS = 0x8E8; // bool
            public const nint m_iShapeType = 0x8EC; // int32
            public const nint m_bConformToCollisionBounds = 0x8F0; // bool
            public const nint m_mPreferredCatchTransform = 0x8F4; // matrix3x4_t
        }
        // Parent: CBaseProp
        // Fields count: 34
        public static class CBreakableProp {
            public const nint m_OnBreak = 0x938; // CEntityIOOutput
            public const nint m_OnHealthChanged = 0x960; // CEntityOutputTemplate<float32>
            public const nint m_OnTakeDamage = 0x988; // CEntityIOOutput
            public const nint m_impactEnergyScale = 0x9B0; // float32
            public const nint m_iMinHealthDmg = 0x9B4; // int32
            public const nint m_preferredCarryAngles = 0x9B8; // QAngle
            public const nint m_flPressureDelay = 0x9C4; // float32
            public const nint m_hBreaker = 0x9C8; // CHandle<CBaseEntity>
            public const nint m_PerformanceMode = 0x9CC; // PerformanceMode_t
            public const nint m_flDmgModBullet = 0x9D0; // float32
            public const nint m_flDmgModClub = 0x9D4; // float32
            public const nint m_flDmgModExplosive = 0x9D8; // float32
            public const nint m_flDmgModFire = 0x9DC; // float32
            public const nint m_iszPhysicsDamageTableName = 0x9E0; // CUtlSymbolLarge
            public const nint m_iszBasePropData = 0x9E8; // CUtlSymbolLarge
            public const nint m_iInteractions = 0x9F0; // int32
            public const nint m_flPreventDamageBeforeTime = 0x9F4; // GameTime_t
            public const nint m_bHasBreakPiecesOrCommands = 0x9F8; // bool
            public const nint m_explodeDamage = 0x9FC; // float32
            public const nint m_explodeRadius = 0xA00; // float32
            public const nint m_explosionDelay = 0xA08; // float32
            public const nint m_explosionBuildupSound = 0xA10; // CUtlSymbolLarge
            public const nint m_explosionCustomEffect = 0xA18; // CUtlSymbolLarge
            public const nint m_explosionCustomSound = 0xA20; // CUtlSymbolLarge
            public const nint m_explosionModifier = 0xA28; // CUtlSymbolLarge
            public const nint m_hPhysicsAttacker = 0xA30; // CHandle<CBasePlayerPawn>
            public const nint m_flLastPhysicsInfluenceTime = 0xA34; // GameTime_t
            public const nint m_bOriginalBlockLOS = 0xA38; // bool
            public const nint m_flDefaultFadeScale = 0xA3C; // float32
            public const nint m_hLastAttacker = 0xA40; // CHandle<CBaseEntity>
            public const nint m_hFlareEnt = 0xA44; // CHandle<CBaseEntity>
            public const nint m_bUsePuntSound = 0xA48; // bool
            public const nint m_iszPuntSound = 0xA50; // CUtlSymbolLarge
            public const nint m_noGhostCollision = 0xA58; // bool
        }
        // Parent: CBreakableProp
        // Fields count: 21
        public static class CDynamicProp {
            public const nint m_bCreateNavObstacle = 0xA68; // bool
            public const nint m_bUseHitboxesForRenderBox = 0xA69; // bool
            public const nint m_bUseAnimGraph = 0xA6A; // bool
            public const nint m_pOutputAnimBegun = 0xA70; // CEntityIOOutput
            public const nint m_pOutputAnimOver = 0xA98; // CEntityIOOutput
            public const nint m_pOutputAnimLoopCycleOver = 0xAC0; // CEntityIOOutput
            public const nint m_OnAnimReachedStart = 0xAE8; // CEntityIOOutput
            public const nint m_OnAnimReachedEnd = 0xB10; // CEntityIOOutput
            public const nint m_iszIdleAnim = 0xB38; // CUtlSymbolLarge
            public const nint m_nIdleAnimLoopMode = 0xB40; // AnimLoopMode_t
            public const nint m_bRandomizeCycle = 0xB44; // bool
            public const nint m_bStartDisabled = 0xB45; // bool
            public const nint m_bFiredStartEndOutput = 0xB46; // bool
            public const nint m_bForceNpcExclude = 0xB47; // bool
            public const nint m_bCreateNonSolid = 0xB48; // bool
            public const nint m_bIsOverrideProp = 0xB49; // bool
            public const nint m_iInitialGlowState = 0xB4C; // int32
            public const nint m_nGlowRange = 0xB50; // int32
            public const nint m_nGlowRangeMin = 0xB54; // int32
            public const nint m_glowColor = 0xB58; // Color
            public const nint m_nGlowTeam = 0xB5C; // int32
        }
        // Parent: CDynamicProp
        // Fields count: 0
        public static class CDynamicPropAlias_dynamic_prop {
        }
        // Parent: CDynamicProp
        // Fields count: 0
        public static class CDynamicPropAlias_prop_dynamic_override {
        }
        // Parent: CDynamicProp
        // Fields count: 0
        public static class CDynamicPropAlias_cable_dynamic {
        }
        // Parent: CBaseTrigger
        // Fields count: 10
        public static class CColorCorrectionVolume {
            public const nint m_bEnabled = 0x8B8; // bool
            public const nint m_MaxWeight = 0x8BC; // float32
            public const nint m_FadeDuration = 0x8C0; // float32
            public const nint m_bStartDisabled = 0x8C4; // bool
            public const nint m_Weight = 0x8C8; // float32
            public const nint m_lookupFilename = 0x8CC; // char[512]
            public const nint m_LastEnterWeight = 0xACC; // float32
            public const nint m_LastEnterTime = 0xAD0; // GameTime_t
            public const nint m_LastExitWeight = 0xAD4; // float32
            public const nint m_LastExitTime = 0xAD8; // GameTime_t
        }
        // Parent: CBaseAnimGraph
        // Fields count: 30
        public static class CPointCommentaryNode {
            public const nint m_iszPreCommands = 0x8E8; // CUtlSymbolLarge
            public const nint m_iszPostCommands = 0x8F0; // CUtlSymbolLarge
            public const nint m_iszCommentaryFile = 0x8F8; // CUtlSymbolLarge
            public const nint m_iszViewTarget = 0x900; // CUtlSymbolLarge
            public const nint m_hViewTarget = 0x908; // CHandle<CBaseEntity>
            public const nint m_hViewTargetAngles = 0x90C; // CHandle<CBaseEntity>
            public const nint m_iszViewPosition = 0x910; // CUtlSymbolLarge
            public const nint m_hViewPosition = 0x918; // CHandle<CBaseEntity>
            public const nint m_hViewPositionMover = 0x91C; // CHandle<CBaseEntity>
            public const nint m_bPreventMovement = 0x920; // bool
            public const nint m_bUnderCrosshair = 0x921; // bool
            public const nint m_bUnstoppable = 0x922; // bool
            public const nint m_flFinishedTime = 0x924; // GameTime_t
            public const nint m_vecFinishOrigin = 0x928; // 
            public const nint m_vecOriginalAngles = 0x934; // QAngle
            public const nint m_vecFinishAngles = 0x940; // QAngle
            public const nint m_bPreventChangesWhileMoving = 0x94C; // bool
            public const nint m_bDisabled = 0x94D; // bool
            public const nint m_vecTeleportOrigin = 0x950; // 
            public const nint m_flAbortedPlaybackAt = 0x95C; // GameTime_t
            public const nint m_pOnCommentaryStarted = 0x960; // CEntityIOOutput
            public const nint m_pOnCommentaryStopped = 0x988; // CEntityIOOutput
            public const nint m_bActive = 0x9B0; // bool
            public const nint m_flStartTime = 0x9B4; // GameTime_t
            public const nint m_flStartTimeInCommentary = 0x9B8; // float32
            public const nint m_iszTitle = 0x9C0; // CUtlSymbolLarge
            public const nint m_iszSpeakers = 0x9C8; // CUtlSymbolLarge
            public const nint m_iNodeNumber = 0x9D0; // int32
            public const nint m_iNodeNumberMax = 0x9D4; // int32
            public const nint m_bListenedTo = 0x9D8; // bool
        }
        // Parent: CSprite
        // Fields count: 0
        public static class CCommentaryViewPosition {
        }
        // Parent: CBaseDoor
        // Fields count: 1
        public static class CRotDoor {
            public const nint m_bSolidBsp = 0x998; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class CItemSoda {
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CPrecipitation {
        }
        // Parent: CBeam
        // Fields count: 19
        public static class CEnvBeam {
            public const nint m_active = 0x7B0; // int32
            public const nint m_spriteTexture = 0x7B8; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_iszStartEntity = 0x7C0; // CUtlSymbolLarge
            public const nint m_iszEndEntity = 0x7C8; // CUtlSymbolLarge
            public const nint m_life = 0x7D0; // float32
            public const nint m_boltWidth = 0x7D4; // float32
            public const nint m_noiseAmplitude = 0x7D8; // float32
            public const nint m_speed = 0x7DC; // int32
            public const nint m_restrike = 0x7E0; // float32
            public const nint m_iszSpriteName = 0x7E8; // CUtlSymbolLarge
            public const nint m_frameStart = 0x7F0; // int32
            public const nint m_vEndPointWorld = 0x7F4; // 
            public const nint m_vEndPointRelative = 0x800; // 
            public const nint m_radius = 0x80C; // float32
            public const nint m_TouchType = 0x810; // Touch_t
            public const nint m_iFilterName = 0x818; // CUtlSymbolLarge
            public const nint m_hFilter = 0x820; // CHandle<CBaseEntity>
            public const nint m_iszDecal = 0x828; // CUtlSymbolLarge
            public const nint m_OnTouchedByEntity = 0x830; // CEntityIOOutput
        }
        // Parent: CBreakable
        // Fields count: 0
        public static class CPushable {
        }
        // Parent: CFuncLadder
        // Fields count: 0
        public static class CFuncLadderAlias_func_useableladder {
        }
        // Parent: CFuncBrush
        // Fields count: 9
        public static class CFuncMonitor {
            public const nint m_targetCamera = 0x730; // CUtlString
            public const nint m_nResolutionEnum = 0x738; // int32
            public const nint m_bRenderShadows = 0x73C; // bool
            public const nint m_bUseUniqueColorTarget = 0x73D; // bool
            public const nint m_brushModelName = 0x740; // CUtlString
            public const nint m_hTargetCamera = 0x748; // CHandle<CBaseEntity>
            public const nint m_bEnabled = 0x74C; // bool
            public const nint m_bDraw3DSkybox = 0x74D; // bool
            public const nint m_bStartEnabled = 0x74E; // bool
        }
        // Parent: CFuncMoveLinear
        // Fields count: 0
        public static class CFuncMoveLinearAlias_momentary_door {
        }
        // Parent: CBaseToggle
        // Fields count: 3
        public static class CGunTarget {
            public const nint m_on = 0x790; // bool
            public const nint m_hTargetEnt = 0x794; // CHandle<CBaseEntity>
            public const nint m_OnDeath = 0x798; // CEntityIOOutput
        }
        // Parent: CBaseTrigger
        // Fields count: 3
        public static class CTriggerGameEvent {
            public const nint m_strStartTouchEventName = 0x8B8; // CUtlString
            public const nint m_strEndTouchEventName = 0x8C0; // CUtlString
            public const nint m_strTriggerID = 0x8C8; // CUtlString
        }
        // Parent: CRuleEntity
        // Fields count: 0
        public static class CRuleBrushEntity {
        }
        // Parent: CRulePointEntity
        // Fields count: 0
        public static class CGameEnd {
        }
        // Parent: CRulePointEntity
        // Fields count: 2
        public static class CGameText {
            public const nint m_iszMessage = 0x720; // CUtlSymbolLarge
            public const nint m_textParms = 0x728; // hudtextparms_t
        }
        // Parent: CRuleBrushEntity
        // Fields count: 4
        public static class CGamePlayerZone {
            public const nint m_OnPlayerInZone = 0x718; // CEntityIOOutput
            public const nint m_OnPlayerOutZone = 0x740; // CEntityIOOutput
            public const nint m_PlayersInCount = 0x768; // CEntityOutputTemplate<int32>
            public const nint m_PlayersOutCount = 0x790; // CEntityOutputTemplate<int32>
        }
        // Parent: CMarkupVolumeTagged
        // Fields count: 0
        public static class CSimpleMarkupVolumeTagged {
        }
        // Parent: CMarkupVolumeTagged
        // Fields count: 0
        public static class CMarkupVolumeTagged_Nav {
        }
        // Parent: CMarkupVolumeWithRef
        // Fields count: 1
        public static class CMarkupVolumeTagged_NavGame {
            public const nint m_bFloodFillAttribute = 0x768; // bool
        }
        // Parent: CFuncBrush
        // Fields count: 4
        public static class CFuncElectrifiedVolume {
            public const nint m_EffectName = 0x730; // CUtlSymbolLarge
            public const nint m_EffectInterpenetrateName = 0x738; // CUtlSymbolLarge
            public const nint m_EffectZapName = 0x740; // CUtlSymbolLarge
            public const nint m_iszEffectSource = 0x748; // CUtlSymbolLarge
        }
        // Parent: CPathCorner
        // Fields count: 0
        public static class CPathCornerCrash {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 1
        public static class CConstraintAnchor {
            public const nint m_massScale = 0x8E8; // float32
        }
        // Parent: CDynamicProp
        // Fields count: 1
        public static class COrnamentProp {
            public const nint m_initialOwner = 0xB60; // CUtlSymbolLarge
        }
        // Parent: CRopeKeyframe
        // Fields count: 0
        public static class CRopeKeyframeAlias_move_rope {
        }
        // Parent: CSceneEntity
        // Fields count: 0
        public static class CSceneEntityAlias_logic_choreographed_scene {
        }
        // Parent: CSceneEntity
        // Fields count: 7
        public static class CInstancedSceneEntity {
            public const nint m_hOwner = 0xA18; // CHandle<CBaseEntity>
            public const nint m_bHadOwner = 0xA1C; // bool
            public const nint m_flPostSpeakDelay = 0xA20; // float32
            public const nint m_flPreDelay = 0xA24; // float32
            public const nint m_bIsBackground = 0xA28; // bool
            public const nint m_bRemoveOnCompletion = 0xA29; // bool
            public const nint m_hTarget = 0xA2C; // CHandle<CBaseEntity>
        }
        // Parent: CBaseTrigger
        // Fields count: 3
        public static class CTriggerSoundscape {
            public const nint m_hSoundscape = 0x8B8; // CHandle<CEnvSoundscapeTriggerable>
            public const nint m_SoundscapeName = 0x8C0; // CUtlSymbolLarge
            public const nint m_spectators = 0x8C8; // CUtlVector<CHandle<CBasePlayerPawn>>
        }
        // Parent: CSprite
        // Fields count: 0
        public static class CSpriteAlias_env_glow {
        }
        // Parent: CFuncTrackTrain
        // Fields count: 1
        public static class CFuncTankTrain {
            public const nint m_OnDeath = 0x860; // CEntityIOOutput
        }
        // Parent: CBaseToggle
        // Fields count: 5
        public static class CBasePlatTrain {
            public const nint m_NoiseMoving = 0x790; // CUtlSymbolLarge
            public const nint m_NoiseArrived = 0x798; // CUtlSymbolLarge
            public const nint m_volume = 0x7A8; // float32
            public const nint m_flTWidth = 0x7AC; // float32
            public const nint m_flTLength = 0x7B0; // float32
        }
        // Parent: CBasePlatTrain
        // Fields count: 1
        public static class CFuncPlat {
            public const nint m_sNoise = 0x7B8; // CUtlSymbolLarge
        }
        // Parent: CFuncPlat
        // Fields count: 2
        public static class CFuncPlatRot {
            public const nint m_end = 0x7C0; // QAngle
            public const nint m_start = 0x7CC; // QAngle
        }
        // Parent: CBasePlatTrain
        // Fields count: 6
        public static class CFuncTrain {
            public const nint m_hCurrentTarget = 0x7B8; // CHandle<CBaseEntity>
            public const nint m_activated = 0x7BC; // bool
            public const nint m_hEnemy = 0x7C0; // CHandle<CBaseEntity>
            public const nint m_flBlockDamage = 0x7C4; // float32
            public const nint m_flNextBlockTime = 0x7C8; // GameTime_t
            public const nint m_iszLastTarget = 0x7D0; // CUtlSymbolLarge
        }
        // Parent: CFuncPlatRot
        // Fields count: 9
        public static class CFuncTrackChange {
            public const nint m_trackTop = 0x7D8; // CPathTrack*
            public const nint m_trackBottom = 0x7E0; // CPathTrack*
            public const nint m_train = 0x7E8; // CFuncTrackTrain*
            public const nint m_trackTopName = 0x7F0; // CUtlSymbolLarge
            public const nint m_trackBottomName = 0x7F8; // CUtlSymbolLarge
            public const nint m_trainName = 0x800; // CUtlSymbolLarge
            public const nint m_code = 0x808; // TRAIN_CODE
            public const nint m_targetState = 0x80C; // int32
            public const nint m_use = 0x810; // int32
        }
        // Parent: CFuncTrackChange
        // Fields count: 0
        public static class CFuncTrackAuto {
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CTriggerRemove {
            public const nint m_OnRemove = 0x8B8; // CEntityIOOutput
        }
        // Parent: CTriggerHurt
        // Fields count: 1
        public static class CScriptTriggerHurt {
            public const nint m_vExtent = 0x958; // 
        }
        // Parent: CTriggerMultiple
        // Fields count: 1
        public static class CScriptTriggerMultiple {
            public const nint m_vExtent = 0x8E0; // 
        }
        // Parent: CTriggerMultiple
        // Fields count: 0
        public static class CTriggerOnce {
        }
        // Parent: CTriggerOnce
        // Fields count: 1
        public static class CScriptTriggerOnce {
            public const nint m_vExtent = 0x8E0; // 
        }
        // Parent: CTriggerOnce
        // Fields count: 15
        public static class CTriggerLook {
            public const nint m_hLookTarget = 0x8E0; // CHandle<CBaseEntity>
            public const nint m_flFieldOfView = 0x8E4; // float32
            public const nint m_flLookTime = 0x8E8; // float32
            public const nint m_flLookTimeTotal = 0x8EC; // float32
            public const nint m_flLookTimeLast = 0x8F0; // GameTime_t
            public const nint m_flTimeoutDuration = 0x8F4; // float32
            public const nint m_bTimeoutFired = 0x8F8; // bool
            public const nint m_bIsLooking = 0x8F9; // bool
            public const nint m_b2DFOV = 0x8FA; // bool
            public const nint m_bUseVelocity = 0x8FB; // bool
            public const nint m_hActivator = 0x8FC; // CHandle<CBaseEntity>
            public const nint m_bTestOcclusion = 0x900; // bool
            public const nint m_OnTimeout = 0x908; // CEntityIOOutput
            public const nint m_OnStartLook = 0x930; // CEntityIOOutput
            public const nint m_OnEndLook = 0x958; // CEntityIOOutput
        }
        // Parent: CBaseTrigger
        // Fields count: 3
        public static class CTriggerPush {
            public const nint m_angPushEntitySpace = 0x8B8; // QAngle
            public const nint m_vecPushDirEntitySpace = 0x8C4; // 
            public const nint m_bTriggerOnStartTouch = 0x8D0; // bool
        }
        // Parent: CTriggerPush
        // Fields count: 1
        public static class CScriptTriggerPush {
            public const nint m_vExtent = 0x8D8; // 
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CTriggerToggleSave {
            public const nint m_bDisabled = 0x8B8; // bool
        }
        // Parent: CBaseTrigger
        // Fields count: 3
        public static class CTriggerSave {
            public const nint m_bForceNewLevelUnit = 0x8B8; // bool
            public const nint m_fDangerousTimer = 0x8BC; // float32
            public const nint m_minHitPoints = 0x8C0; // int32
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CTriggerGravity {
        }
        // Parent: CBaseTrigger
        // Fields count: 5
        public static class CTriggerProximity {
            public const nint m_hMeasureTarget = 0x8B8; // CHandle<CBaseEntity>
            public const nint m_iszMeasureTarget = 0x8C0; // CUtlSymbolLarge
            public const nint m_fRadius = 0x8C8; // float32
            public const nint m_nTouchers = 0x8CC; // int32
            public const nint m_NearestEntityDistance = 0x8D0; // CEntityOutputTemplate<float32>
        }
        // Parent: CTriggerMultiple
        // Fields count: 4
        public static class CTriggerImpact {
            public const nint m_flMagnitude = 0x8E0; // float32
            public const nint m_flNoise = 0x8E4; // float32
            public const nint m_flViewkick = 0x8E8; // float32
            public const nint m_pOutputForce = 0x8F0; // CEntityOutputTemplate<Vector>
        }
        // Parent: CBaseTrigger
        // Fields count: 0
        public static class CServerRagdollTrigger {
        }
        // Parent: CBaseTrigger
        // Fields count: 2
        public static class CTriggerActiveWeaponDetect {
            public const nint m_OnTouchedActiveWeapon = 0x8B8; // CEntityIOOutput
            public const nint m_iszWeaponClassName = 0x8E0; // CUtlSymbolLarge
        }
        // Parent: CBaseTrigger
        // Fields count: 13
        public static class CTriggerPhysics {
            public const nint m_gravityScale = 0x8C8; // float32
            public const nint m_linearLimit = 0x8CC; // float32
            public const nint m_linearDamping = 0x8D0; // float32
            public const nint m_angularLimit = 0x8D4; // float32
            public const nint m_angularDamping = 0x8D8; // float32
            public const nint m_linearForce = 0x8DC; // float32
            public const nint m_flFrequency = 0x8E0; // float32
            public const nint m_flDampingRatio = 0x8E4; // float32
            public const nint m_vecLinearForcePointAt = 0x8E8; // 
            public const nint m_bCollapseToForcePoint = 0x8F4; // bool
            public const nint m_vecLinearForcePointAtWorld = 0x8F8; // 
            public const nint m_vecLinearForceDirection = 0x904; // 
            public const nint m_bConvertToDebrisWhenPossible = 0x910; // bool
        }
        // Parent: CBaseTrigger
        // Fields count: 2
        public static class CTriggerDetectBulletFire {
            public const nint m_bPlayerFireOnly = 0x8B8; // bool
            public const nint m_OnDetectedBulletFire = 0x8C0; // CEntityIOOutput
        }
        // Parent: CBaseTrigger
        // Fields count: 1
        public static class CTriggerDetectExplosion {
            public const nint m_OnDetectedExplosion = 0x8F0; // CEntityIOOutput
        }
        // Parent: CFuncNavBlocker
        // Fields count: 1
        public static class CScriptNavBlocker {
            public const nint m_vExtent = 0x720; // 
        }
        // Parent: CBaseAnimGraph
        // Fields count: 7
        public static class CBaseFlex {
            public const nint m_flexWeight = 0x8E8; // CNetworkUtlVectorBase<float32>
            public const nint m_vLookTargetPosition = 0x900; // 
            public const nint m_blinktoggle = 0x90C; // bool
            public const nint m_flAllowResponsesEndTime = 0x960; // GameTime_t
            public const nint m_flLastFlexAnimationTime = 0x964; // GameTime_t
            public const nint m_nNextSceneEventId = 0x968; // uint32
            public const nint m_bUpdateLayerPriorities = 0x96C; // bool
        }
        // Parent: CDynamicProp
        // Fields count: 37
        public static class CBasePropDoor {
            public const nint m_flAutoReturnDelay = 0xB70; // float32
            public const nint m_hDoorList = 0xB78; // CUtlVector<CHandle<CBasePropDoor>>
            public const nint m_nHardwareType = 0xB90; // int32
            public const nint m_bNeedsHardware = 0xB94; // bool
            public const nint m_eDoorState = 0xB98; // DoorState_t
            public const nint m_bLocked = 0xB9C; // bool
            public const nint m_closedPosition = 0xBA0; // 
            public const nint m_closedAngles = 0xBAC; // QAngle
            public const nint m_hBlocker = 0xBB8; // CHandle<CBaseEntity>
            public const nint m_bFirstBlocked = 0xBBC; // bool
            public const nint m_ls = 0xBC0; // locksound_t
            public const nint m_bForceClosed = 0xBE0; // bool
            public const nint m_vecLatchWorldPosition = 0xBE4; // 
            public const nint m_hActivator = 0xBF0; // CHandle<CBaseEntity>
            public const nint m_SoundMoving = 0xC00; // CUtlSymbolLarge
            public const nint m_SoundOpen = 0xC08; // CUtlSymbolLarge
            public const nint m_SoundClose = 0xC10; // CUtlSymbolLarge
            public const nint m_SoundLock = 0xC18; // CUtlSymbolLarge
            public const nint m_SoundUnlock = 0xC20; // CUtlSymbolLarge
            public const nint m_SoundLatch = 0xC28; // CUtlSymbolLarge
            public const nint m_SoundPound = 0xC30; // CUtlSymbolLarge
            public const nint m_SoundJiggle = 0xC38; // CUtlSymbolLarge
            public const nint m_SoundLockedAnim = 0xC40; // CUtlSymbolLarge
            public const nint m_numCloseAttempts = 0xC48; // int32
            public const nint m_nPhysicsMaterial = 0xC4C; // CUtlStringToken
            public const nint m_SlaveName = 0xC50; // CUtlSymbolLarge
            public const nint m_hMaster = 0xC58; // CHandle<CBasePropDoor>
            public const nint m_OnBlockedClosing = 0xC60; // CEntityIOOutput
            public const nint m_OnBlockedOpening = 0xC88; // CEntityIOOutput
            public const nint m_OnUnblockedClosing = 0xCB0; // CEntityIOOutput
            public const nint m_OnUnblockedOpening = 0xCD8; // CEntityIOOutput
            public const nint m_OnFullyClosed = 0xD00; // CEntityIOOutput
            public const nint m_OnFullyOpen = 0xD28; // CEntityIOOutput
            public const nint m_OnClose = 0xD50; // CEntityIOOutput
            public const nint m_OnOpen = 0xD78; // CEntityIOOutput
            public const nint m_OnLockedUse = 0xDA0; // CEntityIOOutput
            public const nint m_OnAjarOpen = 0xDC8; // CEntityIOOutput
        }
        // Parent: CBeam
        // Fields count: 5
        public static class CEnvLaser {
            public const nint m_iszLaserTarget = 0x7B0; // CUtlSymbolLarge
            public const nint m_pSprite = 0x7B8; // CSprite*
            public const nint m_iszSpriteName = 0x7C0; // CUtlSymbolLarge
            public const nint m_firePosition = 0x7C8; // 
            public const nint m_flStartFrame = 0x7D4; // float32
        }
        // Parent: CBaseAnimGraph
        // Fields count: 24
        public static class CFish {
            public const nint m_pool = 0x8E8; // CHandle<CFishPool>
            public const nint m_id = 0x8EC; // uint32
            public const nint m_x = 0x8F0; // float32
            public const nint m_y = 0x8F4; // float32
            public const nint m_z = 0x8F8; // float32
            public const nint m_angle = 0x8FC; // float32
            public const nint m_angleChange = 0x900; // float32
            public const nint m_forward = 0x904; // 
            public const nint m_perp = 0x910; // 
            public const nint m_poolOrigin = 0x91C; // 
            public const nint m_waterLevel = 0x928; // float32
            public const nint m_speed = 0x92C; // float32
            public const nint m_desiredSpeed = 0x930; // float32
            public const nint m_calmSpeed = 0x934; // float32
            public const nint m_panicSpeed = 0x938; // float32
            public const nint m_avoidRange = 0x93C; // float32
            public const nint m_turnTimer = 0x940; // CountdownTimer
            public const nint m_turnClockwise = 0x958; // bool
            public const nint m_goTimer = 0x960; // CountdownTimer
            public const nint m_moveTimer = 0x978; // CountdownTimer
            public const nint m_panicTimer = 0x990; // CountdownTimer
            public const nint m_disperseTimer = 0x9A8; // CountdownTimer
            public const nint m_proximityTimer = 0x9C0; // CountdownTimer
            public const nint m_visible = 0x9D8; // CUtlVector<CFish*>
        }
        // Parent: CBaseAnimGraph
        // Fields count: 8
        public static class CItem {
            public const nint m_OnPlayerTouch = 0x8F0; // CEntityIOOutput
            public const nint m_bActivateWhenAtRest = 0x918; // bool
            public const nint m_OnCacheInteraction = 0x920; // CEntityIOOutput
            public const nint m_OnPlayerPickup = 0x948; // CEntityIOOutput
            public const nint m_OnGlovePulled = 0x970; // CEntityIOOutput
            public const nint m_vOriginalSpawnOrigin = 0x998; // 
            public const nint m_vOriginalSpawnAngles = 0x9A4; // QAngle
            public const nint m_bPhysStartAsleep = 0x9B0; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 28
        public static class CRagdollProp {
            public const nint m_ragdoll = 0x8F0; // ragdoll_t
            public const nint m_bStartDisabled = 0x928; // bool
            public const nint m_ragPos = 0x930; // CNetworkUtlVectorBase<Vector>
            public const nint m_ragAngles = 0x948; // CNetworkUtlVectorBase<QAngle>
            public const nint m_hRagdollSource = 0x960; // CHandle<CBaseEntity>
            public const nint m_lastUpdateTickCount = 0x964; // uint32
            public const nint m_allAsleep = 0x968; // bool
            public const nint m_bFirstCollisionAfterLaunch = 0x969; // bool
            public const nint m_hDamageEntity = 0x96C; // CHandle<CBaseEntity>
            public const nint m_hKiller = 0x970; // CHandle<CBaseEntity>
            public const nint m_hPhysicsAttacker = 0x974; // CHandle<CBasePlayerPawn>
            public const nint m_flLastPhysicsInfluenceTime = 0x978; // GameTime_t
            public const nint m_flFadeOutStartTime = 0x97C; // GameTime_t
            public const nint m_flFadeTime = 0x980; // float32
            public const nint m_vecLastOrigin = 0x984; // 
            public const nint m_flAwakeTime = 0x990; // GameTime_t
            public const nint m_flLastOriginChangeTime = 0x994; // GameTime_t
            public const nint m_nBloodColor = 0x998; // int32
            public const nint m_strOriginClassName = 0x9A0; // CUtlSymbolLarge
            public const nint m_strSourceClassName = 0x9A8; // CUtlSymbolLarge
            public const nint m_bHasBeenPhysgunned = 0x9B0; // bool
            public const nint m_bShouldTeleportPhysics = 0x9B1; // bool
            public const nint m_flBlendWeight = 0x9B4; // float32
            public const nint m_flDefaultFadeScale = 0x9B8; // float32
            public const nint m_ragdollMins = 0x9C0; // CUtlVector<Vector>
            public const nint m_ragdollMaxs = 0x9D8; // CUtlVector<Vector>
            public const nint m_bShouldDeleteActivationRecord = 0x9F0; // bool
            public const nint m_bValidatePoweredRagdollPose = 0xA50; // bool
        }
        // Parent: CBaseAnimGraph
        // Fields count: 12
        public static class CPhysMagnet {
            public const nint m_OnMagnetAttach = 0x8E8; // CEntityIOOutput
            public const nint m_OnMagnetDetach = 0x910; // CEntityIOOutput
            public const nint m_massScale = 0x938; // float32
            public const nint m_forceLimit = 0x93C; // float32
            public const nint m_torqueLimit = 0x940; // float32
            public const nint m_MagnettedEntities = 0x948; // CUtlVector<magnetted_objects_t>
            public const nint m_bActive = 0x960; // bool
            public const nint m_bHasHitSomething = 0x961; // bool
            public const nint m_flTotalMass = 0x964; // float32
            public const nint m_flRadius = 0x968; // float32
            public const nint m_flNextSuckTime = 0x96C; // GameTime_t
            public const nint m_iMaxObjectsAttached = 0x970; // int32
        }
        // Parent: CBreakableProp
        // Fields count: 34
        public static class CPhysicsProp {
            public const nint m_MotionEnabled = 0xA68; // CEntityIOOutput
            public const nint m_OnAwakened = 0xA90; // CEntityIOOutput
            public const nint m_OnAwake = 0xAB8; // CEntityIOOutput
            public const nint m_OnAsleep = 0xAE0; // CEntityIOOutput
            public const nint m_OnPlayerUse = 0xB08; // CEntityIOOutput
            public const nint m_OnPlayerPickup = 0xB30; // CEntityIOOutput
            public const nint m_OnOutOfWorld = 0xB58; // CEntityIOOutput
            public const nint m_massScale = 0xB80; // float32
            public const nint m_inertiaScale = 0xB84; // float32
            public const nint m_buoyancyScale = 0xB88; // float32
            public const nint m_damageType = 0xB8C; // int32
            public const nint m_damageToEnableMotion = 0xB90; // int32
            public const nint m_flForceToEnableMotion = 0xB94; // float32
            public const nint m_bThrownByPlayer = 0xB98; // bool
            public const nint m_bDroppedByPlayer = 0xB99; // bool
            public const nint m_bTouchedByPlayer = 0xB9A; // bool
            public const nint m_bFirstCollisionAfterLaunch = 0xB9B; // bool
            public const nint m_iExploitableByPlayer = 0xB9C; // int32
            public const nint m_bHasBeenAwakened = 0xBA0; // bool
            public const nint m_bIsOverrideProp = 0xBA1; // bool
            public const nint m_fNextCheckDisableMotionContactsTime = 0xBA4; // GameTime_t
            public const nint m_iInitialGlowState = 0xBA8; // int32
            public const nint m_nGlowRange = 0xBAC; // int32
            public const nint m_nGlowRangeMin = 0xBB0; // int32
            public const nint m_glowColor = 0xBB4; // Color
            public const nint m_bForceNavIgnore = 0xBB8; // bool
            public const nint m_bNoNavmeshBlocker = 0xBB9; // bool
            public const nint m_bForceNpcExclude = 0xBBA; // bool
            public const nint m_bShouldAutoConvertBackFromDebris = 0xBBB; // bool
            public const nint m_bMuteImpactEffects = 0xBBC; // bool
            public const nint m_bAcceptDamageFromHeldObjects = 0xBC4; // bool
            public const nint m_bEnableUseOutput = 0xBC5; // bool
            public const nint m_bAwake = 0xBC6; // bool
            public const nint m_nCollisionGroupOverride = 0xBC8; // int32
        }
        // Parent: CPhysicsProp
        // Fields count: 0
        public static class CPhysicsPropOverride {
        }
        // Parent: CPhysicsProp
        // Fields count: 5
        public static class CPhysicsPropRespawnable {
            public const nint m_vOriginalSpawnOrigin = 0xBD0; // 
            public const nint m_vOriginalSpawnAngles = 0xBDC; // QAngle
            public const nint m_vOriginalMins = 0xBE8; // 
            public const nint m_vOriginalMaxs = 0xBF4; // 
            public const nint m_flRespawnDuration = 0xC00; // float32
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class CWaterBullet {
        }
        // Parent: CPhysicsProp
        // Fields count: 3
        public static class CShatterGlassShardPhysics {
            public const nint m_bDebris = 0xBD0; // bool
            public const nint m_hParentShard = 0xBD4; // uint32
            public const nint m_ShardDesc = 0xBD8; // shard_model_desc_t
        }
        // Parent: CBaseFlex
        // Fields count: 9
        public static class CEconEntity {
            public const nint m_AttributeManager = 0x988; // CAttributeContainer
            public const nint m_OriginalOwnerXuidLow = 0xC50; // uint32
            public const nint m_OriginalOwnerXuidHigh = 0xC54; // uint32
            public const nint m_nFallbackPaintKit = 0xC58; // int32
            public const nint m_nFallbackSeed = 0xC5C; // int32
            public const nint m_flFallbackWear = 0xC60; // float32
            public const nint m_nFallbackStatTrak = 0xC64; // int32
            public const nint m_hOldProvidee = 0xC68; // CHandle<CBaseEntity>
            public const nint m_iOldOwnerClass = 0xC6C; // int32
        }
        // Parent: CEconEntity
        // Fields count: 2
        public static class CEconWearable {
            public const nint m_nForceSkin = 0xC70; // int32
            public const nint m_bAlwaysAllow = 0xC74; // bool
        }
        // Parent: CBaseFlex
        // Fields count: 14
        public static class CBaseGrenade {
            public const nint m_OnPlayerPickup = 0x980; // CEntityIOOutput
            public const nint m_OnExplode = 0x9A8; // CEntityIOOutput
            public const nint m_bHasWarnedAI = 0x9D0; // bool
            public const nint m_bIsSmokeGrenade = 0x9D1; // bool
            public const nint m_bIsLive = 0x9D2; // bool
            public const nint m_DmgRadius = 0x9D4; // float32
            public const nint m_flDetonateTime = 0x9D8; // GameTime_t
            public const nint m_flWarnAITime = 0x9DC; // float32
            public const nint m_flDamage = 0x9E0; // float32
            public const nint m_iszBounceSound = 0x9E8; // CUtlSymbolLarge
            public const nint m_ExplosionSound = 0x9F0; // CUtlString
            public const nint m_hThrower = 0x9FC; // CHandle<CCSPlayerPawn>
            public const nint m_flNextAttack = 0xA14; // GameTime_t
            public const nint m_hOriginalThrower = 0xA18; // CHandle<CCSPlayerPawn>
        }
        // Parent: CDynamicProp
        // Fields count: 0
        public static class CCoopBonusCoin {
        }
        // Parent: CPhysicsProp
        // Fields count: 0
        public static class CPhysicsPropMultiplayer {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 11
        public static class CBaseViewModel {
            public const nint m_vecLastFacing = 0x8F0; // 
            public const nint m_nViewModelIndex = 0x8FC; // uint32
            public const nint m_nAnimationParity = 0x900; // uint32
            public const nint m_flAnimationStartTime = 0x904; // float32
            public const nint m_hWeapon = 0x908; // CHandle<CBasePlayerWeapon>
            public const nint m_sVMName = 0x910; // CUtlSymbolLarge
            public const nint m_sAnimationPrefix = 0x918; // CUtlSymbolLarge
            public const nint m_hOldLayerSequence = 0x920; // HSequence
            public const nint m_oldLayer = 0x924; // int32
            public const nint m_oldLayerStartTime = 0x928; // float32
            public const nint m_hControlPanel = 0x92C; // CHandle<CBaseEntity>
        }
        // Parent: CBaseViewModel
        // Fields count: 0
        public static class CPredictedViewModel {
        }
        // Parent: CBaseAnimGraph
        // Fields count: 26
        public static class CPlantedC4 {
            public const nint m_bBombTicking = 0x8E8; // bool
            public const nint m_flC4Blow = 0x8EC; // GameTime_t
            public const nint m_nBombSite = 0x8F0; // int32
            public const nint m_nSourceSoundscapeHash = 0x8F4; // int32
            public const nint m_OnBombDefused = 0x8F8; // CEntityIOOutput
            public const nint m_OnBombBeginDefuse = 0x920; // CEntityIOOutput
            public const nint m_OnBombDefuseAborted = 0x948; // CEntityIOOutput
            public const nint m_bCannotBeDefused = 0x970; // bool
            public const nint m_entitySpottedState = 0x978; // EntitySpottedState_t
            public const nint m_nSpotRules = 0x990; // int32
            public const nint m_bTrainingPlacedByPlayer = 0x994; // bool
            public const nint m_bHasExploded = 0x995; // bool
            public const nint m_flTimerLength = 0x998; // float32
            public const nint m_bBeingDefused = 0x99C; // bool
            public const nint m_fLastDefuseTime = 0x9A4; // GameTime_t
            public const nint m_flDefuseLength = 0x9AC; // float32
            public const nint m_flDefuseCountDown = 0x9B0; // GameTime_t
            public const nint m_bBombDefused = 0x9B4; // bool
            public const nint m_hBombDefuser = 0x9B8; // CHandle<CCSPlayerPawn>
            public const nint m_hControlPanel = 0x9BC; // CHandle<CBaseEntity>
            public const nint m_iProgressBarTime = 0x9C0; // int32
            public const nint m_bVoiceAlertFired = 0x9C4; // bool
            public const nint m_bVoiceAlertPlayed = 0x9C5; // bool[4]
            public const nint m_flNextBotBeepTime = 0x9CC; // GameTime_t
            public const nint m_angCatchUpToPlayerEye = 0x9D4; // QAngle
            public const nint m_flLastSpinDetectionTime = 0x9E0; // GameTime_t
        }
        // Parent: CBaseGrenade
        // Fields count: 18
        public static class CBaseCSGrenadeProjectile {
            public const nint m_vInitialPosition = 0xA20; // 
            public const nint m_vInitialVelocity = 0xA2C; // 
            public const nint m_nBounces = 0xA38; // int32
            public const nint m_nExplodeEffectIndex = 0xA40; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_nExplodeEffectTickBegin = 0xA48; // int32
            public const nint m_vecExplodeEffectOrigin = 0xA4C; // 
            public const nint m_flSpawnTime = 0xA58; // GameTime_t
            public const nint m_unOGSExtraFlags = 0xA5C; // uint8
            public const nint m_bDetonationRecorded = 0xA5D; // bool
            public const nint m_flDetonateTime = 0xA60; // GameTime_t
            public const nint m_nItemIndex = 0xA64; // uint16
            public const nint m_vecOriginalSpawnLocation = 0xA68; // 
            public const nint m_flLastBounceSoundTime = 0xA74; // GameTime_t
            public const nint m_vecGrenadeSpin = 0xA78; // RotationVector
            public const nint m_vecLastHitSurfaceNormal = 0xA84; // 
            public const nint m_nTicksAtZeroVelocity = 0xA90; // int32
            public const nint m_bHasEverHitPlayer = 0xA94; // bool
            public const nint m_bClearFromPlayers = 0xA95; // bool
        }
        // Parent: CItem
        // Fields count: 2
        public static class CItemDogtags {
            public const nint m_OwningPlayer = 0x9C0; // CHandle<CCSPlayerPawn>
            public const nint m_KillingPlayer = 0x9C4; // CHandle<CCSPlayerPawn>
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 3
        public static class CSensorGrenadeProjectile {
            public const nint m_fExpireTime = 0xA98; // GameTime_t
            public const nint m_fNextDetectPlayerSound = 0xA9C; // GameTime_t
            public const nint m_hDisplayGrenade = 0xAA0; // CHandle<CBaseEntity>
        }
        // Parent: CBaseGrenade
        // Fields count: 0
        public static class CBreachChargeProjectile {
        }
        // Parent: CBaseGrenade
        // Fields count: 0
        public static class CBumpMineProjectile {
        }
        // Parent: CBaseGrenade
        // Fields count: 0
        public static class CTripWireFireProjectile {
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 3
        public static class CFlashbangProjectile {
            public const nint m_flTimeToDetonate = 0xA98; // float32
            public const nint m_numOpponentsHit = 0xA9C; // uint8
            public const nint m_numTeammatesHit = 0xA9D; // uint8
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 0
        public static class CHEGrenadeProjectile {
        }
        // Parent: CDynamicProp
        // Fields count: 34
        public static class CChicken {
            public const nint m_AttributeManager = 0xB80; // CAttributeContainer
            public const nint m_OriginalOwnerXuidLow = 0xE48; // uint32
            public const nint m_OriginalOwnerXuidHigh = 0xE4C; // uint32
            public const nint m_updateTimer = 0xE50; // CountdownTimer
            public const nint m_stuckAnchor = 0xE68; // 
            public const nint m_stuckTimer = 0xE78; // CountdownTimer
            public const nint m_collisionStuckTimer = 0xE90; // CountdownTimer
            public const nint m_isOnGround = 0xEA8; // bool
            public const nint m_vFallVelocity = 0xEAC; // 
            public const nint m_activity = 0xEB8; // ChickenActivity
            public const nint m_activityTimer = 0xEC0; // CountdownTimer
            public const nint m_turnRate = 0xED8; // float32
            public const nint m_fleeFrom = 0xEDC; // CHandle<CBaseEntity>
            public const nint m_moveRateThrottleTimer = 0xEE0; // CountdownTimer
            public const nint m_startleTimer = 0xEF8; // CountdownTimer
            public const nint m_vocalizeTimer = 0xF10; // CountdownTimer
            public const nint m_flWhenZombified = 0xF28; // GameTime_t
            public const nint m_jumpedThisFrame = 0xF2C; // bool
            public const nint m_leader = 0xF30; // CHandle<CCSPlayerPawn>
            public const nint m_reuseTimer = 0xF38; // CountdownTimer
            public const nint m_hasBeenUsed = 0xF50; // bool
            public const nint m_jumpTimer = 0xF58; // CountdownTimer
            public const nint m_flLastJumpTime = 0xF70; // float32
            public const nint m_bInJump = 0xF74; // bool
            public const nint m_isWaitingForLeader = 0xF75; // bool
            public const nint m_repathTimer = 0x2F80; // CountdownTimer
            public const nint m_inhibitDoorTimer = 0x2F98; // CountdownTimer
            public const nint m_inhibitObstacleAvoidanceTimer = 0x3028; // CountdownTimer
            public const nint m_vecPathGoal = 0x3048; // 
            public const nint m_flActiveFollowStartTime = 0x3054; // GameTime_t
            public const nint m_followMinuteTimer = 0x3058; // CountdownTimer
            public const nint m_vecLastEggPoopPosition = 0x3070; // 
            public const nint m_vecEggsPooped = 0x3080; // CUtlVector<CHandle<CBaseEntity>>
            public const nint m_BlockDirectionTimer = 0x30A0; // CountdownTimer
        }
        // Parent: CBaseAnimGraph
        // Fields count: 0
        public static class CHostageCarriableProp {
        }
        // Parent: CItem
        // Fields count: 0
        public static class CItemAssaultSuit {
        }
        // Parent: CItemAssaultSuit
        // Fields count: 0
        public static class CItemHeavyAssaultSuit {
        }
        // Parent: CItem
        // Fields count: 0
        public static class CItemKevlar {
        }
        // Parent: CItem
        // Fields count: 2
        public static class CItemDefuser {
            public const nint m_entitySpottedState = 0x9C0; // EntitySpottedState_t
            public const nint m_nSpotRules = 0x9D8; // int32
        }
        // Parent: CEconEntity
        // Fields count: 8
        public static class CBasePlayerWeapon {
            public const nint m_nNextPrimaryAttackTick = 0xC70; // GameTick_t
            public const nint m_flNextPrimaryAttackTickRatio = 0xC74; // float32
            public const nint m_nNextSecondaryAttackTick = 0xC78; // GameTick_t
            public const nint m_flNextSecondaryAttackTickRatio = 0xC7C; // float32
            public const nint m_iClip1 = 0xC80; // int32
            public const nint m_iClip2 = 0xC84; // int32
            public const nint m_pReserveAmmo = 0xC88; // int32[2]
            public const nint m_OnPlayerUse = 0xC90; // CEntityIOOutput
        }
        // Parent: CBaseFlex
        // Fields count: 0
        public static class CBaseFlexAlias_funCBaseFlex {
        }
        // Parent: CItem
        // Fields count: 2
        public static class CScriptItem {
            public const nint m_OnPlayerPickup = 0x9C0; // CEntityIOOutput
            public const nint m_MoveTypeOverride = 0x9E8; // MoveType_t
        }
        // Parent: CRagdollProp
        // Fields count: 0
        public static class CRagdollPropAlias_physics_prop_ragdoll {
        }
        // Parent: CRagdollProp
        // Fields count: 6
        public static class CRagdollPropAttached {
            public const nint m_boneIndexAttached = 0xA90; // uint32
            public const nint m_ragdollAttachedObjectIndex = 0xA94; // uint32
            public const nint m_attachmentPointBoneSpace = 0xA98; // 
            public const nint m_attachmentPointRagdollSpace = 0xAA4; // 
            public const nint m_bShouldDetach = 0xAB0; // bool
            public const nint m_bShouldDeleteAttachedActivationRecord = 0xAC0; // bool
        }
        // Parent: CBasePropDoor
        // Fields count: 17
        public static class CPropDoorRotating {
            public const nint m_vecAxis = 0xDF0; // 
            public const nint m_flDistance = 0xDFC; // float32
            public const nint m_eSpawnPosition = 0xE00; // PropDoorRotatingSpawnPos_t
            public const nint m_eOpenDirection = 0xE04; // PropDoorRotatingOpenDirection_e
            public const nint m_eCurrentOpenDirection = 0xE08; // PropDoorRotatingOpenDirection_e
            public const nint m_flAjarAngle = 0xE0C; // float32
            public const nint m_angRotationAjarDeprecated = 0xE10; // QAngle
            public const nint m_angRotationClosed = 0xE1C; // QAngle
            public const nint m_angRotationOpenForward = 0xE28; // QAngle
            public const nint m_angRotationOpenBack = 0xE34; // QAngle
            public const nint m_angGoal = 0xE40; // QAngle
            public const nint m_vecForwardBoundsMin = 0xE4C; // 
            public const nint m_vecForwardBoundsMax = 0xE58; // 
            public const nint m_vecBackBoundsMin = 0xE64; // 
            public const nint m_vecBackBoundsMax = 0xE70; // 
            public const nint m_bAjarDoorShouldntAlwaysOpen = 0xE7C; // bool
            public const nint m_hEntityBlocker = 0xE80; // CHandle<CEntityBlocker>
        }
        // Parent: CPropDoorRotating
        // Fields count: 4
        public static class CPropDoorRotatingBreakable {
            public const nint m_bBreakable = 0xE88; // bool
            public const nint m_isAbleToCloseAreaPortals = 0xE89; // bool
            public const nint m_currentDamageState = 0xE8C; // int32
            public const nint m_damageStates = 0xE90; // CUtlVector<CUtlSymbolLarge>
        }
        // Parent: CBaseFlex
        // Fields count: 12
        public static class CBaseCombatCharacter {
            public const nint m_bForceServerRagdoll = 0x978; // bool
            public const nint m_hMyWearables = 0x980; // CNetworkUtlVectorBase<CHandle<CEconWearable>>
            public const nint m_flFieldOfView = 0x998; // float32
            public const nint m_impactEnergyScale = 0x99C; // float32
            public const nint m_LastHitGroup = 0x9A0; // HitGroup_t
            public const nint m_bApplyStressDamage = 0x9A4; // bool
            public const nint m_bloodColor = 0x9A8; // int32
            public const nint m_iDamageCount = 0x9F0; // int32
            public const nint m_pVecRelationships = 0x9F8; // CUtlVector<RelationshipOverride_t>*
            public const nint m_strRelationships = 0xA00; // CUtlSymbolLarge
            public const nint m_eHull = 0xA08; // Hull_t
            public const nint m_nNavHullIdx = 0xA0C; // uint32
        }
        // Parent: CItem
        // Fields count: 32
        public static class CItemGeneric {
            public const nint m_bHasTriggerRadius = 0x9C8; // bool
            public const nint m_bHasPickupRadius = 0x9C9; // bool
            public const nint m_flPickupRadiusSqr = 0x9CC; // float32
            public const nint m_flTriggerRadiusSqr = 0x9D0; // float32
            public const nint m_flLastPickupCheck = 0x9D4; // GameTime_t
            public const nint m_bPlayerCounterListenerAdded = 0x9D8; // bool
            public const nint m_bPlayerInTriggerRadius = 0x9D9; // bool
            public const nint m_hSpawnParticleEffect = 0x9E0; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_pAmbientSoundEffect = 0x9E8; // CUtlSymbolLarge
            public const nint m_bAutoStartAmbientSound = 0x9F0; // bool
            public const nint m_pSpawnScriptFunction = 0x9F8; // CUtlSymbolLarge
            public const nint m_hPickupParticleEffect = 0xA00; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_pPickupSoundEffect = 0xA08; // CUtlSymbolLarge
            public const nint m_pPickupScriptFunction = 0xA10; // CUtlSymbolLarge
            public const nint m_hTimeoutParticleEffect = 0xA18; // CStrongHandle<InfoForResourceTypeIParticleSystemDefinition>
            public const nint m_pTimeoutSoundEffect = 0xA20; // CUtlSymbolLarge
            public const nint m_pTimeoutScriptFunction = 0xA28; // CUtlSymbolLarge
            public const nint m_pPickupFilterName = 0xA30; // CUtlSymbolLarge
            public const nint m_hPickupFilter = 0xA38; // CHandle<CBaseFilter>
            public const nint m_OnPickup = 0xA40; // CEntityIOOutput
            public const nint m_OnTimeout = 0xA68; // CEntityIOOutput
            public const nint m_OnTriggerStartTouch = 0xA90; // CEntityIOOutput
            public const nint m_OnTriggerTouch = 0xAB8; // CEntityIOOutput
            public const nint m_OnTriggerEndTouch = 0xAE0; // CEntityIOOutput
            public const nint m_pAllowPickupScriptFunction = 0xB08; // CUtlSymbolLarge
            public const nint m_flPickupRadius = 0xB10; // float32
            public const nint m_flTriggerRadius = 0xB14; // float32
            public const nint m_pTriggerSoundEffect = 0xB18; // CUtlSymbolLarge
            public const nint m_bGlowWhenInTrigger = 0xB20; // bool
            public const nint m_glowColor = 0xB21; // Color
            public const nint m_bUseable = 0xB25; // bool
            public const nint m_hTriggerHelper = 0xB28; // CHandle<CItemGenericTriggerHelper>
        }
        // Parent: CBaseCombatCharacter
        // Fields count: 25
        public static class CBasePlayerPawn {
            public const nint m_pWeaponServices = 0xA10; // CPlayer_WeaponServices*
            public const nint m_pItemServices = 0xA18; // CPlayer_ItemServices*
            public const nint m_pAutoaimServices = 0xA20; // CPlayer_AutoaimServices*
            public const nint m_pObserverServices = 0xA28; // CPlayer_ObserverServices*
            public const nint m_pWaterServices = 0xA30; // CPlayer_WaterServices*
            public const nint m_pUseServices = 0xA38; // CPlayer_UseServices*
            public const nint m_pFlashlightServices = 0xA40; // CPlayer_FlashlightServices*
            public const nint m_pCameraServices = 0xA48; // CPlayer_CameraServices*
            public const nint m_pMovementServices = 0xA50; // CPlayer_MovementServices*
            public const nint m_ServerViewAngleChanges = 0xA60; // CUtlVectorEmbeddedNetworkVar<ViewAngleServerChange_t>
            public const nint m_nHighestGeneratedServerViewAngleChangeIndex = 0xAB0; // uint32
            public const nint v_angle = 0xAB4; // QAngle
            public const nint v_anglePrevious = 0xAC0; // QAngle
            public const nint m_iHideHUD = 0xACC; // uint32
            public const nint m_skybox3d = 0xAD0; // sky3dparams_t
            public const nint m_fTimeLastHurt = 0xB60; // GameTime_t
            public const nint m_flDeathTime = 0xB64; // GameTime_t
            public const nint m_fNextSuicideTime = 0xB68; // GameTime_t
            public const nint m_fInitHUD = 0xB6C; // bool
            public const nint m_pExpresser = 0xB70; // CAI_Expresser*
            public const nint m_hController = 0xB78; // CHandle<CBasePlayerController>
            public const nint m_fHltvReplayDelay = 0xB80; // float32
            public const nint m_fHltvReplayEnd = 0xB84; // float32
            public const nint m_iHltvReplayEntity = 0xB88; // CEntityIndex
            public const nint m_sndOpvarLatchData = 0xB90; // CUtlVector<sndopvarlatchdata_t>
        }
        // Parent: CPredictedViewModel
        // Fields count: 3
        public static class CCSGOViewModel {
            public const nint m_bShouldIgnoreOffsetAndAccuracy = 0x930; // bool
            public const nint m_nWeaponParity = 0x934; // uint32
            public const nint m_nOldWeaponParity = 0x938; // uint32
        }
        // Parent: CBasePlayerWeapon
        // Fields count: 62
        public static class CCSWeaponBase {
            public const nint m_bRemoveable = 0xCE0; // bool
            public const nint m_flFireSequenceStartTime = 0xCE8; // float32
            public const nint m_nFireSequenceStartTimeChange = 0xCEC; // int32
            public const nint m_nFireSequenceStartTimeAck = 0xCF0; // int32
            public const nint m_ePlayerFireEvent = 0xCF4; // PlayerAnimEvent_t
            public const nint m_ePlayerFireEventAttackType = 0xCF8; // WeaponAttackType_t
            public const nint m_seqIdle = 0xCFC; // HSequence
            public const nint m_seqFirePrimary = 0xD00; // HSequence
            public const nint m_seqFireSecondary = 0xD04; // HSequence
            public const nint m_thirdPersonFireSequences = 0xD08; // CUtlVector<HSequence>
            public const nint m_hCurrentThirdPersonSequence = 0xD20; // HSequence
            public const nint m_nSilencerBoneIndex = 0xD24; // int32
            public const nint m_thirdPersonSequences = 0xD28; // HSequence[7]
            public const nint m_bPlayerAmmoStockOnPickup = 0xD50; // bool
            public const nint m_bRequireUseToTouch = 0xD51; // bool
            public const nint m_iState = 0xD54; // CSWeaponState_t
            public const nint m_flLastTimeInAir = 0xD58; // GameTime_t
            public const nint m_flLastDeployTime = 0xD5C; // GameTime_t
            public const nint m_nLastEmptySoundCmdNum = 0xD60; // int32
            public const nint m_nViewModelIndex = 0xD64; // uint32
            public const nint m_bReloadsWithClips = 0xD68; // bool
            public const nint m_flTimeWeaponIdle = 0xD88; // GameTime_t
            public const nint m_bFireOnEmpty = 0xD8C; // bool
            public const nint m_OnPlayerPickup = 0xD90; // CEntityIOOutput
            public const nint m_weaponMode = 0xDB8; // CSWeaponMode
            public const nint m_flTurningInaccuracyDelta = 0xDBC; // float32
            public const nint m_vecTurningInaccuracyEyeDirLast = 0xDC0; // 
            public const nint m_flTurningInaccuracy = 0xDCC; // float32
            public const nint m_fAccuracyPenalty = 0xDD0; // float32
            public const nint m_flLastAccuracyUpdateTime = 0xDD4; // GameTime_t
            public const nint m_fAccuracySmoothedForZoom = 0xDD8; // float32
            public const nint m_fScopeZoomEndTime = 0xDDC; // GameTime_t
            public const nint m_iRecoilIndex = 0xDE0; // int32
            public const nint m_flRecoilIndex = 0xDE4; // float32
            public const nint m_bBurstMode = 0xDE8; // bool
            public const nint m_nPostponeFireReadyTicks = 0xDEC; // GameTick_t
            public const nint m_flPostponeFireReadyFrac = 0xDF0; // float32
            public const nint m_bInReload = 0xDF4; // bool
            public const nint m_bReloadVisuallyComplete = 0xDF5; // bool
            public const nint m_flDroppedAtTime = 0xDF8; // GameTime_t
            public const nint m_bIsHauledBack = 0xDFC; // bool
            public const nint m_bSilencerOn = 0xDFD; // bool
            public const nint m_flTimeSilencerSwitchComplete = 0xE00; // GameTime_t
            public const nint m_iOriginalTeamNumber = 0xE04; // int32
            public const nint m_flNextAttackRenderTimeOffset = 0xE08; // float32
            public const nint m_bCanBePickedUp = 0xE20; // bool
            public const nint m_bUseCanOverrideNextOwnerTouchTime = 0xE21; // bool
            public const nint m_nextOwnerTouchTime = 0xE24; // GameTime_t
            public const nint m_nextPrevOwnerTouchTime = 0xE28; // GameTime_t
            public const nint m_hPrevOwner = 0xE2C; // CHandle<CCSPlayerPawn>
            public const nint m_nDropTick = 0xE30; // GameTick_t
            public const nint m_donated = 0xE54; // bool
            public const nint m_fLastShotTime = 0xE58; // GameTime_t
            public const nint m_bWasOwnedByCT = 0xE5C; // bool
            public const nint m_bWasOwnedByTerrorist = 0xE5D; // bool
            public const nint m_bFiredOutOfAmmoEvent = 0xE5E; // bool
            public const nint m_numRemoveUnownedWeaponThink = 0xE60; // int32
            public const nint m_IronSightController = 0xE68; // CIronSightController
            public const nint m_iIronSightMode = 0xE80; // int32
            public const nint m_flLastLOSTraceFailureTime = 0xE84; // GameTime_t
            public const nint m_iNumEmptyAttacks = 0xE88; // int32
            public const nint m_flWatTickOffset = 0xE8C; // float32
        }
        // Parent: CCSWeaponBase
        // Fields count: 9
        public static class CCSWeaponBaseGun {
            public const nint m_zoomLevel = 0xE90; // int32
            public const nint m_iBurstShotsRemaining = 0xE94; // int32
            public const nint m_silencedModelIndex = 0xEA0; // int32
            public const nint m_inPrecache = 0xEA4; // bool
            public const nint m_bNeedsBoltAction = 0xEA5; // bool
            public const nint m_bSkillReloadAvailable = 0xEA6; // bool
            public const nint m_bSkillReloadLiftedReloadKey = 0xEA7; // bool
            public const nint m_bSkillBoltInterruptAvailable = 0xEA8; // bool
            public const nint m_bSkillBoltLiftedFireKey = 0xEA9; // bool
        }
        // Parent: CCSWeaponBase
        // Fields count: 11
        public static class CC4 {
            public const nint m_vecLastValidPlayerHeldPosition = 0xE90; // 
            public const nint m_vecLastValidDroppedPosition = 0xE9C; // 
            public const nint m_bDoValidDroppedPositionCheck = 0xEA8; // bool
            public const nint m_bStartedArming = 0xEA9; // bool
            public const nint m_fArmedTime = 0xEAC; // GameTime_t
            public const nint m_bBombPlacedAnimation = 0xEB0; // bool
            public const nint m_bIsPlantingViaUse = 0xEB1; // bool
            public const nint m_entitySpottedState = 0xEB8; // EntitySpottedState_t
            public const nint m_nSpotRules = 0xED0; // int32
            public const nint m_bPlayedArmingBeeps = 0xED4; // bool[7]
            public const nint m_bBombPlanted = 0xEDB; // bool
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CDEagle {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponElite {
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CWeaponNOVA {
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CWeaponSawedoff {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 1
        public static class CWeaponTaser {
            public const nint m_fFireTime = 0xEB0; // GameTime_t
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CWeaponXM1014 {
        }
        // Parent: CCSWeaponBase
        // Fields count: 1
        public static class CKnife {
            public const nint m_bFirstAttack = 0xE90; // bool
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CMelee {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 3
        public static class CWeaponShield {
            public const nint m_flBulletDamageAbsorbed = 0xEB0; // float32
            public const nint m_flLastBulletHitSoundTime = 0xEB4; // GameTime_t
            public const nint m_flDisplayHealth = 0xEB8; // float32
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 4
        public static class CMolotovProjectile {
            public const nint m_bIsIncGrenade = 0xA98; // bool
            public const nint m_bDetonated = 0xAA4; // bool
            public const nint m_stillTimer = 0xAA8; // IntervalTimer
            public const nint m_bHasBouncedOffPlayer = 0xB88; // bool
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 4
        public static class CDecoyProjectile {
            public const nint m_nDecoyShotTick = 0xAA0; // int32
            public const nint m_shotsRemaining = 0xAA4; // int32
            public const nint m_fExpireTime = 0xAA8; // GameTime_t
            public const nint m_decoyWeaponDefIndex = 0xAB8; // uint16
        }
        // Parent: CBaseCSGrenadeProjectile
        // Fields count: 8
        public static class CSmokeGrenadeProjectile {
            public const nint m_nSmokeEffectTickBegin = 0xAB0; // int32
            public const nint m_bDidSmokeEffect = 0xAB4; // bool
            public const nint m_nRandomSeed = 0xAB8; // int32
            public const nint m_vSmokeColor = 0xABC; // 
            public const nint m_vSmokeDetonationPos = 0xAC8; // 
            public const nint m_VoxelFrameData = 0xAD8; // CUtlVector<uint8>
            public const nint m_flLastBounce = 0xAF0; // GameTime_t
            public const nint m_fllastSimulationTime = 0xAF4; // GameTime_t
        }
        // Parent: CCSWeaponBase
        // Fields count: 13
        public static class CBaseCSGrenade {
            public const nint m_bRedraw = 0xE90; // bool
            public const nint m_bIsHeldByPlayer = 0xE91; // bool
            public const nint m_bPinPulled = 0xE92; // bool
            public const nint m_bJumpThrow = 0xE93; // bool
            public const nint m_bThrowAnimating = 0xE94; // bool
            public const nint m_fThrowTime = 0xE98; // GameTime_t
            public const nint m_flThrowStrength = 0xE9C; // float32
            public const nint m_flThrowStrengthApproach = 0xEA0; // float32
            public const nint m_fDropTime = 0xEA4; // GameTime_t
            public const nint m_bJustPulledPin = 0xEA8; // bool
            public const nint m_nNextHoldTick = 0xEAC; // GameTick_t
            public const nint m_flNextHoldFrac = 0xEB0; // float32
            public const nint m_hSwitchToWeaponAfterThrow = 0xEB4; // CHandle<CCSWeaponBase>
        }
        // Parent: CCSWeaponBase
        // Fields count: 2
        public static class CWeaponBaseItem {
            public const nint m_SequenceCompleteTimer = 0xE90; // CountdownTimer
            public const nint m_bRedraw = 0xEA8; // bool
        }
        // Parent: CWeaponBaseItem
        // Fields count: 0
        public static class CItem_Healthshot {
        }
        // Parent: CCSWeaponBase
        // Fields count: 7
        public static class CFists {
            public const nint m_bPlayingUninterruptableAct = 0xE90; // bool
            public const nint m_nUninterruptableActivity = 0xE94; // PlayerAnimEvent_t
            public const nint m_bRestorePrevWep = 0xE98; // bool
            public const nint m_hWeaponBeforePrevious = 0xE9C; // CHandle<CBasePlayerWeapon>
            public const nint m_hWeaponPrevious = 0xEA0; // CHandle<CBasePlayerWeapon>
            public const nint m_bDelayedHardPunchIncoming = 0xEA4; // bool
            public const nint m_bDestroyAfterTaunt = 0xEA5; // bool
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CSensorGrenade {
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CBreachCharge {
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CBumpMine {
        }
        // Parent: CCSWeaponBase
        // Fields count: 0
        public static class CTablet {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CTripWireFire {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponZoneRepulsor {
        }
        // Parent: CBasePlayerPawn
        // Fields count: 136
        public static class CCSPlayerPawnBase {
            public const nint m_CTouchExpansionComponent = 0xBC0; // CTouchExpansionComponent
            public const nint m_pPingServices = 0xC10; // CCSPlayer_PingServices*
            public const nint m_pViewModelServices = 0xC18; // CPlayer_ViewModelServices*
            public const nint m_iDisplayHistoryBits = 0xC20; // uint32
            public const nint m_flLastAttackedTeammate = 0xC24; // float32
            public const nint m_hOriginalController = 0xC28; // CHandle<CCSPlayerController>
            public const nint m_blindUntilTime = 0xC2C; // GameTime_t
            public const nint m_blindStartTime = 0xC30; // GameTime_t
            public const nint m_allowAutoFollowTime = 0xC34; // GameTime_t
            public const nint m_entitySpottedState = 0xC38; // EntitySpottedState_t
            public const nint m_nSpotRules = 0xC50; // int32
            public const nint m_iPlayerState = 0xC54; // CSPlayerState
            public const nint m_chickenIdleSoundTimer = 0xC60; // CountdownTimer
            public const nint m_chickenJumpSoundTimer = 0xC78; // CountdownTimer
            public const nint m_vecLastBookmarkedPosition = 0xD30; // 
            public const nint m_flLastDistanceTraveledNotice = 0xD3C; // float32
            public const nint m_flAccumulatedDistanceTraveled = 0xD40; // float32
            public const nint m_flLastFriendlyFireDamageReductionRatio = 0xD44; // float32
            public const nint m_bRespawning = 0xD48; // bool
            public const nint m_nLastPickupPriority = 0xD4C; // int32
            public const nint m_flLastPickupPriorityTime = 0xD50; // float32
            public const nint m_bIsScoped = 0xD54; // bool
            public const nint m_bIsWalking = 0xD55; // bool
            public const nint m_bResumeZoom = 0xD56; // bool
            public const nint m_bIsDefusing = 0xD57; // bool
            public const nint m_bIsGrabbingHostage = 0xD58; // bool
            public const nint m_iBlockingUseActionInProgress = 0xD5C; // CSPlayerBlockingUseAction_t
            public const nint m_fImmuneToGunGameDamageTime = 0xD60; // GameTime_t
            public const nint m_bGunGameImmunity = 0xD64; // bool
            public const nint m_GunGameImmunityColor = 0xD65; // Color
            public const nint m_fMolotovDamageTime = 0xD6C; // float32
            public const nint m_bHasMovedSinceSpawn = 0xD70; // bool
            public const nint m_bCanMoveDuringFreezePeriod = 0xD71; // bool
            public const nint m_flGuardianTooFarDistFrac = 0xD74; // float32
            public const nint m_flNextGuardianTooFarHurtTime = 0xD78; // float32
            public const nint m_flDetectedByEnemySensorTime = 0xD7C; // GameTime_t
            public const nint m_flDealtDamageToEnemyMostRecentTimestamp = 0xD80; // float32
            public const nint m_flLastEquippedHelmetTime = 0xD84; // GameTime_t
            public const nint m_flLastEquippedArmorTime = 0xD88; // GameTime_t
            public const nint m_nHeavyAssaultSuitCooldownRemaining = 0xD8C; // int32
            public const nint m_bResetArmorNextSpawn = 0xD90; // bool
            public const nint m_flLastBumpMineBumpTime = 0xD94; // GameTime_t
            public const nint m_flEmitSoundTime = 0xD98; // GameTime_t
            public const nint m_iNumSpawns = 0xD9C; // int32
            public const nint m_iShouldHaveCash = 0xDA0; // int32
            public const nint m_flIdleTimeSinceLastAction = 0xDA8; // float32
            public const nint m_flNameChangeHistory = 0xDAC; // float32[5]
            public const nint m_fLastGivenDefuserTime = 0xDC0; // float32
            public const nint m_fLastGivenBombTime = 0xDC4; // float32
            public const nint m_bHasNightVision = 0xDC8; // bool
            public const nint m_bNightVisionOn = 0xDC9; // bool
            public const nint m_fNextRadarUpdateTime = 0xDCC; // float32
            public const nint m_flLastMoneyUpdateTime = 0xDD0; // float32
            public const nint m_MenuStringBuffer = 0xDD4; // char[1024]
            public const nint m_fIntroCamTime = 0x11D4; // float32
            public const nint m_nMyCollisionGroup = 0x11D8; // int32
            public const nint m_bInNoDefuseArea = 0x11DC; // bool
            public const nint m_bKilledByTaser = 0x11DD; // bool
            public const nint m_iMoveState = 0x11E0; // int32
            public const nint m_grenadeParameterStashTime = 0x11E4; // GameTime_t
            public const nint m_bGrenadeParametersStashed = 0x11E8; // bool
            public const nint m_angStashedShootAngles = 0x11EC; // QAngle
            public const nint m_vecStashedGrenadeThrowPosition = 0x11F8; // 
            public const nint m_vecStashedVelocity = 0x1204; // 
            public const nint m_angShootAngleHistory = 0x1210; // QAngle[2]
            public const nint m_vecThrowPositionHistory = 0x1228; // Vector[2]
            public const nint m_vecVelocityHistory = 0x1240; // Vector[2]
            public const nint m_bDiedAirborne = 0x1258; // bool
            public const nint m_iBombSiteIndex = 0x125C; // CEntityIndex
            public const nint m_nWhichBombZone = 0x1260; // int32
            public const nint m_bInBombZoneTrigger = 0x1264; // bool
            public const nint m_bWasInBombZoneTrigger = 0x1265; // bool
            public const nint m_iDirection = 0x1268; // int32
            public const nint m_iShotsFired = 0x126C; // int32
            public const nint m_ArmorValue = 0x1270; // int32
            public const nint m_flFlinchStack = 0x1274; // float32
            public const nint m_flVelocityModifier = 0x1278; // float32
            public const nint m_flHitHeading = 0x127C; // float32
            public const nint m_nHitBodyPart = 0x1280; // int32
            public const nint m_iHostagesKilled = 0x1284; // int32
            public const nint m_vecTotalBulletForce = 0x1288; // 
            public const nint m_flFlashDuration = 0x1294; // float32
            public const nint m_flFlashMaxAlpha = 0x1298; // float32
            public const nint m_flProgressBarStartTime = 0x129C; // float32
            public const nint m_iProgressBarDuration = 0x12A0; // int32
            public const nint m_bWaitForNoAttack = 0x12A4; // bool
            public const nint m_flLowerBodyYawTarget = 0x12A8; // float32
            public const nint m_bStrafing = 0x12AC; // bool
            public const nint m_lastStandingPos = 0x12B0; // 
            public const nint m_ignoreLadderJumpTime = 0x12BC; // float32
            public const nint m_ladderSurpressionTimer = 0x12C0; // CountdownTimer
            public const nint m_lastLadderNormal = 0x12D8; // 
            public const nint m_lastLadderPos = 0x12E4; // 
            public const nint m_thirdPersonHeading = 0x12F0; // QAngle
            public const nint m_flSlopeDropOffset = 0x12FC; // float32
            public const nint m_flSlopeDropHeight = 0x1300; // float32
            public const nint m_vHeadConstraintOffset = 0x1304; // 
            public const nint m_iLastWeaponFireUsercmd = 0x1318; // int32
            public const nint m_angEyeAngles = 0x131C; // QAngle
            public const nint m_bVCollisionInitted = 0x1328; // bool
            public const nint m_storedSpawnPosition = 0x132C; // 
            public const nint m_storedSpawnAngle = 0x1338; // QAngle
            public const nint m_bIsSpawning = 0x1344; // bool
            public const nint m_bHideTargetID = 0x1345; // bool
            public const nint m_nNumDangerZoneDamageHits = 0x1348; // int32
            public const nint m_bHud_MiniScoreHidden = 0x134C; // bool
            public const nint m_bHud_RadarHidden = 0x134D; // bool
            public const nint m_nLastKillerIndex = 0x1350; // CEntityIndex
            public const nint m_nLastConcurrentKilled = 0x1354; // int32
            public const nint m_nDeathCamMusic = 0x1358; // int32
            public const nint m_iAddonBits = 0x135C; // int32
            public const nint m_iPrimaryAddon = 0x1360; // int32
            public const nint m_iSecondaryAddon = 0x1364; // int32
            public const nint m_currentDeafnessFilter = 0x1368; // CUtlStringToken
            public const nint m_NumEnemiesKilledThisSpawn = 0x136C; // int32
            public const nint m_NumEnemiesKilledThisRound = 0x1370; // int32
            public const nint m_NumEnemiesAtRoundStart = 0x1374; // int32
            public const nint m_wasNotKilledNaturally = 0x1378; // bool
            public const nint m_vecPlayerPatchEconIndices = 0x137C; // uint32[5]
            public const nint m_iDeathFlags = 0x1390; // int32
            public const nint m_hPet = 0x1394; // CHandle<CChicken>
            public const nint m_unCurrentEquipmentValue = 0x1560; // uint16
            public const nint m_unRoundStartEquipmentValue = 0x1562; // uint16
            public const nint m_unFreezetimeEndEquipmentValue = 0x1564; // uint16
            public const nint m_nSurvivalTeamNumber = 0x1568; // int32
            public const nint m_bHasDeathInfo = 0x156C; // bool
            public const nint m_flDeathInfoTime = 0x1570; // float32
            public const nint m_vecDeathInfoOrigin = 0x1574; // 
            public const nint m_bKilledByHeadshot = 0x1580; // bool
            public const nint m_LastHitBox = 0x1584; // int32
            public const nint m_LastHealth = 0x1588; // int32
            public const nint m_flLastCollisionCeiling = 0x158C; // float32
            public const nint m_flLastCollisionCeilingChangeTime = 0x1590; // float32
            public const nint m_pBot = 0x1598; // CCSBot*
            public const nint m_bBotAllowActive = 0x15A0; // bool
            public const nint m_bCommittingSuicideOnTeamChange = 0x15A1; // bool
        }
        // Parent: CCSPlayerPawnBase
        // Fields count: 0
        public static class CCSObserverPawn {
        }
        // Parent: CCSPlayerPawnBase
        // Fields count: 49
        public static class CCSPlayerPawn {
            public const nint m_pBulletServices = 0x15A8; // CCSPlayer_BulletServices*
            public const nint m_pHostageServices = 0x15B0; // CCSPlayer_HostageServices*
            public const nint m_pBuyServices = 0x15B8; // CCSPlayer_BuyServices*
            public const nint m_pActionTrackingServices = 0x15C0; // CCSPlayer_ActionTrackingServices*
            public const nint m_pRadioServices = 0x15C8; // CCSPlayer_RadioServices*
            public const nint m_pDamageReactServices = 0x15D0; // CCSPlayer_DamageReactServices*
            public const nint m_nCharacterDefIndex = 0x15D8; // uint16
            public const nint m_hPreviousModel = 0x15E0; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_bHasFemaleVoice = 0x15E8; // bool
            public const nint m_strVOPrefix = 0x15F0; // CUtlString
            public const nint m_szLastPlaceName = 0x15F8; // char[18]
            public const nint m_bInHostageResetZone = 0x16B8; // bool
            public const nint m_bInBuyZone = 0x16B9; // bool
            public const nint m_bWasInBuyZone = 0x16BA; // bool
            public const nint m_bInHostageRescueZone = 0x16BB; // bool
            public const nint m_bInBombZone = 0x16BC; // bool
            public const nint m_bWasInHostageRescueZone = 0x16BD; // bool
            public const nint m_iRetakesOffering = 0x16C0; // int32
            public const nint m_iRetakesOfferingCard = 0x16C4; // int32
            public const nint m_bRetakesHasDefuseKit = 0x16C8; // bool
            public const nint m_bRetakesMVPLastRound = 0x16C9; // bool
            public const nint m_iRetakesMVPBoostItem = 0x16CC; // int32
            public const nint m_RetakesMVPBoostExtraUtility = 0x16D0; // loadout_slot_t
            public const nint m_flHealthShotBoostExpirationTime = 0x16D4; // GameTime_t
            public const nint m_flLandseconds = 0x16D8; // float32
            public const nint m_aimPunchAngle = 0x16DC; // QAngle
            public const nint m_aimPunchAngleVel = 0x16E8; // QAngle
            public const nint m_aimPunchTickBase = 0x16F4; // int32
            public const nint m_aimPunchTickFraction = 0x16F8; // float32
            public const nint m_aimPunchCache = 0x1700; // CUtlVector<QAngle>
            public const nint m_bIsBuyMenuOpen = 0x1718; // bool
            public const nint m_xLastHeadBoneTransform = 0x1D60; // CTransform
            public const nint m_bLastHeadBoneTransformIsValid = 0x1D80; // bool
            public const nint m_lastLandTime = 0x1D84; // GameTime_t
            public const nint m_bOnGroundLastTick = 0x1D88; // bool
            public const nint m_iPlayerLocked = 0x1D8C; // int32
            public const nint m_flTimeOfLastInjury = 0x1D94; // GameTime_t
            public const nint m_flNextSprayDecalTime = 0x1D98; // GameTime_t
            public const nint m_bNextSprayDecalTimeExpedited = 0x1D9C; // bool
            public const nint m_nRagdollDamageBone = 0x1DA0; // int32
            public const nint m_vRagdollDamageForce = 0x1DA4; // 
            public const nint m_vRagdollDamagePosition = 0x1DB0; // 
            public const nint m_szRagdollDamageWeaponName = 0x1DBC; // char[64]
            public const nint m_bRagdollDamageHeadshot = 0x1DFC; // bool
            public const nint m_vRagdollServerOrigin = 0x1E00; // 
            public const nint m_EconGloves = 0x1E10; // CEconItemView
            public const nint m_nEconGlovesChanged = 0x2088; // uint8
            public const nint m_qDeathEyeAngles = 0x208C; // QAngle
            public const nint m_bSkipOneHeadConstraintUpdate = 0x2098; // bool
        }
        // Parent: CBaseCombatCharacter
        // Fields count: 1
        public static class CHostageExpresserShim {
            public const nint m_pExpresser = 0xA10; // CAI_Expresser*
        }
        // Parent: CHostageExpresserShim
        // Fields count: 39
        public static class CHostage {
            public const nint m_OnHostageBeginGrab = 0xA28; // CEntityIOOutput
            public const nint m_OnFirstPickedUp = 0xA50; // CEntityIOOutput
            public const nint m_OnDroppedNotRescued = 0xA78; // CEntityIOOutput
            public const nint m_OnRescued = 0xAA0; // CEntityIOOutput
            public const nint m_entitySpottedState = 0xAC8; // EntitySpottedState_t
            public const nint m_nSpotRules = 0xAE0; // int32
            public const nint m_uiHostageSpawnExclusionGroupMask = 0xAE4; // uint32
            public const nint m_nHostageSpawnRandomFactor = 0xAE8; // uint32
            public const nint m_bRemove = 0xAEC; // bool
            public const nint m_vel = 0xAF0; // 
            public const nint m_isRescued = 0xAFC; // bool
            public const nint m_jumpedThisFrame = 0xAFD; // bool
            public const nint m_nHostageState = 0xB00; // int32
            public const nint m_leader = 0xB04; // CHandle<CBaseEntity>
            public const nint m_lastLeader = 0xB08; // CHandle<CCSPlayerPawnBase>
            public const nint m_reuseTimer = 0xB10; // CountdownTimer
            public const nint m_hasBeenUsed = 0xB28; // bool
            public const nint m_accel = 0xB2C; // 
            public const nint m_isRunning = 0xB38; // bool
            public const nint m_isCrouching = 0xB39; // bool
            public const nint m_jumpTimer = 0xB40; // CountdownTimer
            public const nint m_isWaitingForLeader = 0xB58; // bool
            public const nint m_repathTimer = 0x2B68; // CountdownTimer
            public const nint m_inhibitDoorTimer = 0x2B80; // CountdownTimer
            public const nint m_inhibitObstacleAvoidanceTimer = 0x2C10; // CountdownTimer
            public const nint m_wiggleTimer = 0x2C30; // CountdownTimer
            public const nint m_isAdjusted = 0x2C4C; // bool
            public const nint m_bHandsHaveBeenCut = 0x2C4D; // bool
            public const nint m_hHostageGrabber = 0x2C50; // CHandle<CCSPlayerPawn>
            public const nint m_fLastGrabTime = 0x2C54; // GameTime_t
            public const nint m_vecPositionWhenStartedDroppingToGround = 0x2C58; // 
            public const nint m_vecGrabbedPos = 0x2C64; // 
            public const nint m_flRescueStartTime = 0x2C70; // GameTime_t
            public const nint m_flGrabSuccessTime = 0x2C74; // GameTime_t
            public const nint m_flDropStartTime = 0x2C78; // GameTime_t
            public const nint m_nApproachRewardPayouts = 0x2C7C; // int32
            public const nint m_nPickupEventCount = 0x2C80; // int32
            public const nint m_vecSpawnGroundPos = 0x2C84; // 
            public const nint m_vecHostageResetPosition = 0x2CA4; // 
        }
        // Parent: CHostage
        // Fields count: 0
        public static class CHostageAlias_info_hostage_spawn {
        }
        // Parent: CItemDefuser
        // Fields count: 0
        public static class CItemDefuserAlias_item_defuser {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CAK47 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponAug {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponAWP {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponBizon {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponFamas {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponFiveSeven {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponG3SG1 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponGalilAR {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponGlock {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponHKP2000 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponUSPSilencer {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponM4A1 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponM4A1Silencer {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponMAC10 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponMag7 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponMP5SD {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponMP7 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponMP9 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponNegev {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponP250 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponCZ75a {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponP90 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponSCAR20 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponSG556 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponSSG08 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponTec9 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponUMP45 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponM249 {
        }
        // Parent: CCSWeaponBaseGun
        // Fields count: 0
        public static class CWeaponRevolver {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CMolotovGrenade {
        }
        // Parent: CMolotovGrenade
        // Fields count: 0
        public static class CIncendiaryGrenade {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CDecoyGrenade {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CFlashbang {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CHEGrenade {
        }
        // Parent: CBaseCSGrenade
        // Fields count: 0
        public static class CSmokeGrenade {
        }
    }
    // Module: soundsystem.dll
    // Classes count: 51
    // Enums count: 13
    public static class Soundsystem {
        // Alignment: 4
        // Members count: 30
        public enum soundlevel_t : uint {
            SNDLVL_NONE = 0x0,
            SNDLVL_20dB = 0x14,
            SNDLVL_25dB = 0x19,
            SNDLVL_30dB = 0x1E,
            SNDLVL_35dB = 0x23,
            SNDLVL_40dB = 0x28,
            SNDLVL_45dB = 0x2D,
            SNDLVL_50dB = 0x32,
            SNDLVL_55dB = 0x37,
            SNDLVL_IDLE = 0x3C,
            SNDLVL_60dB = 0x3C,
            SNDLVL_65dB = 0x41,
            SNDLVL_STATIC = 0x42,
            SNDLVL_70dB = 0x46,
            SNDLVL_NORM = 0x4B,
            SNDLVL_75dB = 0x4B,
            SNDLVL_80dB = 0x50,
            SNDLVL_TALKING = 0x50,
            SNDLVL_85dB = 0x55,
            SNDLVL_90dB = 0x5A,
            SNDLVL_95dB = 0x5F,
            SNDLVL_100dB = 0x64,
            SNDLVL_105dB = 0x69,
            SNDLVL_110dB = 0x6E,
            SNDLVL_120dB = 0x78,
            SNDLVL_130dB = 0x82,
            SNDLVL_GUNFIRE = 0x8C,
            SNDLVL_140dB = 0x8C,
            SNDLVL_150dB = 0x96,
            SNDLVL_180dB = 0xB4
        }
        // Alignment: 4
        // Members count: 6
        public enum ActionType_t : uint {
            SOS_ACTION_NONE = 0x0,
            SOS_ACTION_LIMITER = 0x1,
            SOS_ACTION_TIME_LIMIT = 0x2,
            SOS_ACTION_TIME_BLOCK_LIMITER = 0x3,
            SOS_ACTION_SET_SOUNDEVENT_PARAM = 0x4,
            SOS_ACTION_SOUNDEVENT_CLUSTER = 0x5
        }
        // Alignment: 4
        // Members count: 3
        public enum SosActionStopType_t : uint {
            SOS_STOPTYPE_NONE = 0x0,
            SOS_STOPTYPE_TIME = 0x1,
            SOS_STOPTYPE_OPVAR = 0x2
        }
        // Alignment: 4
        // Members count: 2
        public enum SosActionSortType_t : uint {
            SOS_SORTTYPE_HIGHEST = 0x0,
            SOS_SORTTYPE_LOWEST = 0x1
        }
        // Alignment: 4
        // Members count: 2
        public enum SosGroupType_t : uint {
            SOS_GROUPTYPE_DYNAMIC = 0x0,
            SOS_GROUPTYPE_STATIC = 0x1
        }
        // Alignment: 4
        // Members count: 6
        public enum SosEditItemType_t : uint {
            SOS_EDIT_ITEM_TYPE_SOUNDEVENTS = 0x0,
            SOS_EDIT_ITEM_TYPE_SOUNDEVENT = 0x1,
            SOS_EDIT_ITEM_TYPE_LIBRARYSTACKS = 0x2,
            SOS_EDIT_ITEM_TYPE_STACK = 0x3,
            SOS_EDIT_ITEM_TYPE_OPERATOR = 0x4,
            SOS_EDIT_ITEM_TYPE_FIELD = 0x5
        }
        // Alignment: 2
        // Members count: 10
        public enum VMixFilterType_t : ushort {
            FILTER_UNKNOWN = 0xFFFFFFFFFFFFFFFF,
            FILTER_LOWPASS = 0x0,
            FILTER_HIGHPASS = 0x1,
            FILTER_BANDPASS = 0x2,
            FILTER_NOTCH = 0x3,
            FILTER_PEAKING_EQ = 0x4,
            FILTER_LOW_SHELF = 0x5,
            FILTER_HIGH_SHELF = 0x6,
            FILTER_ALLPASS = 0x7,
            FILTER_PASSTHROUGH = 0x8
        }
        // Alignment: 1
        // Members count: 9
        public enum VMixFilterSlope_t : byte {
            FILTER_SLOPE_1POLE_6dB = 0x0,
            FILTER_SLOPE_1POLE_12dB = 0x1,
            FILTER_SLOPE_1POLE_18dB = 0x2,
            FILTER_SLOPE_1POLE_24dB = 0x3,
            FILTER_SLOPE_12dB = 0x4,
            FILTER_SLOPE_24dB = 0x5,
            FILTER_SLOPE_36dB = 0x6,
            FILTER_SLOPE_48dB = 0x7,
            FILTER_SLOPE_MAX = 0x7
        }
        // Alignment: 2
        // Members count: 30
        public enum VMixProcessorType_t : ushort {
            VPROCESSOR_UNKNOWN = 0x0,
            VPROCESSOR_STEAMAUDIO_REVERB = 0x1,
            VPROCESSOR_RT_PITCH = 0x2,
            VPROCESSOR_STEAMAUDIO_HRTF = 0x3,
            VPROCESSOR_DYNAMICS = 0x4,
            VPROCESSOR_PRESETDSP = 0x5,
            VPROCESSOR_DELAY = 0x6,
            VPROCESSOR_MOD_DELAY = 0x7,
            VPROCESSOR_DIFFUSOR = 0x8,
            VPROCESSOR_BOXVERB = 0x9,
            VPROCESSOR_FREEVERB = 0xA,
            VPROCESSOR_PLATEVERB = 0xB,
            VPROCESSOR_FULLWAVE_INTEGRATOR = 0xC,
            VPROCESSOR_FILTER = 0xD,
            VPROCESSOR_STEAMAUDIO_PATHING = 0xE,
            VPROCESSOR_EQ8 = 0xF,
            VPROCESSOR_ENVELOPE = 0x10,
            VPROCESSOR_VOCODER = 0x11,
            VPROCESSOR_CONVOLUTION = 0x12,
            VPROCESSOR_DYNAMICS_3BAND = 0x13,
            VPROCESSOR_DYNAMICS_COMPRESSOR = 0x14,
            VPROCESSOR_SHAPER = 0x15,
            VPROCESSOR_PANNER = 0x16,
            VPROCESSOR_UTILITY = 0x17,
            VPROCESSOR_AUTOFILTER = 0x18,
            VPROCESSOR_OSC = 0x19,
            VPROCESSOR_STEREODELAY = 0x1A,
            VPROCESSOR_EFFECT_CHAIN = 0x1B,
            VPROCESSOR_SUBGRAPH_SWITCH = 0x1C,
            VPROCESSOR_STEAMAUDIO_DIRECT = 0x1D
        }
        // Alignment: 4
        // Members count: 5
        public enum VMixLFOShape_t : uint {
            LFO_SHAPE_SINE = 0x0,
            LFO_SHAPE_SQUARE = 0x1,
            LFO_SHAPE_TRI = 0x2,
            LFO_SHAPE_SAW = 0x3,
            LFO_SHAPE_NOISE = 0x4
        }
        // Alignment: 4
        // Members count: 2
        public enum VMixPannerType_t : uint {
            PANNER_TYPE_LINEAR = 0x0,
            PANNER_TYPE_EQUAL_POWER = 0x1
        }
        // Alignment: 4
        // Members count: 3
        public enum VMixSubgraphSwitchInterpolationType_t : uint {
            SUBGRAPH_INTERPOLATION_TEMPORAL_CROSSFADE = 0x0,
            SUBGRAPH_INTERPOLATION_TEMPORAL_FADE_OUT = 0x1,
            SUBGRAPH_INTERPOLATION_KEEP_LAST_SUBGRAPH_RUNNING = 0x2
        }
        // Alignment: 4
        // Members count: 6
        public enum VMixChannelOperation_t : uint {
            VMIX_CHAN_STEREO = 0x0,
            VMIX_CHAN_LEFT = 0x1,
            VMIX_CHAN_RIGHT = 0x2,
            VMIX_CHAN_SWAP = 0x3,
            VMIX_CHAN_MONO = 0x4,
            VMIX_CHAN_MID_SIDE = 0x5
        }
        // Parent: None
        // Fields count: 3
        public static class CSosGroupActionSchema {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_actionType = 0x10; // ActionType_t
            public const nint m_actionInstanceType = 0x14; // ActionType_t
        }
        // Parent: CSosGroupActionSchema
        // Fields count: 3
        public static class CSosGroupActionLimitSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_nStopType = 0x1C; // SosActionStopType_t
            public const nint m_nSortType = 0x20; // SosActionSortType_t
        }
        // Parent: CSosGroupActionSchema
        // Fields count: 1
        public static class CSosGroupActionTimeLimitSchema {
            public const nint m_flMaxDuration = 0x18; // float32
        }
        // Parent: CSosGroupActionSchema
        // Fields count: 2
        public static class CSosGroupActionTimeBlockLimitSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_flMaxDuration = 0x1C; // float32
        }
        // Parent: CSosGroupActionSchema
        // Fields count: 5
        public static class CSosGroupActionSetSoundeventParameterSchema {
            public const nint m_nMaxCount = 0x18; // int32
            public const nint m_flMinValue = 0x1C; // float32
            public const nint m_flMaxValue = 0x20; // float32
            public const nint m_opvarName = 0x28; // CUtlString
            public const nint m_nSortType = 0x30; // SosActionSortType_t
        }
        // Parent: CSosGroupActionSchema
        // Fields count: 7
        public static class CSosGroupActionSoundeventClusterSchema {
            public const nint m_nMinNearby = 0x18; // int32
            public const nint m_flClusterEpsilon = 0x1C; // float32
            public const nint m_shouldPlayOpvar = 0x20; // CUtlString
            public const nint m_shouldPlayClusterChild = 0x28; // CUtlString
            public const nint m_clusterSizeOpvar = 0x30; // CUtlString
            public const nint m_groupBoundingBoxMinsOpvar = 0x38; // CUtlString
            public const nint m_groupBoundingBoxMaxsOpvar = 0x40; // CUtlString
        }
        // Parent: None
        // Fields count: 4
        public static class CSosGroupBranchPattern {
            public const nint m_bMatchEventName = 0x8; // bool
            public const nint m_bMatchEventSubString = 0x9; // bool
            public const nint m_bMatchEntIndex = 0xA; // bool
            public const nint m_bMatchOpvar = 0xB; // bool
        }
        // Parent: CSosGroupBranchPattern
        // Fields count: 4
        public static class CSosGroupMatchPattern {
            public const nint m_matchSoundEventName = 0x10; // CUtlString
            public const nint m_matchSoundEventSubString = 0x18; // CUtlString
            public const nint m_flEntIndex = 0x20; // float32
            public const nint m_flOpvar = 0x24; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class CSosSoundEventGroupSchema {
            public const nint m_name = 0x0; // CUtlString
            public const nint m_nType = 0x8; // SosGroupType_t
            public const nint m_bIsBlocking = 0xC; // bool
            public const nint m_nBlockMaxCount = 0x10; // int32
            public const nint m_bInvertMatch = 0x14; // bool
            public const nint m_matchPattern = 0x18; // CSosGroupMatchPattern
            public const nint m_branchPattern = 0x40; // CSosGroupBranchPattern
            public const nint m_vActions = 0xB0; // CSosGroupActionSchema*[4]
        }
        // Parent: None
        // Fields count: 1
        public static class CSosSoundEventGroupListSchema {
            public const nint m_groupList = 0x0; // CUtlVector<CSosSoundEventGroupSchema>
        }
        // Parent: None
        // Fields count: 5
        public static class SosEditItemInfo_t {
            public const nint itemType = 0x0; // SosEditItemType_t
            public const nint itemName = 0x8; // CUtlString
            public const nint itemTypeName = 0x10; // CUtlString
            public const nint itemKVString = 0x20; // CUtlString
            public const nint itemPos = 0x28; // Vector2D
        }
        // Parent: None
        // Fields count: 1
        public static class SelectedEditItemInfo_t {
            public const nint m_EditItems = 0x0; // CUtlVector<SosEditItemInfo_t>
        }
        // Parent: None
        // Fields count: 1
        public static class CSoundEventMetaData {
            public const nint m_soundEventVMix = 0x0; // CStrongHandle<InfoForResourceTypeCVMixListResource>
        }
        // Parent: None
        // Fields count: 6
        public static class CDSPMixgroupModifier {
            public const nint m_mixgroup = 0x0; // CUtlString
            public const nint m_flModifier = 0x8; // float32
            public const nint m_flModifierMin = 0xC; // float32
            public const nint m_flSourceModifier = 0x10; // float32
            public const nint m_flSourceModifierMin = 0x14; // float32
            public const nint m_flListenerReverbModifierWhenSourceReverbIsActive = 0x18; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class CDspPresetModifierList {
            public const nint m_dspName = 0x0; // CUtlString
            public const nint m_modifiers = 0x8; // CUtlVector<CDSPMixgroupModifier>
        }
        // Parent: None
        // Fields count: 1
        public static class CDSPPresetMixgroupModifierTable {
            public const nint m_table = 0x0; // CUtlVector<CDspPresetModifierList>
        }
        // Parent: None
        // Fields count: 1
        public static class CVoiceContainerBase {
            public const nint m_curves = 0x20; // CUtlDict<CPiecewiseCurve,F(size=1)>
        }
        // Parent: CVoiceContainerBase
        // Fields count: 0
        public static class CVoiceContainerDefault {
        }
        // Parent: CVoiceContainerBase
        // Fields count: 1
        public static class CVoiceContainerWavFileReader {
            public const nint m_wavFilePath = 0x60; // CUtlString
        }
        // Parent: CVoiceContainerWavFileReader
        // Fields count: 1
        public static class CVoiceContainerTestConstant {
            public const nint m_flTestConstantParam = 0x68; // bool
        }
        // Parent: CVoiceContainerBase
        // Fields count: 2
        public static class CVoiceContainerTestNestedDynamic {
            public const nint m_SoundToPlay = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_flTestConstantParam = 0x68; // float32
        }
        // Parent: CVoiceContainerBase
        // Fields count: 2
        public static class CVoiceContainerDecayingSineWave {
            public const nint m_flFrequency = 0x60; // float32
            public const nint m_flDecayTime = 0x64; // float32
        }
        // Parent: CVoiceContainerDecayingSineWave
        // Fields count: 1
        public static class CVoiceContainerAmpedDecayingSineWave {
            public const nint m_flGainAmount = 0x68; // float32
        }
        // Parent: CVoiceContainerBase
        // Fields count: 3
        public static class CVoiceContainerRealtimeFMSineWave {
            public const nint m_flCarrierFrequency = 0x60; // float32
            public const nint m_flModulatorFrequency = 0x64; // float32
            public const nint m_flModulatorAmount = 0x68; // float32
        }
        // Parent: CVoiceContainerBase
        // Fields count: 3
        public static class CVoiceContainerBlend {
            public const nint m_hSoundOne = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_hSoundTwo = 0x68; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_flBlendAmount = 0x70; // float32
        }
        // Parent: CVoiceContainerBase
        // Fields count: 4
        public static class CVoiceContainerEngineSound {
            public const nint m_SoundToPlay = 0x60; // CStrongHandle<InfoForResourceTypeCVoiceContainerBase>
            public const nint m_flTestConstantParam = 0x68; // float32
            public const nint m_flTestSoundEventBoundParam = 0x6C; // float32
            public const nint m_flEngineRPM = 0x70; // float32
        }
        // Parent: CVoiceContainerWavFileReader
        // Fields count: 1
        public static class CVoiceContainerEnvelopeAnalyzer {
            public const nint m_envBuffer = 0x68; // CUtlVector<float32>
        }
        // Parent: CVoiceContainerBase
        // Fields count: 7
        public static class CVoiceContainerRandomSampler {
            public const nint m_flLoudAmplitude = 0x60; // float32
            public const nint m_flLoudAmplitudeJitter = 0x64; // float32
            public const nint m_flSoftAmplitude = 0x68; // float32
            public const nint m_flSoftAmplitudeJitter = 0x6C; // float32
            public const nint m_flLoudTimeJitter = 0x70; // float32
            public const nint m_flSoftTimeJitter = 0x74; // float32
            public const nint m_grainResources = 0x78; // CUtlVector<CStrongHandle<InfoForResourceTypeCVoiceContainerBase>>
        }
        // Parent: None
        // Fields count: 6
        public static class VMixFilterDesc_t {
            public const nint m_nFilterType = 0x0; // VMixFilterType_t
            public const nint m_nFilterSlope = 0x2; // VMixFilterSlope_t
            public const nint m_bEnabled = 0x3; // bool
            public const nint m_fldbGain = 0x4; // float32
            public const nint m_flCutoffFreq = 0x8; // float32
            public const nint m_flQ = 0xC; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class VMixEQ8Desc_t {
            public const nint m_stages = 0x0; // VMixFilterDesc_t[8]
        }
        // Parent: None
        // Fields count: 7
        public static class VMixDelayDesc_t {
            public const nint m_feedbackFilter = 0x0; // VMixFilterDesc_t
            public const nint m_bEnableFilter = 0x10; // bool
            public const nint m_flDelay = 0x14; // float32
            public const nint m_flDirectGain = 0x18; // float32
            public const nint m_flDelayGain = 0x1C; // float32
            public const nint m_flFeedbackGain = 0x20; // float32
            public const nint m_flWidth = 0x24; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class VMixPannerDesc_t {
            public const nint m_type = 0x0; // VMixPannerType_t
            public const nint m_flStrength = 0x4; // float32
        }
        // Parent: None
        // Fields count: 9
        public static class VMixModDelayDesc_t {
            public const nint m_feedbackFilter = 0x0; // VMixFilterDesc_t
            public const nint m_bPhaseInvert = 0x10; // bool
            public const nint m_flGlideTime = 0x14; // float32
            public const nint m_flDelay = 0x18; // float32
            public const nint m_flOutputGain = 0x1C; // float32
            public const nint m_flFeedbackGain = 0x20; // float32
            public const nint m_flModRate = 0x24; // float32
            public const nint m_flModDepth = 0x28; // float32
            public const nint m_bApplyAntialiasing = 0x2C; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class VMixDiffusorDesc_t {
            public const nint m_flSize = 0x0; // float32
            public const nint m_flComplexity = 0x4; // float32
            public const nint m_flFeedback = 0x8; // float32
            public const nint m_flOutputGain = 0xC; // float32
        }
        // Parent: None
        // Fields count: 17
        public static class VMixBoxverbDesc_t {
            public const nint m_flSizeMax = 0x0; // float32
            public const nint m_flSizeMin = 0x4; // float32
            public const nint m_flComplexity = 0x8; // float32
            public const nint m_flDiffusion = 0xC; // float32
            public const nint m_flModDepth = 0x10; // float32
            public const nint m_flModRate = 0x14; // float32
            public const nint m_bParallel = 0x18; // bool
            public const nint m_filterType = 0x1C; // VMixFilterDesc_t
            public const nint m_flWidth = 0x2C; // float32
            public const nint m_flHeight = 0x30; // float32
            public const nint m_flDepth = 0x34; // float32
            public const nint m_flFeedbackScale = 0x38; // float32
            public const nint m_flFeedbackWidth = 0x3C; // float32
            public const nint m_flFeedbackHeight = 0x40; // float32
            public const nint m_flFeedbackDepth = 0x44; // float32
            public const nint m_flOutputGain = 0x48; // float32
            public const nint m_flTaps = 0x4C; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class VMixFreeverbDesc_t {
            public const nint m_flRoomSize = 0x0; // float32
            public const nint m_flDamp = 0x4; // float32
            public const nint m_flWidth = 0x8; // float32
            public const nint m_flLateReflections = 0xC; // float32
        }
        // Parent: None
        // Fields count: 7
        public static class VMixPlateverbDesc_t {
            public const nint m_flPrefilter = 0x0; // float32
            public const nint m_flInputDiffusion1 = 0x4; // float32
            public const nint m_flInputDiffusion2 = 0x8; // float32
            public const nint m_flDecay = 0xC; // float32
            public const nint m_flDamp = 0x10; // float32
            public const nint m_flFeedbackDiffusion1 = 0x14; // float32
            public const nint m_flFeedbackDiffusion2 = 0x18; // float32
        }
        // Parent: None
        // Fields count: 12
        public static class VMixDynamicsDesc_t {
            public const nint m_fldbGain = 0x0; // float32
            public const nint m_fldbNoiseGateThreshold = 0x4; // float32
            public const nint m_fldbCompressionThreshold = 0x8; // float32
            public const nint m_fldbLimiterThreshold = 0xC; // float32
            public const nint m_fldbKneeWidth = 0x10; // float32
            public const nint m_flRatio = 0x14; // float32
            public const nint m_flLimiterRatio = 0x18; // float32
            public const nint m_flAttackTimeMS = 0x1C; // float32
            public const nint m_flReleaseTimeMS = 0x20; // float32
            public const nint m_flRMSTimeMS = 0x24; // float32
            public const nint m_flWetMix = 0x28; // float32
            public const nint m_bPeakMode = 0x2C; // bool
        }
        // Parent: None
        // Fields count: 9
        public static class VMixDynamicsCompressorDesc_t {
            public const nint m_fldbOutputGain = 0x0; // float32
            public const nint m_fldbCompressionThreshold = 0x4; // float32
            public const nint m_fldbKneeWidth = 0x8; // float32
            public const nint m_flCompressionRatio = 0xC; // float32
            public const nint m_flAttackTimeMS = 0x10; // float32
            public const nint m_flReleaseTimeMS = 0x14; // float32
            public const nint m_flRMSTimeMS = 0x18; // float32
            public const nint m_flWetMix = 0x1C; // float32
            public const nint m_bPeakMode = 0x20; // bool
        }
        // Parent: None
        // Fields count: 10
        public static class VMixDynamicsBand_t {
            public const nint m_fldbGainInput = 0x0; // float32
            public const nint m_fldbGainOutput = 0x4; // float32
            public const nint m_fldbThresholdBelow = 0x8; // float32
            public const nint m_fldbThresholdAbove = 0xC; // float32
            public const nint m_flRatioBelow = 0x10; // float32
            public const nint m_flRatioAbove = 0x14; // float32
            public const nint m_flAttackTimeMS = 0x18; // float32
            public const nint m_flReleaseTimeMS = 0x1C; // float32
            public const nint m_bEnable = 0x20; // bool
            public const nint m_bSolo = 0x21; // bool
        }
        // Parent: None
        // Fields count: 10
        public static class VMixDynamics3BandDesc_t {
            public const nint m_fldbGainOutput = 0x0; // float32
            public const nint m_flRMSTimeMS = 0x4; // float32
            public const nint m_fldbKneeWidth = 0x8; // float32
            public const nint m_flDepth = 0xC; // float32
            public const nint m_flWetMix = 0x10; // float32
            public const nint m_flTimeScale = 0x14; // float32
            public const nint m_flLowCutoffFreq = 0x18; // float32
            public const nint m_flHighCutoffFreq = 0x1C; // float32
            public const nint m_bPeakMode = 0x20; // bool
            public const nint m_bandDesc = 0x24; // VMixDynamicsBand_t[3]
        }
        // Parent: None
        // Fields count: 3
        public static class VMixEnvelopeDesc_t {
            public const nint m_flAttackTimeMS = 0x0; // float32
            public const nint m_flHoldTimeMS = 0x4; // float32
            public const nint m_flReleaseTimeMS = 0x8; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class VMixPitchShiftDesc_t {
            public const nint m_nGrainSampleCount = 0x0; // int32
            public const nint m_flPitchShift = 0x4; // float32
            public const nint m_nQuality = 0x8; // int32
            public const nint m_nProcType = 0xC; // int32
        }
        // Parent: None
        // Fields count: 8
        public static class VMixConvolutionDesc_t {
            public const nint m_fldbGain = 0x0; // float32
            public const nint m_flPreDelayMS = 0x4; // float32
            public const nint m_flWetMix = 0x8; // float32
            public const nint m_fldbLow = 0xC; // float32
            public const nint m_fldbMid = 0x10; // float32
            public const nint m_fldbHigh = 0x14; // float32
            public const nint m_flLowCutoffFreq = 0x18; // float32
            public const nint m_flHighCutoffFreq = 0x1C; // float32
        }
        // Parent: None
        // Fields count: 10
        public static class VMixVocoderDesc_t {
            public const nint m_nBandCount = 0x0; // int32
            public const nint m_flBandwidth = 0x4; // float32
            public const nint m_fldBModGain = 0x8; // float32
            public const nint m_flFreqRangeStart = 0xC; // float32
            public const nint m_flFreqRangeEnd = 0x10; // float32
            public const nint m_fldBUnvoicedGain = 0x14; // float32
            public const nint m_flAttackTimeMS = 0x18; // float32
            public const nint m_flReleaseTimeMS = 0x1C; // float32
            public const nint m_nDebugBand = 0x20; // int32
            public const nint m_bPeakMode = 0x24; // bool
        }
        // Parent: None
        // Fields count: 5
        public static class VMixShaperDesc_t {
            public const nint m_nShape = 0x0; // int32
            public const nint m_fldbDrive = 0x4; // float32
            public const nint m_fldbOutputGain = 0x8; // float32
            public const nint m_flWetMix = 0xC; // float32
            public const nint m_nOversampleFactor = 0x10; // int32
        }
        // Parent: None
        // Fields count: 6
        public static class VMixUtilityDesc_t {
            public const nint m_nOp = 0x0; // VMixChannelOperation_t
            public const nint m_flInputPan = 0x4; // float32
            public const nint m_flOutputBalance = 0x8; // float32
            public const nint m_fldbOutputGain = 0xC; // float32
            public const nint m_bBassMono = 0x10; // bool
            public const nint m_flBassFreq = 0x14; // float32
        }
        // Parent: None
        // Fields count: 8
        public static class VMixAutoFilterDesc_t {
            public const nint m_flEnvelopeAmount = 0x0; // float32
            public const nint m_flAttackTimeMS = 0x4; // float32
            public const nint m_flReleaseTimeMS = 0x8; // float32
            public const nint m_filter = 0xC; // VMixFilterDesc_t
            public const nint m_flLFOAmount = 0x1C; // float32
            public const nint m_flLFORate = 0x20; // float32
            public const nint m_flPhase = 0x24; // float32
            public const nint m_nLFOShape = 0x28; // VMixLFOShape_t
        }
        // Parent: None
        // Fields count: 3
        public static class VMixOscDesc_t {
            public const nint oscType = 0x0; // VMixLFOShape_t
            public const nint m_freq = 0x4; // float32
            public const nint m_flPhase = 0x8; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class VMixEffectChainDesc_t {
            public const nint m_flCrossfadeTime = 0x0; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class VMixSubgraphSwitchDesc_t {
            public const nint m_interpolationMode = 0x0; // VMixSubgraphSwitchInterpolationType_t
            public const nint m_bOnlyTailsOnFadeOut = 0x4; // bool
            public const nint m_flInterpolationTime = 0x8; // float32
        }
    }
    // Module: vphysics2.dll
    // Classes count: 88
    // Enums count: 2
    public static class Vphysics2 {
        // Alignment: 4
        // Members count: 4
        public enum JointAxis_t : uint {
            JOINT_AXIS_X = 0x0,
            JOINT_AXIS_Y = 0x1,
            JOINT_AXIS_Z = 0x2,
            JOINT_AXIS_COUNT = 0x3
        }
        // Alignment: 4
        // Members count: 3
        public enum JointMotion_t : uint {
            JOINT_MOTION_FREE = 0x0,
            JOINT_MOTION_LOCKED = 0x1,
            JOINT_MOTION_COUNT = 0x2
        }
        // Parent: None
        // Fields count: 5
        public static class constraint_breakableparams_t {
            public const nint strength = 0x0; // float32
            public const nint forceLimit = 0x4; // float32
            public const nint torqueLimit = 0x8; // float32
            public const nint bodyMassScale = 0xC; // float32[2]
            public const nint isActive = 0x14; // bool
        }
        // Parent: None
        // Fields count: 4
        public static class constraint_axislimit_t {
            public const nint flMinRotation = 0x0; // float32
            public const nint flMaxRotation = 0x4; // float32
            public const nint flMotorTargetAngSpeed = 0x8; // float32
            public const nint flMotorMaxTorque = 0xC; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class constraint_hingeparams_t {
            public const nint worldPosition = 0x0; // 
            public const nint worldAxisDirection = 0xC; // 
            public const nint hingeAxis = 0x18; // constraint_axislimit_t
            public const nint constraint = 0x28; // constraint_breakableparams_t
        }
        // Parent: None
        // Fields count: 0
        public static class IPhysicsPlayerController {
        }
        // Parent: None
        // Fields count: 35
        public static class CFeJiggleBone {
            public const nint m_nFlags = 0x0; // uint32
            public const nint m_flLength = 0x4; // float32
            public const nint m_flTipMass = 0x8; // float32
            public const nint m_flYawStiffness = 0xC; // float32
            public const nint m_flYawDamping = 0x10; // float32
            public const nint m_flPitchStiffness = 0x14; // float32
            public const nint m_flPitchDamping = 0x18; // float32
            public const nint m_flAlongStiffness = 0x1C; // float32
            public const nint m_flAlongDamping = 0x20; // float32
            public const nint m_flAngleLimit = 0x24; // float32
            public const nint m_flMinYaw = 0x28; // float32
            public const nint m_flMaxYaw = 0x2C; // float32
            public const nint m_flYawFriction = 0x30; // float32
            public const nint m_flYawBounce = 0x34; // float32
            public const nint m_flMinPitch = 0x38; // float32
            public const nint m_flMaxPitch = 0x3C; // float32
            public const nint m_flPitchFriction = 0x40; // float32
            public const nint m_flPitchBounce = 0x44; // float32
            public const nint m_flBaseMass = 0x48; // float32
            public const nint m_flBaseStiffness = 0x4C; // float32
            public const nint m_flBaseDamping = 0x50; // float32
            public const nint m_flBaseMinLeft = 0x54; // float32
            public const nint m_flBaseMaxLeft = 0x58; // float32
            public const nint m_flBaseLeftFriction = 0x5C; // float32
            public const nint m_flBaseMinUp = 0x60; // float32
            public const nint m_flBaseMaxUp = 0x64; // float32
            public const nint m_flBaseUpFriction = 0x68; // float32
            public const nint m_flBaseMinForward = 0x6C; // float32
            public const nint m_flBaseMaxForward = 0x70; // float32
            public const nint m_flBaseForwardFriction = 0x74; // float32
            public const nint m_flRadius0 = 0x78; // float32
            public const nint m_flRadius1 = 0x7C; // float32
            public const nint m_vPoint0 = 0x80; // 
            public const nint m_vPoint1 = 0x8C; // 
            public const nint m_nCollisionMask = 0x98; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class CFeNamedJiggleBone {
            public const nint m_strParentBone = 0x0; // CUtlString
            public const nint m_transform = 0x10; // CTransform
            public const nint m_nJiggleParent = 0x30; // uint32
            public const nint m_jiggleBone = 0x34; // CFeJiggleBone
        }
        // Parent: None
        // Fields count: 3
        public static class CFeIndexedJiggleBone {
            public const nint m_nNode = 0x0; // uint32
            public const nint m_nJiggleParent = 0x4; // uint32
            public const nint m_jiggleBone = 0x8; // CFeJiggleBone
        }
        // Parent: None
        // Fields count: 100
        public static class PhysFeModelDesc_t {
            public const nint m_CtrlHash = 0x0; // CUtlVector<uint32>
            public const nint m_CtrlName = 0x18; // CUtlVector<CUtlString>
            public const nint m_nStaticNodeFlags = 0x30; // uint32
            public const nint m_nDynamicNodeFlags = 0x34; // uint32
            public const nint m_flLocalForce = 0x38; // float32
            public const nint m_flLocalRotation = 0x3C; // float32
            public const nint m_nNodeCount = 0x40; // uint16
            public const nint m_nStaticNodes = 0x42; // uint16
            public const nint m_nRotLockStaticNodes = 0x44; // uint16
            public const nint m_nFirstPositionDrivenNode = 0x46; // uint16
            public const nint m_nSimdTriCount1 = 0x48; // uint16
            public const nint m_nSimdTriCount2 = 0x4A; // uint16
            public const nint m_nSimdQuadCount1 = 0x4C; // uint16
            public const nint m_nSimdQuadCount2 = 0x4E; // uint16
            public const nint m_nQuadCount1 = 0x50; // uint16
            public const nint m_nQuadCount2 = 0x52; // uint16
            public const nint m_nTreeDepth = 0x54; // uint16
            public const nint m_nNodeBaseJiggleboneDependsCount = 0x56; // uint16
            public const nint m_nRopeCount = 0x58; // uint16
            public const nint m_Ropes = 0x60; // CUtlVector<uint16>
            public const nint m_NodeBases = 0x78; // CUtlVector<FeNodeBase_t>
            public const nint m_SimdNodeBases = 0x90; // CUtlVector<FeSimdNodeBase_t>
            public const nint m_Quads = 0xA8; // CUtlVector<FeQuad_t>
            public const nint m_SimdQuads = 0xC0; // CUtlVector<FeSimdQuad_t>
            public const nint m_SimdTris = 0xD8; // CUtlVector<FeSimdTri_t>
            public const nint m_SimdRods = 0xF0; // CUtlVector<FeSimdRodConstraint_t>
            public const nint m_SimdRodsAnim = 0x108; // CUtlVector<FeSimdRodConstraintAnim_t>
            public const nint m_InitPose = 0x120; // CUtlVector<CTransform>
            public const nint m_Rods = 0x138; // CUtlVector<FeRodConstraint_t>
            public const nint m_Twists = 0x150; // CUtlVector<FeTwistConstraint_t>
            public const nint m_AxialEdges = 0x168; // CUtlVector<FeAxialEdgeBend_t>
            public const nint m_NodeInvMasses = 0x180; // CUtlVector<float32>
            public const nint m_CtrlOffsets = 0x198; // CUtlVector<FeCtrlOffset_t>
            public const nint m_CtrlOsOffsets = 0x1B0; // CUtlVector<FeCtrlOsOffset_t>
            public const nint m_FollowNodes = 0x1C8; // CUtlVector<FeFollowNode_t>
            public const nint m_CollisionPlanes = 0x1E0; // CUtlVector<FeCollisionPlane_t>
            public const nint m_NodeIntegrator = 0x1F8; // CUtlVector<FeNodeIntegrator_t>
            public const nint m_SpringIntegrator = 0x210; // CUtlVector<FeSpringIntegrator_t>
            public const nint m_SimdSpringIntegrator = 0x228; // CUtlVector<FeSimdSpringIntegrator_t>
            public const nint m_WorldCollisionParams = 0x240; // CUtlVector<FeWorldCollisionParams_t>
            public const nint m_LegacyStretchForce = 0x258; // CUtlVector<float32>
            public const nint m_NodeCollisionRadii = 0x270; // CUtlVector<float32>
            public const nint m_DynNodeFriction = 0x288; // CUtlVector<float32>
            public const nint m_LocalRotation = 0x2A0; // CUtlVector<float32>
            public const nint m_LocalForce = 0x2B8; // CUtlVector<float32>
            public const nint m_TaperedCapsuleStretches = 0x2D0; // CUtlVector<FeTaperedCapsuleStretch_t>
            public const nint m_TaperedCapsuleRigids = 0x2E8; // CUtlVector<FeTaperedCapsuleRigid_t>
            public const nint m_SphereRigids = 0x300; // CUtlVector<FeSphereRigid_t>
            public const nint m_WorldCollisionNodes = 0x318; // CUtlVector<uint16>
            public const nint m_TreeParents = 0x330; // CUtlVector<uint16>
            public const nint m_TreeCollisionMasks = 0x348; // CUtlVector<uint16>
            public const nint m_TreeChildren = 0x360; // CUtlVector<FeTreeChildren_t>
            public const nint m_FreeNodes = 0x378; // CUtlVector<uint16>
            public const nint m_FitMatrices = 0x390; // CUtlVector<FeFitMatrix_t>
            public const nint m_FitWeights = 0x3A8; // CUtlVector<FeFitWeight_t>
            public const nint m_ReverseOffsets = 0x3C0; // CUtlVector<FeNodeReverseOffset_t>
            public const nint m_AnimStrayRadii = 0x3D8; // CUtlVector<FeAnimStrayRadius_t>
            public const nint m_SimdAnimStrayRadii = 0x3F0; // CUtlVector<FeSimdAnimStrayRadius_t>
            public const nint m_KelagerBends = 0x408; // CUtlVector<FeKelagerBend2_t>
            public const nint m_CtrlSoftOffsets = 0x420; // CUtlVector<FeCtrlSoftOffset_t>
            public const nint m_JiggleBones = 0x438; // CUtlVector<CFeIndexedJiggleBone>
            public const nint m_SourceElems = 0x450; // CUtlVector<uint16>
            public const nint m_GoalDampedSpringIntegrators = 0x468; // CUtlVector<uint32>
            public const nint m_Tris = 0x480; // CUtlVector<FeTri_t>
            public const nint m_nTriCount1 = 0x498; // uint16
            public const nint m_nTriCount2 = 0x49A; // uint16
            public const nint m_nReservedUint8 = 0x49C; // uint8
            public const nint m_nExtraPressureIterations = 0x49D; // uint8
            public const nint m_nExtraGoalIterations = 0x49E; // uint8
            public const nint m_nExtraIterations = 0x49F; // uint8
            public const nint m_BoxRigids = 0x4A0; // CUtlVector<FeBoxRigid_t>
            public const nint m_DynNodeVertexSet = 0x4B8; // CUtlVector<uint8>
            public const nint m_VertexSetNames = 0x4D0; // CUtlVector<uint32>
            public const nint m_RigidColliderPriorities = 0x4E8; // CUtlVector<FeRigidColliderIndices_t>
            public const nint m_MorphLayers = 0x500; // CUtlVector<FeMorphLayerDepr_t>
            public const nint m_MorphSetData = 0x518; // CUtlVector<uint8>
            public const nint m_VertexMaps = 0x530; // CUtlVector<FeVertexMapDesc_t>
            public const nint m_VertexMapValues = 0x548; // CUtlVector<uint8>
            public const nint m_Effects = 0x560; // CUtlVector<FeEffectDesc_t>
            public const nint m_LockToParent = 0x578; // CUtlVector<FeCtrlOffset_t>
            public const nint m_LockToGoal = 0x590; // CUtlVector<uint16>
            public const nint m_SkelParents = 0x5A8; // CUtlVector<int16>
            public const nint m_DynNodeWindBases = 0x5C0; // CUtlVector<FeNodeWindBase_t>
            public const nint m_flInternalPressure = 0x5D8; // float32
            public const nint m_flDefaultTimeDilation = 0x5DC; // float32
            public const nint m_flWindage = 0x5E0; // float32
            public const nint m_flWindDrag = 0x5E4; // float32
            public const nint m_flDefaultSurfaceStretch = 0x5E8; // float32
            public const nint m_flDefaultThreadStretch = 0x5EC; // float32
            public const nint m_flDefaultGravityScale = 0x5F0; // float32
            public const nint m_flDefaultVelAirDrag = 0x5F4; // float32
            public const nint m_flDefaultExpAirDrag = 0x5F8; // float32
            public const nint m_flDefaultVelQuadAirDrag = 0x5FC; // float32
            public const nint m_flDefaultExpQuadAirDrag = 0x600; // float32
            public const nint m_flRodVelocitySmoothRate = 0x604; // float32
            public const nint m_flQuadVelocitySmoothRate = 0x608; // float32
            public const nint m_flAddWorldCollisionRadius = 0x60C; // float32
            public const nint m_flDefaultVolumetricSolveAmount = 0x610; // float32
            public const nint m_nRodVelocitySmoothIterations = 0x614; // uint16
            public const nint m_nQuadVelocitySmoothIterations = 0x616; // uint16
        }
        // Parent: None
        // Fields count: 2
        public static class FourVectors2D {
            public const nint x = 0x0; // fltx4
            public const nint y = 0x10; // fltx4
        }
        // Parent: None
        // Fields count: 3
        public static class FeEdgeDesc_t {
            public const nint nEdge = 0x0; // uint16[2]
            public const nint nSide = 0x4; // uint16[2][2]
            public const nint nVirtElem = 0xC; // uint16[2]
        }
        // Parent: None
        // Fields count: 12
        public static class OldFeEdge_t {
            public const nint m_flK = 0x0; // float32[3]
            public const nint invA = 0xC; // float32
            public const nint t = 0x10; // float32
            public const nint flThetaRelaxed = 0x14; // float32
            public const nint flThetaFactor = 0x18; // float32
            public const nint c01 = 0x1C; // float32
            public const nint c02 = 0x20; // float32
            public const nint c03 = 0x24; // float32
            public const nint c04 = 0x28; // float32
            public const nint flAxialModelDist = 0x2C; // float32
            public const nint flAxialModelWeights = 0x30; // float32[4]
            public const nint m_nNode = 0x40; // uint16[4]
        }
        // Parent: None
        // Fields count: 2
        public static class FeWeightedNode_t {
            public const nint nNode = 0x0; // uint16
            public const nint nWeight = 0x2; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class FeKelagerBend2_t {
            public const nint flWeight = 0x0; // float32[3]
            public const nint flHeight0 = 0xC; // float32
            public const nint nNode = 0x10; // uint16[3]
            public const nint nReserved = 0x16; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class FeStiffHingeBuild_t {
            public const nint flMaxAngle = 0x0; // float32
            public const nint flStrength = 0x4; // float32
            public const nint flMotionBias = 0x8; // float32[3]
            public const nint nNode = 0x14; // uint16[3]
        }
        // Parent: None
        // Fields count: 5
        public static class FeTri_t {
            public const nint nNode = 0x0; // uint16[3]
            public const nint w1 = 0x8; // float32
            public const nint w2 = 0xC; // float32
            public const nint v1x = 0x10; // float32
            public const nint v2 = 0x14; // Vector2D
        }
        // Parent: None
        // Fields count: 5
        public static class FeSimdTri_t {
            public const nint nNode = 0x0; // uint32[4][3]
            public const nint w1 = 0x30; // fltx4
            public const nint w2 = 0x40; // fltx4
            public const nint v1x = 0x50; // fltx4
            public const nint v2 = 0x60; // FourVectors2D
        }
        // Parent: None
        // Fields count: 3
        public static class FeQuad_t {
            public const nint nNode = 0x0; // uint16[4]
            public const nint flSlack = 0x8; // float32
            public const nint vShape = 0xC; // Vector4D[4]
        }
        // Parent: None
        // Fields count: 7
        public static class FeNodeBase_t {
            public const nint nNode = 0x0; // uint16
            public const nint nDummy = 0x2; // uint16[3]
            public const nint nNodeX0 = 0x8; // uint16
            public const nint nNodeX1 = 0xA; // uint16
            public const nint nNodeY0 = 0xC; // uint16
            public const nint nNodeY1 = 0xE; // uint16
            public const nint qAdjust = 0x10; // QuaternionStorage
        }
        // Parent: None
        // Fields count: 4
        public static class FeNodeWindBase_t {
            public const nint nNodeX0 = 0x0; // uint16
            public const nint nNodeX1 = 0x2; // uint16
            public const nint nNodeY0 = 0x4; // uint16
            public const nint nNodeY1 = 0x6; // uint16
        }
        // Parent: None
        // Fields count: 3
        public static class FeNodeReverseOffset_t {
            public const nint vOffset = 0x0; // 
            public const nint nBoneCtrl = 0xC; // uint16
            public const nint nTargetNode = 0xE; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class FeSimdQuad_t {
            public const nint nNode = 0x0; // uint16[4][4]
            public const nint f4Slack = 0x20; // fltx4
            public const nint vShape = 0x30; // FourVectors[4]
            public const nint f4Weights = 0xF0; // fltx4[4]
        }
        // Parent: None
        // Fields count: 5
        public static class FeAxialEdgeBend_t {
            public const nint te = 0x0; // float32
            public const nint tv = 0x4; // float32
            public const nint flDist = 0x8; // float32
            public const nint flWeight = 0xC; // float32[4]
            public const nint nNode = 0x1C; // uint16[6]
        }
        // Parent: None
        // Fields count: 3
        public static class FeBandBendLimit_t {
            public const nint flDistMin = 0x0; // float32
            public const nint flDistMax = 0x4; // float32
            public const nint nNode = 0x8; // uint16[6]
        }
        // Parent: None
        // Fields count: 5
        public static class FeRodConstraint_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flMaxDist = 0x4; // float32
            public const nint flMinDist = 0x8; // float32
            public const nint flWeight0 = 0xC; // float32
            public const nint flRelaxationFactor = 0x10; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class FeTwistConstraint_t {
            public const nint nNodeOrient = 0x0; // uint16
            public const nint nNodeEnd = 0x2; // uint16
            public const nint flTwistRelax = 0x4; // float32
            public const nint flSwingRelax = 0x8; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class FeSimdRodConstraint_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint f4MaxDist = 0x10; // fltx4
            public const nint f4MinDist = 0x20; // fltx4
            public const nint f4Weight0 = 0x30; // fltx4
            public const nint f4RelaxationFactor = 0x40; // fltx4
        }
        // Parent: None
        // Fields count: 3
        public static class FeSimdRodConstraintAnim_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint f4Weight0 = 0x10; // fltx4
            public const nint f4RelaxationFactor = 0x20; // fltx4
        }
        // Parent: None
        // Fields count: 3
        public static class FeAnimStrayRadius_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flMaxDist = 0x4; // float32
            public const nint flRelaxationFactor = 0x8; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class FeSimdAnimStrayRadius_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint flMaxDist = 0x10; // fltx4
            public const nint flRelaxationFactor = 0x20; // fltx4
        }
        // Parent: None
        // Fields count: 7
        public static class FeSimdNodeBase_t {
            public const nint nNode = 0x0; // uint16[4]
            public const nint nNodeX0 = 0x8; // uint16[4]
            public const nint nNodeX1 = 0x10; // uint16[4]
            public const nint nNodeY0 = 0x18; // uint16[4]
            public const nint nNodeY1 = 0x20; // uint16[4]
            public const nint nDummy = 0x28; // uint16[4]
            public const nint qAdjust = 0x30; // FourQuaternions
        }
        // Parent: None
        // Fields count: 4
        public static class FeNodeIntegrator_t {
            public const nint flPointDamping = 0x0; // float32
            public const nint flAnimationForceAttraction = 0x4; // float32
            public const nint flAnimationVertexAttraction = 0x8; // float32
            public const nint flGravity = 0xC; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class FeSpringIntegrator_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint flSpringRestLength = 0x4; // float32
            public const nint flSpringConstant = 0x8; // float32
            public const nint flSpringDamping = 0xC; // float32
            public const nint flNodeWeight0 = 0x10; // float32
        }
        // Parent: None
        // Fields count: 5
        public static class FeSimdSpringIntegrator_t {
            public const nint nNode = 0x0; // uint16[4][2]
            public const nint flSpringRestLength = 0x10; // fltx4
            public const nint flSpringConstant = 0x20; // fltx4
            public const nint flSpringDamping = 0x30; // fltx4
            public const nint flNodeWeight0 = 0x40; // fltx4
        }
        // Parent: None
        // Fields count: 3
        public static class FeCtrlOffset_t {
            public const nint vOffset = 0x0; // 
            public const nint nCtrlParent = 0xC; // uint16
            public const nint nCtrlChild = 0xE; // uint16
        }
        // Parent: None
        // Fields count: 2
        public static class FeSoftParent_t {
            public const nint nParent = 0x0; // int32
            public const nint flAlpha = 0x4; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class FeCtrlSoftOffset_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nCtrlChild = 0x2; // uint16
            public const nint vOffset = 0x4; // 
            public const nint flAlpha = 0x10; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class FeCtrlOsOffset_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nCtrlChild = 0x2; // uint16
        }
        // Parent: None
        // Fields count: 3
        public static class FeFollowNode_t {
            public const nint nParentNode = 0x0; // uint16
            public const nint nChildNode = 0x2; // uint16
            public const nint flWeight = 0x4; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class FeCollisionPlane_t {
            public const nint nCtrlParent = 0x0; // uint16
            public const nint nChildNode = 0x2; // uint16
            public const nint m_Plane = 0x4; // RnPlane_t
            public const nint flStrength = 0x14; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class FeWorldCollisionParams_t {
            public const nint flWorldFriction = 0x0; // float32
            public const nint flGroundFriction = 0x4; // float32
            public const nint nListBegin = 0x8; // uint16
            public const nint nListEnd = 0xA; // uint16
        }
        // Parent: None
        // Fields count: 1
        public static class FeTreeChildren_t {
            public const nint nChild = 0x0; // uint16[2]
        }
        // Parent: None
        // Fields count: 5
        public static class FeTaperedCapsuleRigid_t {
            public const nint vSphere = 0x0; // fltx4[2]
            public const nint nNode = 0x20; // uint16
            public const nint nCollisionMask = 0x22; // uint16
            public const nint nVertexMapIndex = 0x24; // uint16
            public const nint nFlags = 0x26; // uint16
        }
        // Parent: None
        // Fields count: 5
        public static class FeSphereRigid_t {
            public const nint vSphere = 0x0; // fltx4
            public const nint nNode = 0x10; // uint16
            public const nint nCollisionMask = 0x12; // uint16
            public const nint nVertexMapIndex = 0x14; // uint16
            public const nint nFlags = 0x16; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class FeTaperedCapsuleStretch_t {
            public const nint nNode = 0x0; // uint16[2]
            public const nint nCollisionMask = 0x4; // uint16
            public const nint nDummy = 0x6; // uint16
            public const nint flRadius = 0x8; // float32[2]
        }
        // Parent: None
        // Fields count: 6
        public static class FeBoxRigid_t {
            public const nint tmFrame2 = 0x0; // CTransform
            public const nint nNode = 0x20; // uint16
            public const nint nCollisionMask = 0x22; // uint16
            public const nint vSize = 0x24; // 
            public const nint nVertexMapIndex = 0x30; // uint16
            public const nint nFlags = 0x32; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class CovMatrix3 {
            public const nint m_vDiag = 0x0; // 
            public const nint m_flXY = 0xC; // float32
            public const nint m_flXZ = 0x10; // float32
            public const nint m_flYZ = 0x14; // float32
        }
        // Parent: None
        // Fields count: 4
        public static class FourCovMatrices3 {
            public const nint m_vDiag = 0x0; // FourVectors
            public const nint m_flXY = 0x30; // fltx4
            public const nint m_flXZ = 0x40; // fltx4
            public const nint m_flYZ = 0x50; // fltx4
        }
        // Parent: None
        // Fields count: 3
        public static class FeFitWeight_t {
            public const nint flWeight = 0x0; // float32
            public const nint nNode = 0x4; // uint16
            public const nint nDummy = 0x6; // uint16
        }
        // Parent: None
        // Fields count: 3
        public static class FeFitInfluence_t {
            public const nint nVertexNode = 0x0; // uint32
            public const nint flWeight = 0x4; // float32
            public const nint nMatrixNode = 0x8; // uint32
        }
        // Parent: None
        // Fields count: 5
        public static class FeFitMatrix_t {
            public const nint bone = 0x0; // CTransform
            public const nint vCenter = 0x20; // 
            public const nint nEnd = 0x2C; // uint16
            public const nint nNode = 0x2E; // uint16
            public const nint nBeginDynamic = 0x30; // uint16
        }
        // Parent: None
        // Fields count: 4
        public static class FeRigidColliderIndices_t {
            public const nint m_nTaperedCapsuleRigidIndex = 0x0; // uint16
            public const nint m_nSphereRigidIndex = 0x2; // uint16
            public const nint m_nBoxRigidIndex = 0x4; // uint16
            public const nint m_nCollisionPlaneIndex = 0x6; // uint16
        }
        // Parent: FeTaperedCapsuleRigid_t
        // Fields count: 2
        public static class FeBuildTaperedCapsuleRigid_t {
            public const nint m_nPriority = 0x30; // int32
            public const nint m_nVertexMapHash = 0x34; // uint32
        }
        // Parent: FeBoxRigid_t
        // Fields count: 2
        public static class FeBuildBoxRigid_t {
            public const nint m_nPriority = 0x40; // int32
            public const nint m_nVertexMapHash = 0x44; // uint32
        }
        // Parent: FeSphereRigid_t
        // Fields count: 2
        public static class FeBuildSphereRigid_t {
            public const nint m_nPriority = 0x20; // int32
            public const nint m_nVertexMapHash = 0x24; // uint32
        }
        // Parent: None
        // Fields count: 1
        public static class FeSourceEdge_t {
            public const nint nNode = 0x0; // uint16[2]
        }
        // Parent: None
        // Fields count: 4
        public static class FeEffectDesc_t {
            public const nint sName = 0x0; // CUtlString
            public const nint nNameHash = 0x8; // uint32
            public const nint nType = 0xC; // int32
            public const nint m_Params = 0x10; // KeyValues3
        }
        // Parent: None
        // Fields count: 6
        public static class FeVertexMapBuild_t {
            public const nint m_VertexMapName = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Color = 0xC; // Color
            public const nint m_flVolumetricSolveStrength = 0x10; // float32
            public const nint m_nScaleSourceNode = 0x14; // int32
            public const nint m_Weights = 0x18; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 1
        public static class CFeVertexMapBuildArray {
            public const nint m_Array = 0x0; // CUtlVector<FeVertexMapBuild_t*>
        }
        // Parent: None
        // Fields count: 2
        public static class FeProxyVertexMap_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_flWeight = 0x8; // float32
        }
        // Parent: None
        // Fields count: 12
        public static class FeVertexMapDesc_t {
            public const nint sName = 0x0; // CUtlString
            public const nint nNameHash = 0x8; // uint32
            public const nint nColor = 0xC; // uint32
            public const nint nFlags = 0x10; // uint32
            public const nint nVertexBase = 0x14; // uint16
            public const nint nVertexCount = 0x16; // uint16
            public const nint nMapOffset = 0x18; // uint32
            public const nint nNodeListOffset = 0x1C; // uint32
            public const nint vCenterOfMass = 0x20; // 
            public const nint flVolumetricSolveStrength = 0x2C; // float32
            public const nint nScaleSourceNode = 0x30; // int16
            public const nint nNodeListCount = 0x32; // uint16
        }
        // Parent: None
        // Fields count: 8
        public static class FeMorphLayerDepr_t {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Nodes = 0x10; // CUtlVector<uint16>
            public const nint m_InitPos = 0x28; // CUtlVector<Vector>
            public const nint m_Gravity = 0x40; // CUtlVector<float32>
            public const nint m_GoalStrength = 0x58; // CUtlVector<float32>
            public const nint m_GoalDamping = 0x70; // CUtlVector<float32>
            public const nint m_nFlags = 0x88; // uint32
        }
        // Parent: None
        // Fields count: 7
        public static class CFeMorphLayer {
            public const nint m_Name = 0x0; // CUtlString
            public const nint m_nNameHash = 0x8; // uint32
            public const nint m_Nodes = 0x10; // CUtlVector<uint16>
            public const nint m_InitPos = 0x28; // CUtlVector<Vector>
            public const nint m_Gravity = 0x40; // CUtlVector<float32>
            public const nint m_GoalStrength = 0x58; // CUtlVector<float32>
            public const nint m_GoalDamping = 0x70; // CUtlVector<float32>
        }
        // Parent: None
        // Fields count: 1
        public static class Dop26_t {
            public const nint m_flSupport = 0x0; // float32[26]
        }
        // Parent: None
        // Fields count: 2
        public static class RnCapsule_t {
            public const nint m_vCenter = 0x0; // Vector[2]
            public const nint m_flRadius = 0x18; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class RnPlane_t {
            public const nint m_vNormal = 0x0; // 
            public const nint m_flOffset = 0xC; // float32
        }
        // Parent: None
        // Fields count: 1
        public static class RnVertex_t {
            public const nint m_nEdge = 0x0; // uint8
        }
        // Parent: None
        // Fields count: 4
        public static class RnHalfEdge_t {
            public const nint m_nNext = 0x0; // uint8
            public const nint m_nTwin = 0x1; // uint8
            public const nint m_nOrigin = 0x2; // uint8
            public const nint m_nFace = 0x3; // uint8
        }
        // Parent: None
        // Fields count: 1
        public static class RnFace_t {
            public const nint m_nEdge = 0x0; // uint8
        }
        // Parent: None
        // Fields count: 2
        public static class CRegionSVM {
            public const nint m_Planes = 0x0; // CUtlVector<RnPlane_t>
            public const nint m_Nodes = 0x18; // CUtlVector<uint32>
        }
        // Parent: None
        // Fields count: 14
        public static class RnHull_t {
            public const nint m_vCentroid = 0x0; // 
            public const nint m_flMaxAngularRadius = 0xC; // float32
            public const nint m_Bounds = 0x10; // AABB_t
            public const nint m_vOrthographicAreas = 0x28; // 
            public const nint m_MassProperties = 0x34; // matrix3x4_t
            public const nint m_flVolume = 0x64; // float32
            public const nint m_flSurfaceArea = 0x68; // float32
            public const nint m_Vertices = 0x70; // CUtlVector<RnVertex_t>
            public const nint m_VertexPositions = 0x88; // CUtlVector<Vector>
            public const nint m_Edges = 0xA0; // CUtlVector<RnHalfEdge_t>
            public const nint m_Faces = 0xB8; // CUtlVector<RnFace_t>
            public const nint m_FacePlanes = 0xD0; // CUtlVector<RnPlane_t>
            public const nint m_nFlags = 0xE8; // uint32
            public const nint m_pRegionSVM = 0xF0; // CRegionSVM*
        }
        // Parent: None
        // Fields count: 1
        public static class RnTriangle_t {
            public const nint m_nIndex = 0x0; // int32[3]
        }
        // Parent: None
        // Fields count: 1
        public static class RnWing_t {
            public const nint m_nIndex = 0x0; // int32[3]
        }
        // Parent: None
        // Fields count: 4
        public static class RnNode_t {
            public const nint m_vMin = 0x0; // 
            public const nint m_nChildren = 0xC; // uint32
            public const nint m_vMax = 0x10; // 
            public const nint m_nTriangleOffset = 0x1C; // uint32
        }
        // Parent: None
        // Fields count: 10
        public static class RnMesh_t {
            public const nint m_vMin = 0x0; // 
            public const nint m_vMax = 0xC; // 
            public const nint m_Nodes = 0x18; // CUtlVector<RnNode_t>
            public const nint m_Vertices = 0x30; // CUtlVectorSIMDPaddedVector
            public const nint m_Triangles = 0x48; // CUtlVector<RnTriangle_t>
            public const nint m_Wings = 0x60; // CUtlVector<RnWing_t>
            public const nint m_Materials = 0x78; // CUtlVector<uint8>
            public const nint m_vOrthographicAreas = 0x90; // 
            public const nint m_nFlags = 0x9C; // uint32
            public const nint m_nDebugFlags = 0xA0; // uint32
        }
        // Parent: None
        // Fields count: 3
        public static class RnShapeDesc_t {
            public const nint m_nCollisionAttributeIndex = 0x0; // uint32
            public const nint m_nSurfacePropertyIndex = 0x4; // uint32
            public const nint m_UserFriendlyName = 0x8; // CUtlString
        }
        // Parent: RnShapeDesc_t
        // Fields count: 1
        public static class RnSphereDesc_t {
            public const nint m_Sphere = 0x10; // SphereBase_t<float32>
        }
        // Parent: RnShapeDesc_t
        // Fields count: 1
        public static class RnCapsuleDesc_t {
            public const nint m_Capsule = 0x10; // RnCapsule_t
        }
        // Parent: RnShapeDesc_t
        // Fields count: 1
        public static class RnHullDesc_t {
            public const nint m_Hull = 0x10; // RnHull_t
        }
        // Parent: RnShapeDesc_t
        // Fields count: 1
        public static class RnMeshDesc_t {
            public const nint m_Mesh = 0x10; // RnMesh_t
        }
        // Parent: None
        // Fields count: 1
        public static class RnSoftbodyParticle_t {
            public const nint m_flMassInv = 0x0; // float32
        }
        // Parent: None
        // Fields count: 2
        public static class RnSoftbodySpring_t {
            public const nint m_nParticle = 0x0; // uint16[2]
            public const nint m_flLength = 0x4; // float32
        }
        // Parent: None
        // Fields count: 3
        public static class RnSoftbodyCapsule_t {
            public const nint m_vCenter = 0x0; // Vector[2]
            public const nint m_flRadius = 0x18; // float32
            public const nint m_nParticle = 0x1C; // uint16[2]
        }
        // Parent: None
        // Fields count: 8
        public static class RnBlendVertex_t {
            public const nint m_nWeight0 = 0x0; // uint16
            public const nint m_nIndex0 = 0x2; // uint16
            public const nint m_nWeight1 = 0x4; // uint16
            public const nint m_nIndex1 = 0x6; // uint16
            public const nint m_nWeight2 = 0x8; // uint16
            public const nint m_nIndex2 = 0xA; // uint16
            public const nint m_nFlags = 0xC; // uint16
            public const nint m_nTargetIndex = 0xE; // uint16
        }
        // Parent: None
        // Fields count: 6
        public static class CastSphereSATParams_t {
            public const nint m_vRayStart = 0x0; // 
            public const nint m_vRayDelta = 0xC; // 
            public const nint m_flRadius = 0x18; // float32
            public const nint m_flMaxFraction = 0x1C; // float32
            public const nint m_flScale = 0x20; // float32
            public const nint m_pHull = 0x28; // RnHull_t*
        }
        // Parent: None
        // Fields count: 35
        public static class RnBodyDesc_t {
            public const nint m_sDebugName = 0x0; // CUtlString
            public const nint m_vPosition = 0x8; // 
            public const nint m_qOrientation = 0x14; // QuaternionStorage
            public const nint m_vLinearVelocity = 0x24; // 
            public const nint m_vAngularVelocity = 0x30; // 
            public const nint m_vLocalMassCenter = 0x3C; // 
            public const nint m_LocalInertiaInv = 0x48; // Vector[3]
            public const nint m_flMassInv = 0x6C; // float32
            public const nint m_flGameMass = 0x70; // float32
            public const nint m_flInertiaScaleInv = 0x74; // float32
            public const nint m_flLinearDamping = 0x78; // float32
            public const nint m_flAngularDamping = 0x7C; // float32
            public const nint m_flLinearDrag = 0x80; // float32
            public const nint m_flAngularDrag = 0x84; // float32
            public const nint m_flLinearBuoyancyDrag = 0x88; // float32
            public const nint m_flAngularBuoyancyDrag = 0x8C; // float32
            public const nint m_vLastAwakeForceAccum = 0x90; // 
            public const nint m_vLastAwakeTorqueAccum = 0x9C; // 
            public const nint m_flBuoyancyFactor = 0xA8; // float32
            public const nint m_flGravityScale = 0xAC; // float32
            public const nint m_flTimeScale = 0xB0; // float32
            public const nint m_nBodyType = 0xB4; // int32
            public const nint m_nGameIndex = 0xB8; // uint32
            public const nint m_nGameFlags = 0xBC; // uint32
            public const nint m_nMinVelocityIterations = 0xC0; // int8
            public const nint m_nMinPositionIterations = 0xC1; // int8
            public const nint m_nMassPriority = 0xC2; // int8
            public const nint m_bEnabled = 0xC3; // bool
            public const nint m_bSleeping = 0xC4; // bool
            public const nint m_bIsContinuousEnabled = 0xC5; // bool
            public const nint m_bDragEnabled = 0xC6; // bool
            public const nint m_bBuoyancyDragEnabled = 0xC7; // bool
            public const nint m_bGravityDisabled = 0xC8; // bool
            public const nint m_bSpeculativeEnabled = 0xC9; // bool
            public const nint m_bHasShadowController = 0xCA; // bool
        }
        // Parent: None
        // Fields count: 2
        public static class VertexPositionNormal_t {
            public const nint m_vPosition = 0x0; // 
            public const nint m_vNormal = 0xC; // 
        }
        // Parent: None
        // Fields count: 1
        public static class VertexPositionColor_t {
            public const nint m_vPosition = 0x0; // 
        }
        // Parent: RnBodyDesc_t
        // Fields count: 1
        public static class vphysics_save_cphysicsbody_t {
            public const nint m_nOldPointer = 0xD0; // uint64
        }
    }
    // Module: worldrenderer.dll
    // Classes count: 27
    // Enums count: 1
    public static class Worldrenderer {
        // Alignment: 4
        // Members count: 13
        public enum ObjectTypeFlags_t : uint {
            OBJECT_TYPE_NONE = 0x0,
            OBJECT_TYPE_MODEL = 0x8,
            OBJECT_TYPE_BLOCK_LIGHT = 0x10,
            OBJECT_TYPE_NO_SHADOWS = 0x20,
            OBJECT_TYPE_WORLDSPACE_TEXURE_BLEND = 0x40,
            OBJECT_TYPE_DISABLED_IN_LOW_QUALITY = 0x80,
            OBJECT_TYPE_NO_SUN_SHADOWS = 0x100,
            OBJECT_TYPE_RENDER_WITH_DYNAMIC = 0x200,
            OBJECT_TYPE_RENDER_TO_CUBEMAPS = 0x400,
            OBJECT_TYPE_MODEL_HAS_LODS = 0x800,
            OBJECT_TYPE_OVERLAY = 0x2000,
            OBJECT_TYPE_PRECOMPUTED_VISMEMBERS = 0x4000,
            OBJECT_TYPE_STATIC_CUBE_MAP = 0x8000
        }
        // Parent: None
        // Fields count: 7
        public static class EntityIOConnectionData_t {
            public const nint m_outputName = 0x0; // CUtlString
            public const nint m_targetType = 0x8; // uint32
            public const nint m_targetName = 0x10; // CUtlString
            public const nint m_inputName = 0x18; // CUtlString
            public const nint m_overrideParam = 0x20; // CUtlString
            public const nint m_flDelay = 0x28; // float32
            public const nint m_nTimesToFire = 0x2C; // int32
        }
        // Parent: None
        // Fields count: 2
        public static class EntityKeyValueData_t {
            public const nint m_connections = 0x8; // CUtlVector<EntityIOConnectionData_t>
            public const nint m_keyValuesData = 0x20; // CUtlBinaryBlock
        }
        // Parent: None
        // Fields count: 4
        public static class PermEntityLumpData_t {
            public const nint m_name = 0x8; // CUtlString
            public const nint m_hammerUniqueId = 0x10; // CUtlString
            public const nint m_childLumps = 0x18; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
            public const nint m_entityKeyValues = 0x30; // CUtlLeanVector<EntityKeyValueData_t>
        }
        // Parent: None
        // Fields count: 14
        public static class SceneObject_t {
            public const nint m_nObjectID = 0x0; // uint32
            public const nint m_vTransform = 0x4; // Vector4D[3]
            public const nint m_flFadeStartDistance = 0x34; // float32
            public const nint m_flFadeEndDistance = 0x38; // float32
            public const nint m_vTintColor = 0x3C; // Vector4D
            public const nint m_skin = 0x50; // CUtlString
            public const nint m_nObjectTypeFlags = 0x58; // ObjectTypeFlags_t
            public const nint m_vLightingOrigin = 0x5C; // 
            public const nint m_nOverlayRenderOrder = 0x68; // int16
            public const nint m_nLODOverride = 0x6A; // int16
            public const nint m_nCubeMapPrecomputedHandshake = 0x6C; // int32
            public const nint m_nLightProbeVolumePrecomputedHandshake = 0x70; // int32
            public const nint m_renderableModel = 0x78; // CStrongHandle<InfoForResourceTypeCModel>
            public const nint m_renderable = 0x80; // CStrongHandle<InfoForResourceTypeCRenderMesh>
        }
        // Parent: None
        // Fields count: 1
        public static class BaseSceneObjectOverride_t {
            public const nint m_nSceneObjectIndex = 0x0; // uint32
        }
        // Parent: BaseSceneObjectOverride_t
        // Fields count: 4
        public static class ExtraVertexStreamOverride_t {
            public const nint m_nSubSceneObject = 0x4; // uint32
            public const nint m_nDrawCallIndex = 0x8; // uint32
            public const nint m_nAdditionalMeshDrawPrimitiveFlags = 0xC; // MeshDrawPrimitiveFlags_t
            public const nint m_extraBufferBinding = 0x10; // CRenderBufferBinding
        }
        // Parent: BaseSceneObjectOverride_t
        // Fields count: 3
        public static class MaterialOverride_t {
            public const nint m_nSubSceneObject = 0x4; // uint32
            public const nint m_nDrawCallIndex = 0x8; // uint32
            public const nint m_pMaterial = 0x10; // CStrongHandle<InfoForResourceTypeIMaterial2>
        }
        // Parent: None
        // Fields count: 10
        public static class InfoOverlayData_t {
            public const nint m_transform = 0x0; // matrix3x4_t
            public const nint m_flWidth = 0x30; // float32
            public const nint m_flHeight = 0x34; // float32
            public const nint m_flDepth = 0x38; // float32
            public const nint m_vUVStart = 0x3C; // Vector2D
            public const nint m_vUVEnd = 0x44; // Vector2D
            public const nint m_pMaterial = 0x50; // CStrongHandle<InfoForResourceTypeIMaterial2>
            public const nint m_nRenderOrder = 0x58; // int32
            public const nint m_vTintColor = 0x5C; // Vector4D
            public const nint m_nSequenceOverride = 0x6C; // int32
        }
        // Parent: None
        // Fields count: 5
        public static class BakedLightingInfo_t {
            public const nint m_nLightmapVersionNumber = 0x0; // uint32
            public const nint m_nLightmapGameVersionNumber = 0x4; // uint32
            public const nint m_vLightmapUvScale = 0x8; // Vector2D
            public const nint m_bHasLightmaps = 0x10; // bool
            public const nint m_lightMaps = 0x18; // CUtlVector<CStrongHandle<InfoForResourceTypeCTextureBase>>
        }
        // Parent: None
        // Fields count: 4
        public static class WorldNodeOnDiskBufferData_t {
            public const nint m_nElementCount = 0x0; // int32
            public const nint m_nElementSizeInBytes = 0x4; // int32
            public const nint m_inputLayoutFields = 0x8; // CUtlVector<RenderInputLayoutField_t>
            public const nint m_pData = 0x20; // CUtlVector<uint8>
        }
        // Parent: None
        // Fields count: 9
        public static class AggregateMeshInfo_t {
            public const nint m_nVisClusterMemberOffset = 0x0; // uint32
            public const nint m_nVisClusterMemberCount = 0x4; // uint8
            public const nint m_bHasTransform = 0x5; // bool
            public const nint m_nDrawCallIndex = 0x6; // int16
            public const nint m_nLODSetupIndex = 0x8; // int16
            public const nint m_nLODGroupMask = 0xA; // uint8
            public const nint m_vTintColor = 0xB; // Color
            public const nint m_objectFlags = 0x10; // ObjectTypeFlags_t
            public const nint m_nLightProbeVolumePrecomputedHandshake = 0x14; // int32
        }
        // Parent: None
        // Fields count: 3
        public static class AggregateLODSetup_t {
            public const nint m_vLODOrigin = 0x0; // 
            public const nint m_fMaxObjectScale = 0xC; // float32
            public const nint m_fSwitchDistances = 0x10; // CUtlVectorFixedGrowable<float32>
        }
        // Parent: None
        // Fields count: 8
        public static class AggregateSceneObject_t {
            public const nint m_allFlags = 0x0; // ObjectTypeFlags_t
            public const nint m_anyFlags = 0x4; // ObjectTypeFlags_t
            public const nint m_nLayer = 0x8; // int16
            public const nint m_aggregateMeshes = 0x10; // CUtlVector<AggregateMeshInfo_t>
            public const nint m_lodSetups = 0x28; // CUtlVector<AggregateLODSetup_t>
            public const nint m_visClusterMembership = 0x40; // CUtlVector<uint16>
            public const nint m_fragmentTransforms = 0x58; // CUtlVector<matrix3x4_t>
            public const nint m_renderableModel = 0x70; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: None
        // Fields count: 3
        public static class ClutterTile_t {
            public const nint m_nFirstInstance = 0x0; // uint32
            public const nint m_nLastInstance = 0x4; // uint32
            public const nint m_BoundsWs = 0x8; // AABB_t
        }
        // Parent: None
        // Fields count: 8
        public static class ClutterSceneObject_t {
            public const nint m_Bounds = 0x0; // AABB_t
            public const nint m_flags = 0x18; // ObjectTypeFlags_t
            public const nint m_nLayer = 0x1C; // int16
            public const nint m_instancePositions = 0x20; // CUtlVector<Vector>
            public const nint m_instanceScales = 0x50; // CUtlVector<float32>
            public const nint m_instanceTintSrgb = 0x68; // CUtlVector<Color>
            public const nint m_tiles = 0x80; // CUtlVector<ClutterTile_t>
            public const nint m_renderableModel = 0x98; // CStrongHandle<InfoForResourceTypeCModel>
        }
        // Parent: None
        // Fields count: 13
        public static class WorldNode_t {
            public const nint m_sceneObjects = 0x0; // CUtlVector<SceneObject_t>
            public const nint m_infoOverlays = 0x18; // CUtlVector<InfoOverlayData_t>
            public const nint m_visClusterMembership = 0x30; // CUtlVector<uint16>
            public const nint m_aggregateSceneObjects = 0x48; // CUtlVector<AggregateSceneObject_t>
            public const nint m_clutterSceneObjects = 0x60; // CUtlVector<ClutterSceneObject_t>
            public const nint m_extraVertexStreamOverrides = 0x78; // CUtlVector<ExtraVertexStreamOverride_t>
            public const nint m_materialOverrides = 0x90; // CUtlVector<MaterialOverride_t>
            public const nint m_extraVertexStreams = 0xA8; // CUtlVector<WorldNodeOnDiskBufferData_t>
            public const nint m_layerNames = 0xC0; // CUtlVector<CUtlString>
            public const nint m_sceneObjectLayerIndices = 0xD8; // CUtlVector<uint8>
            public const nint m_overlayLayerIndices = 0xF0; // CUtlVector<uint8>
            public const nint m_grassFileName = 0x108; // CUtlString
            public const nint m_nodeLightingInfo = 0x110; // BakedLightingInfo_t
        }
        // Parent: None
        // Fields count: 5
        public static class WorldBuilderParams_t {
            public const nint m_flMinDrawVolumeSize = 0x0; // float32
            public const nint m_bBuildBakedLighting = 0x4; // bool
            public const nint m_vLightmapUvScale = 0x8; // Vector2D
            public const nint m_nCompileTimestamp = 0x10; // uint64
            public const nint m_nCompileFingerprint = 0x18; // uint64
        }
        // Parent: None
        // Fields count: 7
        public static class NodeData_t {
            public const nint m_nParent = 0x0; // int32
            public const nint m_vOrigin = 0x4; // 
            public const nint m_vMinBounds = 0x10; // 
            public const nint m_vMaxBounds = 0x1C; // 
            public const nint m_flMinimumDistance = 0x28; // float32
            public const nint m_ChildNodeIndices = 0x30; // CUtlVector<int32>
            public const nint m_worldNodePrefix = 0x48; // CUtlString
        }
        // Parent: None
        // Fields count: 4
        public static class World_t {
            public const nint m_builderParams = 0x0; // WorldBuilderParams_t
            public const nint m_worldNodes = 0x20; // CUtlVector<NodeData_t>
            public const nint m_worldLightingInfo = 0x38; // BakedLightingInfo_t
            public const nint m_entityLumps = 0x68; // CUtlVector<CStrongHandleCopyable<InfoForResourceTypeCEntityLump>>
        }
        // Parent: None
        // Fields count: 2
        public static class VoxelVisBlockOffset_t {
            public const nint m_nOffset = 0x0; // uint32
            public const nint m_nElementCount = 0x4; // uint32
        }
        // Parent: None
        // Fields count: 13
        public static class CVoxelVisibility {
            public const nint m_nBaseClusterCount = 0x40; // uint32
            public const nint m_nPVSBytesPerCluster = 0x44; // uint32
            public const nint m_vMinBounds = 0x48; // 
            public const nint m_vMaxBounds = 0x54; // 
            public const nint m_flGridSize = 0x60; // float32
            public const nint m_nSkyVisibilityCluster = 0x64; // uint32
            public const nint m_nSunVisibilityCluster = 0x68; // uint32
            public const nint m_NodeBlock = 0x6C; // VoxelVisBlockOffset_t
            public const nint m_RegionBlock = 0x74; // VoxelVisBlockOffset_t
            public const nint m_EnclosedClusterListBlock = 0x7C; // VoxelVisBlockOffset_t
            public const nint m_EnclosedClustersBlock = 0x84; // VoxelVisBlockOffset_t
            public const nint m_MasksBlock = 0x8C; // VoxelVisBlockOffset_t
            public const nint m_nVisBlocks = 0x94; // VoxelVisBlockOffset_t
        }
        // Parent: None
        // Fields count: 0
        public static class VMapResourceData_t {
        }
        // Parent: None
        // Fields count: 0
        public static class InfoForResourceTypeVMapResourceData_t {
        }
        // Parent: None
        // Fields count: 0
        public static class CEntityComponent {
        }
        // Parent: None
        // Fields count: 11
        public static class CEntityIdentity {
            public const nint m_nameStringableIndex = 0x14; // int32
            public const nint m_name = 0x18; // CUtlSymbolLarge
            public const nint m_designerName = 0x20; // CUtlSymbolLarge
            public const nint m_flags = 0x30; // uint32
            public const nint m_worldGroupId = 0x38; // WorldGroupId_t
            public const nint m_fDataObjectTypes = 0x3C; // uint32
            public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
            public const nint m_pPrev = 0x58; // CEntityIdentity*
            public const nint m_pNext = 0x60; // CEntityIdentity*
            public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
            public const nint m_pNextByClass = 0x70; // CEntityIdentity*
        }
        // Parent: None
        // Fields count: 4
        public static class CEntityInstance {
            public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
            public const nint m_pEntity = 0x10; // CEntityIdentity*
            public const nint m_CScriptComponent = 0x28; // CScriptComponent*
            public const nint m_bVisibleinPVS = 0x30; // bool
        }
        // Parent: CEntityComponent
        // Fields count: 1
        public static class CScriptComponent {
            public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
        }
    }
}
